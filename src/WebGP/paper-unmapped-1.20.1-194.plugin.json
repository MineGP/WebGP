{
  "version": {
    "game": "1.20.1",
    "build": 194
  },
  "spigot_id": "faff587dcbe915bc565bf01f2d54c6af86039414",
  "classes": {
    "com/mojang/math/GivensParameters": {
      "fields": {
        "a": "sinHalf",
        "b": "cosHalf"
      },
      "methods": {
        "a(FF)Lcom/mojang/math/GivensParameters;": "fromUnnormalized",
        "a(F)Lcom/mojang/math/GivensParameters;": "fromPositiveAngle",
        "a()Lcom/mojang/math/GivensParameters;": "inverse",
        "a(Lorg/joml/Quaternionf;)Lorg/joml/Quaternionf;": "aroundX",
        "b(Lorg/joml/Quaternionf;)Lorg/joml/Quaternionf;": "aroundY",
        "c(Lorg/joml/Quaternionf;)Lorg/joml/Quaternionf;": "aroundZ",
        "b()F": "cos",
        "c()F": "sin",
        "a(Lorg/joml/Matrix3f;)Lorg/joml/Matrix3f;": "aroundX",
        "b(Lorg/joml/Matrix3f;)Lorg/joml/Matrix3f;": "aroundY",
        "c(Lorg/joml/Matrix3f;)Lorg/joml/Matrix3f;": "aroundZ",
        "d()F": "sinHalf",
        "e()F": "cosHalf"
      }
    },
    "com/mojang/math/MatrixUtil": {
      "fields": {
        "a": "G",
        "b": "PI_4"
      },
      "methods": {
        "a(Lorg/joml/Matrix4f;F)Lorg/joml/Matrix4f;": "mulComponentWise",
        "a(FFF)Lcom/mojang/math/GivensParameters;": "approxGivensQuat",
        "a(FF)Lcom/mojang/math/GivensParameters;": "qrGivensQuat",
        "a(Lorg/joml/Matrix3f;Lorg/joml/Matrix3f;)V": "similarityTransform",
        "a(Lorg/joml/Matrix3f;Lorg/joml/Matrix3f;Lorg/joml/Quaternionf;Lorg/joml/Quaternionf;)V": "stepJacobi",
        "a(Lorg/joml/Matrix3f;I)Lorg/joml/Quaternionf;": "eigenvalueJacobi",
        "a(Lorg/joml/Matrix3f;)Lorg/apache/commons/lang3/tuple/Triple;": "svdDecompose"
      }
    },
    "com/mojang/math/PointGroupO": {
      "fields": {
        "a": "IDENTITY",
        "b": "ROT_180_FACE_XY",
        "c": "ROT_180_FACE_XZ",
        "d": "ROT_180_FACE_YZ",
        "e": "ROT_120_NNN",
        "f": "ROT_120_NNP",
        "g": "ROT_120_NPN",
        "h": "ROT_120_NPP",
        "i": "ROT_120_PNN",
        "j": "ROT_120_PNP",
        "k": "ROT_120_PPN",
        "l": "ROT_120_PPP",
        "m": "ROT_180_EDGE_XY_NEG",
        "n": "ROT_180_EDGE_XY_POS",
        "o": "ROT_180_EDGE_XZ_NEG",
        "p": "ROT_180_EDGE_XZ_POS",
        "q": "ROT_180_EDGE_YZ_NEG",
        "r": "ROT_180_EDGE_YZ_POS",
        "s": "ROT_90_X_NEG",
        "t": "ROT_90_X_POS",
        "u": "ROT_90_Y_NEG",
        "v": "ROT_90_Y_POS",
        "w": "ROT_90_Z_NEG",
        "x": "ROT_90_Z_POS",
        "y": "INVERSION",
        "z": "INVERT_X",
        "A": "INVERT_Y",
        "B": "INVERT_Z",
        "C": "ROT_60_REF_NNN",
        "D": "ROT_60_REF_NNP",
        "E": "ROT_60_REF_NPN",
        "F": "ROT_60_REF_NPP",
        "G": "ROT_60_REF_PNN",
        "H": "ROT_60_REF_PNP",
        "I": "ROT_60_REF_PPN",
        "J": "ROT_60_REF_PPP",
        "K": "SWAP_XY",
        "L": "SWAP_YZ",
        "M": "SWAP_XZ",
        "N": "SWAP_NEG_XY",
        "O": "SWAP_NEG_YZ",
        "P": "SWAP_NEG_XZ",
        "Q": "ROT_90_REF_X_NEG",
        "R": "ROT_90_REF_X_POS",
        "S": "ROT_90_REF_Y_NEG",
        "T": "ROT_90_REF_Y_POS",
        "U": "ROT_90_REF_Z_NEG",
        "V": "ROT_90_REF_Z_POS",
        "X": "transformation",
        "Y": "name",
        "Z": "rotatedDirections",
        "aa": "invertX",
        "ab": "invertY",
        "ac": "invertZ",
        "ad": "permutation",
        "ae": "cayleyTable",
        "af": "inverseTable",
        "ag": "$VALUES"
      },
      "methods": {
        "d()Lit/unimi/dsi/fastutil/booleans/BooleanList;": "packInversions",
        "a(Lcom/mojang/math/OctahedralGroup;)Lcom/mojang/math/OctahedralGroup;": "compose",
        "a()Lcom/mojang/math/OctahedralGroup;": "inverse",
        "b()Lorg/joml/Matrix3f;": "transformation",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "rotate",
        "a(Lnet/minecraft/core/Direction$Axis;)Z": "inverts",
        "a(Lnet/minecraft/core/FrontAndTop;)Lnet/minecraft/core/FrontAndTop;": "rotate",
        "a(I)[Lcom/mojang/math/OctahedralGroup;": "lambda$static$5",
        "b(Lcom/mojang/math/OctahedralGroup;)Lcom/mojang/math/OctahedralGroup;": "lambda$static$4",
        "a(Lcom/mojang/math/OctahedralGroup;Lcom/mojang/math/OctahedralGroup;)Z": "lambda$static$3",
        "a([[Lcom/mojang/math/OctahedralGroup;)V": "lambda$static$2",
        "c(Lcom/mojang/math/OctahedralGroup;)Lcom/mojang/math/OctahedralGroup;": "lambda$static$1",
        "d(Lcom/mojang/math/OctahedralGroup;)Lcom/mojang/datafixers/util/Pair;": "lambda$static$0",
        "e()[Lcom/mojang/math/OctahedralGroup;": "$values"
      }
    },
    "com/mojang/math/PointGroupS": {
      "fields": {
        "a": "P123",
        "b": "P213",
        "c": "P132",
        "d": "P231",
        "e": "P312",
        "f": "P321",
        "g": "permutation",
        "h": "transformation",
        "i": "ORDER",
        "j": "cayleyTable",
        "k": "$VALUES"
      },
      "methods": {
        "a(Lcom/mojang/math/SymmetricGroup3;)Lcom/mojang/math/SymmetricGroup3;": "compose",
        "a(I)I": "permutation",
        "a()Lorg/joml/Matrix3f;": "transformation",
        "a([[Lcom/mojang/math/SymmetricGroup3;)V": "lambda$static$1",
        "a([ILcom/mojang/math/SymmetricGroup3;)Z": "lambda$static$0",
        "b()[Lcom/mojang/math/SymmetricGroup3;": "$values"
      }
    },
    "com/mojang/math/Transformation": {
      "fields": {
        "c": "matrix",
        "a": "CODEC",
        "b": "EXTENDED_CODEC",
        "d": "decomposed",
        "e": "translation",
        "f": "leftRotation",
        "g": "scale",
        "h": "rightRotation",
        "i": "IDENTITY"
      },
      "methods": {
        "a()Lcom/mojang/math/Transformation;": "identity",
        "a(Lcom/mojang/math/Transformation;)Lcom/mojang/math/Transformation;": "compose",
        "b()Lcom/mojang/math/Transformation;": "inverse",
        "h()V": "ensureDecomposed",
        "a(Lorg/joml/Vector3f;Lorg/joml/Quaternionf;Lorg/joml/Vector3f;Lorg/joml/Quaternionf;)Lorg/joml/Matrix4f;": "compose",
        "c()Lorg/joml/Matrix4f;": "getMatrix",
        "d()Lorg/joml/Vector3f;": "getTranslation",
        "e()Lorg/joml/Quaternionf;": "getLeftRotation",
        "f()Lorg/joml/Vector3f;": "getScale",
        "g()Lorg/joml/Quaternionf;": "getRightRotation",
        "a(Lcom/mojang/math/Transformation;F)Lcom/mojang/math/Transformation;": "slerp",
        "i()Lcom/mojang/math/Transformation;": "lambda$static$8",
        "a(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/math/Transformation;": "lambda$static$7",
        "b(Lcom/mojang/math/Transformation;)Lcom/mojang/math/Transformation;": "lambda$static$6",
        "c(Lcom/mojang/math/Transformation;)Lcom/mojang/math/Transformation;": "lambda$static$5",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "d(Lcom/mojang/math/Transformation;)Lorg/joml/Quaternionf;": "lambda$static$3",
        "e(Lcom/mojang/math/Transformation;)Lorg/joml/Vector3f;": "lambda$static$2",
        "f(Lcom/mojang/math/Transformation;)Lorg/joml/Quaternionf;": "lambda$static$1",
        "g(Lcom/mojang/math/Transformation;)Lorg/joml/Vector3f;": "lambda$static$0"
      }
    },
    "net/minecraft/BlockUtil": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction$Axis;ILnet/minecraft/core/Direction$Axis;ILjava/util/function/Predicate;)Lnet/minecraft/BlockUtil$FoundRectangle;": "getLargestRectangleAround",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/Direction;I)I": "getLimit",
        "a([I)Lcom/mojang/datafixers/util/Pair;": "getMaxRectangleLocation",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/Block;)Ljava/util/Optional;": "getTopConnectedBlock"
      }
    },
    "net/minecraft/BlockUtil$Rectangle": {
      "fields": {
        "a": "minCorner",
        "b": "axis1Size",
        "c": "axis2Size"
      }
    },
    "net/minecraft/BlockUtil$IntBounds": {
      "fields": {
        "a": "min",
        "b": "max"
      }
    },
    "net/minecraft/CharPredicate": {
      "methods": {
        "a(Lnet/minecraft/CharPredicate;C)Z": "lambda$or$2",
        "a(C)Z": "lambda$negate$1",
        "b(Lnet/minecraft/CharPredicate;C)Z": "lambda$and$0"
      }
    },
    "net/minecraft/EnumChatFormat": {
      "fields": {
        "a": "BLACK",
        "b": "DARK_BLUE",
        "c": "DARK_GREEN",
        "d": "DARK_AQUA",
        "e": "DARK_RED",
        "f": "DARK_PURPLE",
        "g": "GOLD",
        "h": "GRAY",
        "i": "DARK_GRAY",
        "j": "BLUE",
        "k": "GREEN",
        "l": "AQUA",
        "m": "RED",
        "n": "LIGHT_PURPLE",
        "o": "YELLOW",
        "p": "WHITE",
        "q": "OBFUSCATED",
        "r": "BOLD",
        "s": "STRIKETHROUGH",
        "t": "UNDERLINE",
        "u": "ITALIC",
        "v": "RESET",
        "w": "CODEC",
        "x": "PREFIX_CODE",
        "y": "FORMATTING_BY_NAME",
        "z": "STRIP_FORMATTING_PATTERN",
        "A": "name",
        "B": "code",
        "C": "isFormat",
        "D": "toString",
        "E": "id",
        "F": "color",
        "G": "$VALUES"
      },
      "methods": {
        "c(Ljava/lang/String;)Ljava/lang/String;": "cleanName",
        "a()C": "getChar",
        "b()I": "getId",
        "d()Z": "isFormat",
        "e()Z": "isColor",
        "f()Ljava/lang/Integer;": "getColor",
        "g()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Ljava/lang/String;": "stripFormatting",
        "b(Ljava/lang/String;)Lnet/minecraft/ChatFormatting;": "getByName",
        "a(I)Lnet/minecraft/ChatFormatting;": "getById",
        "a(C)Lnet/minecraft/ChatFormatting;": "getByCode",
        "a(ZZ)Ljava/util/Collection;": "getNames",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/ChatFormatting;)Lnet/minecraft/ChatFormatting;": "lambda$static$1",
        "b(Lnet/minecraft/ChatFormatting;)Ljava/lang/String;": "lambda$static$0",
        "h()[Lnet/minecraft/ChatFormatting;": "$values"
      }
    },
    "net/minecraft/CrashReport": {
      "fields": {
        "a": "LOGGER",
        "b": "DATE_TIME_FORMATTER",
        "c": "title",
        "d": "exception",
        "e": "details",
        "f": "saveFile",
        "g": "trackingStackTrace",
        "h": "uncategorizedStackTrace",
        "i": "systemReport"
      },
      "methods": {
        "a()Ljava/lang/String;": "getTitle",
        "b()Ljava/lang/Throwable;": "getException",
        "c()Ljava/lang/String;": "getDetails",
        "a(Ljava/lang/StringBuilder;)V": "getDetails",
        "d()Ljava/lang/String;": "getExceptionMessage",
        "e()Ljava/lang/String;": "getFriendlyReport",
        "f()Ljava/io/File;": "getSaveFile",
        "a(Ljava/io/File;)Z": "saveToFile",
        "g()Lnet/minecraft/SystemReport;": "getSystemReport",
        "a(Ljava/lang/String;)Lnet/minecraft/CrashReportCategory;": "addCategory",
        "a(Ljava/lang/String;I)Lnet/minecraft/CrashReportCategory;": "addCategory",
        "i()Ljava/lang/String;": "getErrorComment",
        "a(Ljava/lang/Throwable;Ljava/lang/String;)Lnet/minecraft/CrashReport;": "forThrowable",
        "h()V": "preload"
      }
    },
    "net/minecraft/CrashReportSystemDetails": {
      "fields": {
        "a": "title",
        "b": "entries",
        "c": "stackTrace"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;DDD)Ljava/lang/String;": "formatLocation",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/core/BlockPos;)Ljava/lang/String;": "formatLocation",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;III)Ljava/lang/String;": "formatLocation",
        "a(Ljava/lang/String;Lnet/minecraft/CrashReportDetail;)Lnet/minecraft/CrashReportCategory;": "setDetail",
        "a(Ljava/lang/String;Ljava/lang/Object;)Lnet/minecraft/CrashReportCategory;": "setDetail",
        "a(Ljava/lang/String;Ljava/lang/Throwable;)V": "setDetailError",
        "a(I)I": "fillInStackTrace",
        "a(Ljava/lang/StackTraceElement;Ljava/lang/StackTraceElement;)Z": "validateStackTrace",
        "b(I)V": "trimStacktrace",
        "a(Ljava/lang/StringBuilder;)V": "getDetails",
        "a()[Ljava/lang/StackTraceElement;": "getStacktrace",
        "a(Lnet/minecraft/CrashReportCategory;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "populateBlockDetails",
        "b(Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/core/BlockPos;)Ljava/lang/String;": "lambda$populateBlockDetails$0"
      }
    },
    "net/minecraft/CrashReportSystemDetails$CrashReportDetail": {
      "fields": {
        "a": "key",
        "b": "value"
      },
      "methods": {
        "a()Ljava/lang/String;": "getKey",
        "b()Ljava/lang/String;": "getValue"
      }
    },
    "net/minecraft/CrashReportCallable": {},
    "net/minecraft/DefaultUncaughtExceptionHandler": {
      "fields": {
        "a": "logger"
      }
    },
    "net/minecraft/ThreadNamedUncaughtExceptionHandler": {
      "fields": {
        "a": "logger"
      }
    },
    "net/minecraft/MinecraftVersion": {
      "fields": {
        "b": "LOGGER",
        "a": "BUILT_IN",
        "c": "id",
        "d": "name",
        "e": "stable",
        "f": "worldVersion",
        "g": "protocolVersion",
        "h": "resourcePackVersion",
        "i": "dataPackVersion",
        "j": "buildTime"
      },
      "methods": {
        "a()Lnet/minecraft/WorldVersion;": "tryDetectVersion",
        "b()Ljava/lang/String;": "getId",
        "c()Ljava/lang/String;": "getName",
        "d()Lnet/minecraft/world/level/storage/DataVersion;": "getDataVersion",
        "e()I": "getProtocolVersion",
        "a(Lnet/minecraft/server/packs/PackType;)I": "getPackVersion",
        "f()Ljava/util/Date;": "getBuildTime",
        "g()Z": "isStable"
      }
    },
    "net/minecraft/FileUtils": {
      "fields": {
        "a": "COPY_COUNTER_PATTERN",
        "b": "MAX_FILE_NAME",
        "c": "RESERVED_WINDOWS_FILENAMES",
        "d": "STRICT_PATH_SEGMENT_CHECK"
      },
      "methods": {
        "a(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "findAvailableName",
        "a(Ljava/nio/file/Path;)Z": "isPathNormalized",
        "b(Ljava/nio/file/Path;)Z": "isPathPortable",
        "b(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path;": "createPathToResource",
        "a(Ljava/lang/String;)Ljava/lang/String;": "getFullResourcePath",
        "b(Ljava/lang/String;)Ljava/lang/String;": "normalizeResourcePath",
        "c(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "decomposePath",
        "a(Ljava/nio/file/Path;Ljava/util/List;)Ljava/nio/file/Path;": "resolvePath",
        "d(Ljava/lang/String;)Z": "isValidStrictPathSegment",
        "a([Ljava/lang/String;)V": "validatePath",
        "c(Ljava/nio/file/Path;)V": "createDirectoriesSafe",
        "a(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "lambda$decomposePath$3",
        "b(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "lambda$decomposePath$2",
        "e(Ljava/lang/String;)Ljava/lang/String;": "lambda$decomposePath$1",
        "f(Ljava/lang/String;)Ljava/lang/String;": "lambda$decomposePath$0"
      }
    },
    "net/minecraft/Optionull": {
      "methods": {
        "a(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;": "map",
        "a(Ljava/lang/Object;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;": "mapOrDefault",
        "a(Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljava/lang/Object;": "mapOrElse",
        "a(Ljava/util/Collection;)Ljava/lang/Object;": "first",
        "a(Ljava/util/Collection;Ljava/lang/Object;)Ljava/lang/Object;": "firstOrDefault",
        "a(Ljava/util/Collection;Ljava/util/function/Supplier;)Ljava/lang/Object;": "firstOrElse",
        "a([Ljava/lang/Object;)Z": "isNullOrEmpty",
        "a([Z)Z": "isNullOrEmpty",
        "a([B)Z": "isNullOrEmpty",
        "a([C)Z": "isNullOrEmpty",
        "a([S)Z": "isNullOrEmpty",
        "a([I)Z": "isNullOrEmpty",
        "a([J)Z": "isNullOrEmpty",
        "a([F)Z": "isNullOrEmpty",
        "a([D)Z": "isNullOrEmpty"
      }
    },
    "net/minecraft/ReportedException": {
      "fields": {
        "a": "report"
      },
      "methods": {
        "a()Lnet/minecraft/CrashReport;": "getReport"
      }
    },
    "net/minecraft/ResourceKeyInvalidException": {},
    "net/minecraft/SharedConstants": {
      "fields": {
        "a": "SNAPSHOT",
        "b": "WORLD_VERSION",
        "c": "SERIES",
        "d": "VERSION_STRING",
        "e": "RELEASE_NETWORK_PROTOCOL_VERSION",
        "f": "SNAPSHOT_NETWORK_PROTOCOL_VERSION",
        "g": "SNBT_NAG_VERSION",
        "bh": "SNAPSHOT_PROTOCOL_BIT",
        "h": "THROW_ON_TASK_FAILURE",
        "i": "RESOURCE_PACK_FORMAT",
        "j": "DATA_PACK_FORMAT",
        "k": "LANGUAGE_FORMAT",
        "l": "REPORT_FORMAT_VERSION",
        "m": "DATA_VERSION_TAG",
        "n": "USE_NEW_RENDERSYSTEM",
        "o": "MULTITHREADED_RENDERING",
        "p": "FIX_TNT_DUPE",
        "q": "FIX_SAND_DUPE",
        "r": "USE_DEBUG_FEATURES",
        "s": "DEBUG_OPEN_INCOMPATIBLE_WORLDS",
        "t": "DEBUG_ALLOW_LOW_SIM_DISTANCE",
        "u": "DEBUG_HOTKEYS",
        "v": "DEBUG_UI_NARRATION",
        "w": "DEBUG_RENDER",
        "x": "DEBUG_PATHFINDING",
        "y": "DEBUG_WATER",
        "z": "DEBUG_HEIGHTMAP",
        "A": "DEBUG_COLLISION",
        "B": "DEBUG_SUPPORT_BLOCKS",
        "C": "DEBUG_SHAPES",
        "D": "DEBUG_NEIGHBORSUPDATE",
        "E": "DEBUG_STRUCTURES",
        "F": "DEBUG_LIGHT",
        "G": "DEBUG_SKY_LIGHT_SECTIONS",
        "H": "DEBUG_WORLDGENATTEMPT",
        "I": "DEBUG_SOLID_FACE",
        "J": "DEBUG_CHUNKS",
        "K": "DEBUG_GAME_EVENT_LISTENERS",
        "L": "DEBUG_DUMP_TEXTURE_ATLAS",
        "M": "DEBUG_DUMP_INTERPOLATED_TEXTURE_FRAMES",
        "N": "DEBUG_STRUCTURE_EDIT_MODE",
        "O": "DEBUG_SAVE_STRUCTURES_AS_SNBT",
        "P": "DEBUG_SYNCHRONOUS_GL_LOGS",
        "Q": "DEBUG_VERBOSE_SERVER_EVENTS",
        "R": "DEBUG_NAMED_RUNNABLES",
        "S": "DEBUG_GOAL_SELECTOR",
        "T": "DEBUG_VILLAGE_SECTIONS",
        "U": "DEBUG_BRAIN",
        "V": "DEBUG_BEES",
        "W": "DEBUG_RAIDS",
        "X": "DEBUG_BLOCK_BREAK",
        "Y": "DEBUG_RESOURCE_LOAD_TIMES",
        "Z": "DEBUG_MONITOR_TICK_TIMES",
        "aa": "DEBUG_KEEP_JIGSAW_BLOCKS_DURING_STRUCTURE_GEN",
        "ab": "DEBUG_DONT_SAVE_WORLD",
        "ac": "DEBUG_LARGE_DRIPSTONE",
        "ad": "DEBUG_PACKET_SERIALIZATION",
        "ae": "DEBUG_CARVERS",
        "af": "DEBUG_ORE_VEINS",
        "ag": "DEBUG_SCULK_CATALYST",
        "ah": "DEBUG_BYPASS_REALMS_VERSION_CHECK",
        "ai": "DEBUG_SOCIAL_INTERACTIONS",
        "aj": "DEBUG_VALIDATE_RESOURCE_PATH_CASE",
        "ak": "DEBUG_IGNORE_LOCAL_MOB_CAP",
        "al": "DEBUG_SMALL_SPAWN",
        "am": "DEBUG_DISABLE_LIQUID_SPREADING",
        "an": "DEBUG_AQUIFERS",
        "ao": "DEBUG_JFR_PROFILING_ENABLE_LEVEL_LOADING",
        "ap": "debugGenerateSquareTerrainWithoutNoise",
        "aq": "debugGenerateStripedTerrainWithoutNoise",
        "ar": "DEBUG_ONLY_GENERATE_HALF_THE_WORLD",
        "as": "DEBUG_DISABLE_FLUID_GENERATION",
        "at": "DEBUG_DISABLE_AQUIFERS",
        "au": "DEBUG_DISABLE_SURFACE",
        "av": "DEBUG_DISABLE_CARVERS",
        "aw": "DEBUG_DISABLE_STRUCTURES",
        "ax": "DEBUG_DISABLE_FEATURES",
        "ay": "DEBUG_DISABLE_ORE_VEINS",
        "az": "DEBUG_DISABLE_BLENDING",
        "aA": "DEBUG_DISABLE_BELOW_ZERO_RETROGENERATION",
        "aB": "DEFAULT_MINECRAFT_PORT",
        "aC": "INGAME_DEBUG_OUTPUT",
        "aD": "DEBUG_SUBTITLES",
        "aE": "FAKE_MS_LATENCY",
        "aF": "FAKE_MS_JITTER",
        "aG": "NETTY_LEAK_DETECTION",
        "aH": "COMMAND_STACK_TRACES",
        "aI": "DEBUG_WORLD_RECREATE",
        "aJ": "DEBUG_SHOW_SERVER_DEBUG_VALUES",
        "aK": "DEBUG_STORE_CHUNK_STACKTRACES",
        "aL": "DEBUG_FEATURE_COUNT",
        "aM": "DEBUG_RESOURCE_GENERATION_OVERRIDE",
        "aN": "DEBUG_FORCE_TELEMETRY",
        "aO": "DEBUG_DONT_SEND_TELEMETRY_TO_BACKEND",
        "aP": "MAXIMUM_TICK_TIME_NANOS",
        "aQ": "USE_WORKFLOWS_HOOKS",
        "aR": "CHECK_DATA_FIXER_SCHEMA",
        "aS": "IS_RUNNING_IN_IDE",
        "aT": "DATA_FIX_TYPES_TO_OPTIMIZE",
        "aU": "WORLD_RESOLUTION",
        "aV": "MAX_CHAT_LENGTH",
        "aW": "MAX_COMMAND_LENGTH",
        "aX": "MAX_CHAINED_NEIGHBOR_UPDATES",
        "aY": "MAX_RENDER_DISTANCE",
        "aZ": "ILLEGAL_FILE_CHARACTERS",
        "ba": "TICKS_PER_SECOND",
        "bb": "TICKS_PER_MINUTE",
        "bc": "TICKS_PER_GAME_DAY",
        "bd": "AVERAGE_GAME_TICKS_PER_RANDOM_TICK_PER_BLOCK",
        "be": "AVERAGE_RANDOM_TICKS_PER_BLOCK_PER_MINUTE",
        "bf": "AVERAGE_RANDOM_TICKS_PER_BLOCK_PER_GAME_DAY",
        "bg": "WORLD_ICON_SIZE",
        "bi": "CURRENT_VERSION"
      },
      "methods": {
        "a(C)Z": "isAllowedChatCharacter",
        "a(Ljava/lang/String;)Ljava/lang/String;": "filterText",
        "a(Ljava/lang/String;Z)Ljava/lang/String;": "filterText",
        "a(Lnet/minecraft/WorldVersion;)V": "setVersion",
        "a()V": "tryDetectVersion",
        "b()Lnet/minecraft/WorldVersion;": "getCurrentVersion",
        "c()I": "getProtocolVersion",
        "a(Lnet/minecraft/world/level/ChunkPos;)Z": "debugVoidTerrain",
        "d()V": "enableDataFixerOptimizations"
      }
    },
    "net/minecraft/SystemReport": {
      "fields": {
        "a": "BYTES_PER_MEBIBYTE",
        "b": "ONE_GIGA",
        "c": "LOGGER",
        "d": "OPERATING_SYSTEM",
        "e": "JAVA_VERSION",
        "f": "JAVA_VM_VERSION",
        "g": "entries"
      },
      "methods": {
        "a(Ljava/lang/String;Ljava/lang/String;)V": "setDetail",
        "a(Ljava/lang/String;Ljava/util/function/Supplier;)V": "setDetail",
        "a(Loshi/SystemInfo;)V": "putHardware",
        "a(Ljava/lang/String;Ljava/lang/Runnable;)V": "ignoreErrors",
        "a(Ljava/util/List;)V": "putPhysicalMemory",
        "a(Loshi/hardware/VirtualMemory;)V": "putVirtualMemory",
        "a(Loshi/hardware/GlobalMemory;)V": "putMemory",
        "b(Ljava/util/List;)V": "putGraphics",
        "a(Loshi/hardware/CentralProcessor;)V": "putProcessor",
        "a(Ljava/lang/StringBuilder;)V": "appendToCrashReportString",
        "a()Ljava/lang/String;": "toLineSeparatedString",
        "a(Ljava/util/Map$Entry;)Ljava/lang/String;": "lambda$toLineSeparatedString$21",
        "a(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V": "lambda$appendToCrashReportString$20",
        "b(Loshi/hardware/CentralProcessor;)Ljava/lang/String;": "lambda$putProcessor$19",
        "c(Loshi/hardware/CentralProcessor;)Ljava/lang/String;": "lambda$putProcessor$18",
        "d(Loshi/hardware/CentralProcessor;)Ljava/lang/String;": "lambda$putProcessor$17",
        "a(Loshi/hardware/CentralProcessor$ProcessorIdentifier;)Ljava/lang/String;": "lambda$putProcessor$16",
        "a(Loshi/hardware/GraphicsCard;)Ljava/lang/String;": "lambda$putGraphics$15",
        "b(Loshi/hardware/GlobalMemory;)V": "lambda$putMemory$14",
        "c(Loshi/hardware/GlobalMemory;)V": "lambda$putMemory$13",
        "b(Loshi/hardware/VirtualMemory;)Ljava/lang/String;": "lambda$putVirtualMemory$12",
        "c(Loshi/hardware/VirtualMemory;)Ljava/lang/String;": "lambda$putVirtualMemory$11",
        "d(Loshi/hardware/VirtualMemory;)Ljava/lang/String;": "lambda$putVirtualMemory$10",
        "e(Loshi/hardware/VirtualMemory;)Ljava/lang/String;": "lambda$putVirtualMemory$9",
        "a(Loshi/hardware/PhysicalMemory;)Ljava/lang/String;": "lambda$putPhysicalMemory$8",
        "b(Loshi/hardware/PhysicalMemory;)Ljava/lang/String;": "lambda$putPhysicalMemory$7",
        "a(Loshi/hardware/HardwareAbstractionLayer;)V": "lambda$putHardware$6",
        "b(Loshi/hardware/HardwareAbstractionLayer;)V": "lambda$putHardware$5",
        "c(Loshi/hardware/HardwareAbstractionLayer;)V": "lambda$putHardware$4",
        "b()Ljava/lang/String;": "lambda$new$3",
        "c()V": "lambda$new$2",
        "d()Ljava/lang/String;": "lambda$new$1",
        "e()Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/SystemUtils": {
      "fields": {
        "e": "LOGGER",
        "f": "DEFAULT_MAX_THREADS",
        "g": "MAX_THREADS_SYSTEM_PROPERTY",
        "h": "WORKER_COUNT",
        "i": "BACKGROUND_EXECUTOR",
        "j": "IO_POOL",
        "k": "FILENAME_DATE_TIME_FORMATTER",
        "a": "timeSource",
        "b": "TICKER",
        "c": "NIL_UUID",
        "d": "ZIP_FILE_SYSTEM_PROVIDER",
        "l": "thePauser"
      },
      "methods": {
        "a()Ljava/util/stream/Collector;": "toMap",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Object;)Ljava/lang/String;": "getPropertyName",
        "a(Ljava/lang/String;Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "makeDescriptionId",
        "b()J": "getMillis",
        "c()J": "getNanos",
        "d()J": "getEpochMillis",
        "e()Ljava/lang/String;": "getFilenameFormattedDateTime",
        "c(Ljava/lang/String;)Ljava/util/concurrent/ExecutorService;": "makeExecutor",
        "m()I": "getMaxThreads",
        "f()Ljava/util/concurrent/ExecutorService;": "backgroundExecutor",
        "g()Ljava/util/concurrent/ExecutorService;": "ioPool",
        "h()V": "shutdownExecutors",
        "a(Ljava/util/concurrent/ExecutorService;)V": "shutdownExecutor",
        "n()Ljava/util/concurrent/ExecutorService;": "makeIoExecutor",
        "a(Ljava/lang/Throwable;)V": "throwAsRuntime",
        "a(Ljava/lang/Thread;Ljava/lang/Throwable;)V": "onThreadException",
        "a(Lcom/mojang/datafixers/DSL$TypeReference;Ljava/lang/String;)Lcom/mojang/datafixers/types/Type;": "fetchChoiceType",
        "b(Lcom/mojang/datafixers/DSL$TypeReference;Ljava/lang/String;)Lcom/mojang/datafixers/types/Type;": "doFetchChoiceType",
        "a(Ljava/lang/String;Ljava/lang/Runnable;)Ljava/lang/Runnable;": "wrapThreadWithTaskName",
        "a(Ljava/lang/String;Ljava/util/function/Supplier;)Ljava/util/function/Supplier;": "wrapThreadWithTaskName",
        "i()Lnet/minecraft/Util$OS;": "getPlatform",
        "j()Ljava/util/stream/Stream;": "getVmArguments",
        "a(Ljava/util/List;)Ljava/lang/Object;": "lastOf",
        "a(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;": "findNextInIterable",
        "b(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;": "findPreviousInIterable",
        "a(Ljava/util/function/Supplier;)Ljava/lang/Object;": "make",
        "a(Ljava/lang/Object;Ljava/util/function/Consumer;)Ljava/lang/Object;": "make",
        "k()Lit/unimi/dsi/fastutil/Hash$Strategy;": "identityStrategy",
        "b(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "sequence",
        "c(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "sequenceFailFast",
        "d(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "sequenceFailFastAndCancel",
        "a(Ljava/util/List;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "fallibleSequence",
        "a(Ljava/util/Optional;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Ljava/util/Optional;": "ifElse",
        "a(Ljava/util/function/Supplier;Ljava/util/function/Supplier;)Ljava/util/function/Supplier;": "name",
        "a(Ljava/lang/Runnable;Ljava/util/function/Supplier;)Ljava/lang/Runnable;": "name",
        "a(Ljava/lang/String;)V": "logAndPauseIfInIde",
        "a(Ljava/lang/String;Ljava/lang/Throwable;)V": "logAndPauseIfInIde",
        "b(Ljava/lang/Throwable;)Ljava/lang/Throwable;": "pauseInIde",
        "a(Ljava/util/function/Consumer;)V": "setPause",
        "d(Ljava/lang/String;)V": "doPause",
        "c(Ljava/lang/Throwable;)Ljava/lang/String;": "describeError",
        "a([Ljava/lang/Object;Lnet/minecraft/util/RandomSource;)Ljava/lang/Object;": "getRandom",
        "a([ILnet/minecraft/util/RandomSource;)I": "getRandom",
        "a(Ljava/util/List;Lnet/minecraft/util/RandomSource;)Ljava/lang/Object;": "getRandom",
        "b(Ljava/util/List;Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandomSafe",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/util/function/BooleanSupplier;": "createRenamer",
        "a(Ljava/nio/file/Path;)Ljava/util/function/BooleanSupplier;": "createDeleter",
        "b(Ljava/nio/file/Path;)Ljava/util/function/BooleanSupplier;": "createFileDeletedCheck",
        "c(Ljava/nio/file/Path;)Ljava/util/function/BooleanSupplier;": "createFileCreatedCheck",
        "a([Ljava/util/function/BooleanSupplier;)Z": "executeInSequence",
        "a(ILjava/lang/String;[Ljava/util/function/BooleanSupplier;)Z": "runWithRetries",
        "a(Ljava/io/File;Ljava/io/File;Ljava/io/File;)V": "safeReplaceFile",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)V": "safeReplaceFile",
        "a(Ljava/io/File;Ljava/io/File;Ljava/io/File;Z)V": "safeReplaceOrMoveFile",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;Z)V": "safeReplaceOrMoveFile",
        "a(Ljava/lang/String;II)I": "offsetByCodepoints",
        "a(Ljava/lang/String;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;": "prefix",
        "a(Ljava/util/stream/IntStream;I)Lcom/mojang/serialization/DataResult;": "fixedSize",
        "a(Ljava/util/stream/LongStream;I)Lcom/mojang/serialization/DataResult;": "fixedSize",
        "a(Ljava/util/List;I)Lcom/mojang/serialization/DataResult;": "fixedSize",
        "l()V": "startTimerHackThread",
        "b(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)V": "copyBetweenDirs",
        "a(Ljava/lang/String;Lnet/minecraft/CharPredicate;)Ljava/lang/String;": "sanitizeName",
        "a(Ljava/util/function/Function;)Lnet/minecraft/util/SingleKeyCache;": "singleKeyCache",
        "b(Ljava/util/function/Function;)Ljava/util/function/Function;": "memoize",
        "a(Ljava/util/function/BiFunction;)Ljava/util/function/BiFunction;": "memoize",
        "a(Ljava/util/stream/Stream;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "toShuffledList",
        "a(Ljava/util/stream/IntStream;Lnet/minecraft/util/RandomSource;)Lit/unimi/dsi/fastutil/ints/IntArrayList;": "toShuffledList",
        "b([Ljava/lang/Object;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "shuffledCopy",
        "a(Lit/unimi/dsi/fastutil/objects/ObjectArrayList;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "shuffledCopy",
        "b(Lit/unimi/dsi/fastutil/objects/ObjectArrayList;Lnet/minecraft/util/RandomSource;)V": "shuffle",
        "c(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;": "blockUntilDone",
        "a(Ljava/util/function/Function;Ljava/util/function/Predicate;)Ljava/lang/Object;": "blockUntilDone",
        "e(Ljava/util/List;)Ljava/util/function/ToIntFunction;": "createIndexLookup",
        "a(Ljava/util/List;Ljava/util/function/IntFunction;)Ljava/util/function/ToIntFunction;": "createIndexLookup",
        "a(Lcom/mojang/serialization/DataResult;Ljava/util/function/Function;)Ljava/lang/Object;": "getOrThrow",
        "a(I)Z": "isWhitespace",
        "b(Ljava/lang/String;)Z": "isBlank",
        "a(Lnet/minecraft/CharPredicate;I)Ljava/lang/String;": "lambda$sanitizeName$17",
        "b(I)Ljava/lang/String;": "lambda$fixedSize$16",
        "c(I)Ljava/lang/String;": "lambda$fixedSize$15",
        "d(I)Ljava/lang/String;": "lambda$fixedSize$14",
        "a(Ljava/util/function/Consumer;Ljava/lang/String;Ljava/lang/String;)V": "lambda$prefix$13",
        "a(Ljava/util/List;Ljava/lang/Void;)Ljava/util/List;": "lambda$fallibleSequence$12",
        "a(Ljava/util/List;[Ljava/util/concurrent/CompletableFuture;Ljava/util/function/Consumer;Ljava/util/concurrent/CompletableFuture;)V": "lambda$fallibleSequence$11",
        "a(Ljava/util/function/Consumer;Ljava/util/List;ILjava/lang/Object;Ljava/lang/Throwable;)V": "lambda$fallibleSequence$10",
        "a(Ljava/util/concurrent/CompletableFuture;Ljava/util/List;Ljava/lang/Throwable;)V": "lambda$sequenceFailFastAndCancel$9",
        "b(Ljava/util/List;Ljava/lang/Void;)Ljava/util/List;": "lambda$sequence$8",
        "e(Ljava/lang/String;)Z": "lambda$getVmArguments$7",
        "b(Ljava/lang/String;Ljava/util/function/Supplier;)Ljava/lang/Object;": "lambda$wrapThreadWithTaskName$6",
        "b(Ljava/lang/String;Ljava/lang/Runnable;)V": "lambda$wrapThreadWithTaskName$5",
        "a(Ljava/lang/Runnable;)Ljava/lang/Thread;": "lambda$makeIoExecutor$4",
        "a(Ljava/lang/String;Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;": "lambda$makeExecutor$3",
        "f(Ljava/lang/String;)V": "lambda$static$2",
        "o()Ljava/lang/IllegalStateException;": "lambda$static$1",
        "a(Ljava/nio/file/spi/FileSystemProvider;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/SystemUtils$IdentityHashingStrategy": {
      "fields": {
        "a": "INSTANCE",
        "b": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/Util$IdentityStrategy;": "$values"
      }
    },
    "net/minecraft/SystemUtils$OS": {
      "fields": {
        "a": "LINUX",
        "b": "SOLARIS",
        "c": "WINDOWS",
        "d": "OSX",
        "e": "UNKNOWN",
        "f": "telemetryName",
        "g": "$VALUES"
      },
      "methods": {
        "a(Ljava/net/URL;)V": "openUrl",
        "a(Ljava/net/URI;)V": "openUri",
        "a(Ljava/io/File;)V": "openFile",
        "b(Ljava/net/URL;)[Ljava/lang/String;": "getOpenUrlArguments",
        "a(Ljava/lang/String;)V": "openUri",
        "a()Ljava/lang/String;": "telemetryName",
        "c(Ljava/net/URL;)Ljava/lang/Process;": "lambda$openUrl$0",
        "b()[Lnet/minecraft/Util$OS;": "$values"
      }
    },
    "net/minecraft/WorldVersion": {
      "methods": {
        "d()Lnet/minecraft/world/level/storage/DataVersion;": "getDataVersion",
        "b()Ljava/lang/String;": "getId",
        "c()Ljava/lang/String;": "getName",
        "e()I": "getProtocolVersion",
        "a(Lnet/minecraft/server/packs/PackType;)I": "getPackVersion",
        "f()Ljava/util/Date;": "getBuildTime",
        "g()Z": "isStable"
      }
    },
    "net/minecraft/advancements/Advancement": {
      "fields": {
        "a": "parent",
        "b": "display",
        "c": "rewards",
        "d": "id",
        "e": "criteria",
        "f": "requirements",
        "g": "children",
        "h": "chatComponent",
        "i": "sendsTelemetryEvent"
      },
      "methods": {
        "a()Lnet/minecraft/advancements/Advancement$Builder;": "deconstruct",
        "b()Lnet/minecraft/advancements/Advancement;": "getParent",
        "c()Lnet/minecraft/advancements/Advancement;": "getRoot",
        "a(Lnet/minecraft/advancements/Advancement;)Lnet/minecraft/advancements/Advancement;": "getRoot",
        "d()Lnet/minecraft/advancements/DisplayInfo;": "getDisplay",
        "e()Z": "sendsTelemetryEvent",
        "f()Lnet/minecraft/advancements/AdvancementRewards;": "getRewards",
        "g()Ljava/lang/Iterable;": "getChildren",
        "h()Ljava/util/Map;": "getCriteria",
        "i()I": "getMaxCriteraRequired",
        "b(Lnet/minecraft/advancements/Advancement;)V": "addChild",
        "j()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "k()[[Ljava/lang/String;": "getRequirements",
        "l()Lnet/minecraft/network/chat/Component;": "getChatComponent",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$new$0"
      }
    },
    "net/minecraft/advancements/Advancement$SerializedAdvancement": {
      "fields": {
        "a": "parentId",
        "b": "parent",
        "c": "display",
        "d": "rewards",
        "e": "criteria",
        "f": "requirements",
        "g": "requirementsStrategy",
        "h": "sendsTelemetryEvent"
      },
      "methods": {
        "a()Lnet/minecraft/advancements/Advancement$Builder;": "advancement",
        "b()Lnet/minecraft/advancements/Advancement$Builder;": "recipeAdvancement",
        "a(Lnet/minecraft/advancements/Advancement;)Lnet/minecraft/advancements/Advancement$Builder;": "parent",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/advancements/Advancement$Builder;": "parent",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Component;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/advancements/FrameType;ZZZ)Lnet/minecraft/advancements/Advancement$Builder;": "display",
        "a(Lnet/minecraft/world/level/ItemLike;Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Component;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/advancements/FrameType;ZZZ)Lnet/minecraft/advancements/Advancement$Builder;": "display",
        "a(Lnet/minecraft/advancements/DisplayInfo;)Lnet/minecraft/advancements/Advancement$Builder;": "display",
        "a(Lnet/minecraft/advancements/AdvancementRewards$Builder;)Lnet/minecraft/advancements/Advancement$Builder;": "rewards",
        "a(Lnet/minecraft/advancements/AdvancementRewards;)Lnet/minecraft/advancements/Advancement$Builder;": "rewards",
        "a(Ljava/lang/String;Lnet/minecraft/advancements/CriterionTriggerInstance;)Lnet/minecraft/advancements/Advancement$Builder;": "addCriterion",
        "a(Ljava/lang/String;Lnet/minecraft/advancements/Criterion;)Lnet/minecraft/advancements/Advancement$Builder;": "addCriterion",
        "a(Lnet/minecraft/advancements/RequirementsStrategy;)Lnet/minecraft/advancements/Advancement$Builder;": "requirements",
        "a([[Ljava/lang/String;)Lnet/minecraft/advancements/Advancement$Builder;": "requirements",
        "a(Ljava/util/function/Function;)Z": "canBuild",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/advancements/Advancement;": "build",
        "a(Ljava/util/function/Consumer;Ljava/lang/String;)Lnet/minecraft/advancements/Advancement;": "save",
        "c()Lcom/google/gson/JsonObject;": "serializeToJson",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/Advancement$Builder;": "fromJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/advancements/Advancement$Builder;": "fromNetwork",
        "d()Ljava/util/Map;": "getCriteria"
      }
    },
    "net/minecraft/advancements/Advancements": {
      "fields": {
        "a": "LOGGER",
        "b": "advancements",
        "c": "roots",
        "d": "tasks",
        "e": "listener"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/Advancement;)V": "remove",
        "a(Ljava/util/Set;)V": "remove",
        "a(Ljava/util/Map;)V": "add",
        "a()V": "clear",
        "b()Ljava/lang/Iterable;": "getRoots",
        "c()Ljava/util/Collection;": "getAllAdvancements",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/advancements/Advancement;": "get",
        "a(Lnet/minecraft/advancements/AdvancementList$Listener;)V": "setListener"
      }
    },
    "net/minecraft/advancements/AdvancementProgress": {
      "fields": {
        "a": "criteria",
        "b": "requirements"
      },
      "methods": {
        "a(Ljava/util/Map;[[Ljava/lang/String;)V": "update",
        "a()Z": "isDone",
        "b()Z": "hasProgress",
        "a(Ljava/lang/String;)Z": "grantProgress",
        "b(Ljava/lang/String;)Z": "revokeProgress",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/advancements/AdvancementProgress;": "fromNetwork",
        "c(Ljava/lang/String;)Lnet/minecraft/advancements/CriterionProgress;": "getCriterion",
        "c()F": "getPercent",
        "d()Ljava/lang/String;": "getProgressText",
        "h()I": "countCompletedRequirements",
        "e()Ljava/lang/Iterable;": "getRemainingCriteria",
        "f()Ljava/lang/Iterable;": "getCompletedCriteria",
        "g()Ljava/util/Date;": "getFirstProgressDate",
        "a(Lnet/minecraft/advancements/AdvancementProgress;)I": "compareTo",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/advancements/CriterionProgress;)V": "lambda$serializeToNetwork$1",
        "a(Ljava/util/Set;Ljava/util/Map$Entry;)Z": "lambda$update$0"
      }
    },
    "net/minecraft/advancements/AdvancementRewards": {
      "fields": {
        "a": "EMPTY",
        "b": "experience",
        "c": "loot",
        "d": "recipes",
        "e": "function"
      },
      "methods": {
        "a()[Lnet/minecraft/resources/ResourceLocation;": "getRecipes",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "grant",
        "b()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/AdvancementRewards;": "deserialize",
        "a(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/commands/CommandFunction;)V": "lambda$grant$0"
      }
    },
    "net/minecraft/advancements/CriterionTriggers": {
      "fields": {
        "aa": "CRITERIA",
        "a": "IMPOSSIBLE",
        "b": "PLAYER_KILLED_ENTITY",
        "c": "ENTITY_KILLED_PLAYER",
        "d": "ENTER_BLOCK",
        "e": "INVENTORY_CHANGED",
        "f": "RECIPE_UNLOCKED",
        "g": "PLAYER_HURT_ENTITY",
        "h": "ENTITY_HURT_PLAYER",
        "i": "ENCHANTED_ITEM",
        "j": "FILLED_BUCKET",
        "k": "BREWED_POTION",
        "l": "CONSTRUCT_BEACON",
        "m": "USED_ENDER_EYE",
        "n": "SUMMONED_ENTITY",
        "o": "BRED_ANIMALS",
        "p": "LOCATION",
        "q": "SLEPT_IN_BED",
        "r": "CURED_ZOMBIE_VILLAGER",
        "s": "TRADE",
        "t": "ITEM_DURABILITY_CHANGED",
        "u": "LEVITATION",
        "v": "CHANGED_DIMENSION",
        "w": "TICK",
        "x": "TAME_ANIMAL",
        "y": "PLACED_BLOCK",
        "z": "CONSUME_ITEM",
        "A": "EFFECTS_CHANGED",
        "B": "USED_TOTEM",
        "C": "NETHER_TRAVEL",
        "D": "FISHING_ROD_HOOKED",
        "E": "CHANNELED_LIGHTNING",
        "F": "SHOT_CROSSBOW",
        "G": "KILLED_BY_CROSSBOW",
        "H": "RAID_WIN",
        "I": "BAD_OMEN",
        "J": "HONEY_BLOCK_SLIDE",
        "K": "BEE_NEST_DESTROYED",
        "L": "TARGET_BLOCK_HIT",
        "M": "ITEM_USED_ON_BLOCK",
        "N": "GENERATE_LOOT",
        "O": "THROWN_ITEM_PICKED_UP_BY_ENTITY",
        "P": "THROWN_ITEM_PICKED_UP_BY_PLAYER",
        "Q": "PLAYER_INTERACTED_WITH_ENTITY",
        "R": "START_RIDING_TRIGGER",
        "S": "LIGHTNING_STRIKE",
        "T": "USING_ITEM",
        "U": "FALL_FROM_HEIGHT",
        "V": "RIDE_ENTITY_IN_LAVA_TRIGGER",
        "W": "KILL_MOB_NEAR_SCULK_CATALYST",
        "X": "ALLAY_DROP_ITEM_ON_BLOCK",
        "Y": "AVOID_VIBRATION",
        "Z": "RECIPE_CRAFTED"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/CriterionTrigger;)Lnet/minecraft/advancements/CriterionTrigger;": "register",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/advancements/CriterionTrigger;": "getCriterion",
        "a()Ljava/lang/Iterable;": "all"
      }
    },
    "net/minecraft/advancements/Criterion": {
      "fields": {
        "a": "trigger"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/Criterion;": "criterionFromJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/advancements/Criterion;": "criterionFromNetwork",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Ljava/util/Map;": "criteriaFromJson",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/util/Map;": "criteriaFromNetwork",
        "a(Ljava/util/Map;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a()Lnet/minecraft/advancements/CriterionTriggerInstance;": "getTrigger",
        "b()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/advancements/Criterion;)V": "lambda$serializeToNetwork$0"
      }
    },
    "net/minecraft/advancements/CriterionProgress": {
      "fields": {
        "a": "DATE_FORMAT",
        "b": "obtained"
      },
      "methods": {
        "a()Z": "isDone",
        "b()V": "grant",
        "c()V": "revoke",
        "d()Ljava/util/Date;": "getObtained",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "e()Lcom/google/gson/JsonElement;": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/advancements/CriterionProgress;": "fromNetwork",
        "a(Ljava/lang/String;)Lnet/minecraft/advancements/CriterionProgress;": "fromJson"
      }
    },
    "net/minecraft/advancements/CriterionTrigger": {
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lnet/minecraft/server/PlayerAdvancements;Lnet/minecraft/advancements/CriterionTrigger$Listener;)V": "addPlayerListener",
        "b(Lnet/minecraft/server/PlayerAdvancements;Lnet/minecraft/advancements/CriterionTrigger$Listener;)V": "removePlayerListener",
        "a(Lnet/minecraft/server/PlayerAdvancements;)V": "removePlayerListeners",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/CriterionTriggerInstance;": "createInstance"
      }
    },
    "net/minecraft/advancements/CriterionInstance": {
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getCriterion",
        "a(Lnet/minecraft/advancements/critereon/SerializationContext;)Lcom/google/gson/JsonObject;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/AdvancementDisplay": {
      "fields": {
        "a": "title",
        "b": "description",
        "c": "icon",
        "d": "background",
        "e": "frame",
        "f": "showToast",
        "g": "announceChat",
        "h": "hidden",
        "i": "x",
        "j": "y"
      },
      "methods": {
        "a(FF)V": "setLocation",
        "a()Lnet/minecraft/network/chat/Component;": "getTitle",
        "b()Lnet/minecraft/network/chat/Component;": "getDescription",
        "c()Lnet/minecraft/world/item/ItemStack;": "getIcon",
        "d()Lnet/minecraft/resources/ResourceLocation;": "getBackground",
        "e()Lnet/minecraft/advancements/FrameType;": "getFrame",
        "f()F": "getX",
        "g()F": "getY",
        "h()Z": "shouldShowToast",
        "i()Z": "shouldAnnounceChat",
        "j()Z": "isHidden",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/DisplayInfo;": "fromJson",
        "b(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/ItemStack;": "getIcon",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/advancements/DisplayInfo;": "fromNetwork",
        "k()Lcom/google/gson/JsonElement;": "serializeToJson",
        "l()Lcom/google/gson/JsonObject;": "serializeIcon"
      }
    },
    "net/minecraft/advancements/AdvancementFrameType": {
      "fields": {
        "a": "TASK",
        "b": "CHALLENGE",
        "c": "GOAL",
        "d": "name",
        "e": "texture",
        "f": "chatColor",
        "g": "displayName",
        "h": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "b()I": "getTexture",
        "a(Ljava/lang/String;)Lnet/minecraft/advancements/FrameType;": "byName",
        "c()Lnet/minecraft/ChatFormatting;": "getChatColor",
        "d()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "e()[Lnet/minecraft/advancements/FrameType;": "$values"
      }
    },
    "net/minecraft/advancements/AdvancementRequirements": {
      "fields": {
        "a": "AND",
        "b": "OR"
      },
      "methods": {
        "a(Ljava/util/Collection;)[[Ljava/lang/String;": "lambda$static$1",
        "b(Ljava/util/Collection;)[[Ljava/lang/String;": "lambda$static$0"
      }
    },
    "net/minecraft/advancements/AdvancementTree": {
      "fields": {
        "a": "advancement",
        "b": "parent",
        "c": "previousSibling",
        "d": "childIndex",
        "e": "children",
        "f": "ancestor",
        "g": "thread",
        "h": "x",
        "i": "y",
        "j": "mod",
        "k": "change",
        "l": "shift"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/Advancement;Lnet/minecraft/advancements/TreeNodePosition;)Lnet/minecraft/advancements/TreeNodePosition;": "addChild",
        "a()V": "firstWalk",
        "a(FIF)F": "secondWalk",
        "a(F)V": "thirdWalk",
        "b()V": "executeShifts",
        "c()Lnet/minecraft/advancements/TreeNodePosition;": "previousOrThread",
        "d()Lnet/minecraft/advancements/TreeNodePosition;": "nextOrThread",
        "a(Lnet/minecraft/advancements/TreeNodePosition;)Lnet/minecraft/advancements/TreeNodePosition;": "apportion",
        "a(Lnet/minecraft/advancements/TreeNodePosition;F)V": "moveSubtree",
        "a(Lnet/minecraft/advancements/TreeNodePosition;Lnet/minecraft/advancements/TreeNodePosition;)Lnet/minecraft/advancements/TreeNodePosition;": "getAncestor",
        "e()V": "finalizePosition",
        "a(Lnet/minecraft/advancements/Advancement;)V": "run"
      }
    },
    "net/minecraft/advancements/critereon/CriterionInstanceAbstract": {
      "fields": {
        "a": "criterion",
        "b": "player"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getCriterion",
        "b()Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "getPlayerPredicate",
        "a(Lnet/minecraft/advancements/critereon/SerializationContext;)Lcom/google/gson/JsonObject;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerBeeNestDestroyed": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/BeeNestDestroyedTrigger$TriggerInstance;": "createInstance",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/level/block/Block;": "deserializeBlock",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/ItemStack;I)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/advancements/critereon/BeeNestDestroyedTrigger$TriggerInstance;)Z": "lambda$trigger$1",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$deserializeBlock$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionBlock": {
      "fields": {
        "a": "ANY",
        "b": "tag",
        "c": "blocks",
        "d": "properties",
        "e": "nbt"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/BlockPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$fromJson$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerBredAnimals": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/BredAnimalsTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/animal/Animal;Lnet/minecraft/world/entity/animal/Animal;Lnet/minecraft/world/entity/AgeableMob;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/BredAnimalsTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerBrewedPotion": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/BrewedPotionTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/alchemy/Potion;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/alchemy/Potion;Lnet/minecraft/advancements/critereon/BrewedPotionTrigger$TriggerInstance;)Z": "lambda$trigger$1",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$createInstance$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerChangedDimension": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ChangeDimensionTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/advancements/critereon/ChangeDimensionTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerChanneledLightning": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ChanneledLightningTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/util/Collection;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Ljava/util/List;Lnet/minecraft/advancements/critereon/ChanneledLightningTrigger$TriggerInstance;)Z": "lambda$trigger$1",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/level/storage/loot/LootContext;": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerConstructBeacon": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ConstructBeaconTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;I)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(ILnet/minecraft/advancements/critereon/ConstructBeaconTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerConsumeItem": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ConsumeItemTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/advancements/critereon/ConsumeItemTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/ContextAwarePredicate": {
      "fields": {
        "a": "ANY",
        "b": "conditions",
        "c": "compositePredicates"
      },
      "methods": {
        "a([Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "create",
        "a(Ljava/lang/String;Lnet/minecraft/advancements/critereon/DeserializationContext;Lcom/google/gson/JsonElement;Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;)Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "fromElement",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "matches",
        "a(Lnet/minecraft/advancements/critereon/SerializationContext;)Lcom/google/gson/JsonElement;": "toJson",
        "a([Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/SerializationContext;)Lcom/google/gson/JsonElement;": "toJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerCuredZombieVillager": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/CuredZombieVillagerTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/monster/Zombie;Lnet/minecraft/world/entity/npc/Villager;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/CuredZombieVillagerTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionDamage": {
      "fields": {
        "a": "ANY",
        "b": "dealtDamage",
        "c": "takenDamage",
        "d": "sourceEntity",
        "e": "blocked",
        "f": "type"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/damagesource/DamageSource;FFZ)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/DamagePredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionDamageSource": {
      "fields": {
        "a": "ANY",
        "b": "tags",
        "c": "directEntity",
        "d": "sourceEntity"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/damagesource/DamageSource;)Z": "matches",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/damagesource/DamageSource;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/DamageSourcePredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/LootDeserializationContext": {
      "fields": {
        "a": "LOGGER",
        "b": "id",
        "c": "lootData",
        "d": "predicateGson"
      },
      "methods": {
        "a(Lcom/google/gson/JsonArray;Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;)[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "deserializeConditions",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getAdvancementId",
        "a(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V": "lambda$deserializeConditions$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionDistance": {
      "fields": {
        "a": "ANY",
        "b": "x",
        "c": "y",
        "d": "z",
        "e": "horizontal",
        "f": "absolute"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;)Lnet/minecraft/advancements/critereon/DistancePredicate;": "horizontal",
        "b(Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;)Lnet/minecraft/advancements/critereon/DistancePredicate;": "vertical",
        "c(Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;)Lnet/minecraft/advancements/critereon/DistancePredicate;": "absolute",
        "a(DDDDDD)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/DistancePredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/DistanceTrigger": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/DistanceTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/phys/Vec3;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/advancements/critereon/DistanceTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerEffectsChanged": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/EffectsChangedTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/EffectsChangedTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerEnchantedItem": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/EnchantedItemTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;I)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/advancements/critereon/EnchantedItemTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionEnchantments": {
      "fields": {
        "a": "ANY",
        "b": "NONE",
        "c": "enchantment",
        "d": "level"
      },
      "methods": {
        "a(Ljava/util/Map;)Z": "containedIn",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/EnchantmentPredicate;": "fromJson",
        "b(Lcom/google/gson/JsonElement;)[Lnet/minecraft/advancements/critereon/EnchantmentPredicate;": "fromJsonArray",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$fromJson$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerEnterBlock": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/EnterBlockTrigger$TriggerInstance;": "createInstance",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/level/block/Block;": "deserializeBlock",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/block/state/BlockState;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/advancements/critereon/EnterBlockTrigger$TriggerInstance;)Z": "lambda$trigger$2",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$deserializeBlock$1",
        "a(Lnet/minecraft/world/level/block/Block;Ljava/lang/String;)V": "lambda$createInstance$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionEntityEquipment": {
      "fields": {
        "a": "ANY",
        "b": "CAPTAIN",
        "c": "head",
        "d": "chest",
        "e": "legs",
        "f": "feet",
        "g": "mainhand",
        "h": "offhand"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/EntityEquipmentPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionEntityFlags": {
      "fields": {
        "a": "ANY",
        "b": "isOnFire",
        "c": "isCrouching",
        "d": "isSprinting",
        "e": "isSwimming",
        "f": "isBaby"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)Z": "matches",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;)Ljava/lang/Boolean;": "getOptionalBoolean",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/EntityFlagsPredicate;": "fromJson",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/lang/Boolean;)V": "addOptionalBoolean",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerEntityHurtPlayer": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/EntityHurtPlayerTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/damagesource/DamageSource;FFZ)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/damagesource/DamageSource;FFZLnet/minecraft/advancements/critereon/EntityHurtPlayerTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionEntity": {
      "fields": {
        "a": "ANY",
        "b": "entityType",
        "c": "distanceToPlayer",
        "d": "location",
        "e": "steppingOnLocation",
        "f": "effects",
        "g": "nbt",
        "h": "flags",
        "i": "equipment",
        "j": "subPredicate",
        "k": "vehicle",
        "l": "passenger",
        "m": "targetedEntity",
        "n": "team"
      },
      "methods": {
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "fromJson",
        "b(Lcom/google/gson/JsonObject;Ljava/lang/String;Lnet/minecraft/advancements/critereon/DeserializationContext;)[Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "fromJsonArray",
        "a(Ljava/lang/String;Lnet/minecraft/advancements/critereon/DeserializationContext;Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "fromElement",
        "a(Lnet/minecraft/advancements/critereon/EntityPredicate;)Lnet/minecraft/advancements/critereon/ContextAwarePredicate;": "wrap",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;)Z": "matches",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/EntityPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "b(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/level/storage/loot/LootContext;": "createContext",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Z": "lambda$matches$0"
      }
    },
    "net/minecraft/advancements/critereon/EntitySubPredicate": {
      "fields": {
        "a": "ANY"
      },
      "methods": {
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/EntitySubPredicate;": "fromJson",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Z": "matches",
        "a()Lcom/google/gson/JsonObject;": "serializeCustomData",
        "b()Lcom/google/gson/JsonElement;": "serialize",
        "c()Lnet/minecraft/advancements/critereon/EntitySubPredicate$Type;": "type",
        "a(Lnet/minecraft/world/entity/animal/CatVariant;)Lnet/minecraft/advancements/critereon/EntitySubPredicate;": "variant",
        "a(Lnet/minecraft/world/entity/animal/FrogVariant;)Lnet/minecraft/advancements/critereon/EntitySubPredicate;": "variant"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionEntityType": {
      "fields": {
        "a": "ANY",
        "b": "COMMA_JOINER"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;)Z": "matches",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/EntityTypePredicate;": "fromJson",
        "b(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/advancements/critereon/EntityTypePredicate;": "of",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/advancements/critereon/EntityTypePredicate;": "of",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$fromJson$0"
      }
    },
    "net/minecraft/advancements/critereon/EntityVariantPredicate": {
      "fields": {
        "a": "VARIANT_KEY",
        "b": "variantCodec",
        "c": "getter",
        "d": "type"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;Ljava/util/function/Function;)Lnet/minecraft/advancements/critereon/EntityVariantPredicate;": "create",
        "a()Lnet/minecraft/advancements/critereon/EntitySubPredicate$Type;": "type",
        "a(Ljava/lang/Object;)Lnet/minecraft/advancements/critereon/EntitySubPredicate;": "createPredicate",
        "a(Lcom/mojang/serialization/Codec;Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/critereon/EntitySubPredicate;": "lambda$new$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerFilledBucket": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/FilledBucketTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/advancements/critereon/FilledBucketTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionInOpenWater": {
      "fields": {
        "b": "ANY",
        "c": "IN_OPEN_WATER_KEY",
        "d": "inOpenWater"
      },
      "methods": {
        "a(Z)Lnet/minecraft/advancements/critereon/FishingHookPredicate;": "inOpenWater",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/critereon/FishingHookPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonObject;": "serializeCustomData",
        "c()Lnet/minecraft/advancements/critereon/EntitySubPredicate$Type;": "type",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Z": "matches"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerFishingRodHooked": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/FishingRodHookedTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/projectile/FishingHook;Ljava/util/Collection;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/Collection;Lnet/minecraft/advancements/critereon/FishingRodHookedTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionFluid": {
      "fields": {
        "a": "ANY",
        "b": "tag",
        "d": "properties"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/FluidPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerImpossible": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lnet/minecraft/server/PlayerAdvancements;Lnet/minecraft/advancements/CriterionTrigger$Listener;)V": "addPlayerListener",
        "b(Lnet/minecraft/server/PlayerAdvancements;Lnet/minecraft/advancements/CriterionTrigger$Listener;)V": "removePlayerListener",
        "a(Lnet/minecraft/server/PlayerAdvancements;)V": "removePlayerListeners",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ImpossibleTrigger$TriggerInstance;": "createInstance",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/CriterionTriggerInstance;": "createInstance"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerInventoryChanged": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/InventoryChangeTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/item/ItemStack;III)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/item/ItemStack;IIILnet/minecraft/advancements/critereon/InventoryChangeTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerItemDurabilityChanged": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ItemDurabilityTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;I)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/advancements/critereon/ItemDurabilityTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionItem": {
      "fields": {
        "a": "ANY",
        "b": "tag",
        "c": "items",
        "d": "count",
        "e": "durability",
        "f": "enchantments",
        "g": "storedEnchantments",
        "h": "potion",
        "i": "nbt"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/ItemPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "b(Lcom/google/gson/JsonElement;)[Lnet/minecraft/advancements/critereon/ItemPredicate;": "fromJsonArray",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$fromJson$1",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$fromJson$0"
      }
    },
    "net/minecraft/advancements/critereon/ItemUsedOnLocationTrigger": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ItemUsedOnLocationTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/ItemUsedOnLocationTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerKilledByCrossbow": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/KilledByCrossbowTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/util/Collection;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Ljava/util/List;Ljava/util/Set;Lnet/minecraft/advancements/critereon/KilledByCrossbowTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerKilled": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/KilledTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/advancements/critereon/KilledTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerLevitation": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/LevitationTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/phys/Vec3;I)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/phys/Vec3;ILnet/minecraft/advancements/critereon/LevitationTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionLight": {
      "fields": {
        "a": "ANY",
        "b": "composite"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "matches",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/LightPredicate;": "fromJson"
      }
    },
    "net/minecraft/advancements/critereon/LighthingBoltPredicate": {
      "fields": {
        "b": "BLOCKS_SET_ON_FIRE_KEY",
        "c": "ENTITY_STRUCK_KEY",
        "d": "blocksSetOnFire",
        "e": "entityStruck"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;)Lnet/minecraft/advancements/critereon/LighthingBoltPredicate;": "blockSetOnFire",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/critereon/LighthingBoltPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonObject;": "serializeCustomData",
        "c()Lnet/minecraft/advancements/critereon/EntitySubPredicate$Type;": "type",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Z": "matches",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Z": "lambda$matches$0"
      }
    },
    "net/minecraft/advancements/critereon/LightningStrikeTrigger": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/LightningStrikeTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/LightningBolt;Ljava/util/List;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/List;Lnet/minecraft/advancements/critereon/LightningStrikeTrigger$TriggerInstance;)Z": "lambda$trigger$1",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/level/storage/loot/LootContext;": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionLocation": {
      "fields": {
        "b": "LOGGER",
        "a": "ANY",
        "c": "x",
        "d": "y",
        "e": "z",
        "f": "biome",
        "g": "structure",
        "h": "dimension",
        "i": "smokey",
        "j": "light",
        "k": "block",
        "l": "fluid"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/advancements/critereon/LocationPredicate;": "inBiome",
        "b(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/advancements/critereon/LocationPredicate;": "inDimension",
        "c(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/advancements/critereon/LocationPredicate;": "inStructure",
        "a(Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;)Lnet/minecraft/advancements/critereon/LocationPredicate;": "atYLocation",
        "a(Lnet/minecraft/server/level/ServerLevel;DDD)Z": "matches",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/LocationPredicate;": "fromJson",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "lambda$fromJson$2",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "lambda$fromJson$1",
        "a(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonElement;)V": "lambda$serializeToJson$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerPlayerGeneratesContainerLoot": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/LootTableTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/resources/ResourceLocation;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/advancements/critereon/LootTableTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionValue": {
      "fields": {
        "a": "ERROR_EMPTY",
        "b": "ERROR_SWAPPED",
        "c": "min",
        "d": "max"
      },
      "methods": {
        "a()Ljava/lang/Number;": "getMin",
        "b()Ljava/lang/Number;": "getMax",
        "c()Z": "isAny",
        "d()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;Lnet/minecraft/advancements/critereon/MinMaxBounds;Ljava/util/function/BiFunction;Lnet/minecraft/advancements/critereon/MinMaxBounds$BoundsFactory;)Lnet/minecraft/advancements/critereon/MinMaxBounds;": "fromJson",
        "a(Lcom/mojang/brigadier/StringReader;Lnet/minecraft/advancements/critereon/MinMaxBounds$BoundsFromReaderFactory;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/Function;)Lnet/minecraft/advancements/critereon/MinMaxBounds;": "fromReader",
        "a(Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljava/lang/Number;": "readNumber",
        "a(Lcom/mojang/brigadier/StringReader;)Z": "isAllowedInputChat",
        "a(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;": "optionallyFormat"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionValue$DoubleRange": {
      "fields": {
        "e": "ANY",
        "f": "minSq",
        "g": "maxSq"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;Ljava/lang/Double;Ljava/lang/Double;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "create",
        "a(Ljava/lang/Double;)Ljava/lang/Double;": "squareOpt",
        "a(D)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "exactly",
        "a(DD)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "between",
        "b(D)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "atLeast",
        "c(D)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "atMost",
        "d(D)Z": "matches",
        "e(D)Z": "matchesSqr",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "fromJson",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "fromReader",
        "a(Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "fromReader",
        "b(Ljava/lang/Double;)Ljava/lang/Double;": "lambda$fromReader$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionValue$IntegerRange": {
      "fields": {
        "e": "ANY",
        "f": "minSq",
        "g": "maxSq"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;Ljava/lang/Integer;Ljava/lang/Integer;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "create",
        "a(Ljava/lang/Integer;)Ljava/lang/Long;": "squareOpt",
        "a(I)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "exactly",
        "a(II)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "between",
        "b(I)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "atLeast",
        "c(I)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "atMost",
        "d(I)Z": "matches",
        "a(J)Z": "matchesSqr",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "fromJson",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "fromReader",
        "a(Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;)Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "fromReader",
        "b(Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$fromReader$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionMobEffect": {
      "fields": {
        "a": "ANY",
        "b": "effects"
      },
      "methods": {
        "a()Lnet/minecraft/advancements/critereon/MobEffectsPredicate;": "effects",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "matches",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "matches",
        "a(Ljava/util/Map;)Z": "matches",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/MobEffectsPredicate;": "fromJson",
        "b()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$fromJson$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionNBT": {
      "fields": {
        "a": "ANY",
        "b": "tag"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "matches",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "matches",
        "a(Lnet/minecraft/nbt/Tag;)Z": "matches",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/NbtPredicate;": "fromJson",
        "b(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/nbt/CompoundTag;": "getEntityTagToCompare"
      }
    },
    "net/minecraft/advancements/critereon/PickedUpItemTrigger": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/PickedUpItemTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/Entity;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/PickedUpItemTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerPlayerHurtEntity": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/PlayerHurtEntityTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;FFZ)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/damagesource/DamageSource;FFZLnet/minecraft/advancements/critereon/PlayerHurtEntityTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerPlayerInteractedWithEntity": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/PlayerInteractTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/Entity;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/PlayerInteractTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionPlayer": {
      "fields": {
        "b": "LOOKING_AT_RANGE",
        "c": "level",
        "d": "gameType",
        "e": "stats",
        "f": "recipes",
        "g": "advancements",
        "h": "lookingAt"
      },
      "methods": {
        "b(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/PlayerPredicate$AdvancementPredicate;": "advancementPredicateFromJson",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Z": "matches",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/critereon/PlayerPredicate;": "fromJson",
        "a(Lnet/minecraft/stats/StatType;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/stats/Stat;": "getStat",
        "a(Lnet/minecraft/stats/Stat;)Lnet/minecraft/resources/ResourceLocation;": "getStatValueId",
        "a()Lcom/google/gson/JsonObject;": "serializeCustomData",
        "c()Lnet/minecraft/advancements/critereon/EntitySubPredicate$Type;": "type",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/advancements/critereon/PlayerPredicate$AdvancementPredicate;)V": "lambda$serializeCustomData$4",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/resources/ResourceLocation;Ljava/lang/Boolean;)V": "lambda$serializeCustomData$3",
        "a(Lcom/google/gson/JsonArray;Lnet/minecraft/stats/Stat;Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;)V": "lambda$serializeCustomData$2",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "lambda$matches$1",
        "a(Lit/unimi/dsi/fastutil/objects/Object2BooleanMap;Ljava/util/Map$Entry;)V": "lambda$advancementPredicateFromJson$0"
      }
    },
    "net/minecraft/advancements/critereon/PlayerTrigger": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/PlayerTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/advancements/critereon/PlayerTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/RecipeCraftedTrigger": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/RecipeCraftedTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/resources/ResourceLocation;Ljava/util/List;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/List;Lnet/minecraft/advancements/critereon/RecipeCraftedTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerRecipeUnlocked": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/RecipeUnlockedTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/crafting/Recipe;)V": "trigger",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/advancements/critereon/RecipeUnlockedTrigger$TriggerInstance;": "unlocked",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/crafting/Recipe;Lnet/minecraft/advancements/critereon/RecipeUnlockedTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/LootSerializationContext": {
      "fields": {
        "a": "INSTANCE",
        "b": "predicateGson"
      },
      "methods": {
        "a([Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lcom/google/gson/JsonElement;": "serializeConditions"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerShotCrossbow": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/ShotCrossbowTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/advancements/critereon/ShotCrossbowTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerAbstract": {
      "fields": {
        "a": "players"
      },
      "methods": {
        "a(Lnet/minecraft/server/PlayerAdvancements;Lnet/minecraft/advancements/CriterionTrigger$Listener;)V": "addPlayerListener",
        "b(Lnet/minecraft/server/PlayerAdvancements;Lnet/minecraft/advancements/CriterionTrigger$Listener;)V": "removePlayerListener",
        "a(Lnet/minecraft/server/PlayerAdvancements;)V": "removePlayerListeners",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/util/function/Predicate;)V": "trigger",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/CriterionTriggerInstance;": "createInstance",
        "b(Lnet/minecraft/server/PlayerAdvancements;)Ljava/util/Set;": "lambda$addPlayerListener$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionSlideDownBlock": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/SlideDownBlockTrigger$TriggerInstance;": "createInstance",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/level/block/Block;": "deserializeBlock",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/block/state/BlockState;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/advancements/critereon/SlideDownBlockTrigger$TriggerInstance;)Z": "lambda$trigger$2",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/google/gson/JsonSyntaxException;": "lambda$deserializeBlock$1",
        "a(Lnet/minecraft/world/level/block/Block;Ljava/lang/String;)V": "lambda$createInstance$0"
      }
    },
    "net/minecraft/advancements/critereon/SlimePredicate": {
      "fields": {
        "b": "size"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;)Lnet/minecraft/advancements/critereon/SlimePredicate;": "sized",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/advancements/critereon/SlimePredicate;": "fromJson",
        "a()Lcom/google/gson/JsonObject;": "serializeCustomData",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Z": "matches",
        "c()Lnet/minecraft/advancements/critereon/EntitySubPredicate$Type;": "type"
      }
    },
    "net/minecraft/advancements/critereon/StartRidingTrigger": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/StartRidingTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/advancements/critereon/StartRidingTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerProperties": {
      "fields": {
        "a": "ANY",
        "b": "properties"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/StatePropertiesPredicate$PropertyMatcher;": "fromJson",
        "b(Lcom/google/gson/JsonElement;)Ljava/lang/String;": "getStringOrNull",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition;Lnet/minecraft/world/level/block/state/StateHolder;)Z": "matches",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "matches",
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "matches",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition;Ljava/util/function/Consumer;)V": "checkState",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/StatePropertiesPredicate;": "fromJson",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/StatePropertiesPredicate$PropertyMatcher;)V": "lambda$serializeToJson$1",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition;Ljava/util/function/Consumer;Lnet/minecraft/advancements/critereon/StatePropertiesPredicate$PropertyMatcher;)V": "lambda$checkState$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerSummonedEntity": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/SummonedEntityTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/SummonedEntityTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/TagPredicate": {
      "fields": {
        "a": "tag",
        "b": "expected"
      },
      "methods": {
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/advancements/critereon/TagPredicate;": "is",
        "b(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/advancements/critereon/TagPredicate;": "isNot",
        "a(Lnet/minecraft/core/Holder;)Z": "matches",
        "a()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/advancements/critereon/TagPredicate;": "fromJson"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerTamedAnimal": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/TameAnimalTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/animal/Animal;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/advancements/critereon/TameAnimalTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerTargetHit": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/TargetBlockTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;I)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/phys/Vec3;ILnet/minecraft/advancements/critereon/TargetBlockTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerVillagerTrade": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/TradeTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/npc/AbstractVillager;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/advancements/critereon/TradeTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerUsedEnderEye": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/UsedEnderEyeTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/core/BlockPos;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(DLnet/minecraft/advancements/critereon/UsedEnderEyeTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionTriggerUsedTotem": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/UsedTotemTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/advancements/critereon/UsedTotemTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/UsingItemTrigger": {
      "fields": {
        "a": "ID"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/UsingItemTrigger$TriggerInstance;": "createInstance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;)V": "trigger",
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/advancements/critereon/ContextAwarePredicate;Lnet/minecraft/advancements/critereon/DeserializationContext;)Lnet/minecraft/advancements/critereon/AbstractCriterionTriggerInstance;": "createInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/advancements/critereon/UsingItemTrigger$TriggerInstance;)Z": "lambda$trigger$0"
      }
    },
    "net/minecraft/advancements/critereon/CriterionConditionRange": {
      "fields": {
        "a": "ANY",
        "b": "ERROR_INTS_ONLY",
        "c": "min",
        "d": "max"
      },
      "methods": {
        "a(F)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "exactly",
        "a(FF)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "between",
        "b(F)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "atLeast",
        "c(F)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "atMost",
        "d(F)Z": "matches",
        "a(D)Z": "matchesSqr",
        "a()Ljava/lang/Float;": "getMin",
        "b()Ljava/lang/Float;": "getMax",
        "c()Lcom/google/gson/JsonElement;": "serializeToJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "fromJson",
        "a(Lcom/mojang/brigadier/StringReader;Z)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "fromReader",
        "a(Lcom/mojang/brigadier/StringReader;ZLjava/util/function/Function;)Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "fromReader",
        "b(Lcom/mojang/brigadier/StringReader;Z)Ljava/lang/Float;": "readNumber",
        "c(Lcom/mojang/brigadier/StringReader;Z)Z": "isAllowedNumber",
        "a(Ljava/lang/Float;Ljava/util/function/Function;)Ljava/lang/Float;": "optionallyFormat",
        "a(Ljava/lang/Float;)Ljava/lang/Float;": "lambda$fromReader$0"
      }
    },
    "net/minecraft/commands/CommandExceptionProvider": {
      "fields": {
        "a": "DOUBLE_TOO_SMALL",
        "b": "DOUBLE_TOO_BIG",
        "c": "FLOAT_TOO_SMALL",
        "d": "FLOAT_TOO_BIG",
        "e": "INTEGER_TOO_SMALL",
        "f": "INTEGER_TOO_BIG",
        "g": "LONG_TOO_SMALL",
        "h": "LONG_TOO_BIG",
        "i": "LITERAL_INCORRECT",
        "j": "READER_EXPECTED_START_OF_QUOTE",
        "k": "READER_EXPECTED_END_OF_QUOTE",
        "l": "READER_INVALID_ESCAPE",
        "m": "READER_INVALID_BOOL",
        "n": "READER_INVALID_INT",
        "o": "READER_EXPECTED_INT",
        "p": "READER_INVALID_LONG",
        "q": "READER_EXPECTED_LONG",
        "r": "READER_INVALID_DOUBLE",
        "s": "READER_EXPECTED_DOUBLE",
        "t": "READER_INVALID_FLOAT",
        "u": "READER_EXPECTED_FLOAT",
        "v": "READER_EXPECTED_BOOL",
        "w": "READER_EXPECTED_SYMBOL",
        "x": "DISPATCHER_UNKNOWN_COMMAND",
        "y": "DISPATCHER_UNKNOWN_ARGUMENT",
        "z": "DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR",
        "A": "DISPATCHER_PARSE_EXCEPTION"
      },
      "methods": {
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$16",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$15",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$14",
        "d(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$13",
        "e(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$12",
        "f(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$11",
        "g(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$10",
        "h(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$9",
        "i(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$8",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$7",
        "b(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$6",
        "c(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$5",
        "d(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$4",
        "e(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "f(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "g(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "h(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/CommandBuildContext": {
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/HolderLookup;": "holderLookup",
        "a(Lnet/minecraft/core/HolderLookup$Provider;Lnet/minecraft/world/flag/FeatureFlagSet;)Lnet/minecraft/commands/CommandBuildContext;": "simple",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/flag/FeatureFlagSet;)Lnet/minecraft/commands/CommandBuildContext$Configurable;": "configurable"
      }
    },
    "net/minecraft/commands/CustomFunction": {
      "fields": {
        "a": "entries",
        "b": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "b()[Lnet/minecraft/commands/CommandFunction$Entry;": "getEntries",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandSourceStack;Ljava/util/List;)Lnet/minecraft/commands/CommandFunction;": "fromLines"
      }
    },
    "net/minecraft/commands/CommandException": {
      "fields": {
        "a": "message"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/Component;": "getComponent"
      }
    },
    "net/minecraft/commands/CommandSigningContext": {
      "fields": {
        "a": "ANONYMOUS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/PlayerChatMessage;": "getArgument"
      }
    },
    "net/minecraft/commands/ICommandListener": {
      "fields": {
        "a": "NULL"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "e_()Z": "acceptsSuccess",
        "q_()Z": "acceptsFailure",
        "N_()Z": "shouldInformAdmins",
        "f_()Z": "alwaysAccepts"
      }
    },
    "net/minecraft/commands/CommandListenerWrapper": {
      "fields": {
        "a": "ERROR_NOT_PLAYER",
        "b": "ERROR_NOT_ENTITY",
        "c": "source",
        "d": "worldPosition",
        "e": "level",
        "f": "permissionLevel",
        "g": "textName",
        "h": "displayName",
        "i": "server",
        "j": "silent",
        "k": "entity",
        "l": "consumer",
        "m": "anchor",
        "n": "rotation",
        "o": "signingContext",
        "p": "chatMessageChainer",
        "q": "returnValueConsumer"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandSource;)Lnet/minecraft/commands/CommandSourceStack;": "withSource",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/commands/CommandSourceStack;": "withEntity",
        "a(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/commands/CommandSourceStack;": "withPosition",
        "a(Lnet/minecraft/world/phys/Vec2;)Lnet/minecraft/commands/CommandSourceStack;": "withRotation",
        "a(Lcom/mojang/brigadier/ResultConsumer;)Lnet/minecraft/commands/CommandSourceStack;": "withCallback",
        "a(Lcom/mojang/brigadier/ResultConsumer;Ljava/util/function/BinaryOperator;)Lnet/minecraft/commands/CommandSourceStack;": "withCallback",
        "a()Lnet/minecraft/commands/CommandSourceStack;": "withSuppressedOutput",
        "a(I)Lnet/minecraft/commands/CommandSourceStack;": "withPermission",
        "b(I)Lnet/minecraft/commands/CommandSourceStack;": "withMaximumPermission",
        "a(Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;)Lnet/minecraft/commands/CommandSourceStack;": "withAnchor",
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/commands/CommandSourceStack;": "withLevel",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;)Lnet/minecraft/commands/CommandSourceStack;": "facing",
        "b(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/commands/CommandSourceStack;": "facing",
        "a(Lnet/minecraft/commands/CommandSigningContext;)Lnet/minecraft/commands/CommandSourceStack;": "withSigningContext",
        "a(Lnet/minecraft/util/TaskChainer;)Lnet/minecraft/commands/CommandSourceStack;": "withChatMessageChainer",
        "a(Ljava/util/function/IntConsumer;)Lnet/minecraft/commands/CommandSourceStack;": "withReturnValueConsumer",
        "b()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "c()Ljava/lang/String;": "getTextName",
        "c(I)Z": "hasPermission",
        "d()Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "e()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "f()Lnet/minecraft/world/entity/Entity;": "getEntity",
        "g()Lnet/minecraft/world/entity/Entity;": "getEntityOrException",
        "h()Lnet/minecraft/server/level/ServerPlayer;": "getPlayerOrException",
        "i()Lnet/minecraft/server/level/ServerPlayer;": "getPlayer",
        "j()Z": "isPlayer",
        "k()Lnet/minecraft/world/phys/Vec2;": "getRotation",
        "l()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "m()Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;": "getAnchor",
        "n()Lnet/minecraft/commands/CommandSigningContext;": "getSigningContext",
        "o()Lnet/minecraft/util/TaskChainer;": "getChatMessageChainer",
        "p()Ljava/util/function/IntConsumer;": "getReturnValueConsumer",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Z": "shouldFilterMessageTo",
        "a(Lnet/minecraft/network/chat/OutgoingChatMessage;ZLnet/minecraft/network/chat/ChatType$Bound;)V": "sendChatMessage",
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "a(Ljava/util/function/Supplier;Z)V": "sendSuccess",
        "c(Lnet/minecraft/network/chat/Component;)V": "broadcastToAdmins",
        "b(Lnet/minecraft/network/chat/Component;)V": "sendFailure",
        "a(Lcom/mojang/brigadier/context/CommandContext;ZI)V": "onCommandComplete",
        "q()Ljava/util/Collection;": "getOnlinePlayerNames",
        "r()Ljava/util/Collection;": "getAllTeams",
        "s()Ljava/util/stream/Stream;": "getAvailableSounds",
        "t()Ljava/util/stream/Stream;": "getRecipeNames",
        "a(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/concurrent/CompletableFuture;": "customSuggestion",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/commands/SharedSuggestionProvider$ElementSuggestionType;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/concurrent/CompletableFuture;": "suggestRegistryElements",
        "u()Ljava/util/Set;": "levels",
        "v()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "w()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures"
      }
    },
    "net/minecraft/commands/CommandDispatcher": {
      "fields": {
        "f": "LOGGER",
        "a": "LEVEL_ALL",
        "b": "LEVEL_MODERATORS",
        "c": "LEVEL_GAMEMASTERS",
        "d": "LEVEL_ADMINS",
        "e": "LEVEL_OWNERS",
        "g": "dispatcher"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/ParseResults;Ljava/util/function/UnaryOperator;)Lcom/mojang/brigadier/ParseResults;": "mapSource",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "performPrefixedCommand",
        "a(Lcom/mojang/brigadier/ParseResults;Ljava/lang/String;)I": "performCommand",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "sendCommands",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/tree/CommandNode;Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Map;)V": "fillUsableCommands",
        "a(Ljava/lang/String;)Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;": "literal",
        "a(Ljava/lang/String;Lcom/mojang/brigadier/arguments/ArgumentType;)Lcom/mojang/brigadier/builder/RequiredArgumentBuilder;": "argument",
        "a(Lnet/minecraft/commands/Commands$ParseFunction;)Ljava/util/function/Predicate;": "createValidator",
        "a()Lcom/mojang/brigadier/CommandDispatcher;": "getDispatcher",
        "a(Lcom/mojang/brigadier/ParseResults;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "getParseException",
        "a(Lnet/minecraft/core/HolderLookup$Provider;)Lnet/minecraft/commands/CommandBuildContext;": "createValidationContext",
        "b()V": "validate",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Ljava/lang/String;": "lambda$validate$9",
        "b(Lcom/mojang/brigadier/arguments/ArgumentType;)Z": "lambda$validate$8",
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/tree/CommandNode;Ljava/util/Collection;)V": "lambda$validate$7",
        "a(Lnet/minecraft/commands/Commands$ParseFunction;Ljava/lang/String;)Z": "lambda$createValidator$6",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$fillUsableCommands$5",
        "a(Lnet/minecraft/commands/SharedSuggestionProvider;)Z": "lambda$fillUsableCommands$4",
        "a(Lnet/minecraft/network/chat/MutableComponent;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$performCommand$3",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$performCommand$2",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$performCommand$1",
        "a(Lcom/mojang/brigadier/context/CommandContext;ZI)V": "lambda$new$0"
      }
    },
    "net/minecraft/commands/CommandDispatcher$ServerType": {
      "fields": {
        "a": "ALL",
        "b": "DEDICATED",
        "c": "INTEGRATED",
        "d": "includeIntegrated",
        "e": "includeDedicated",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/commands/ICompletionProvider": {
      "methods": {
        "q()Ljava/util/Collection;": "getOnlinePlayerNames",
        "x()Ljava/util/Collection;": "getCustomTabSugggestions",
        "y()Ljava/util/Collection;": "getSelectedEntities",
        "r()Ljava/util/Collection;": "getAllTeams",
        "s()Ljava/util/stream/Stream;": "getAvailableSounds",
        "t()Ljava/util/stream/Stream;": "getRecipeNames",
        "a(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/concurrent/CompletableFuture;": "customSuggestion",
        "z()Ljava/util/Collection;": "getRelevantCoordinates",
        "A()Ljava/util/Collection;": "getAbsoluteCoordinates",
        "u()Ljava/util/Set;": "levels",
        "v()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "w()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/commands/SharedSuggestionProvider$ElementSuggestionType;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/concurrent/CompletableFuture;": "suggestRegistryElements",
        "c(I)Z": "hasPermission",
        "a(Ljava/lang/Iterable;Ljava/lang/String;Ljava/util/function/Function;Ljava/util/function/Consumer;)V": "filterResources",
        "a(Ljava/lang/Iterable;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Function;Ljava/util/function/Consumer;)V": "filterResources",
        "a(Ljava/lang/Iterable;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;": "suggestResource",
        "a(Ljava/util/stream/Stream;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;": "suggestResource",
        "a(Ljava/lang/Iterable;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestResource",
        "a(Ljava/lang/Iterable;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;": "suggestResource",
        "a(Ljava/util/stream/Stream;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestResource",
        "a(Ljava/util/stream/Stream;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;": "suggestResource",
        "a(Ljava/lang/String;Ljava/util/Collection;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Predicate;)Ljava/util/concurrent/CompletableFuture;": "suggestCoordinates",
        "b(Ljava/lang/String;Ljava/util/Collection;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Predicate;)Ljava/util/concurrent/CompletableFuture;": "suggest2DCoordinates",
        "b(Ljava/lang/Iterable;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggest",
        "b(Ljava/util/stream/Stream;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggest",
        "a([Ljava/lang/String;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggest",
        "b(Ljava/lang/Iterable;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;": "suggest",
        "a(Ljava/lang/String;Ljava/lang/String;)Z": "matchesSubStr",
        "b(Ljava/lang/String;Ljava/lang/String;)Z": "lambda$suggest$5",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)V": "lambda$suggestResource$4",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Lnet/minecraft/resources/ResourceLocation;)V": "lambda$suggestResource$3",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "lambda$suggestResource$2",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/lang/String;Lnet/minecraft/resources/ResourceLocation;)V": "lambda$suggestResource$1",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "lambda$suggestResource$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentAngle": {
      "fields": {
        "c": "EXAMPLES",
        "a": "ERROR_NOT_COMPLETE",
        "b": "ERROR_INVALID_ANGLE"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/AngleArgument;": "angle",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)F": "getAngle",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/AngleArgument$SingleAngle;": "parse"
      }
    },
    "net/minecraft/commands/arguments/ArgumentSignatures": {
      "fields": {
        "b": "entries",
        "a": "EMPTY",
        "c": "MAX_ARGUMENT_COUNT",
        "d": "MAX_ARGUMENT_NAME_LENGTH"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/MessageSignature;": "get",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/chat/SignableCommand;Lnet/minecraft/commands/arguments/ArgumentSignatures$Signer;)Lnet/minecraft/commands/arguments/ArgumentSignatures;": "signCommand",
        "a()Ljava/util/List;": "entries",
        "a(Lnet/minecraft/commands/arguments/ArgumentSignatures$Signer;Lnet/minecraft/network/chat/SignableCommand$Argument;)Lnet/minecraft/commands/arguments/ArgumentSignatures$Entry;": "lambda$signCommand$1",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/commands/arguments/ArgumentSignatures$Entry;)V": "lambda$write$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentChatFormat": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_INVALID_VALUE"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/ColorArgument;": "color",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/ChatFormatting;": "getColor",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/ChatFormatting;": "parse",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentChatComponent": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_INVALID_JSON"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "getComponent",
        "a()Lnet/minecraft/commands/arguments/ComponentArgument;": "textComponent",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/network/chat/Component;": "parse",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentNBTTag": {
      "fields": {
        "a": "EXAMPLES"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/CompoundTagArgument;": "compoundTag",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "getCompoundTag",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/nbt/CompoundTag;": "parse"
      }
    },
    "net/minecraft/commands/arguments/ArgumentDimension": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_INVALID_VALUE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/resources/ResourceLocation;": "parse",
        "a()Lnet/minecraft/commands/arguments/DimensionArgument;": "dimension",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/server/level/ServerLevel;": "getDimension",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentAnchor": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_INVALID"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;": "getAnchor",
        "a()Lnet/minecraft/commands/arguments/EntityAnchorArgument;": "anchor",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;": "parse",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentAnchor$Anchor": {
      "fields": {
        "a": "FEET",
        "b": "EYES",
        "c": "BY_NAME",
        "d": "name",
        "e": "transform",
        "f": "$VALUES"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;": "getByName",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/phys/Vec3;": "apply",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec3;": "apply",
        "a(Ljava/util/HashMap;)V": "lambda$static$2",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/phys/Vec3;": "lambda$static$1",
        "b(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/phys/Vec3;": "lambda$static$0",
        "a()[Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;": "$values"
      }
    },
    "net/minecraft/commands/arguments/ArgumentEntity": {
      "fields": {
        "g": "EXAMPLES",
        "a": "ERROR_NOT_SINGLE_ENTITY",
        "b": "ERROR_NOT_SINGLE_PLAYER",
        "c": "ERROR_ONLY_PLAYERS_ALLOWED",
        "d": "NO_ENTITIES_FOUND",
        "e": "NO_PLAYERS_FOUND",
        "f": "ERROR_SELECTORS_NOT_ALLOWED",
        "h": "single",
        "i": "playersOnly"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/EntityArgument;": "entity",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "b()Lnet/minecraft/commands/arguments/EntityArgument;": "entities",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getEntities",
        "c(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getOptionalEntities",
        "d(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getOptionalPlayers",
        "c()Lnet/minecraft/commands/arguments/EntityArgument;": "player",
        "e(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/server/level/ServerPlayer;": "getPlayer",
        "d()Lnet/minecraft/commands/arguments/EntityArgument;": "players",
        "f(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getPlayers",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/selector/EntitySelector;": "parse"
      }
    },
    "net/minecraft/commands/arguments/ArgumentEntity$Info": {
      "fields": {
        "a": "FLAG_SINGLE",
        "b": "FLAG_PLAYERS_ONLY"
      },
      "methods": {
        "a(Lnet/minecraft/commands/arguments/EntityArgument$Info$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/arguments/EntityArgument$Info$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/arguments/EntityArgument$Info$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lnet/minecraft/commands/arguments/EntityArgument;)Lnet/minecraft/commands/arguments/EntityArgument$Info$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork"
      }
    },
    "net/minecraft/commands/arguments/ArgumentEntity$Info$Template": {
      "fields": {
        "b": "single",
        "c": "playersOnly",
        "this$0": "this$0"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lnet/minecraft/commands/arguments/EntityArgument;": "instantiate",
        "a()Lnet/minecraft/commands/synchronization/ArgumentTypeInfo;": "type",
        "b(Lnet/minecraft/commands/CommandBuildContext;)Lcom/mojang/brigadier/arguments/ArgumentType;": "instantiate"
      }
    },
    "net/minecraft/commands/arguments/GameModeArgument": {
      "fields": {
        "a": "EXAMPLES",
        "b": "VALUES",
        "c": "ERROR_INVALID"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/world/level/GameType;": "parse",
        "a()Lnet/minecraft/commands/arguments/GameModeArgument;": "gameMode",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/level/GameType;": "getGameMode",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentProfile": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_UNKNOWN_PLAYER"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getGameProfiles",
        "a()Lnet/minecraft/commands/arguments/GameProfileArgument;": "gameProfile",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/GameProfileArgument$Result;": "parse",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)V": "lambda$listSuggestions$1",
        "a(Ljava/lang/String;Lnet/minecraft/commands/CommandSourceStack;)Ljava/util/Collection;": "lambda$parse$0"
      }
    },
    "net/minecraft/commands/arguments/HeightmapTypeArgument": {
      "fields": {
        "a": "LOWER_CASE_CODEC"
      },
      "methods": {
        "b()[Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "keptTypes",
        "a()Lnet/minecraft/commands/arguments/HeightmapTypeArgument;": "heightmap",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "getHeightmap",
        "a(Ljava/lang/String;)Ljava/lang/String;": "convertId",
        "a(I)[Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "lambda$keptTypes$1",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentChat": {
      "fields": {
        "a": "EXAMPLES"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/MessageArgument;": "message",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "getMessage",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Ljava/util/function/Consumer;)V": "resolveChatMessage",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "resolveSignedMessage",
        "b(Ljava/util/function/Consumer;Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "resolveDisguisedMessage",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/network/chat/PlayerChatMessage;)Ljava/util/concurrent/CompletableFuture;": "filterPlainText",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/MessageArgument$Message;": "parse",
        "a(Ljava/util/concurrent/CompletableFuture;Ljava/util/function/Consumer;Lnet/minecraft/network/chat/PlayerChatMessage;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "lambda$resolveDisguisedMessage$3",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/network/chat/PlayerChatMessage;Lnet/minecraft/network/chat/Component;)V": "lambda$resolveDisguisedMessage$2",
        "a(Ljava/util/concurrent/CompletableFuture;Ljava/util/concurrent/CompletableFuture;Lnet/minecraft/network/chat/PlayerChatMessage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "lambda$resolveSignedMessage$1",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;Ljava/util/concurrent/CompletableFuture;Ljava/util/concurrent/CompletableFuture;Ljava/util/function/Consumer;Ljava/lang/Void;)V": "lambda$resolveSignedMessage$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentNBTKey": {
      "fields": {
        "d": "EXAMPLES",
        "a": "ERROR_INVALID_NODE",
        "b": "ERROR_DATA_TOO_DEEP",
        "c": "ERROR_NOTHING_FOUND",
        "e": "ERROR_EXPECTED_LIST",
        "f": "ERROR_INVALID_INDEX",
        "g": "INDEX_MATCH_START",
        "h": "INDEX_MATCH_END",
        "i": "KEY_MATCH_START",
        "j": "KEY_MATCH_END",
        "k": "QUOTED_KEY_START",
        "l": "SINGLE_QUOTED_KEY_START"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/NbtPathArgument;": "nbtPath",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;": "getPath",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;": "parse",
        "a(Lcom/mojang/brigadier/StringReader;Z)Lnet/minecraft/commands/arguments/NbtPathArgument$Node;": "parseNode",
        "a(Lcom/mojang/brigadier/StringReader;Ljava/lang/String;)Lnet/minecraft/commands/arguments/NbtPathArgument$Node;": "readObjectNode",
        "b(Lcom/mojang/brigadier/StringReader;)Ljava/lang/String;": "readUnquotedName",
        "a(C)Z": "isAllowedInUnquotedName",
        "a(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/function/Predicate;": "createTagPredicate",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)Z": "lambda$createTagPredicate$3",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentNBTBase": {
      "fields": {
        "a": "EXAMPLES"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/NbtTagArgument;": "nbtTag",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/nbt/Tag;": "getNbtTag",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/nbt/Tag;": "parse"
      }
    },
    "net/minecraft/commands/arguments/ArgumentScoreboardObjective": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_OBJECTIVE_NOT_FOUND",
        "c": "ERROR_OBJECTIVE_READ_ONLY"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/ObjectiveArgument;": "objective",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/scores/Objective;": "getObjective",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/scores/Objective;": "getWritableObjective",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/String;": "parse",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentScoreboardCriteria": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_INVALID_VALUE"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/ObjectiveCriteriaArgument;": "criteria",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;": "getCriteria",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;": "parse",
        "a(Lnet/minecraft/stats/StatType;Ljava/lang/Object;)Ljava/lang/String;": "getName",
        "a(Lcom/mojang/brigadier/StringReader;ILjava/lang/String;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$parse$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentMathOperation": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_INVALID_OPERATION",
        "c": "ERROR_DIVIDE_BY_ZERO"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/OperationArgument;": "operation",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/OperationArgument$Operation;": "getOperation",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/OperationArgument$Operation;": "parse",
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/OperationArgument$Operation;": "getOperation",
        "b(Ljava/lang/String;)Lnet/minecraft/commands/arguments/OperationArgument$SimpleOperation;": "getSimpleOperation",
        "a(II)I": "lambda$getSimpleOperation$6",
        "b(II)I": "lambda$getSimpleOperation$5",
        "c(II)I": "lambda$getSimpleOperation$4",
        "d(II)I": "lambda$getSimpleOperation$3",
        "e(II)I": "lambda$getSimpleOperation$2",
        "f(II)I": "lambda$getSimpleOperation$1",
        "a(Lnet/minecraft/world/scores/Score;Lnet/minecraft/world/scores/Score;)V": "lambda$getOperation$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentParticle": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_UNKNOWN_PARTICLE",
        "c": "particles"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lnet/minecraft/commands/arguments/ParticleArgument;": "particle",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/particles/ParticleOptions;": "getParticle",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/core/particles/ParticleOptions;": "parse",
        "a(Lcom/mojang/brigadier/StringReader;Lnet/minecraft/core/HolderLookup;)Lnet/minecraft/core/particles/ParticleOptions;": "readParticle",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$readParticleType$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentCriterionValue": {
      "methods": {
        "a()Lnet/minecraft/commands/arguments/RangeArgument$Ints;": "intRange",
        "b()Lnet/minecraft/commands/arguments/RangeArgument$Floats;": "floatRange"
      }
    },
    "net/minecraft/commands/arguments/ResourceArgument": {
      "fields": {
        "c": "EXAMPLES",
        "d": "ERROR_NOT_SUMMONABLE_ENTITY",
        "a": "ERROR_UNKNOWN_RESOURCE",
        "b": "ERROR_INVALID_RESOURCE_TYPE",
        "e": "registryKey",
        "f": "registryLookup"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/commands/arguments/ResourceArgument;": "resource",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/Holder$Reference;": "getResource",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getAttribute",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getConfiguredFeature",
        "c(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getStructure",
        "d(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getEntityType",
        "e(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getSummonableEntityType",
        "f(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getMobEffect",
        "g(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getEnchantment",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/core/Holder$Reference;": "parse",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$parse$3",
        "a(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ResourceKeyArgument": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_INVALID_FEATURE",
        "c": "ERROR_INVALID_STRUCTURE",
        "d": "ERROR_INVALID_TEMPLATE_POOL",
        "e": "registryKey"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/commands/arguments/ResourceKeyArgument;": "key",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;)Lnet/minecraft/resources/ResourceKey;": "getRegistryKey",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;)Lnet/minecraft/core/Holder$Reference;": "resolveKey",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getConfiguredFeature",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getStructure",
        "c(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "getStructureTemplatePool",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/resources/ResourceKey;": "parse",
        "a(Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$resolveKey$4",
        "b(Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getRegistryKey$3",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentMinecraftKeyRegistered": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_UNKNOWN_ADVANCEMENT",
        "c": "ERROR_UNKNOWN_RECIPE",
        "d": "ERROR_UNKNOWN_PREDICATE",
        "e": "ERROR_UNKNOWN_ITEM_MODIFIER"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/ResourceLocationArgument;": "id",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/advancements/Advancement;": "getAdvancement",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/item/crafting/Recipe;": "getRecipe",
        "c(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "getPredicate",
        "d(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "getItemModifier",
        "e(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "getId",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/resources/ResourceLocation;": "parse",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getRecipe$4",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "d(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ResourceOrTagArgument": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_UNKNOWN_TAG",
        "c": "ERROR_INVALID_TAG_TYPE",
        "d": "registryLookup",
        "e": "registryKey"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/commands/arguments/ResourceOrTagArgument;": "resourceOrTag",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;": "getResourceOrTag",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;": "parse",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$parse$6",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$parse$5",
        "a(Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getResourceOrTag$4",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/HolderSet$Named;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getResourceOrTag$3",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder$Reference;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getResourceOrTag$2",
        "a(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ResourceOrTagKeyArgument": {
      "fields": {
        "a": "EXAMPLES",
        "b": "registryKey"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument;": "resourceOrTagKey",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;)Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument$Result;": "getResourceOrTagKey",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument$Result;": "parse",
        "a(Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument$Result;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getResourceOrTagKey$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentScoreholder": {
      "fields": {
        "a": "SUGGEST_SCORE_HOLDERS",
        "b": "EXAMPLES",
        "c": "ERROR_NO_RESULTS",
        "d": "multiple"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/lang/String;": "getName",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getNames",
        "c(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getNamesWithDefaultWildcard",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Ljava/util/function/Supplier;)Ljava/util/Collection;": "getNames",
        "a()Lnet/minecraft/commands/arguments/ScoreHolderArgument;": "scoreHolder",
        "b()Lnet/minecraft/commands/arguments/ScoreHolderArgument;": "scoreHolders",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/ScoreHolderArgument$Result;": "parse",
        "a(Ljava/util/Collection;Lnet/minecraft/commands/CommandSourceStack;Ljava/util/function/Supplier;)Ljava/util/Collection;": "lambda$parse$3",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/function/Supplier;)Ljava/util/Collection;": "lambda$parse$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$1",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)V": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentScoreboardSlot": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_INVALID_VALUE"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/ScoreboardSlotArgument;": "displaySlot",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)I": "getDisplaySlot",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/Integer;": "parse",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/SignedArgument": {},
    "net/minecraft/commands/arguments/ArgumentInventorySlot": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_UNKNOWN_SLOT",
        "c": "SLOTS"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/SlotArgument;": "slot",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)I": "getSlot",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/Integer;": "parse",
        "a(Ljava/util/HashMap;)V": "lambda$static$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/StringRepresentableArgument": {
      "fields": {
        "a": "ERROR_INVALID_VALUE",
        "b": "codec",
        "c": "values"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/Enum;": "parse",
        "a(Ljava/lang/String;)Ljava/lang/String;": "convertId",
        "a(Ljava/lang/Object;)Ljava/lang/String;": "lambda$getExamples$3",
        "b(Ljava/lang/Object;)Ljava/lang/String;": "lambda$listSuggestions$2",
        "b(Ljava/lang/String;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$parse$1",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentScoreboardTeam": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_TEAM_NOT_FOUND"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/TeamArgument;": "team",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/scores/PlayerTeam;": "getTeam",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/String;": "parse",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/TemplateMirrorArgument": {
      "methods": {
        "a()Lnet/minecraft/commands/arguments/StringRepresentableArgument;": "templateMirror",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/level/block/Mirror;": "getMirror"
      }
    },
    "net/minecraft/commands/arguments/TemplateRotationArgument": {
      "methods": {
        "a()Lnet/minecraft/commands/arguments/TemplateRotationArgument;": "templateRotation",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/level/block/Rotation;": "getRotation"
      }
    },
    "net/minecraft/commands/arguments/ArgumentTime": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_INVALID_UNIT",
        "c": "ERROR_TICK_COUNT_TOO_LOW",
        "d": "UNITS",
        "e": "minimum"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/TimeArgument;": "time",
        "a(I)Lnet/minecraft/commands/arguments/TimeArgument;": "time",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/Integer;": "parse",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/ArgumentUUID": {
      "fields": {
        "a": "ERROR_INVALID_UUID",
        "b": "EXAMPLES",
        "c": "ALLOWED_CHARACTERS"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/UUID;": "getUuid",
        "a()Lnet/minecraft/commands/arguments/UuidArgument;": "uuid",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/util/UUID;": "parse"
      }
    },
    "net/minecraft/commands/arguments/blocks/ArgumentTileLocation": {
      "fields": {
        "a": "state",
        "b": "properties",
        "c": "tag"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "b()Ljava/util/Set;": "getDefinedProperties",
        "a(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "test",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;I)Z": "place"
      }
    },
    "net/minecraft/commands/arguments/blocks/ArgumentBlockPredicate": {
      "fields": {
        "a": "EXAMPLES",
        "b": "blocks"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lnet/minecraft/commands/arguments/blocks/BlockPredicateArgument;": "blockPredicate",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/blocks/BlockPredicateArgument$Result;": "parse",
        "a(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/blocks/BlockPredicateArgument$Result;": "parse",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/function/Predicate;": "getBlockPredicate",
        "a(Lnet/minecraft/commands/arguments/blocks/BlockStateParser$TagResult;)Lnet/minecraft/commands/arguments/blocks/BlockPredicateArgument$Result;": "lambda$parse$1",
        "a(Lnet/minecraft/commands/arguments/blocks/BlockStateParser$BlockResult;)Lnet/minecraft/commands/arguments/blocks/BlockPredicateArgument$Result;": "lambda$parse$0"
      }
    },
    "net/minecraft/commands/arguments/blocks/ArgumentTile": {
      "fields": {
        "a": "EXAMPLES",
        "b": "blocks"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lnet/minecraft/commands/arguments/blocks/BlockStateArgument;": "block",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/blocks/BlockInput;": "parse",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/blocks/BlockInput;": "getBlock"
      }
    },
    "net/minecraft/commands/arguments/blocks/ArgumentBlock": {
      "fields": {
        "a": "ERROR_NO_TAGS_ALLOWED",
        "b": "ERROR_UNKNOWN_BLOCK",
        "c": "ERROR_UNKNOWN_PROPERTY",
        "d": "ERROR_DUPLICATE_PROPERTY",
        "e": "ERROR_INVALID_VALUE",
        "f": "ERROR_EXPECTED_VALUE",
        "g": "ERROR_EXPECTED_END_OF_PROPERTIES",
        "h": "ERROR_UNKNOWN_TAG",
        "i": "SYNTAX_START_PROPERTIES",
        "j": "SYNTAX_START_NBT",
        "k": "SYNTAX_END_PROPERTIES",
        "l": "SYNTAX_EQUALS",
        "m": "SYNTAX_PROPERTY_SEPARATOR",
        "n": "SYNTAX_TAG",
        "o": "SUGGEST_NOTHING",
        "p": "blocks",
        "q": "reader",
        "r": "forTesting",
        "s": "allowNbt",
        "t": "properties",
        "u": "vagueProperties",
        "v": "id",
        "w": "definition",
        "x": "state",
        "y": "nbt",
        "z": "tag",
        "A": "suggestions"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderLookup;Ljava/lang/String;Z)Lnet/minecraft/commands/arguments/blocks/BlockStateParser$BlockResult;": "parseForBlock",
        "a(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/StringReader;Z)Lnet/minecraft/commands/arguments/blocks/BlockStateParser$BlockResult;": "parseForBlock",
        "b(Lnet/minecraft/core/HolderLookup;Ljava/lang/String;Z)Lcom/mojang/datafixers/util/Either;": "parseForTesting",
        "b(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/StringReader;Z)Lcom/mojang/datafixers/util/Either;": "parseForTesting",
        "a(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;ZZ)Ljava/util/concurrent/CompletableFuture;": "fillSuggestions",
        "a()V": "parse",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestPropertyNameOrEnd",
        "b(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestVaguePropertyNameOrEnd",
        "c(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestPropertyName",
        "d(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestVaguePropertyName",
        "e(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestOpenNbt",
        "b()Z": "hasBlockEntity",
        "f(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestEquals",
        "g(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestNextPropertyOrEnd",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Lnet/minecraft/world/level/block/state/properties/Property;)Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;": "addSuggestions",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;": "suggestVaguePropertyValue",
        "h(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestOpenVaguePropertiesOrNbt",
        "i(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestOpenPropertiesOrNbt",
        "j(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestTag",
        "k(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestItem",
        "l(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestBlockIdOrTag",
        "c()V": "readBlock",
        "d()V": "readTag",
        "e()V": "readProperties",
        "f()V": "readVagueProperties",
        "g()V": "readNbt",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/String;I)V": "setValue",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/lang/String;": "serialize",
        "a(Ljava/lang/StringBuilder;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)V": "appendProperty"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentPosition": {
      "fields": {
        "d": "EXAMPLES",
        "a": "ERROR_NOT_LOADED",
        "b": "ERROR_OUT_OF_WORLD",
        "c": "ERROR_OUT_OF_BOUNDS"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/coordinates/BlockPosArgument;": "blockPos",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/BlockPos;": "getLoadedBlockPos",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/server/level/ServerLevel;Ljava/lang/String;)Lnet/minecraft/core/BlockPos;": "getLoadedBlockPos",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/BlockPos;": "getBlockPos",
        "c(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/core/BlockPos;": "getSpawnablePos",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "parse"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentVec2I": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_NOT_COMPLETE"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/coordinates/ColumnPosArgument;": "columnPos",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/server/level/ColumnPos;": "getColumnPos",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "parse"
      }
    },
    "net/minecraft/commands/arguments/coordinates/IVectorPosition": {
      "methods": {
        "a(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec2;": "getRotation",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/core/BlockPos;": "getBlockPos",
        "a()Z": "isXRelative",
        "b()Z": "isYRelative",
        "c()Z": "isZRelative"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentVectorPosition": {
      "fields": {
        "a": "PREFIX_LOCAL_COORDINATE",
        "b": "left",
        "c": "up",
        "d": "forwards"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec2;": "getRotation",
        "a()Z": "isXRelative",
        "b()Z": "isYRelative",
        "c()Z": "isZRelative",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/LocalCoordinates;": "parse",
        "a(Lcom/mojang/brigadier/StringReader;I)D": "readDouble"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentRotation": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_NOT_COMPLETE"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/coordinates/RotationArgument;": "rotation",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "getRotation",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "parse"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentRotationAxis": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_INVALID"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/coordinates/SwizzleArgument;": "swizzle",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/EnumSet;": "getSwizzle",
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/util/EnumSet;": "parse"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentVec2": {
      "fields": {
        "b": "EXAMPLES",
        "a": "ERROR_NOT_COMPLETE",
        "c": "centerCorrect"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/coordinates/Vec2Argument;": "vec2",
        "a(Z)Lnet/minecraft/commands/arguments/coordinates/Vec2Argument;": "vec2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/phys/Vec2;": "getVec2",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "parse"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentVec3": {
      "fields": {
        "c": "EXAMPLES",
        "a": "ERROR_NOT_COMPLETE",
        "b": "ERROR_MIXED_TYPE",
        "d": "centerCorrect"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/coordinates/Vec3Argument;": "vec3",
        "a(Z)Lnet/minecraft/commands/arguments/coordinates/Vec3Argument;": "vec3",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/world/phys/Vec3;": "getVec3",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "getCoordinates",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "parse"
      }
    },
    "net/minecraft/commands/arguments/coordinates/ArgumentParserPosition": {
      "fields": {
        "c": "PREFIX_RELATIVE",
        "a": "ERROR_EXPECTED_DOUBLE",
        "b": "ERROR_EXPECTED_INT",
        "d": "relative",
        "e": "value"
      },
      "methods": {
        "a(D)D": "get",
        "a(Lcom/mojang/brigadier/StringReader;Z)Lnet/minecraft/commands/arguments/coordinates/WorldCoordinate;": "parseDouble",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/WorldCoordinate;": "parseInt",
        "b(Lcom/mojang/brigadier/StringReader;)Z": "isRelative",
        "a()Z": "isRelative"
      }
    },
    "net/minecraft/commands/arguments/coordinates/VectorPosition": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/phys/Vec2;": "getRotation",
        "a()Z": "isXRelative",
        "b()Z": "isYRelative",
        "c()Z": "isZRelative",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/coordinates/WorldCoordinates;": "parseInt",
        "a(Lcom/mojang/brigadier/StringReader;Z)Lnet/minecraft/commands/arguments/coordinates/WorldCoordinates;": "parseDouble",
        "a(DDD)Lnet/minecraft/commands/arguments/coordinates/WorldCoordinates;": "absolute",
        "a(Lnet/minecraft/world/phys/Vec2;)Lnet/minecraft/commands/arguments/coordinates/WorldCoordinates;": "absolute",
        "d()Lnet/minecraft/commands/arguments/coordinates/WorldCoordinates;": "current"
      }
    },
    "net/minecraft/commands/arguments/item/ArgumentTag": {
      "fields": {
        "a": "EXAMPLES",
        "b": "ERROR_UNKNOWN_TAG",
        "c": "ERROR_UNKNOWN_FUNCTION"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/item/FunctionArgument;": "functions",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/item/FunctionArgument$Result;": "parse",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/commands/CommandFunction;": "getFunction",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Collection;": "getFunctionTag",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/Collection;": "getFunctions",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lcom/mojang/datafixers/util/Pair;": "getFunctionOrTag",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$getFunction$2",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/item/ArgumentItemStack": {
      "fields": {
        "a": "EXAMPLES",
        "b": "items"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lnet/minecraft/commands/arguments/item/ItemArgument;": "item",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/item/ItemInput;": "parse",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/commands/arguments/item/ItemInput;": "getItem"
      }
    },
    "net/minecraft/commands/arguments/item/ArgumentPredicateItemStack": {
      "fields": {
        "a": "ERROR_STACK_TOO_BIG",
        "b": "item",
        "c": "tag"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/Item;": "getItem",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "test",
        "a(IZ)Lnet/minecraft/world/item/ItemStack;": "createItemStack",
        "b()Ljava/lang/String;": "serialize",
        "c()Ljava/lang/String;": "getItemName",
        "d()Ljava/lang/Object;": "lambda$getItemName$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/item/ArgumentParserItemStack": {
      "fields": {
        "a": "ERROR_NO_TAGS_ALLOWED",
        "b": "ERROR_UNKNOWN_ITEM",
        "c": "ERROR_UNKNOWN_TAG",
        "d": "SYNTAX_START_NBT",
        "e": "SYNTAX_TAG",
        "f": "SUGGEST_NOTHING",
        "g": "items",
        "h": "reader",
        "i": "allowTags",
        "j": "result",
        "k": "nbt",
        "l": "suggestions"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/item/ItemParser$ItemResult;": "parseForItem",
        "b(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/StringReader;)Lcom/mojang/datafixers/util/Either;": "parseForTesting",
        "a(Lnet/minecraft/core/HolderLookup;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Z)Ljava/util/concurrent/CompletableFuture;": "fillSuggestions",
        "a()V": "readItem",
        "b()V": "readTag",
        "c()V": "readNbt",
        "d()V": "parse",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestOpenNbt",
        "b(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestTag",
        "c(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestItem",
        "d(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestItemIdOrTag",
        "a(ILnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$readTag$6",
        "b(ILnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$readItem$5",
        "a(Lnet/minecraft/commands/arguments/item/ItemParser;Lnet/minecraft/core/HolderSet;)Lnet/minecraft/commands/arguments/item/ItemParser$TagResult;": "lambda$parseForTesting$4",
        "a(Lnet/minecraft/commands/arguments/item/ItemParser;Lnet/minecraft/core/Holder;)Lnet/minecraft/commands/arguments/item/ItemParser$ItemResult;": "lambda$parseForTesting$3",
        "e()Ljava/lang/IllegalStateException;": "lambda$parseForItem$2",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/arguments/item/ArgumentItemPredicate": {
      "fields": {
        "a": "EXAMPLES",
        "b": "items"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lnet/minecraft/commands/arguments/item/ItemPredicateArgument;": "itemPredicate",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/commands/arguments/item/ItemPredicateArgument$Result;": "parse",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/util/function/Predicate;": "getItemPredicate",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/commands/arguments/item/ItemPredicateArgument$Result;": "createResult",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/item/ItemStack;)Z": "lambda$createResult$4",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/item/ItemStack;)Z": "lambda$createResult$3",
        "a(Lnet/minecraft/commands/arguments/item/ItemParser$TagResult;)Lnet/minecraft/commands/arguments/item/ItemPredicateArgument$Result;": "lambda$parse$2",
        "a(Lnet/minecraft/commands/arguments/item/ItemParser$ItemResult;)Lnet/minecraft/commands/arguments/item/ItemPredicateArgument$Result;": "lambda$parse$1",
        "a(Lnet/minecraft/commands/arguments/item/ItemParser$ItemResult;Lnet/minecraft/core/Holder;)Z": "lambda$parse$0"
      }
    },
    "net/minecraft/commands/arguments/selector/EntitySelector": {
      "fields": {
        "a": "INFINITE",
        "b": "ORDER_ARBITRARY",
        "c": "ANY_TYPE",
        "d": "maxResults",
        "e": "includesEntities",
        "f": "worldLimited",
        "g": "predicate",
        "h": "range",
        "i": "position",
        "j": "aabb",
        "k": "order",
        "l": "currentEntity",
        "m": "playerName",
        "n": "entityUUID",
        "o": "type",
        "p": "usesSelector"
      },
      "methods": {
        "a()I": "getMaxResults",
        "b()Z": "includesEntities",
        "c()Z": "isSelfSelector",
        "d()Z": "isWorldLimited",
        "e()Z": "usesSelector",
        "e(Lnet/minecraft/commands/CommandSourceStack;)V": "checkPermissions",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/world/entity/Entity;": "findSingleEntity",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Ljava/util/List;": "findEntities",
        "f(Lnet/minecraft/commands/CommandSourceStack;)Ljava/util/List;": "findEntitiesRaw",
        "a(Ljava/util/List;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Ljava/util/function/Predicate;)V": "addEntities",
        "f()I": "getResultLimit",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/server/level/ServerPlayer;": "findSinglePlayer",
        "d(Lnet/minecraft/commands/CommandSourceStack;)Ljava/util/List;": "findPlayers",
        "a(Lnet/minecraft/world/phys/Vec3;)Ljava/util/function/Predicate;": "getPredicate",
        "a(Lnet/minecraft/world/phys/Vec3;Ljava/util/List;)Ljava/util/List;": "sortAndLimit",
        "a(Ljava/util/List;)Lnet/minecraft/network/chat/Component;": "joinNames"
      }
    },
    "net/minecraft/commands/arguments/selector/ArgumentParserSelector": {
      "fields": {
        "a": "SYNTAX_SELECTOR_START",
        "o": "SYNTAX_OPTIONS_START",
        "p": "SYNTAX_OPTIONS_END",
        "b": "SYNTAX_OPTIONS_KEY_VALUE_SEPARATOR",
        "q": "SYNTAX_OPTIONS_SEPARATOR",
        "c": "SYNTAX_NOT",
        "d": "SYNTAX_TAG",
        "r": "SELECTOR_NEAREST_PLAYER",
        "s": "SELECTOR_ALL_PLAYERS",
        "t": "SELECTOR_RANDOM_PLAYERS",
        "u": "SELECTOR_CURRENT_ENTITY",
        "v": "SELECTOR_ALL_ENTITIES",
        "e": "ERROR_INVALID_NAME_OR_UUID",
        "f": "ERROR_UNKNOWN_SELECTOR_TYPE",
        "g": "ERROR_SELECTORS_NOT_ALLOWED",
        "h": "ERROR_MISSING_SELECTOR_TYPE",
        "i": "ERROR_EXPECTED_END_OF_OPTIONS",
        "j": "ERROR_EXPECTED_OPTION_VALUE",
        "k": "ORDER_NEAREST",
        "l": "ORDER_FURTHEST",
        "m": "ORDER_RANDOM",
        "n": "SUGGEST_NOTHING",
        "w": "reader",
        "x": "allowSelectors",
        "y": "maxResults",
        "z": "includesEntities",
        "A": "worldLimited",
        "B": "distance",
        "C": "level",
        "D": "x",
        "E": "y",
        "F": "z",
        "G": "deltaX",
        "H": "deltaY",
        "I": "deltaZ",
        "J": "rotX",
        "K": "rotY",
        "L": "predicate",
        "M": "order",
        "N": "currentEntity",
        "O": "playerName",
        "P": "startPosition",
        "Q": "entityUUID",
        "R": "suggestions",
        "S": "hasNameEquals",
        "T": "hasNameNotEquals",
        "U": "isLimited",
        "V": "isSorted",
        "W": "hasGamemodeEquals",
        "X": "hasGamemodeNotEquals",
        "Y": "hasTeamEquals",
        "Z": "hasTeamNotEquals",
        "aa": "type",
        "ab": "typeInverse",
        "ac": "hasScores",
        "ad": "hasAdvancements",
        "ae": "usesSelectors"
      },
      "methods": {
        "a()Lnet/minecraft/commands/arguments/selector/EntitySelector;": "getSelector",
        "a(DDD)Lnet/minecraft/world/phys/AABB;": "createAabb",
        "I()V": "finalizePredicates",
        "a(Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;Ljava/util/function/ToDoubleFunction;)Ljava/util/function/Predicate;": "createRotationPredicate",
        "b()V": "parseSelector",
        "c()V": "parseNameOrUUID",
        "d()V": "parseOptions",
        "e()Z": "shouldInvertValue",
        "f()Z": "isTag",
        "g()Lcom/mojang/brigadier/StringReader;": "getReader",
        "a(Ljava/util/function/Predicate;)V": "addPredicate",
        "h()V": "setWorldLimited",
        "i()Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;": "getDistance",
        "a(Lnet/minecraft/advancements/critereon/MinMaxBounds$Doubles;)V": "setDistance",
        "j()Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;": "getLevel",
        "a(Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;)V": "setLevel",
        "k()Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "getRotX",
        "a(Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;)V": "setRotX",
        "l()Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;": "getRotY",
        "b(Lnet/minecraft/advancements/critereon/WrappedMinMaxBounds;)V": "setRotY",
        "m()Ljava/lang/Double;": "getX",
        "n()Ljava/lang/Double;": "getY",
        "o()Ljava/lang/Double;": "getZ",
        "a(D)V": "setX",
        "b(D)V": "setY",
        "c(D)V": "setZ",
        "d(D)V": "setDeltaX",
        "e(D)V": "setDeltaY",
        "f(D)V": "setDeltaZ",
        "p()Ljava/lang/Double;": "getDeltaX",
        "q()Ljava/lang/Double;": "getDeltaY",
        "r()Ljava/lang/Double;": "getDeltaZ",
        "a(I)V": "setMaxResults",
        "a(Z)V": "setIncludesEntities",
        "s()Ljava/util/function/BiConsumer;": "getOrder",
        "a(Ljava/util/function/BiConsumer;)V": "setOrder",
        "t()Lnet/minecraft/commands/arguments/selector/EntitySelector;": "parse",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)V": "fillSelectorSuggestions",
        "b(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestNameOrSelector",
        "c(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestName",
        "d(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestSelector",
        "e(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestOpenOptions",
        "f(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestOptionsKeyOrClose",
        "g(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestOptionsKey",
        "h(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestOptionsNextOrClose",
        "i(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "suggestEquals",
        "u()Z": "isCurrentEntity",
        "a(Ljava/util/function/BiFunction;)V": "setSuggestions",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "fillSuggestions",
        "v()Z": "hasNameEquals",
        "b(Z)V": "setHasNameEquals",
        "w()Z": "hasNameNotEquals",
        "c(Z)V": "setHasNameNotEquals",
        "x()Z": "isLimited",
        "d(Z)V": "setLimited",
        "y()Z": "isSorted",
        "e(Z)V": "setSorted",
        "z()Z": "hasGamemodeEquals",
        "f(Z)V": "setHasGamemodeEquals",
        "A()Z": "hasGamemodeNotEquals",
        "g(Z)V": "setHasGamemodeNotEquals",
        "B()Z": "hasTeamEquals",
        "h(Z)V": "setHasTeamEquals",
        "C()Z": "hasTeamNotEquals",
        "i(Z)V": "setHasTeamNotEquals",
        "a(Lnet/minecraft/world/entity/EntityType;)V": "limitToType",
        "D()V": "setTypeLimitedInversely",
        "E()Z": "isTypeLimited",
        "F()Z": "isTypeLimitedInversely",
        "G()Z": "hasScores",
        "j(Z)V": "setHasScores",
        "H()Z": "hasAdvancements",
        "k(Z)V": "setHasAdvancements"
      }
    },
    "net/minecraft/commands/arguments/selector/options/PlayerSelector": {
      "fields": {
        "i": "OPTIONS",
        "a": "ERROR_UNKNOWN_OPTION",
        "b": "ERROR_INAPPLICABLE_OPTION",
        "c": "ERROR_RANGE_NEGATIVE",
        "d": "ERROR_LEVEL_NEGATIVE",
        "e": "ERROR_LIMIT_TOO_SMALL",
        "f": "ERROR_SORT_UNKNOWN",
        "g": "ERROR_GAME_MODE_INVALID",
        "h": "ERROR_ENTITY_TYPE_INVALID"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/commands/arguments/selector/options/EntitySelectorOptions$Modifier;Ljava/util/function/Predicate;Lnet/minecraft/network/chat/Component;)V": "register",
        "a()V": "bootStrap",
        "a(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;Ljava/lang/String;I)Lnet/minecraft/commands/arguments/selector/options/EntitySelectorOptions$Modifier;": "get",
        "a(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)V": "suggestNames",
        "a(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$63",
        "b(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$62",
        "a(Lnet/minecraft/resources/ResourceLocation;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$61",
        "c(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$60",
        "d(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$59",
        "a(Ljava/util/Map;Lnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$58",
        "a(ZLnet/minecraft/advancements/AdvancementProgress;)Z": "lambda$bootStrap$57",
        "a(Ljava/util/Map;Lnet/minecraft/advancements/AdvancementProgress;)Z": "lambda$bootStrap$56",
        "a(ZLnet/minecraft/advancements/CriterionProgress;)Z": "lambda$bootStrap$55",
        "e(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$54",
        "f(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$53",
        "b(Ljava/util/Map;Lnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$52",
        "g(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$51",
        "h(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$50",
        "a(Lnet/minecraft/nbt/CompoundTag;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$49",
        "i(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$48",
        "j(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$47",
        "a(Ljava/lang/String;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$46",
        "k(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$45",
        "l(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$44",
        "a(Lnet/minecraft/world/entity/EntityType;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$43",
        "a(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;ILnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$bootStrap$42",
        "a(Lnet/minecraft/tags/TagKey;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$41",
        "a(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "lambda$bootStrap$40",
        "m(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$39",
        "n(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$38",
        "b(Ljava/lang/String;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$37",
        "o(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$36",
        "p(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$35",
        "a(ZLnet/minecraft/world/level/GameType;Lnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$34",
        "b(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "lambda$bootStrap$33",
        "q(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$32",
        "r(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$31",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;": "lambda$bootStrap$30",
        "s(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$29",
        "t(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$28",
        "u(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$27",
        "v(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$26",
        "w(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$25",
        "x(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$24",
        "y(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$23",
        "z(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$22",
        "A(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$21",
        "B(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$20",
        "C(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$19",
        "D(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$18",
        "E(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$17",
        "F(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$16",
        "G(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$15",
        "H(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$14",
        "I(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$13",
        "J(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$12",
        "K(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$11",
        "L(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$10",
        "M(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$9",
        "N(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$8",
        "O(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)Z": "lambda$bootStrap$7",
        "P(Lnet/minecraft/commands/arguments/selector/EntitySelectorParser;)V": "lambda$bootStrap$6",
        "c(Ljava/lang/String;ZLnet/minecraft/world/entity/Entity;)Z": "lambda$bootStrap$5",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$4",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "d(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "e(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/synchronization/ArgumentTypeInfo": {
      "methods": {
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack"
      }
    },
    "net/minecraft/commands/synchronization/ArgumentTypeInfos": {
      "fields": {
        "a": "BY_CLASS"
      },
      "methods": {
        "b(Ljava/lang/Class;)Ljava/lang/Class;": "fixClassType",
        "a(Ljava/lang/Class;)Z": "isClassRecognized",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo;": "byClass",
        "b(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack"
      }
    },
    "net/minecraft/commands/synchronization/ArgumentUtils": {
      "fields": {
        "a": "LOGGER",
        "b": "NUMBER_FLAG_MIN",
        "c": "NUMBER_FLAG_MAX"
      },
      "methods": {
        "a(ZZ)I": "createNumberFlags",
        "a(B)Z": "numberHasMin",
        "b(B)Z": "numberHasMax",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;)V": "serializeCap",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/commands/synchronization/ArgumentTypeInfo;Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;)V": "serializeCap",
        "a(Lcom/google/gson/JsonObject;Lcom/mojang/brigadier/arguments/ArgumentType;)V": "serializeArgumentToJson",
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lcom/mojang/brigadier/tree/CommandNode;)Lcom/google/gson/JsonObject;": "serializeNodeToJson",
        "a(Lcom/mojang/brigadier/tree/CommandNode;)Ljava/util/Set;": "findUsedArgumentTypes",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Ljava/util/Set;Ljava/util/Set;)V": "findUsedArgumentTypes",
        "a(Ljava/util/Set;Ljava/util/Set;Lcom/mojang/brigadier/tree/CommandNode;)V": "lambda$findUsedArgumentTypes$0"
      }
    },
    "net/minecraft/commands/synchronization/SingletonArgumentInfo": {
      "fields": {
        "a": "template"
      },
      "methods": {
        "a(Ljava/util/function/Supplier;)Lnet/minecraft/commands/synchronization/SingletonArgumentInfo;": "contextFree",
        "a(Ljava/util/function/Function;)Lnet/minecraft/commands/synchronization/SingletonArgumentInfo;": "contextAware",
        "a(Lnet/minecraft/commands/synchronization/SingletonArgumentInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/commands/synchronization/SingletonArgumentInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/SingletonArgumentInfo$Template;": "deserializeFromNetwork",
        "b(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/SingletonArgumentInfo$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Ljava/util/function/Supplier;Lnet/minecraft/commands/CommandBuildContext;)Lcom/mojang/brigadier/arguments/ArgumentType;": "lambda$contextFree$0"
      }
    },
    "net/minecraft/commands/synchronization/CompletionProviders": {
      "fields": {
        "e": "PROVIDERS_BY_NAME",
        "f": "DEFAULT_NAME",
        "a": "ASK_SERVER",
        "b": "ALL_RECIPES",
        "c": "AVAILABLE_SOUNDS",
        "d": "SUMMONABLE_ENTITIES"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/mojang/brigadier/suggestion/SuggestionProvider;)Lcom/mojang/brigadier/suggestion/SuggestionProvider;": "register",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/brigadier/suggestion/SuggestionProvider;": "getProvider",
        "a(Lcom/mojang/brigadier/suggestion/SuggestionProvider;)Lnet/minecraft/resources/ResourceLocation;": "getName",
        "b(Lcom/mojang/brigadier/suggestion/SuggestionProvider;)Lcom/mojang/brigadier/suggestion/SuggestionProvider;": "safelySwap",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$5",
        "a(Lnet/minecraft/world/entity/EntityType;)Lcom/mojang/brigadier/Message;": "lambda$static$4",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/world/entity/EntityType;)Z": "lambda$static$3",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$2",
        "c(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$1",
        "d(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$0"
      }
    },
    "net/minecraft/commands/synchronization/brigadier/DoubleArgumentInfo": {
      "methods": {
        "a(Lnet/minecraft/commands/synchronization/brigadier/DoubleArgumentInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/brigadier/DoubleArgumentInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/brigadier/DoubleArgumentInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lcom/mojang/brigadier/arguments/DoubleArgumentType;)Lnet/minecraft/commands/synchronization/brigadier/DoubleArgumentInfo$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork"
      }
    },
    "net/minecraft/commands/synchronization/brigadier/FloatArgumentInfo": {
      "methods": {
        "a(Lnet/minecraft/commands/synchronization/brigadier/FloatArgumentInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/brigadier/FloatArgumentInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/brigadier/FloatArgumentInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lcom/mojang/brigadier/arguments/FloatArgumentType;)Lnet/minecraft/commands/synchronization/brigadier/FloatArgumentInfo$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork"
      }
    },
    "net/minecraft/commands/synchronization/brigadier/IntegerArgumentInfo": {
      "methods": {
        "a(Lnet/minecraft/commands/synchronization/brigadier/IntegerArgumentInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/brigadier/IntegerArgumentInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/brigadier/IntegerArgumentInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lcom/mojang/brigadier/arguments/IntegerArgumentType;)Lnet/minecraft/commands/synchronization/brigadier/IntegerArgumentInfo$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork"
      }
    },
    "net/minecraft/commands/synchronization/brigadier/LongArgumentInfo": {
      "methods": {
        "a(Lnet/minecraft/commands/synchronization/brigadier/LongArgumentInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/brigadier/LongArgumentInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/brigadier/LongArgumentInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lcom/mojang/brigadier/arguments/LongArgumentType;)Lnet/minecraft/commands/synchronization/brigadier/LongArgumentInfo$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork"
      }
    },
    "net/minecraft/commands/synchronization/brigadier/ArgumentSerializerString": {
      "methods": {
        "a(Lnet/minecraft/commands/synchronization/brigadier/StringArgumentSerializer$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/brigadier/StringArgumentSerializer$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/brigadier/StringArgumentSerializer$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "a(Lcom/mojang/brigadier/arguments/StringArgumentType;)Lnet/minecraft/commands/synchronization/brigadier/StringArgumentSerializer$Template;": "unpack",
        "a(Lcom/mojang/brigadier/arguments/ArgumentType;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "unpack",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lcom/google/gson/JsonObject;)V": "serializeToJson",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;": "deserializeFromNetwork",
        "a(Lnet/minecraft/commands/synchronization/ArgumentTypeInfo$Template;Lnet/minecraft/network/FriendlyByteBuf;)V": "serializeToNetwork"
      }
    },
    "net/minecraft/core/EnumAxisCycle": {
      "fields": {
        "a": "NONE",
        "b": "FORWARD",
        "c": "BACKWARD",
        "d": "AXIS_VALUES",
        "e": "VALUES",
        "f": "$VALUES"
      },
      "methods": {
        "a(IIILnet/minecraft/core/Direction$Axis;)I": "cycle",
        "a(DDDLnet/minecraft/core/Direction$Axis;)D": "cycle",
        "a(Lnet/minecraft/core/Direction$Axis;)Lnet/minecraft/core/Direction$Axis;": "cycle",
        "a()Lnet/minecraft/core/AxisCycle;": "inverse",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/core/Direction$Axis;)Lnet/minecraft/core/AxisCycle;": "between",
        "b()[Lnet/minecraft/core/AxisCycle;": "$values"
      }
    },
    "net/minecraft/core/BlockPosition": {
      "fields": {
        "a": "CODEC",
        "d": "LOGGER",
        "b": "ZERO",
        "e": "PACKED_X_LENGTH",
        "h": "PACKED_Z_LENGTH",
        "c": "PACKED_Y_LENGTH",
        "i": "PACKED_X_MASK",
        "j": "PACKED_Y_MASK",
        "k": "PACKED_Z_MASK",
        "l": "Y_OFFSET",
        "m": "Z_OFFSET",
        "n": "X_OFFSET"
      },
      "methods": {
        "a(JLnet/minecraft/core/Direction;)J": "offset",
        "a(JIII)J": "offset",
        "a(J)I": "getX",
        "b(J)I": "getY",
        "c(J)I": "getZ",
        "d(J)Lnet/minecraft/core/BlockPos;": "of",
        "a(DDD)Lnet/minecraft/core/BlockPos;": "containing",
        "a()J": "asLong",
        "a(III)J": "asLong",
        "e(J)J": "getFlatIndex",
        "b(III)Lnet/minecraft/core/BlockPos;": "offset",
        "b()Lnet/minecraft/world/phys/Vec3;": "getCenter",
        "a(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;": "offset",
        "b(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;": "subtract",
        "a(I)Lnet/minecraft/core/BlockPos;": "multiply",
        "c()Lnet/minecraft/core/BlockPos;": "above",
        "b(I)Lnet/minecraft/core/BlockPos;": "above",
        "d()Lnet/minecraft/core/BlockPos;": "below",
        "c(I)Lnet/minecraft/core/BlockPos;": "below",
        "e()Lnet/minecraft/core/BlockPos;": "north",
        "d(I)Lnet/minecraft/core/BlockPos;": "north",
        "f()Lnet/minecraft/core/BlockPos;": "south",
        "e(I)Lnet/minecraft/core/BlockPos;": "south",
        "g()Lnet/minecraft/core/BlockPos;": "west",
        "f(I)Lnet/minecraft/core/BlockPos;": "west",
        "h()Lnet/minecraft/core/BlockPos;": "east",
        "g(I)Lnet/minecraft/core/BlockPos;": "east",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/BlockPos;": "relative",
        "a(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos;": "relative",
        "a(Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/BlockPos;": "relative",
        "a(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;": "rotate",
        "c(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;": "cross",
        "h(I)Lnet/minecraft/core/BlockPos;": "atY",
        "i()Lnet/minecraft/core/BlockPos;": "immutable",
        "j()Lnet/minecraft/core/BlockPos$MutableBlockPos;": "mutable",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;I)Ljava/lang/Iterable;": "randomInCube",
        "a(Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "squareOutSouthEast",
        "a(Lnet/minecraft/util/RandomSource;IIIIIII)Ljava/lang/Iterable;": "randomBetweenClosed",
        "a(Lnet/minecraft/core/BlockPos;III)Ljava/lang/Iterable;": "withinManhattan",
        "a(Lnet/minecraft/core/BlockPos;IILjava/util/function/Predicate;)Ljava/util/Optional;": "findClosestMatch",
        "b(Lnet/minecraft/core/BlockPos;III)Ljava/util/stream/Stream;": "withinManhattanStream",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/lang/Iterable;": "betweenClosed",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "betweenClosedStream",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Ljava/util/stream/Stream;": "betweenClosedStream",
        "a(Lnet/minecraft/world/phys/AABB;)Ljava/util/stream/Stream;": "betweenClosedStream",
        "a(IIIIII)Ljava/util/stream/Stream;": "betweenClosedStream",
        "b(IIIIII)Ljava/lang/Iterable;": "betweenClosed",
        "a(Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)Ljava/lang/Iterable;": "spiralAround",
        "a(Lnet/minecraft/core/BlockPos;IILjava/util/function/BiConsumer;Ljava/util/function/Predicate;)I": "breadthFirstTraversal",
        "d(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "cross",
        "b(Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/Vec3i;": "relative",
        "b(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/Vec3i;": "relative",
        "b(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Vec3i;": "relative",
        "i(I)Lnet/minecraft/core/Vec3i;": "east",
        "k()Lnet/minecraft/core/Vec3i;": "east",
        "j(I)Lnet/minecraft/core/Vec3i;": "west",
        "l()Lnet/minecraft/core/Vec3i;": "west",
        "k(I)Lnet/minecraft/core/Vec3i;": "south",
        "m()Lnet/minecraft/core/Vec3i;": "south",
        "l(I)Lnet/minecraft/core/Vec3i;": "north",
        "n()Lnet/minecraft/core/Vec3i;": "north",
        "m(I)Lnet/minecraft/core/Vec3i;": "below",
        "o()Lnet/minecraft/core/Vec3i;": "below",
        "n(I)Lnet/minecraft/core/Vec3i;": "above",
        "p()Lnet/minecraft/core/Vec3i;": "above",
        "o(I)Lnet/minecraft/core/Vec3i;": "multiply",
        "e(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "subtract",
        "f(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "offset",
        "c(III)Lnet/minecraft/core/Vec3i;": "offset",
        "a(Ljava/util/Queue;ILnet/minecraft/core/BlockPos;)V": "lambda$breadthFirstTraversal$7",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;I)Ljava/util/Iterator;": "lambda$spiralAround$6",
        "c(IIIIII)Ljava/util/Iterator;": "lambda$betweenClosed$5",
        "a(IIIIIII)Ljava/util/Iterator;": "lambda$withinManhattan$4",
        "a(IILnet/minecraft/util/RandomSource;IIIII)Ljava/util/Iterator;": "lambda$randomBetweenClosed$3",
        "b(Lnet/minecraft/core/BlockPos;)Ljava/util/stream/IntStream;": "lambda$static$2",
        "a(Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "a([I)Lnet/minecraft/core/BlockPos;": "lambda$static$0"
      }
    },
    "net/minecraft/core/BlockPosition$MutableBlockPosition": {
      "methods": {
        "b(III)Lnet/minecraft/core/BlockPos;": "offset",
        "a(I)Lnet/minecraft/core/BlockPos;": "multiply",
        "a(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos;": "relative",
        "a(Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/BlockPos;": "relative",
        "a(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;": "rotate",
        "d(III)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "set",
        "b(DDD)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "set",
        "g(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "set",
        "f(J)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "set",
        "a(Lnet/minecraft/core/AxisCycle;III)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "set",
        "a(Lnet/minecraft/core/Vec3i;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "setWithOffset",
        "a(Lnet/minecraft/core/Vec3i;III)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "setWithOffset",
        "a(Lnet/minecraft/core/Vec3i;Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "setWithOffset",
        "c(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "move",
        "c(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "move",
        "e(III)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "move",
        "h(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "move",
        "a(Lnet/minecraft/core/Direction$Axis;II)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "clamp",
        "p(I)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "setX",
        "q(I)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "setY",
        "r(I)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "setZ",
        "i()Lnet/minecraft/core/BlockPos;": "immutable",
        "d(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "cross",
        "b(Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/Vec3i;": "relative",
        "b(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/Vec3i;": "relative",
        "b(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Vec3i;": "relative",
        "i(I)Lnet/minecraft/core/Vec3i;": "east",
        "k()Lnet/minecraft/core/Vec3i;": "east",
        "j(I)Lnet/minecraft/core/Vec3i;": "west",
        "l()Lnet/minecraft/core/Vec3i;": "west",
        "k(I)Lnet/minecraft/core/Vec3i;": "south",
        "m()Lnet/minecraft/core/Vec3i;": "south",
        "l(I)Lnet/minecraft/core/Vec3i;": "north",
        "n()Lnet/minecraft/core/Vec3i;": "north",
        "m(I)Lnet/minecraft/core/Vec3i;": "below",
        "o()Lnet/minecraft/core/Vec3i;": "below",
        "n(I)Lnet/minecraft/core/Vec3i;": "above",
        "p()Lnet/minecraft/core/Vec3i;": "above",
        "o(I)Lnet/minecraft/core/Vec3i;": "multiply",
        "e(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "subtract",
        "f(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "offset",
        "c(III)Lnet/minecraft/core/Vec3i;": "offset",
        "s(I)Lnet/minecraft/core/Vec3i;": "setZ",
        "t(I)Lnet/minecraft/core/Vec3i;": "setY",
        "u(I)Lnet/minecraft/core/Vec3i;": "setX"
      }
    },
    "net/minecraft/core/ISourceBlock": {
      "methods": {
        "a()D": "x",
        "b()D": "y",
        "c()D": "z",
        "d()Lnet/minecraft/core/BlockPos;": "getPos",
        "e()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "f()Lnet/minecraft/world/level/block/entity/BlockEntity;": "getEntity",
        "g()Lnet/minecraft/server/level/ServerLevel;": "getLevel"
      }
    },
    "net/minecraft/core/SourceBlock": {
      "fields": {
        "a": "level",
        "b": "pos"
      },
      "methods": {
        "g()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "a()D": "x",
        "b()D": "y",
        "c()D": "z",
        "d()Lnet/minecraft/core/BlockPos;": "getPos",
        "e()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "f()Lnet/minecraft/world/level/block/entity/BlockEntity;": "getEntity"
      }
    },
    "net/minecraft/core/CursorPosition": {
      "fields": {
        "a": "TYPE_INSIDE",
        "b": "TYPE_FACE",
        "c": "TYPE_EDGE",
        "d": "TYPE_CORNER",
        "e": "originX",
        "f": "originY",
        "g": "originZ",
        "h": "width",
        "i": "height",
        "j": "depth",
        "k": "end",
        "l": "index",
        "m": "x",
        "n": "y",
        "o": "z"
      },
      "methods": {
        "a()Z": "advance",
        "b()I": "nextX",
        "c()I": "nextY",
        "d()I": "nextZ",
        "e()I": "getNextType"
      }
    },
    "net/minecraft/core/DefaultedMappedRegistry": {
      "fields": {
        "b": "defaultKey",
        "c": "defaultValue"
      },
      "methods": {
        "a(ILnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder$Reference;": "registerMapping",
        "a(Ljava/lang/Object;)I": "getId",
        "b(Ljava/lang/Object;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/Object;": "get",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "getOptional",
        "a(I)Ljava/lang/Object;": "byId",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandom",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getDefaultKey",
        "b(ILnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder;": "registerMapping",
        "v()Ljava/util/Optional;": "lambda$getRandom$0"
      }
    },
    "net/minecraft/core/RegistryBlocks": {
      "methods": {
        "b(Ljava/lang/Object;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/Object;": "get",
        "a(I)Ljava/lang/Object;": "byId",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getDefaultKey"
      }
    },
    "net/minecraft/core/EnumDirection": {
      "fields": {
        "a": "DOWN",
        "b": "UP",
        "c": "NORTH",
        "d": "SOUTH",
        "e": "WEST",
        "f": "EAST",
        "g": "CODEC",
        "h": "VERTICAL_CODEC",
        "i": "data3d",
        "j": "oppositeIndex",
        "k": "data2d",
        "l": "name",
        "m": "axis",
        "n": "axisDirection",
        "o": "normal",
        "p": "VALUES",
        "q": "BY_3D_DATA",
        "r": "BY_2D_DATA",
        "s": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)[Lnet/minecraft/core/Direction;": "orderedByNearest",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)[Lnet/minecraft/core/Direction;": "makeDirectionArray",
        "a(Lorg/joml/Matrix4f;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "rotate",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/Collection;": "allShuffled",
        "a()Ljava/util/stream/Stream;": "stream",
        "b()Lorg/joml/Quaternionf;": "getRotation",
        "d()I": "get3DDataValue",
        "e()I": "get2DDataValue",
        "f()Lnet/minecraft/core/Direction$AxisDirection;": "getAxisDirection",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Direction$Axis;)Lnet/minecraft/core/Direction;": "getFacingAxis",
        "g()Lnet/minecraft/core/Direction;": "getOpposite",
        "a(Lnet/minecraft/core/Direction$Axis;)Lnet/minecraft/core/Direction;": "getClockWise",
        "b(Lnet/minecraft/core/Direction$Axis;)Lnet/minecraft/core/Direction;": "getCounterClockWise",
        "h()Lnet/minecraft/core/Direction;": "getClockWise",
        "r()Lnet/minecraft/core/Direction;": "getClockWiseX",
        "s()Lnet/minecraft/core/Direction;": "getCounterClockWiseX",
        "t()Lnet/minecraft/core/Direction;": "getClockWiseZ",
        "u()Lnet/minecraft/core/Direction;": "getCounterClockWiseZ",
        "i()Lnet/minecraft/core/Direction;": "getCounterClockWise",
        "j()I": "getStepX",
        "k()I": "getStepY",
        "l()I": "getStepZ",
        "m()Lorg/joml/Vector3f;": "step",
        "n()Ljava/lang/String;": "getName",
        "o()Lnet/minecraft/core/Direction$Axis;": "getAxis",
        "a(Ljava/lang/String;)Lnet/minecraft/core/Direction;": "byName",
        "a(I)Lnet/minecraft/core/Direction;": "from3DDataValue",
        "b(I)Lnet/minecraft/core/Direction;": "from2DDataValue",
        "a(III)Lnet/minecraft/core/Direction;": "fromDelta",
        "a(D)Lnet/minecraft/core/Direction;": "fromYRot",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/core/Direction$AxisDirection;)Lnet/minecraft/core/Direction;": "fromAxisAndDirection",
        "p()F": "toYRot",
        "b(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/core/Direction;": "getRandom",
        "a(DDD)Lnet/minecraft/core/Direction;": "getNearest",
        "a(FFF)Lnet/minecraft/core/Direction;": "getNearest",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/core/Direction;)Lcom/mojang/serialization/DataResult;": "verifyVertical",
        "a(Lnet/minecraft/core/Direction$AxisDirection;Lnet/minecraft/core/Direction$Axis;)Lnet/minecraft/core/Direction;": "get",
        "q()Lnet/minecraft/core/Vec3i;": "getNormal",
        "a(F)Z": "isFacingAngle",
        "v()Ljava/lang/String;": "lambda$verifyVertical$5",
        "c(I)[Lnet/minecraft/core/Direction;": "lambda$static$4",
        "b(Lnet/minecraft/core/Direction;)I": "lambda$static$3",
        "c(Lnet/minecraft/core/Direction;)Z": "lambda$static$2",
        "d(I)[Lnet/minecraft/core/Direction;": "lambda$static$1",
        "d(Lnet/minecraft/core/Direction;)I": "lambda$static$0",
        "w()[Lnet/minecraft/core/Direction;": "$values"
      }
    },
    "net/minecraft/core/EnumDirection$EnumAxis": {
      "fields": {
        "a": "X",
        "b": "Y",
        "c": "Z",
        "d": "VALUES",
        "e": "CODEC",
        "f": "name",
        "g": "$VALUES"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/core/Direction$Axis;": "byName",
        "a()Ljava/lang/String;": "getName",
        "b()Z": "isVertical",
        "d()Z": "isHorizontal",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/core/Direction$Axis;": "getRandom",
        "a(Lnet/minecraft/core/Direction;)Z": "test",
        "e()Lnet/minecraft/core/Direction$Plane;": "getPlane",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(III)I": "choose",
        "a(DDD)D": "choose",
        "f()[Lnet/minecraft/core/Direction$Axis;": "$values"
      }
    },
    "net/minecraft/core/EnumDirection$EnumAxisDirection": {
      "fields": {
        "a": "POSITIVE",
        "b": "NEGATIVE",
        "c": "step",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "a()I": "getStep",
        "b()Ljava/lang/String;": "getName",
        "c()Lnet/minecraft/core/Direction$AxisDirection;": "opposite",
        "d()[Lnet/minecraft/core/Direction$AxisDirection;": "$values"
      }
    },
    "net/minecraft/core/EnumDirection$EnumDirectionLimit": {
      "fields": {
        "a": "HORIZONTAL",
        "b": "VERTICAL",
        "c": "faces",
        "d": "axis",
        "e": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/core/Direction;": "getRandomDirection",
        "b(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/core/Direction$Axis;": "getRandomAxis",
        "a(Lnet/minecraft/core/Direction;)Z": "test",
        "a()Ljava/util/stream/Stream;": "stream",
        "c(Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "shuffledCopy",
        "b()[Lnet/minecraft/core/Direction$Plane;": "$values"
      }
    },
    "net/minecraft/core/EnumDirection8": {
      "fields": {
        "a": "NORTH",
        "b": "NORTH_EAST",
        "c": "EAST",
        "d": "SOUTH_EAST",
        "e": "SOUTH",
        "f": "SOUTH_WEST",
        "g": "WEST",
        "h": "NORTH_WEST",
        "i": "directions",
        "j": "step",
        "k": "$VALUES"
      },
      "methods": {
        "a()Ljava/util/Set;": "getDirections",
        "b()I": "getStepX",
        "c()I": "getStepZ",
        "d()[Lnet/minecraft/core/Direction8;": "$values"
      }
    },
    "net/minecraft/core/BlockPropertyJigsawOrientation": {
      "fields": {
        "a": "DOWN_EAST",
        "b": "DOWN_NORTH",
        "c": "DOWN_SOUTH",
        "d": "DOWN_WEST",
        "e": "UP_EAST",
        "f": "UP_NORTH",
        "g": "UP_SOUTH",
        "h": "UP_WEST",
        "i": "WEST_UP",
        "j": "EAST_UP",
        "k": "NORTH_UP",
        "l": "SOUTH_UP",
        "m": "LOOKUP_TOP_FRONT",
        "n": "name",
        "o": "top",
        "p": "front",
        "q": "$VALUES"
      },
      "methods": {
        "b(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)I": "lookupKey",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/FrontAndTop;": "fromFrontAndTop",
        "a()Lnet/minecraft/core/Direction;": "front",
        "b()Lnet/minecraft/core/Direction;": "top",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap;)V": "lambda$static$0",
        "d()[Lnet/minecraft/core/FrontAndTop;": "$values"
      }
    },
    "net/minecraft/core/GlobalPos": {
      "fields": {
        "a": "CODEC",
        "b": "dimension",
        "c": "pos"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/GlobalPos;": "of",
        "a()Lnet/minecraft/resources/ResourceKey;": "dimension",
        "b()Lnet/minecraft/core/BlockPos;": "pos",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/core/Holder": {
      "methods": {
        "a()Ljava/lang/Object;": "value",
        "b()Z": "isBound",
        "a(Lnet/minecraft/resources/ResourceLocation;)Z": "is",
        "a(Lnet/minecraft/resources/ResourceKey;)Z": "is",
        "a(Ljava/util/function/Predicate;)Z": "is",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "c()Ljava/util/stream/Stream;": "tags",
        "d()Lcom/mojang/datafixers/util/Either;": "unwrap",
        "e()Ljava/util/Optional;": "unwrapKey",
        "f()Lnet/minecraft/core/Holder$Kind;": "kind",
        "a(Lnet/minecraft/core/HolderOwner;)Z": "canSerializeIn",
        "a(Ljava/lang/Object;)Lnet/minecraft/core/Holder;": "direct"
      }
    },
    "net/minecraft/core/HolderGetter": {
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "get",
        "b(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/Holder$Reference;": "getOrThrow",
        "a(Lnet/minecraft/tags/TagKey;)Ljava/util/Optional;": "get",
        "b(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/core/HolderSet$Named;": "getOrThrow",
        "c(Lnet/minecraft/tags/TagKey;)Ljava/lang/IllegalStateException;": "lambda$getOrThrow$1",
        "c(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/IllegalStateException;": "lambda$getOrThrow$0"
      }
    },
    "net/minecraft/core/HolderLookup": {
      "methods": {
        "b()Ljava/util/stream/Stream;": "listElements",
        "c()Ljava/util/stream/Stream;": "listElementIds",
        "d()Ljava/util/stream/Stream;": "listTags",
        "e()Ljava/util/stream/Stream;": "listTagIds",
        "a(Ljava/util/function/Predicate;)Lnet/minecraft/core/HolderLookup;": "filterElements"
      }
    },
    "net/minecraft/core/HolderOwner": {
      "methods": {
        "a(Lnet/minecraft/core/HolderOwner;)Z": "canSerializeIn"
      }
    },
    "net/minecraft/core/HolderSet": {
      "methods": {
        "a()Ljava/util/stream/Stream;": "stream",
        "b()I": "size",
        "c()Lcom/mojang/datafixers/util/Either;": "unwrap",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandomElement",
        "a(I)Lnet/minecraft/core/Holder;": "get",
        "a(Lnet/minecraft/core/Holder;)Z": "contains",
        "a(Lnet/minecraft/core/HolderOwner;)Z": "canSerializeIn",
        "d()Ljava/util/Optional;": "unwrapKey",
        "a(Lnet/minecraft/core/HolderOwner;Lnet/minecraft/tags/TagKey;)Lnet/minecraft/core/HolderSet$Named;": "emptyNamed",
        "a([Lnet/minecraft/core/Holder;)Lnet/minecraft/core/HolderSet$Direct;": "direct",
        "a(Ljava/util/List;)Lnet/minecraft/core/HolderSet$Direct;": "direct",
        "a(Ljava/util/function/Function;[Ljava/lang/Object;)Lnet/minecraft/core/HolderSet$Direct;": "direct",
        "a(Ljava/util/function/Function;Ljava/util/List;)Lnet/minecraft/core/HolderSet$Direct;": "direct"
      }
    },
    "net/minecraft/core/HolderSet$Named": {
      "fields": {
        "a": "owner",
        "b": "key",
        "c": "contents"
      },
      "methods": {
        "b(Ljava/util/List;)V": "bind",
        "f()Lnet/minecraft/tags/TagKey;": "key",
        "e()Ljava/util/List;": "contents",
        "c()Lcom/mojang/datafixers/util/Either;": "unwrap",
        "d()Ljava/util/Optional;": "unwrapKey",
        "a(Lnet/minecraft/core/Holder;)Z": "contains",
        "a(Lnet/minecraft/core/HolderOwner;)Z": "canSerializeIn"
      }
    },
    "net/minecraft/core/Registry": {
      "fields": {
        "a": "DEFAULT"
      },
      "methods": {
        "a(Ljava/lang/Object;)I": "getId",
        "a(I)Ljava/lang/Object;": "byId",
        "b(I)Ljava/lang/Object;": "byIdOrThrow",
        "b()I": "size"
      }
    },
    "net/minecraft/core/RegistryBlockID": {
      "fields": {
        "b": "nextId",
        "c": "tToId",
        "d": "idToT"
      },
      "methods": {
        "a(Ljava/lang/Object;I)V": "addMapping",
        "b(Ljava/lang/Object;)V": "add",
        "a(Ljava/lang/Object;)I": "getId",
        "a(I)Ljava/lang/Object;": "byId",
        "c(I)Z": "contains",
        "b()I": "size"
      }
    },
    "net/minecraft/core/LayeredRegistryAccess": {
      "fields": {
        "a": "keys",
        "b": "values",
        "c": "composite"
      },
      "methods": {
        "d(Ljava/lang/Object;)I": "getLayerIndexOrThrow",
        "a(Ljava/lang/Object;)Lnet/minecraft/core/RegistryAccess$Frozen;": "getLayer",
        "b(Ljava/lang/Object;)Lnet/minecraft/core/RegistryAccess$Frozen;": "getAccessForLoading",
        "c(Ljava/lang/Object;)Lnet/minecraft/core/RegistryAccess$Frozen;": "getAccessFrom",
        "a(II)Lnet/minecraft/core/RegistryAccess$Frozen;": "getCompositeAccessForLayers",
        "a(Ljava/lang/Object;[Lnet/minecraft/core/RegistryAccess$Frozen;)Lnet/minecraft/core/LayeredRegistryAccess;": "replaceFrom",
        "a(Ljava/lang/Object;Ljava/util/List;)Lnet/minecraft/core/LayeredRegistryAccess;": "replaceFrom",
        "a()Lnet/minecraft/core/RegistryAccess$Frozen;": "compositeAccess",
        "a(Ljava/util/stream/Stream;)Ljava/util/Map;": "collectRegistries",
        "a(Ljava/util/Map;Lnet/minecraft/core/RegistryAccess;)V": "lambda$collectRegistries$2",
        "a(Ljava/util/Map;Lnet/minecraft/core/RegistryAccess$RegistryEntry;)V": "lambda$collectRegistries$1",
        "a(Ljava/util/List;)Ljava/util/List;": "lambda$new$0"
      }
    },
    "net/minecraft/core/RegistryMaterials": {
      "fields": {
        "b": "LOGGER",
        "c": "key",
        "d": "byId",
        "e": "toId",
        "f": "byLocation",
        "g": "byKey",
        "h": "byValue",
        "i": "lifecycles",
        "j": "registryLifecycle",
        "k": "tags",
        "l": "frozen",
        "m": "unregisteredIntrusiveHolders",
        "n": "holdersInOrder",
        "o": "nextId",
        "p": "lookup"
      },
      "methods": {
        "c()Lnet/minecraft/resources/ResourceKey;": "key",
        "a()Ljava/util/List;": "holdersInOrder",
        "v()V": "validateWrite",
        "g(Lnet/minecraft/resources/ResourceKey;)V": "validateWrite",
        "a(ILnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder$Reference;": "registerMapping",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder$Reference;": "register",
        "b(Ljava/lang/Object;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "c(Ljava/lang/Object;)Ljava/util/Optional;": "getResourceKey",
        "a(Ljava/lang/Object;)I": "getId",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/Object;": "get",
        "a(I)Ljava/lang/Object;": "byId",
        "c(I)Ljava/util/Optional;": "getHolder",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "getHolder",
        "d(Ljava/lang/Object;)Lnet/minecraft/core/Holder;": "wrapAsHolder",
        "h(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/Holder$Reference;": "getOrCreateHolderOrThrow",
        "b()I": "size",
        "e(Ljava/lang/Object;)Lcom/mojang/serialization/Lifecycle;": "lifecycle",
        "d()Lcom/mojang/serialization/Lifecycle;": "registryLifecycle",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/Object;": "get",
        "a(Lnet/minecraft/core/Holder$Reference;)Ljava/lang/Object;": "getValueFromNullable",
        "e()Ljava/util/Set;": "keySet",
        "f()Ljava/util/Set;": "registryKeySet",
        "g()Ljava/util/Set;": "entrySet",
        "h()Ljava/util/stream/Stream;": "holders",
        "i()Ljava/util/stream/Stream;": "getTags",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/core/HolderSet$Named;": "getOrCreateTag",
        "d(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/core/HolderSet$Named;": "createTag",
        "j()Ljava/util/stream/Stream;": "getTagNames",
        "k()Z": "isEmpty",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandom",
        "c(Lnet/minecraft/resources/ResourceLocation;)Z": "containsKey",
        "c(Lnet/minecraft/resources/ResourceKey;)Z": "containsKey",
        "f(Ljava/lang/Object;)Lnet/minecraft/core/Holder$Reference;": "createIntrusiveHolder",
        "b(Lnet/minecraft/tags/TagKey;)Ljava/util/Optional;": "getTag",
        "a(Ljava/util/Map;)V": "bindTags",
        "m()V": "resetTags",
        "n()Lnet/minecraft/core/HolderGetter;": "createRegistrationLookup",
        "o()Lnet/minecraft/core/HolderOwner;": "holderOwner",
        "p()Lnet/minecraft/core/HolderLookup$RegistryLookup;": "asLookup",
        "b(ILnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder;": "registerMapping",
        "b(Lnet/minecraft/core/Holder$Reference;)V": "lambda$resetTags$14",
        "a(Lnet/minecraft/core/HolderSet$Named;)V": "lambda$resetTags$13",
        "a(Ljava/util/Map;Lnet/minecraft/tags/TagKey;Ljava/util/List;)V": "lambda$bindTags$12",
        "e(Lnet/minecraft/tags/TagKey;)Ljava/lang/String;": "lambda$bindTags$11",
        "b(Ljava/util/Map;Lnet/minecraft/tags/TagKey;Ljava/util/List;)V": "lambda$bindTags$10",
        "a(Ljava/util/Map;Lnet/minecraft/core/Holder$Reference;)V": "lambda$bindTags$9",
        "g(Ljava/lang/Object;)Lnet/minecraft/core/Holder$Reference;": "lambda$createIntrusiveHolder$8",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/resources/ResourceLocation;": "lambda$freeze$7",
        "b(Ljava/util/Map$Entry;)Z": "lambda$freeze$6",
        "a(Ljava/lang/Object;Lnet/minecraft/core/Holder$Reference;)V": "lambda$freeze$5",
        "c(Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$getTags$4",
        "i(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/Holder$Reference;": "lambda$getOrCreateHolderOrThrow$3",
        "j(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/Holder$Reference;": "lambda$registerMapping$2",
        "k(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$new$1",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntOpenCustomHashMap;)V": "lambda$new$0"
      }
    },
    "net/minecraft/core/NonNullList": {
      "fields": {
        "a": "list",
        "b": "defaultValue"
      },
      "methods": {
        "a()Lnet/minecraft/core/NonNullList;": "create",
        "a(I)Lnet/minecraft/core/NonNullList;": "createWithCapacity",
        "a(ILjava/lang/Object;)Lnet/minecraft/core/NonNullList;": "withSize",
        "a(Ljava/lang/Object;[Ljava/lang/Object;)Lnet/minecraft/core/NonNullList;": "of"
      }
    },
    "net/minecraft/core/IPosition": {
      "methods": {
        "a()D": "x",
        "b()D": "y",
        "c()D": "z"
      }
    },
    "net/minecraft/core/Position": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z"
      },
      "methods": {
        "a()D": "x",
        "b()D": "y",
        "c()D": "z"
      }
    },
    "net/minecraft/core/QuartPos": {
      "fields": {
        "a": "BITS",
        "b": "SIZE",
        "c": "MASK",
        "d": "SECTION_TO_QUARTS_BITS"
      },
      "methods": {
        "a(I)I": "fromBlock",
        "b(I)I": "quartLocal",
        "c(I)I": "toBlock",
        "d(I)I": "fromSection",
        "e(I)I": "toSection"
      }
    },
    "net/minecraft/core/IRegistry": {
      "methods": {
        "c()Lnet/minecraft/resources/ResourceKey;": "key",
        "q()Lcom/mojang/serialization/Codec;": "byNameCodec",
        "r()Lcom/mojang/serialization/Codec;": "holderByNameCodec",
        "b(Ljava/lang/Object;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "c(Ljava/lang/Object;)Ljava/util/Optional;": "getResourceKey",
        "a(Ljava/lang/Object;)I": "getId",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/Object;": "get",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/Object;": "get",
        "e(Ljava/lang/Object;)Lcom/mojang/serialization/Lifecycle;": "lifecycle",
        "d()Lcom/mojang/serialization/Lifecycle;": "registryLifecycle",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "getOptional",
        "d(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "getOptional",
        "e(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/Object;": "getOrThrow",
        "e()Ljava/util/Set;": "keySet",
        "g()Ljava/util/Set;": "entrySet",
        "f()Ljava/util/Set;": "registryKeySet",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandom",
        "s()Ljava/util/stream/Stream;": "stream",
        "c(Lnet/minecraft/resources/ResourceLocation;)Z": "containsKey",
        "c(Lnet/minecraft/resources/ResourceKey;)Z": "containsKey",
        "f(Ljava/lang/Object;)Lnet/minecraft/core/Holder$Reference;": "createIntrusiveHolder",
        "c(I)Ljava/util/Optional;": "getHolder",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "getHolder",
        "d(Ljava/lang/Object;)Lnet/minecraft/core/Holder;": "wrapAsHolder",
        "f(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/Holder$Reference;": "getHolderOrThrow",
        "h()Ljava/util/stream/Stream;": "holders",
        "b(Lnet/minecraft/tags/TagKey;)Ljava/util/Optional;": "getTag",
        "c(Lnet/minecraft/tags/TagKey;)Ljava/lang/Iterable;": "getTagOrEmpty",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/core/HolderSet$Named;": "getOrCreateTag",
        "i()Ljava/util/stream/Stream;": "getTags",
        "j()Ljava/util/stream/Stream;": "getTagNames",
        "m()V": "resetTags",
        "a(Ljava/util/Map;)V": "bindTags",
        "t()Lnet/minecraft/core/IdMap;": "asHolderIdMap",
        "o()Lnet/minecraft/core/HolderOwner;": "holderOwner",
        "p()Lnet/minecraft/core/HolderLookup$RegistryLookup;": "asLookup",
        "u()Lnet/minecraft/core/HolderLookup$RegistryLookup;": "asTagAddingLookup",
        "g(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/IllegalStateException;": "lambda$getHolderOrThrow$16",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/Object;": "lambda$keys$15",
        "a(Lnet/minecraft/core/Holder;)Lcom/mojang/serialization/Lifecycle;": "lambda$holderByNameCodec$14",
        "b(Lnet/minecraft/core/Holder;)Lcom/mojang/serialization/Lifecycle;": "lambda$holderByNameCodec$13",
        "c(Lnet/minecraft/core/Holder;)Lcom/mojang/serialization/DataResult;": "lambda$holderByNameCodec$12",
        "d(Lnet/minecraft/core/Holder;)Lcom/mojang/serialization/DataResult;": "lambda$holderByNameCodec$11",
        "e(Lnet/minecraft/core/Holder;)Ljava/lang/String;": "lambda$holderByNameCodec$10",
        "d(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/serialization/DataResult;": "lambda$holderByNameCodec$9",
        "e(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/serialization/DataResult;": "lambda$holderByNameCodec$8",
        "f(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "lambda$holderByNameCodec$7",
        "g(Ljava/lang/Object;)I": "lambda$byNameCodec$6",
        "h(Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$byNameCodec$5",
        "i(Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$byNameCodec$4",
        "j(Ljava/lang/Object;)Ljava/lang/String;": "lambda$byNameCodec$3",
        "g(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/serialization/DataResult;": "lambda$byNameCodec$2",
        "h(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/serialization/DataResult;": "lambda$byNameCodec$1",
        "i(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "lambda$byNameCodec$0"
      }
    },
    "net/minecraft/core/IRegistryCustom": {
      "fields": {
        "a": "LOGGER",
        "b": "EMPTY"
      },
      "methods": {
        "c(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "registry",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "lookup",
        "b()Ljava/util/stream/Stream;": "registries",
        "c()Lnet/minecraft/core/RegistryAccess$Frozen;": "freeze",
        "d()Lcom/mojang/serialization/Lifecycle;": "allRegistriesLifecycle",
        "a(Lnet/minecraft/core/RegistryAccess$RegistryEntry;)Lcom/mojang/serialization/Lifecycle;": "lambda$allRegistriesLifecycle$1",
        "f(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/IllegalStateException;": "lambda$registryOrThrow$0"
      }
    },
    "net/minecraft/core/IRegistryCustom$Dimension": {},
    "net/minecraft/core/RegistryCodecs": {
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/MapCodec;)Lcom/mojang/serialization/MapCodec;": "withNameAndId",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Lifecycle;Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "networkCodec",
        "b(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Lifecycle;Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "fullCodec",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "homogeneousList",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;Z)Lcom/mojang/serialization/Codec;": "homogeneousList",
        "a(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/Codec;": "homogeneousList",
        "a(Lnet/minecraft/resources/ResourceKey;Z)Lcom/mojang/serialization/Codec;": "homogeneousList",
        "a(Lnet/minecraft/core/WritableRegistry;Lcom/mojang/serialization/Lifecycle;Lnet/minecraft/resources/ResourceKey;Ljava/lang/Object;)V": "lambda$fullCodec$3",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/MapCodec;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$withNameAndId$0"
      }
    },
    "net/minecraft/core/RegistrySetBuilder": {
      "fields": {
        "a": "entries"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderLookup$RegistryLookup;)Lnet/minecraft/core/HolderGetter;": "wrapContextLookup",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Lifecycle;Lnet/minecraft/core/RegistrySetBuilder$RegistryBootstrap;)Lnet/minecraft/core/RegistrySetBuilder;": "add",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/RegistrySetBuilder$RegistryBootstrap;)Lnet/minecraft/core/RegistrySetBuilder;": "add",
        "b(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/core/RegistrySetBuilder$BuildState;": "createState",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/core/HolderLookup$Provider;": "build",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/core/HolderLookup$Provider;)Lnet/minecraft/core/HolderLookup$Provider;": "buildPatch",
        "a(Lnet/minecraft/core/RegistryAccess$RegistryEntry;)Lnet/minecraft/core/HolderLookup$RegistryLookup;": "lambda$buildPatch$6",
        "a(Ljava/util/Map;Lnet/minecraft/core/RegistrySetBuilder$RegistryContents;)V": "lambda$buildPatch$5",
        "a(Lnet/minecraft/core/RegistrySetBuilder$BuildState;Lnet/minecraft/core/RegistrySetBuilder$RegistryStub;)Lnet/minecraft/core/RegistrySetBuilder$RegistryContents;": "lambda$buildPatch$4",
        "b(Ljava/util/Map;Lnet/minecraft/core/RegistrySetBuilder$RegistryContents;)V": "lambda$buildPatch$3",
        "b(Lnet/minecraft/core/RegistrySetBuilder$BuildState;Lnet/minecraft/core/RegistrySetBuilder$RegistryStub;)Lnet/minecraft/core/HolderLookup$RegistryLookup;": "lambda$build$2",
        "b(Lnet/minecraft/core/RegistryAccess$RegistryEntry;)Lnet/minecraft/core/HolderLookup$RegistryLookup;": "lambda$build$1",
        "c(Lnet/minecraft/core/RegistrySetBuilder$BuildState;Lnet/minecraft/core/RegistrySetBuilder$RegistryStub;)V": "lambda$createState$0"
      }
    },
    "net/minecraft/core/RegistrySynchronization": {
      "fields": {
        "b": "NETWORKABLE_REGISTRIES",
        "a": "NETWORK_CODEC"
      },
      "methods": {
        "a(Lcom/google/common/collect/ImmutableMap$Builder;Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;)V": "put",
        "a(Lnet/minecraft/core/RegistryAccess;)Ljava/util/stream/Stream;": "ownedNetworkableRegistries",
        "a(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "getNetworkCodec",
        "a()Lcom/mojang/serialization/Codec;": "makeNetworkCodec",
        "a(Lcom/mojang/serialization/codecs/UnboundedMapCodec;)Lcom/mojang/serialization/Codec;": "captureMap",
        "a(Lnet/minecraft/core/LayeredRegistryAccess;)Ljava/util/stream/Stream;": "networkedRegistries",
        "b(Lnet/minecraft/core/LayeredRegistryAccess;)Ljava/util/stream/Stream;": "networkSafeRegistries",
        "b(Lnet/minecraft/core/RegistryAccess;)Ljava/util/Map;": "lambda$captureMap$10",
        "b(Lnet/minecraft/core/RegistryAccess$RegistryEntry;)Lnet/minecraft/resources/ResourceKey;": "lambda$captureMap$8",
        "b(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$makeNetworkCodec$7",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$makeNetworkCodec$6",
        "c(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$getNetworkCodec$4",
        "d(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$getNetworkCodec$3",
        "a(Lnet/minecraft/core/RegistrySynchronization$NetworkedRegistryData;)Lcom/mojang/serialization/Codec;": "lambda$getNetworkCodec$2",
        "c(Lnet/minecraft/core/RegistryAccess$RegistryEntry;)Z": "lambda$ownedNetworkableRegistries$1",
        "b()Lcom/google/common/collect/ImmutableMap;": "lambda$static$0"
      }
    },
    "net/minecraft/core/Vector3f": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z"
      },
      "methods": {
        "a()Lnet/minecraft/nbt/ListTag;": "save",
        "b()F": "getX",
        "c()F": "getY",
        "d()F": "getZ",
        "e()F": "getWrappedX",
        "f()F": "getWrappedY",
        "g()F": "getWrappedZ"
      }
    },
    "net/minecraft/core/SectionPosition": {
      "fields": {
        "a": "SECTION_BITS",
        "b": "SECTION_SIZE",
        "c": "SECTION_MASK",
        "d": "SECTION_HALF_SIZE",
        "e": "SECTION_MAX_INDEX",
        "h": "PACKED_X_LENGTH",
        "i": "PACKED_Y_LENGTH",
        "j": "PACKED_Z_LENGTH",
        "k": "PACKED_X_MASK",
        "l": "PACKED_Y_MASK",
        "m": "PACKED_Z_MASK",
        "n": "Y_OFFSET",
        "o": "Z_OFFSET",
        "p": "X_OFFSET",
        "q": "RELATIVE_X_SHIFT",
        "r": "RELATIVE_Y_SHIFT",
        "s": "RELATIVE_Z_SHIFT"
      },
      "methods": {
        "a(III)Lnet/minecraft/core/SectionPos;": "of",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/SectionPos;": "of",
        "a(Lnet/minecraft/world/level/ChunkPos;I)Lnet/minecraft/core/SectionPos;": "of",
        "a(Lnet/minecraft/world/level/entity/EntityAccess;)Lnet/minecraft/core/SectionPos;": "of",
        "a(J)Lnet/minecraft/core/SectionPos;": "of",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/core/SectionPos;": "bottomOf",
        "a(JLnet/minecraft/core/Direction;)J": "offset",
        "a(JIII)J": "offset",
        "a(D)I": "posToSectionCoord",
        "a(I)I": "blockToSectionCoord",
        "b(D)I": "blockToSectionCoord",
        "b(I)I": "sectionRelative",
        "b(Lnet/minecraft/core/BlockPos;)S": "sectionRelativePos",
        "a(S)I": "sectionRelativeX",
        "b(S)I": "sectionRelativeY",
        "c(S)I": "sectionRelativeZ",
        "d(S)I": "relativeToBlockX",
        "e(S)I": "relativeToBlockY",
        "f(S)I": "relativeToBlockZ",
        "g(S)Lnet/minecraft/core/BlockPos;": "relativeToBlockPos",
        "c(I)I": "sectionToBlockCoord",
        "a(II)I": "sectionToBlockCoord",
        "b(J)I": "x",
        "c(J)I": "y",
        "d(J)I": "z",
        "a()I": "x",
        "b()I": "y",
        "c()I": "z",
        "d()I": "minBlockX",
        "e()I": "minBlockY",
        "f()I": "minBlockZ",
        "g()I": "maxBlockX",
        "h()I": "maxBlockY",
        "i()I": "maxBlockZ",
        "e(J)J": "blockToSection",
        "b(II)J": "getZeroNode",
        "f(J)J": "getZeroNode",
        "j()Lnet/minecraft/core/BlockPos;": "origin",
        "q()Lnet/minecraft/core/BlockPos;": "center",
        "r()Lnet/minecraft/world/level/ChunkPos;": "chunk",
        "c(Lnet/minecraft/core/BlockPos;)J": "asLong",
        "b(III)J": "asLong",
        "s()J": "asLong",
        "d(III)Lnet/minecraft/core/SectionPos;": "offset",
        "t()Ljava/util/stream/Stream;": "blocksInside",
        "a(Lnet/minecraft/core/SectionPos;I)Ljava/util/stream/Stream;": "cube",
        "a(Lnet/minecraft/world/level/ChunkPos;III)Ljava/util/stream/Stream;": "aroundChunk",
        "a(IIIIII)Ljava/util/stream/Stream;": "betweenClosedStream",
        "a(Lnet/minecraft/core/BlockPos;Lit/unimi/dsi/fastutil/longs/LongConsumer;)V": "aroundAndAtBlockPos",
        "a(JLit/unimi/dsi/fastutil/longs/LongConsumer;)V": "aroundAndAtBlockPos",
        "a(IIILit/unimi/dsi/fastutil/longs/LongConsumer;)V": "aroundAndAtBlockPos",
        "c(III)Lnet/minecraft/core/Vec3i;": "offset"
      }
    },
    "net/minecraft/core/UUIDUtil": {
      "fields": {
        "a": "CODEC",
        "b": "STRING_CODEC",
        "c": "AUTHLIB_CODEC",
        "d": "UUID_BYTES",
        "e": "UUID_PREFIX_OFFLINE_PLAYER"
      },
      "methods": {
        "a([I)Ljava/util/UUID;": "uuidFromIntArray",
        "a(Ljava/util/UUID;)[I": "uuidToIntArray",
        "a(JJ)[I": "leastMostToIntArray",
        "b(Ljava/util/UUID;)[B": "uuidToByteArray",
        "a(Lcom/mojang/serialization/Dynamic;)Ljava/util/UUID;": "readUUID",
        "a(Lcom/mojang/authlib/GameProfile;)Ljava/util/UUID;": "getOrCreatePlayerUUID",
        "a(Ljava/lang/String;)Ljava/util/UUID;": "createOfflinePlayerUUID",
        "a(Lcom/mojang/datafixers/util/Either;)Ljava/util/UUID;": "lambda$static$8",
        "c(Ljava/util/UUID;)Ljava/util/UUID;": "lambda$static$7",
        "d(Ljava/util/UUID;)Ljava/util/UUID;": "lambda$static$6",
        "b(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$5",
        "a(Ljava/lang/String;Ljava/lang/IllegalArgumentException;)Ljava/lang/String;": "lambda$static$4",
        "c(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$3",
        "b(Ljava/lang/String;Ljava/lang/IllegalArgumentException;)Ljava/lang/String;": "lambda$static$2",
        "e(Ljava/util/UUID;)Ljava/util/stream/IntStream;": "lambda$static$1",
        "a(Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;": "lambda$static$0"
      }
    },
    "net/minecraft/core/BaseBlockPosition": {
      "fields": {
        "f": "CODEC",
        "g": "ZERO",
        "a": "x",
        "b": "y",
        "c": "z"
      },
      "methods": {
        "v(I)Lcom/mojang/serialization/Codec;": "offsetCodec",
        "i(Lnet/minecraft/core/Vec3i;)I": "compareTo",
        "u()I": "getX",
        "v()I": "getY",
        "w()I": "getZ",
        "u(I)Lnet/minecraft/core/Vec3i;": "setX",
        "t(I)Lnet/minecraft/core/Vec3i;": "setY",
        "s(I)Lnet/minecraft/core/Vec3i;": "setZ",
        "c(III)Lnet/minecraft/core/Vec3i;": "offset",
        "f(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "offset",
        "e(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "subtract",
        "o(I)Lnet/minecraft/core/Vec3i;": "multiply",
        "p()Lnet/minecraft/core/Vec3i;": "above",
        "n(I)Lnet/minecraft/core/Vec3i;": "above",
        "o()Lnet/minecraft/core/Vec3i;": "below",
        "m(I)Lnet/minecraft/core/Vec3i;": "below",
        "n()Lnet/minecraft/core/Vec3i;": "north",
        "l(I)Lnet/minecraft/core/Vec3i;": "north",
        "m()Lnet/minecraft/core/Vec3i;": "south",
        "k(I)Lnet/minecraft/core/Vec3i;": "south",
        "l()Lnet/minecraft/core/Vec3i;": "west",
        "j(I)Lnet/minecraft/core/Vec3i;": "west",
        "k()Lnet/minecraft/core/Vec3i;": "east",
        "i(I)Lnet/minecraft/core/Vec3i;": "east",
        "b(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Vec3i;": "relative",
        "b(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/Vec3i;": "relative",
        "b(Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/Vec3i;": "relative",
        "d(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;": "cross",
        "a(Lnet/minecraft/core/Vec3i;D)Z": "closerThan",
        "j(Lnet/minecraft/core/Vec3i;)D": "distSqr",
        "c(DDD)D": "distToCenterSqr",
        "d(DDD)D": "distToLowCornerSqr",
        "k(Lnet/minecraft/core/Vec3i;)I": "distManhattan",
        "a(Lnet/minecraft/core/Direction$Axis;)I": "get",
        "x()Ljava/lang/String;": "toShortString",
        "a(ILnet/minecraft/core/Vec3i;)Lcom/mojang/serialization/DataResult;": "lambda$offsetCodec$4",
        "b(ILnet/minecraft/core/Vec3i;)Ljava/lang/String;": "lambda$offsetCodec$3",
        "a(Lnet/minecraft/core/Vec3i;)Ljava/util/stream/IntStream;": "lambda$static$2",
        "a(Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "a([I)Lnet/minecraft/core/Vec3i;": "lambda$static$0"
      }
    },
    "net/minecraft/core/IRegistryWritable": {
      "methods": {
        "b(ILnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder;": "registerMapping",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder$Reference;": "register",
        "k()Z": "isEmpty",
        "n()Lnet/minecraft/core/HolderGetter;": "createRegistrationLookup"
      }
    },
    "net/minecraft/core/cauldron/CauldronInteraction": {
      "fields": {
        "a": "EMPTY",
        "b": "WATER",
        "c": "LAVA",
        "d": "POWDER_SNOW",
        "e": "FILL_WATER",
        "f": "FILL_LAVA",
        "g": "FILL_POWDER_SNOW",
        "h": "SHULKER_BOX",
        "i": "BANNER",
        "j": "DYED_ITEM"
      },
      "methods": {
        "a()Lit/unimi/dsi/fastutil/objects/Object2ObjectOpenHashMap;": "newInteractionMap",
        "b()V": "bootStrap",
        "a(Ljava/util/Map;)V": "addDefaultInteractions",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;Ljava/util/function/Predicate;Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/InteractionResult;": "fillBucket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/InteractionResult;": "emptyBucket",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$static$16",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$static$15",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$static$14",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$static$13",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$static$12",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$static$11",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$bootStrap$7",
        "i(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$bootStrap$6",
        "j(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$bootStrap$5",
        "k(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$bootStrap$4",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$bootStrap$3",
        "l(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$bootStrap$2",
        "a(Lit/unimi/dsi/fastutil/objects/Object2ObjectOpenHashMap;)V": "lambda$newInteractionMap$1",
        "m(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "lambda$newInteractionMap$0"
      }
    },
    "net/minecraft/core/dispenser/DispenseBehaviorProjectile": {
      "methods": {
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "execute",
        "a(Lnet/minecraft/core/BlockSource;)V": "playSound",
        "a()F": "getUncertainty",
        "b()F": "getPower"
      }
    },
    "net/minecraft/core/dispenser/DispenseBehaviorBoat": {
      "fields": {
        "c": "defaultDispenseItemBehavior",
        "d": "type",
        "e": "isChestBoat"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "execute",
        "a(Lnet/minecraft/core/BlockSource;)V": "playSound"
      }
    },
    "net/minecraft/core/dispenser/DispenseBehaviorItem": {
      "methods": {
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "execute",
        "a(Lnet/minecraft/core/BlockSource;)V": "playSound",
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/core/Direction;)V": "playAnimation"
      }
    },
    "net/minecraft/core/dispenser/IDispenseBehavior": {
      "fields": {
        "a": "LOGGER",
        "b": "NOOP"
      },
      "methods": {
        "c()V": "bootStrap",
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Direction;)V": "setEntityPokingOutOfBlock"
      }
    },
    "net/minecraft/core/dispenser/DispenseBehaviorMaybe": {
      "fields": {
        "c": "success"
      },
      "methods": {
        "a()Z": "isSuccess",
        "a(Z)V": "setSuccess",
        "a(Lnet/minecraft/core/BlockSource;)V": "playSound"
      }
    },
    "net/minecraft/core/dispenser/DispenseBehaviorShears": {
      "methods": {
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "execute",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "tryShearBeehive",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "tryShearLivingEntity"
      }
    },
    "net/minecraft/core/dispenser/DispenseBehaviorShulkerBox": {
      "fields": {
        "c": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "execute"
      }
    },
    "net/minecraft/core/particles/ParticleParamBlock": {
      "fields": {
        "a": "DESERIALIZER",
        "c": "state"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "c()Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/core/particles/BlockParticleOption;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$codec$1"
      }
    },
    "net/minecraft/core/particles/DustColorTransitionOptions": {
      "fields": {
        "a": "SCULK_PARTICLE_COLOR",
        "b": "SCULK_TO_REDSTONE",
        "c": "CODEC",
        "d": "DESERIALIZER",
        "i": "toColor"
      },
      "methods": {
        "c()Lorg/joml/Vector3f;": "getFromColor",
        "d()Lorg/joml/Vector3f;": "getToColor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/core/particles/DustColorTransitionOptions;)Ljava/lang/Float;": "lambda$static$2",
        "b(Lnet/minecraft/core/particles/DustColorTransitionOptions;)Lorg/joml/Vector3f;": "lambda$static$1",
        "c(Lnet/minecraft/core/particles/DustColorTransitionOptions;)Lorg/joml/Vector3f;": "lambda$static$0"
      }
    },
    "net/minecraft/core/particles/ParticleParamRedstone": {
      "fields": {
        "a": "REDSTONE_PARTICLE_COLOR",
        "b": "REDSTONE",
        "c": "CODEC",
        "d": "DESERIALIZER"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/core/particles/DustParticleOptions;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/core/particles/DustParticleOptions;)Lorg/joml/Vector3f;": "lambda$static$0"
      }
    },
    "net/minecraft/core/particles/DustParticleOptionsBase": {
      "fields": {
        "e": "MIN_SCALE",
        "f": "MAX_SCALE",
        "g": "color",
        "h": "scale"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;)Lorg/joml/Vector3f;": "readVector3f",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lorg/joml/Vector3f;": "readVector3f",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "e()Lorg/joml/Vector3f;": "getColor",
        "f()F": "getScale"
      }
    },
    "net/minecraft/core/particles/ParticleParamItem": {
      "fields": {
        "a": "DESERIALIZER",
        "c": "itemStack"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "c()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(Lnet/minecraft/core/particles/ItemParticleOption;)Lnet/minecraft/world/item/ItemStack;": "lambda$codec$1"
      }
    },
    "net/minecraft/core/particles/ParticleParam": {
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString"
      }
    },
    "net/minecraft/core/particles/Particle": {
      "fields": {
        "a": "overrideLimiter",
        "b": "deserializer"
      },
      "methods": {
        "c()Z": "getOverrideLimiter",
        "d()Lnet/minecraft/core/particles/ParticleOptions$Deserializer;": "getDeserializer",
        "e()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/core/particles/Particles": {
      "fields": {
        "a": "AMBIENT_ENTITY_EFFECT",
        "b": "ANGRY_VILLAGER",
        "e": "BUBBLE",
        "f": "CLOUD",
        "g": "CRIT",
        "h": "DAMAGE_INDICATOR",
        "i": "DRAGON_BREATH",
        "j": "DRIPPING_LAVA",
        "k": "FALLING_LAVA",
        "l": "LANDING_LAVA",
        "m": "DRIPPING_WATER",
        "n": "FALLING_WATER",
        "q": "EFFECT",
        "r": "ELDER_GUARDIAN",
        "s": "ENCHANTED_HIT",
        "t": "ENCHANT",
        "u": "END_ROD",
        "v": "ENTITY_EFFECT",
        "w": "EXPLOSION_EMITTER",
        "x": "EXPLOSION",
        "y": "SONIC_BOOM",
        "A": "FIREWORK",
        "B": "FISHING",
        "C": "FLAME",
        "D": "CHERRY_LEAVES",
        "E": "SCULK_SOUL",
        "G": "SCULK_CHARGE_POP",
        "H": "SOUL_FIRE_FLAME",
        "I": "SOUL",
        "J": "FLASH",
        "K": "HAPPY_VILLAGER",
        "L": "COMPOSTER",
        "M": "HEART",
        "N": "INSTANT_EFFECT",
        "Q": "ITEM_SLIME",
        "R": "ITEM_SNOWBALL",
        "S": "LARGE_SMOKE",
        "T": "LAVA",
        "U": "MYCELIUM",
        "V": "NOTE",
        "W": "POOF",
        "X": "PORTAL",
        "Y": "RAIN",
        "Z": "SMOKE",
        "aa": "SNEEZE",
        "ab": "SPIT",
        "ac": "SQUID_INK",
        "ad": "SWEEP_ATTACK",
        "ae": "TOTEM_OF_UNDYING",
        "af": "UNDERWATER",
        "ag": "SPLASH",
        "ah": "WITCH",
        "ai": "BUBBLE_POP",
        "aj": "CURRENT_DOWN",
        "ak": "BUBBLE_COLUMN_UP",
        "al": "NAUTILUS",
        "am": "DOLPHIN",
        "an": "CAMPFIRE_COSY_SMOKE",
        "ao": "CAMPFIRE_SIGNAL_SMOKE",
        "ap": "DRIPPING_HONEY",
        "aq": "FALLING_HONEY",
        "ar": "LANDING_HONEY",
        "as": "FALLING_NECTAR",
        "at": "FALLING_SPORE_BLOSSOM",
        "au": "ASH",
        "av": "CRIMSON_SPORE",
        "aw": "WARPED_SPORE",
        "ax": "SPORE_BLOSSOM_AIR",
        "ay": "DRIPPING_OBSIDIAN_TEAR",
        "az": "FALLING_OBSIDIAN_TEAR",
        "aA": "LANDING_OBSIDIAN_TEAR",
        "aB": "REVERSE_PORTAL",
        "aC": "WHITE_ASH",
        "aD": "SMALL_FLAME",
        "aE": "SNOWFLAKE",
        "aF": "DRIPPING_DRIPSTONE_LAVA",
        "aG": "FALLING_DRIPSTONE_LAVA",
        "aH": "DRIPPING_DRIPSTONE_WATER",
        "aI": "FALLING_DRIPSTONE_WATER",
        "aJ": "GLOW_SQUID_INK",
        "aK": "GLOW",
        "aL": "WAX_ON",
        "aM": "WAX_OFF",
        "aN": "ELECTRIC_SPARK",
        "aO": "SCRAPE",
        "aQ": "EGG_CRACK",
        "aR": "CODEC"
      },
      "methods": {
        "a(Ljava/lang/String;Z)Lnet/minecraft/core/particles/SimpleParticleType;": "register"
      }
    },
    "net/minecraft/core/particles/SculkChargeParticleOptions": {
      "fields": {
        "c": "roll",
        "a": "CODEC",
        "b": "DESERIALIZER"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "c()F": "roll",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/core/particles/SculkChargeParticleOptions;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/core/particles/ShriekParticleOption": {
      "fields": {
        "a": "CODEC",
        "b": "DESERIALIZER",
        "c": "delay"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "c()I": "getDelay",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/core/particles/ShriekParticleOption;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/core/particles/ParticleType": {
      "fields": {
        "a": "DESERIALIZER",
        "b": "codec"
      },
      "methods": {
        "f()Lnet/minecraft/core/particles/SimpleParticleType;": "getType",
        "e()Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString"
      }
    },
    "net/minecraft/core/particles/VibrationParticleOption": {
      "fields": {
        "a": "CODEC",
        "b": "DESERIALIZER",
        "c": "destination",
        "d": "arrivalInTicks"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "a()Ljava/lang/String;": "writeToString",
        "c()Lnet/minecraft/world/level/gameevent/PositionSource;": "getDestination",
        "d()I": "getArrivalInTicks",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/core/particles/VibrationParticleOption;)Ljava/lang/Integer;": "lambda$static$1",
        "b(Lnet/minecraft/core/particles/VibrationParticleOption;)Lnet/minecraft/world/level/gameevent/PositionSource;": "lambda$static$0"
      }
    },
    "net/minecraft/core/registries/BuiltInRegistries": {
      "fields": {
        "aq": "LOGGER",
        "ar": "LOADERS",
        "a": "ROOT_REGISTRY_NAME",
        "as": "WRITABLE_REGISTRY",
        "b": "GAME_EVENT",
        "d": "FLUID",
        "f": "BLOCK",
        "h": "ENTITY_TYPE",
        "i": "ITEM",
        "j": "POTION",
        "m": "PAINTING_VARIANT",
        "o": "CHUNK_STATUS",
        "z": "VILLAGER_TYPE",
        "A": "VILLAGER_PROFESSION",
        "C": "MEMORY_MODULE_TYPE",
        "D": "SENSOR_TYPE"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;)Lnet/minecraft/core/DefaultedRegistry;": "registerDefaulted",
        "b(Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;)Lnet/minecraft/core/DefaultedRegistry;": "registerDefaultedWithIntrusiveHolders",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;Lcom/mojang/serialization/Lifecycle;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;)Lnet/minecraft/core/DefaultedRegistry;": "registerDefaulted",
        "b(Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;Lcom/mojang/serialization/Lifecycle;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;)Lnet/minecraft/core/DefaultedRegistry;": "registerDefaultedWithIntrusiveHolders",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/WritableRegistry;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/WritableRegistry;": "internalRegister",
        "a()V": "bootStrap",
        "b()V": "createContents",
        "c()V": "freeze",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/function/Supplier;)V": "lambda$createContents$54",
        "a(Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;Lnet/minecraft/core/WritableRegistry;)Ljava/lang/Object;": "lambda$internalRegister$53"
      }
    },
    "net/minecraft/core/registries/Registries": {
      "fields": {
        "a": "ACTIVITY",
        "b": "ATTRIBUTE",
        "c": "BANNER_PATTERN",
        "d": "BIOME_SOURCE",
        "e": "BLOCK",
        "f": "BLOCK_ENTITY_TYPE",
        "g": "BLOCK_PREDICATE_TYPE",
        "h": "BLOCK_STATE_PROVIDER_TYPE",
        "i": "CARVER",
        "j": "CAT_VARIANT",
        "k": "CHUNK_GENERATOR",
        "l": "CHUNK_STATUS",
        "m": "COMMAND_ARGUMENT_TYPE",
        "n": "CREATIVE_MODE_TAB",
        "o": "CUSTOM_STAT",
        "p": "DAMAGE_TYPE",
        "q": "DENSITY_FUNCTION_TYPE",
        "r": "ENCHANTMENT",
        "s": "ENTITY_TYPE",
        "t": "FEATURE",
        "u": "FEATURE_SIZE_TYPE",
        "v": "FLOAT_PROVIDER_TYPE",
        "w": "FLUID",
        "x": "FOLIAGE_PLACER_TYPE",
        "y": "FROG_VARIANT",
        "z": "GAME_EVENT",
        "A": "HEIGHT_PROVIDER_TYPE",
        "B": "INSTRUMENT",
        "C": "INT_PROVIDER_TYPE",
        "D": "ITEM",
        "E": "LOOT_CONDITION_TYPE",
        "F": "LOOT_FUNCTION_TYPE",
        "G": "LOOT_NBT_PROVIDER_TYPE",
        "H": "LOOT_NUMBER_PROVIDER_TYPE",
        "I": "LOOT_POOL_ENTRY_TYPE",
        "J": "LOOT_SCORE_PROVIDER_TYPE",
        "K": "MATERIAL_CONDITION",
        "L": "MATERIAL_RULE",
        "M": "MEMORY_MODULE_TYPE",
        "N": "MENU",
        "O": "MOB_EFFECT",
        "P": "PAINTING_VARIANT",
        "Q": "PARTICLE_TYPE",
        "R": "PLACEMENT_MODIFIER_TYPE",
        "S": "POINT_OF_INTEREST_TYPE",
        "T": "POSITION_SOURCE_TYPE",
        "U": "POS_RULE_TEST",
        "V": "POTION",
        "W": "RECIPE_SERIALIZER",
        "X": "RECIPE_TYPE",
        "Y": "ROOT_PLACER_TYPE",
        "Z": "RULE_TEST",
        "aa": "RULE_BLOCK_ENTITY_MODIFIER",
        "ab": "SCHEDULE",
        "ac": "SENSOR_TYPE",
        "ad": "SOUND_EVENT",
        "ae": "STAT_TYPE",
        "af": "STRUCTURE_PIECE",
        "ag": "STRUCTURE_PLACEMENT",
        "ah": "STRUCTURE_POOL_ELEMENT",
        "ai": "STRUCTURE_PROCESSOR",
        "aj": "STRUCTURE_TYPE",
        "ak": "TREE_DECORATOR_TYPE",
        "al": "TRUNK_PLACER_TYPE",
        "am": "VILLAGER_PROFESSION",
        "an": "VILLAGER_TYPE",
        "ao": "DECORATED_POT_PATTERNS",
        "ap": "BIOME",
        "aq": "CHAT_TYPE",
        "ar": "CONFIGURED_CARVER",
        "as": "CONFIGURED_FEATURE",
        "at": "DENSITY_FUNCTION",
        "au": "DIMENSION_TYPE",
        "av": "FLAT_LEVEL_GENERATOR_PRESET",
        "aw": "NOISE_SETTINGS",
        "ax": "NOISE",
        "ay": "PLACED_FEATURE",
        "az": "STRUCTURE",
        "aA": "PROCESSOR_LIST",
        "aB": "STRUCTURE_SET",
        "aC": "TEMPLATE_POOL",
        "aD": "TRIM_MATERIAL",
        "aE": "TRIM_PATTERN",
        "aF": "WORLD_PRESET",
        "aG": "MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST",
        "aH": "DIMENSION",
        "aI": "LEVEL_STEM"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/ResourceKey;": "levelStemToLevel",
        "b(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/ResourceKey;": "levelToLevelStem",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createRegistryKey"
      }
    },
    "net/minecraft/data/CachedOutput": {
      "fields": {
        "a": "NO_CACHE"
      },
      "methods": {
        "a(Ljava/nio/file/Path;[BLcom/google/common/hash/HashCode;)V": "lambda$static$0"
      }
    },
    "net/minecraft/data/DebugReportProvider": {
      "fields": {
        "a": "FIXED_ORDER_FIELDS",
        "b": "KEY_COMPARATOR",
        "c": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/data/CachedOutput;)Ljava/util/concurrent/CompletableFuture;": "run",
        "a()Ljava/lang/String;": "getName",
        "a(Lnet/minecraft/data/CachedOutput;Lcom/google/gson/JsonElement;Ljava/nio/file/Path;)Ljava/util/concurrent/CompletableFuture;": "saveStable",
        "a(Lcom/google/gson/JsonElement;Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;)V": "lambda$saveStable$2",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$static$1",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/data/PackOutput": {
      "fields": {
        "a": "outputFolder"
      },
      "methods": {
        "a()Ljava/nio/file/Path;": "getOutputFolder",
        "a(Lnet/minecraft/data/PackOutput$Target;)Ljava/nio/file/Path;": "getOutputFolder",
        "a(Lnet/minecraft/data/PackOutput$Target;Ljava/lang/String;)Lnet/minecraft/data/PackOutput$PathProvider;": "createPathProvider"
      }
    },
    "net/minecraft/data/registries/VanillaRegistries": {
      "fields": {
        "a": "BUILDER"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderLookup$Provider;)V": "validateThatAllBiomeFeaturesHaveBiomeFilter",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderLookup;)V": "validateThatAllBiomeFeaturesHaveBiomeFilter",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacedFeature;)Z": "validatePlacedFeature",
        "a()Lnet/minecraft/core/HolderLookup$Provider;": "createLookup",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/Holder$Reference;)V": "lambda$validateThatAllBiomeFeaturesHaveBiomeFilter$3",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/core/Holder$Reference;Lnet/minecraft/core/Holder;)V": "lambda$validateThatAllBiomeFeaturesHaveBiomeFilter$2",
        "a(Lnet/minecraft/core/Holder$Reference;Lnet/minecraft/world/level/levelgen/placement/PlacedFeature;)V": "lambda$validateThatAllBiomeFeaturesHaveBiomeFilter$1",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/resources/ResourceKey;)V": "lambda$validateThatAllBiomeFeaturesHaveBiomeFilter$0"
      }
    },
    "net/minecraft/data/structures/DebugReportNBT": {
      "fields": {
        "d": "LOGGER",
        "e": "inputFolders",
        "f": "output"
      },
      "methods": {
        "a(Lnet/minecraft/data/CachedOutput;)Ljava/util/concurrent/CompletableFuture;": "run",
        "a()Ljava/lang/String;": "getName",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/lang/String;": "getName",
        "a(Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;Ljava/lang/String;Ljava/nio/file/Path;)Ljava/nio/file/Path;": "convertStructure",
        "a(Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;Ljava/lang/String;)V": "writeSnbt",
        "a(I)[Ljava/util/concurrent/CompletableFuture;": "lambda$run$6",
        "a(Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletionStage;": "lambda$run$5",
        "a(Ljava/nio/file/Path;Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;)Ljava/util/concurrent/CompletableFuture;": "lambda$run$4",
        "b(I)[Ljava/util/concurrent/CompletableFuture;": "lambda$run$3",
        "a(Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/util/concurrent/CompletableFuture;": "lambda$run$2",
        "b(Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)V": "lambda$run$1",
        "a(Ljava/nio/file/Path;)Z": "lambda$run$0"
      }
    },
    "net/minecraft/data/structures/SnbtToNbt": {
      "fields": {
        "d": "DUMP_SNBT_TO",
        "e": "LOGGER",
        "f": "output",
        "g": "inputFolders",
        "h": "filters"
      },
      "methods": {
        "a(Lnet/minecraft/data/structures/SnbtToNbt$Filter;)Lnet/minecraft/data/structures/SnbtToNbt;": "addFilter",
        "a(Ljava/lang/String;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "applyFilters",
        "a(Lnet/minecraft/data/CachedOutput;)Ljava/util/concurrent/CompletableFuture;": "run",
        "a()Ljava/lang/String;": "getName",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/lang/String;": "getName",
        "a(Ljava/nio/file/Path;Ljava/lang/String;)Lnet/minecraft/data/structures/SnbtToNbt$TaskResult;": "readStructure",
        "a(Lnet/minecraft/data/CachedOutput;Lnet/minecraft/data/structures/SnbtToNbt$TaskResult;Ljava/nio/file/Path;)V": "storeStructureIfChanged",
        "a(Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletionStage;": "lambda$run$5",
        "a(Ljava/nio/file/Path;Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;)Ljava/util/concurrent/CompletableFuture;": "lambda$run$4",
        "a(I)[Ljava/util/concurrent/CompletableFuture;": "lambda$run$3",
        "a(Ljava/nio/file/Path;Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/util/concurrent/CompletableFuture;": "lambda$run$2",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;Lnet/minecraft/data/CachedOutput;Ljava/nio/file/Path;)V": "lambda$run$1",
        "a(Ljava/nio/file/Path;)Z": "lambda$run$0"
      }
    },
    "net/minecraft/data/structures/StructureUpdater": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "update"
      }
    },
    "net/minecraft/data/worldgen/AncientCityStructurePieces": {
      "fields": {
        "a": "START"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/AncientCityStructurePools": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureBastionBridge": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureBastionHoglinStable": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureBastionUnits": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureBastionPieces": {
      "fields": {
        "a": "START"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureBastionExtra": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureBastionTreasure": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/BiomeSettings": {
      "methods": {
        "a(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultCarversAndLakes",
        "b(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultMonsterRoom",
        "c(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultUndergroundVariety",
        "d(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDripstone",
        "e(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSculk",
        "f(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultOres",
        "a(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;Z)V": "addDefaultOres",
        "g(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addExtraGold",
        "h(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addExtraEmeralds",
        "i(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addInfestedStone",
        "j(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultSoftDisks",
        "k(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSwampClayDisk",
        "l(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMangroveSwampDisks",
        "m(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMossyStoneBlock",
        "n(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addFerns",
        "o(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addRareBerryBushes",
        "p(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addCommonBerryBushes",
        "q(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addLightBambooVegetation",
        "r(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addBambooVegetation",
        "s(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addTaigaTrees",
        "t(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addGroveTrees",
        "u(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addWaterTrees",
        "v(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addBirchTrees",
        "w(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addOtherBirchTrees",
        "x(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addTallBirchTrees",
        "y(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSavannaTrees",
        "z(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addShatteredSavannaTrees",
        "A(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addLushCavesVegetationFeatures",
        "B(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addLushCavesSpecialOres",
        "C(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMountainTrees",
        "D(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMountainForestTrees",
        "E(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addJungleTrees",
        "F(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSparseJungleTrees",
        "G(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addBadlandsTrees",
        "H(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSnowyTrees",
        "I(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addJungleGrass",
        "J(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSavannaGrass",
        "K(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addShatteredSavannaGrass",
        "L(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSavannaExtraGrass",
        "M(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addBadlandGrass",
        "N(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addForestFlowers",
        "O(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addForestGrass",
        "P(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSwampVegetation",
        "Q(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMangroveSwampVegetation",
        "R(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMushroomFieldVegetation",
        "S(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addPlainVegetation",
        "T(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDesertVegetation",
        "U(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addGiantTaigaVegetation",
        "V(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultFlowers",
        "W(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addCherryGroveVegetation",
        "X(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addMeadowVegetation",
        "Y(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addWarmFlowers",
        "Z(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultGrass",
        "aa(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addTaigaGrass",
        "ab(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addPlainGrass",
        "ac(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultMushrooms",
        "ad(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultExtraVegetation",
        "ae(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addBadlandExtraVegetation",
        "af(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addJungleMelons",
        "ag(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSparseJungleMelons",
        "ah(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addJungleVines",
        "ai(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDesertExtraVegetation",
        "aj(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSwampExtraVegetation",
        "ak(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDesertExtraDecoration",
        "al(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addFossilDecoration",
        "am(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addColdOceanExtraVegetation",
        "an(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultSeagrass",
        "ao(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addLukeWarmKelp",
        "ap(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultSprings",
        "aq(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addFrozenSprings",
        "ar(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addIcebergs",
        "as(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addBlueIce",
        "at(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addSurfaceFreezing",
        "au(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addNetherDefaultOres",
        "av(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addAncientDebris",
        "aw(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "addDefaultCrystalFormations",
        "a(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "farmAnimals",
        "b(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "caveSpawns",
        "c(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "commonSpawns",
        "a(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;III)V": "oceanSpawns",
        "a(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;II)V": "warmOceanSpawns",
        "d(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "plainsSpawns",
        "e(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "snowySpawns",
        "f(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "desertSpawns",
        "g(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "dripstoneCavesSpawns",
        "a(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;IIIZ)V": "monsters",
        "h(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "mooshroomSpawns",
        "i(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "baseJungleSpawns",
        "j(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;)V": "endSpawns"
      }
    },
    "net/minecraft/data/worldgen/BootstapContext": {
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/Object;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/core/Holder$Reference;": "register",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/Object;)Lnet/minecraft/core/Holder$Reference;": "register",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/HolderGetter;": "lookup"
      }
    },
    "net/minecraft/data/worldgen/WorldGenCarvers": {
      "fields": {
        "a": "CAVE",
        "b": "CAVE_EXTRA_UNDERGROUND",
        "c": "CANYON",
        "d": "NETHER_CAVE"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureDesertVillage": {
      "fields": {
        "a": "START",
        "b": "TERMINATORS_KEY",
        "c": "ZOMBIE_TERMINATORS_KEY"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/DimensionTypes": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/NoiseData": {
      "fields": {
        "a": "DEFAULT_SHIFT"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;ILnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;)V": "registerBiomeNoises",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;ID[D)V": "register"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeaturePillagerOutpostPieces": {
      "fields": {
        "a": "START"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureVillagePlain": {
      "fields": {
        "a": "START",
        "b": "TERMINATORS_KEY"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeaturePieces": {
      "fields": {
        "a": "EMPTY"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Ljava/lang/String;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool;)V": "register",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/ProcessorLists": {
      "fields": {
        "M": "EMPTY",
        "a": "ZOMBIE_PLAINS",
        "b": "ZOMBIE_SAVANNA",
        "c": "ZOMBIE_SNOWY",
        "d": "ZOMBIE_TAIGA",
        "e": "ZOMBIE_DESERT",
        "f": "MOSSIFY_10_PERCENT",
        "g": "MOSSIFY_20_PERCENT",
        "h": "MOSSIFY_70_PERCENT",
        "i": "STREET_PLAINS",
        "j": "STREET_SAVANNA",
        "k": "STREET_SNOWY_OR_TAIGA",
        "l": "FARM_PLAINS",
        "m": "FARM_SAVANNA",
        "n": "FARM_SNOWY",
        "o": "FARM_TAIGA",
        "p": "FARM_DESERT",
        "q": "OUTPOST_ROT",
        "r": "BOTTOM_RAMPART",
        "s": "TREASURE_ROOMS",
        "t": "HOUSING",
        "u": "SIDE_WALL_DEGRADATION",
        "v": "STABLE_DEGRADATION",
        "w": "BASTION_GENERIC_DEGRADATION",
        "x": "RAMPART_DEGRADATION",
        "y": "ENTRANCE_REPLACEMENT",
        "z": "BRIDGE",
        "A": "ROOF",
        "B": "HIGH_WALL",
        "C": "HIGH_RAMPART",
        "D": "FOSSIL_ROT",
        "E": "FOSSIL_COAL",
        "F": "FOSSIL_DIAMONDS",
        "G": "ANCIENT_CITY_START_DEGRADATION",
        "H": "ANCIENT_CITY_GENERIC_DEGRADATION",
        "I": "ANCIENT_CITY_WALLS_DEGRADATION",
        "J": "TRAIL_RUINS_HOUSES_ARCHAEOLOGY",
        "K": "TRAIL_RUINS_ROADS_ARCHAEOLOGY",
        "L": "TRAIL_RUINS_TOWER_TOP_ARCHAEOLOGY"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Ljava/util/List;)V": "register",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Lnet/minecraft/resources/ResourceLocation;I)Lnet/minecraft/world/level/levelgen/structure/templatesystem/CappedProcessor;": "trailsArchyLootProcessor"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureVillageSavanna": {
      "fields": {
        "a": "START",
        "b": "TERMINATORS_KEY",
        "c": "ZOMBIE_TERMINATORS_KEY"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureVillageSnowy": {
      "fields": {
        "a": "START",
        "b": "TERMINATORS_KEY"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/StructureSets": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/Structures": {
      "methods": {
        "a(Lnet/minecraft/core/HolderSet;Ljava/util/Map;Lnet/minecraft/world/level/levelgen/GenerationStep$Decoration;Lnet/minecraft/world/level/levelgen/structure/TerrainAdjustment;)Lnet/minecraft/world/level/levelgen/structure/Structure$StructureSettings;": "structure",
        "a(Lnet/minecraft/core/HolderSet;Lnet/minecraft/world/level/levelgen/GenerationStep$Decoration;Lnet/minecraft/world/level/levelgen/structure/TerrainAdjustment;)Lnet/minecraft/world/level/levelgen/structure/Structure$StructureSettings;": "structure",
        "a(Lnet/minecraft/core/HolderSet;Lnet/minecraft/world/level/levelgen/structure/TerrainAdjustment;)Lnet/minecraft/world/level/levelgen/structure/Structure$StructureSettings;": "structure",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Lnet/minecraft/world/entity/MobCategory;)Lnet/minecraft/world/level/levelgen/structure/StructureSpawnOverride;": "lambda$bootstrap$1",
        "b(Lnet/minecraft/world/entity/MobCategory;)Lnet/minecraft/world/entity/MobCategory;": "lambda$bootstrap$0"
      }
    },
    "net/minecraft/data/worldgen/SurfaceRuleData": {
      "fields": {
        "a": "AIR",
        "b": "BEDROCK",
        "c": "WHITE_TERRACOTTA",
        "d": "ORANGE_TERRACOTTA",
        "e": "TERRACOTTA",
        "f": "RED_SAND",
        "g": "RED_SANDSTONE",
        "h": "STONE",
        "i": "DEEPSLATE",
        "j": "DIRT",
        "k": "PODZOL",
        "l": "COARSE_DIRT",
        "m": "MYCELIUM",
        "n": "GRASS_BLOCK",
        "o": "CALCITE",
        "p": "GRAVEL",
        "q": "SAND",
        "r": "SANDSTONE",
        "s": "PACKED_ICE",
        "t": "SNOW_BLOCK",
        "u": "MUD",
        "v": "POWDER_SNOW",
        "w": "ICE",
        "x": "WATER",
        "y": "LAVA",
        "z": "NETHERRACK",
        "A": "SOUL_SAND",
        "B": "SOUL_SOIL",
        "C": "BASALT",
        "D": "BLACKSTONE",
        "E": "WARPED_WART_BLOCK",
        "F": "WARPED_NYLIUM",
        "G": "NETHER_WART_BLOCK",
        "H": "CRIMSON_NYLIUM",
        "I": "ENDSTONE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "makeStateRule",
        "a()Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "overworld",
        "a(ZZZ)Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "overworldLike",
        "b()Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "nether",
        "c()Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "end",
        "d()Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "air",
        "a(D)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "surfaceNoiseAbove",
        "a(I)[Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "lambda$overworldLike$0"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureVillageTaiga": {
      "fields": {
        "a": "START",
        "b": "TERMINATORS_KEY"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/TerrainProvider": {
      "fields": {
        "a": "DEEP_OCEAN_CONTINENTALNESS",
        "b": "OCEAN_CONTINENTALNESS",
        "c": "PLAINS_CONTINENTALNESS",
        "d": "BEACH_CONTINENTALNESS",
        "e": "NO_TRANSFORM",
        "f": "AMPLIFIED_OFFSET",
        "g": "AMPLIFIED_FACTOR",
        "h": "AMPLIFIED_JAGGEDNESS"
      },
      "methods": {
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Z)Lnet/minecraft/util/CubicSpline;": "overworldOffset",
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Z)Lnet/minecraft/util/CubicSpline;": "overworldFactor",
        "b(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Z)Lnet/minecraft/util/CubicSpline;": "overworldJaggedness",
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;FFFFLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "buildErosionJaggednessSpline",
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;FFLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "buildRidgeJaggednessSpline",
        "a(Lnet/minecraft/util/ToFloatFunction;FLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "buildWeirdnessJaggednessSpline",
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;FZLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "getErosionFactor",
        "a(FFFF)F": "calculateSlope",
        "a(Lnet/minecraft/util/ToFloatFunction;FZLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "buildMountainRidgeSplineWithPoints",
        "a(FFF)F": "mountainContinentalness",
        "a(F)F": "calculateMountainRidgeZeroContinentalnessPoint",
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;FFFFFFZZLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "buildErosionOffsetSpline",
        "a(Lnet/minecraft/util/ToFloatFunction;FFFFFFLnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline;": "ridgeSpline",
        "b(F)F": "lambda$static$2",
        "c(F)F": "lambda$static$1",
        "d(F)F": "lambda$static$0"
      }
    },
    "net/minecraft/data/worldgen/TrailRuinsStructurePools": {
      "fields": {
        "a": "START"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/WorldGenFeatureVillages": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/biome/BiomeData": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/biome/EndBiomes": {
      "methods": {
        "a(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)Lnet/minecraft/world/level/biome/Biome;": "baseEndBiome",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "endBarrens",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "theEnd",
        "c(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "endMidlands",
        "d(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "endHighlands",
        "e(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "smallEndIslands"
      }
    },
    "net/minecraft/data/worldgen/biome/NetherBiomes": {
      "methods": {
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "netherWastes",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "soulSandValley",
        "c(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "basaltDeltas",
        "d(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "crimsonForest",
        "e(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "warpedForest"
      }
    },
    "net/minecraft/data/worldgen/biome/OverworldBiomes": {
      "fields": {
        "a": "NORMAL_WATER_COLOR",
        "b": "NORMAL_WATER_FOG_COLOR",
        "c": "OVERWORLD_FOG_COLOR",
        "d": "NORMAL_MUSIC"
      },
      "methods": {
        "a(F)I": "calculateSkyColor",
        "a(ZFFLnet/minecraft/world/level/biome/MobSpawnSettings$Builder;Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;Lnet/minecraft/sounds/Music;)Lnet/minecraft/world/level/biome/Biome;": "biome",
        "a(ZFFIILjava/lang/Integer;Ljava/lang/Integer;Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;Lnet/minecraft/sounds/Music;)Lnet/minecraft/world/level/biome/Biome;": "biome",
        "a(Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)V": "globalOverworldGeneration",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "oldGrowthTaiga",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "sparseJungle",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "jungle",
        "c(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "bambooJungle",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;FZZZLnet/minecraft/world/level/biome/MobSpawnSettings$Builder;Lnet/minecraft/sounds/Music;)Lnet/minecraft/world/level/biome/Biome;": "baseJungle",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "windsweptHills",
        "d(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "desert",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;ZZZ)Lnet/minecraft/world/level/biome/Biome;": "plains",
        "e(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "mushroomFields",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;ZZ)Lnet/minecraft/world/level/biome/Biome;": "savanna",
        "c(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "badlands",
        "a(Lnet/minecraft/world/level/biome/MobSpawnSettings$Builder;IILnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;)Lnet/minecraft/world/level/biome/Biome;": "baseOcean",
        "s(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/BiomeGenerationSettings$Builder;": "baseOceanGeneration",
        "d(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "coldOcean",
        "e(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "ocean",
        "f(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "lukeWarmOcean",
        "f(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "warmOcean",
        "g(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "frozenOcean",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;ZZZ)Lnet/minecraft/world/level/biome/Biome;": "forest",
        "h(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "taiga",
        "g(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "darkForest",
        "h(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "swamp",
        "i(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "mangroveSwamp",
        "i(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "river",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;ZZ)Lnet/minecraft/world/level/biome/Biome;": "beach",
        "j(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "theVoid",
        "j(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Z)Lnet/minecraft/world/level/biome/Biome;": "meadowOrCherryGrove",
        "k(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "frozenPeaks",
        "l(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "jaggedPeaks",
        "m(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "stonyPeaks",
        "n(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "snowySlopes",
        "o(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "grove",
        "p(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "lushCaves",
        "q(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "dripstoneCaves",
        "r(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/Biome;": "deepDark"
      }
    },
    "net/minecraft/data/worldgen/features/AquaticFeatures": {
      "fields": {
        "a": "SEAGRASS_SHORT",
        "b": "SEAGRASS_SLIGHTLY_LESS_SHORT",
        "c": "SEAGRASS_MID",
        "d": "SEAGRASS_TALL",
        "e": "SEA_PICKLE",
        "f": "SEAGRASS_SIMPLE",
        "g": "KELP",
        "h": "WARM_OCEAN_VEGETATION"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/CaveFeatures": {
      "fields": {
        "a": "MONSTER_ROOM",
        "b": "FOSSIL_COAL",
        "c": "FOSSIL_DIAMONDS",
        "d": "DRIPSTONE_CLUSTER",
        "e": "LARGE_DRIPSTONE",
        "f": "POINTED_DRIPSTONE",
        "g": "UNDERWATER_MAGMA",
        "h": "GLOW_LICHEN",
        "i": "ROOTED_AZALEA_TREE",
        "j": "CAVE_VINE",
        "k": "CAVE_VINE_IN_MOSS",
        "l": "MOSS_VEGETATION",
        "m": "MOSS_PATCH",
        "n": "MOSS_PATCH_BONEMEAL",
        "o": "DRIPLEAF",
        "p": "CLAY_WITH_DRIPLEAVES",
        "q": "CLAY_POOL_WITH_DRIPLEAVES",
        "r": "LUSH_CAVES_CLAY",
        "s": "MOSS_PATCH_CEILING",
        "t": "SPORE_BLOSSOM",
        "u": "AMETHYST_GEODE",
        "v": "SCULK_PATCH_DEEP_DARK",
        "w": "SCULK_PATCH_ANCIENT_CITY",
        "x": "SCULK_VEIN"
      },
      "methods": {
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Holder;": "makeDripleaf",
        "a()Lnet/minecraft/core/Holder;": "makeSmallDripleaf",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/EndFeatures": {
      "fields": {
        "a": "END_SPIKE",
        "b": "END_GATEWAY_RETURN",
        "c": "END_GATEWAY_DELAYED",
        "d": "CHORUS_PLANT",
        "e": "END_ISLAND"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/FeatureUtils": {
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Ljava/util/List;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "simplePatchPredicate",
        "a(ILnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration;": "simpleRandomPatchConfiguration",
        "a(Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;Ljava/util/List;I)Lnet/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration;": "simplePatchConfiguration",
        "a(Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;Ljava/util/List;)Lnet/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration;": "simplePatchConfiguration",
        "a(Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;)Lnet/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration;": "simplePatchConfiguration",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/levelgen/feature/Feature;)V": "register",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;)V": "register"
      }
    },
    "net/minecraft/data/worldgen/features/MiscOverworldFeatures": {
      "fields": {
        "a": "ICE_SPIKE",
        "b": "ICE_PATCH",
        "c": "FOREST_ROCK",
        "d": "ICEBERG_PACKED",
        "e": "ICEBERG_BLUE",
        "f": "BLUE_ICE",
        "g": "LAKE_LAVA",
        "h": "DISK_CLAY",
        "i": "DISK_GRAVEL",
        "j": "DISK_SAND",
        "k": "FREEZE_TOP_LAYER",
        "l": "DISK_GRASS",
        "m": "BONUS_CHEST",
        "n": "VOID_START_PLATFORM",
        "o": "DESERT_WELL",
        "p": "SPRING_LAVA_OVERWORLD",
        "q": "SPRING_LAVA_FROZEN",
        "r": "SPRING_WATER"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/NetherFeatures": {
      "fields": {
        "a": "DELTA",
        "b": "SMALL_BASALT_COLUMNS",
        "c": "LARGE_BASALT_COLUMNS",
        "d": "BASALT_BLOBS",
        "e": "BLACKSTONE_BLOBS",
        "f": "GLOWSTONE_EXTRA",
        "g": "CRIMSON_FOREST_VEGETATION",
        "h": "CRIMSON_FOREST_VEGETATION_BONEMEAL",
        "i": "WARPED_FOREST_VEGETION",
        "j": "WARPED_FOREST_VEGETATION_BONEMEAL",
        "k": "NETHER_SPROUTS",
        "l": "NETHER_SPROUTS_BONEMEAL",
        "m": "TWISTING_VINES",
        "n": "TWISTING_VINES_BONEMEAL",
        "o": "WEEPING_VINES",
        "p": "PATCH_CRIMSON_ROOTS",
        "q": "BASALT_PILLAR",
        "r": "SPRING_LAVA_NETHER",
        "s": "SPRING_NETHER_CLOSED",
        "t": "SPRING_NETHER_OPEN",
        "u": "PATCH_FIRE",
        "v": "PATCH_SOUL_FIRE"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/OreFeatures": {
      "fields": {
        "a": "ORE_MAGMA",
        "b": "ORE_SOUL_SAND",
        "c": "ORE_NETHER_GOLD",
        "d": "ORE_QUARTZ",
        "e": "ORE_GRAVEL_NETHER",
        "f": "ORE_BLACKSTONE",
        "g": "ORE_DIRT",
        "h": "ORE_GRAVEL",
        "i": "ORE_GRANITE",
        "j": "ORE_DIORITE",
        "k": "ORE_ANDESITE",
        "l": "ORE_TUFF",
        "m": "ORE_COAL",
        "n": "ORE_COAL_BURIED",
        "o": "ORE_IRON",
        "p": "ORE_IRON_SMALL",
        "q": "ORE_GOLD",
        "r": "ORE_GOLD_BURIED",
        "s": "ORE_REDSTONE",
        "t": "ORE_DIAMOND_SMALL",
        "u": "ORE_DIAMOND_LARGE",
        "v": "ORE_DIAMOND_BURIED",
        "w": "ORE_LAPIS",
        "x": "ORE_LAPIS_BURIED",
        "y": "ORE_INFESTED",
        "z": "ORE_EMERALD",
        "A": "ORE_ANCIENT_DEBRIS_LARGE",
        "B": "ORE_ANCIENT_DEBRIS_SMALL",
        "C": "ORE_COPPPER_SMALL",
        "D": "ORE_COPPER_LARGE",
        "E": "ORE_CLAY"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/PileFeatures": {
      "fields": {
        "a": "PILE_HAY",
        "b": "PILE_MELON",
        "c": "PILE_SNOW",
        "d": "PILE_ICE",
        "e": "PILE_PUMPKIN"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/TreeFeatures": {
      "fields": {
        "a": "CRIMSON_FUNGUS",
        "b": "CRIMSON_FUNGUS_PLANTED",
        "c": "WARPED_FUNGUS",
        "d": "WARPED_FUNGUS_PLANTED",
        "e": "HUGE_BROWN_MUSHROOM",
        "f": "HUGE_RED_MUSHROOM",
        "g": "OAK",
        "h": "DARK_OAK",
        "i": "BIRCH",
        "j": "ACACIA",
        "k": "SPRUCE",
        "l": "PINE",
        "m": "JUNGLE_TREE",
        "n": "FANCY_OAK",
        "o": "JUNGLE_TREE_NO_VINE",
        "p": "MEGA_JUNGLE_TREE",
        "q": "MEGA_SPRUCE",
        "r": "MEGA_PINE",
        "s": "SUPER_BIRCH_BEES_0002",
        "t": "SUPER_BIRCH_BEES",
        "u": "SWAMP_OAK",
        "v": "JUNGLE_BUSH",
        "w": "AZALEA_TREE",
        "x": "MANGROVE",
        "y": "TALL_MANGROVE",
        "z": "CHERRY",
        "A": "OAK_BEES_0002",
        "B": "OAK_BEES_002",
        "C": "OAK_BEES_005",
        "D": "BIRCH_BEES_0002",
        "E": "BIRCH_BEES_002",
        "F": "BIRCH_BEES_005",
        "G": "FANCY_OAK_BEES_0002",
        "H": "FANCY_OAK_BEES_002",
        "I": "FANCY_OAK_BEES_005",
        "J": "FANCY_OAK_BEES",
        "K": "CHERRY_BEES_005"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/level/block/Block;IIII)Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "createStraightBlobTree",
        "a()Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "createOak",
        "b()Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "createBirch",
        "c()Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "createSuperBirch",
        "d()Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "createJungleTree",
        "e()Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "createFancyOak",
        "f()Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration$TreeConfigurationBuilder;": "cherry",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/features/VegetationFeatures": {
      "fields": {
        "a": "BAMBOO_NO_PODZOL",
        "b": "BAMBOO_SOME_PODZOL",
        "c": "VINES",
        "d": "PATCH_BROWN_MUSHROOM",
        "e": "PATCH_RED_MUSHROOM",
        "f": "PATCH_SUNFLOWER",
        "g": "PATCH_PUMPKIN",
        "h": "PATCH_BERRY_BUSH",
        "i": "PATCH_TAIGA_GRASS",
        "j": "PATCH_GRASS",
        "k": "PATCH_GRASS_JUNGLE",
        "l": "SINGLE_PIECE_OF_GRASS",
        "m": "PATCH_DEAD_BUSH",
        "n": "PATCH_MELON",
        "o": "PATCH_WATERLILY",
        "p": "PATCH_TALL_GRASS",
        "q": "PATCH_LARGE_FERN",
        "r": "PATCH_CACTUS",
        "s": "PATCH_SUGAR_CANE",
        "t": "FLOWER_DEFAULT",
        "u": "FLOWER_FLOWER_FOREST",
        "v": "FLOWER_SWAMP",
        "w": "FLOWER_PLAIN",
        "x": "FLOWER_MEADOW",
        "y": "FLOWER_CHERRY",
        "z": "FOREST_FLOWERS",
        "A": "DARK_FOREST_VEGETATION",
        "B": "TREES_FLOWER_FOREST",
        "C": "MEADOW_TREES",
        "D": "TREES_TAIGA",
        "E": "TREES_GROVE",
        "F": "TREES_SAVANNA",
        "G": "BIRCH_TALL",
        "H": "TREES_WINDSWEPT_HILLS",
        "I": "TREES_WATER",
        "J": "TREES_BIRCH_AND_OAK",
        "K": "TREES_PLAINS",
        "L": "TREES_SPARSE_JUNGLE",
        "M": "TREES_OLD_GROWTH_SPRUCE_TAIGA",
        "N": "TREES_OLD_GROWTH_PINE_TAIGA",
        "O": "TREES_JUNGLE",
        "P": "BAMBOO_VEGETATION",
        "Q": "MUSHROOM_ISLAND_VEGETATION",
        "R": "MANGROVE_VEGETATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;I)Lnet/minecraft/world/level/levelgen/feature/configurations/RandomPatchConfiguration;": "grassPatch",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/AquaticPlacements": {
      "fields": {
        "a": "SEAGRASS_WARM",
        "b": "SEAGRASS_NORMAL",
        "c": "SEAGRASS_COLD",
        "d": "SEAGRASS_RIVER",
        "e": "SEAGRASS_SWAMP",
        "f": "SEAGRASS_DEEP_WARM",
        "g": "SEAGRASS_DEEP",
        "h": "SEAGRASS_DEEP_COLD",
        "i": "SEAGRASS_SIMPLE",
        "j": "SEA_PICKLE",
        "k": "KELP_COLD",
        "l": "KELP_WARM",
        "m": "WARM_OCEAN_VEGETATION"
      },
      "methods": {
        "a(I)Ljava/util/List;": "seagrassPlacement",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/CavePlacements": {
      "fields": {
        "a": "MONSTER_ROOM",
        "b": "MONSTER_ROOM_DEEP",
        "c": "FOSSIL_UPPER",
        "d": "FOSSIL_LOWER",
        "e": "DRIPSTONE_CLUSTER",
        "f": "LARGE_DRIPSTONE",
        "g": "POINTED_DRIPSTONE",
        "h": "UNDERWATER_MAGMA",
        "i": "GLOW_LICHEN",
        "j": "ROOTED_AZALEA_TREE",
        "k": "CAVE_VINES",
        "l": "LUSH_CAVES_VEGETATION",
        "m": "LUSH_CAVES_CLAY",
        "n": "LUSH_CAVES_CEILING_VEGETATION",
        "o": "SPORE_BLOSSOM",
        "p": "CLASSIC_VINES",
        "q": "AMETHYST_GEODE",
        "r": "SCULK_PATCH_DEEP_DARK",
        "s": "SCULK_PATCH_ANCIENT_CITY",
        "t": "SCULK_VEIN"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/EndPlacements": {
      "fields": {
        "a": "END_SPIKE",
        "b": "END_GATEWAY_RETURN",
        "c": "CHORUS_PLANT",
        "d": "END_ISLAND_DECORATED"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/MiscOverworldPlacements": {
      "fields": {
        "a": "ICE_SPIKE",
        "b": "ICE_PATCH",
        "c": "FOREST_ROCK",
        "d": "ICEBERG_PACKED",
        "e": "ICEBERG_BLUE",
        "f": "BLUE_ICE",
        "g": "LAKE_LAVA_UNDERGROUND",
        "h": "LAKE_LAVA_SURFACE",
        "i": "DISK_CLAY",
        "j": "DISK_GRAVEL",
        "k": "DISK_SAND",
        "l": "DISK_GRASS",
        "m": "FREEZE_TOP_LAYER",
        "n": "VOID_START_PLATFORM",
        "o": "DESERT_WELL",
        "p": "SPRING_LAVA",
        "q": "SPRING_LAVA_FROZEN",
        "r": "SPRING_WATER"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/NetherPlacements": {
      "fields": {
        "a": "DELTA",
        "b": "SMALL_BASALT_COLUMNS",
        "c": "LARGE_BASALT_COLUMNS",
        "d": "BASALT_BLOBS",
        "e": "BLACKSTONE_BLOBS",
        "f": "GLOWSTONE_EXTRA",
        "g": "GLOWSTONE",
        "h": "CRIMSON_FOREST_VEGETATION",
        "i": "WARPED_FOREST_VEGETATION",
        "j": "NETHER_SPROUTS",
        "k": "TWISTING_VINES",
        "l": "WEEPING_VINES",
        "m": "PATCH_CRIMSON_ROOTS",
        "n": "BASALT_PILLAR",
        "o": "SPRING_DELTA",
        "p": "SPRING_CLOSED",
        "q": "SPRING_CLOSED_DOUBLE",
        "r": "SPRING_OPEN",
        "s": "PATCH_SOUL_FIRE",
        "t": "PATCH_FIRE"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/OrePlacements": {
      "fields": {
        "a": "ORE_MAGMA",
        "b": "ORE_SOUL_SAND",
        "c": "ORE_GOLD_DELTAS",
        "d": "ORE_QUARTZ_DELTAS",
        "e": "ORE_GOLD_NETHER",
        "f": "ORE_QUARTZ_NETHER",
        "g": "ORE_GRAVEL_NETHER",
        "h": "ORE_BLACKSTONE",
        "i": "ORE_DIRT",
        "j": "ORE_GRAVEL",
        "k": "ORE_GRANITE_UPPER",
        "l": "ORE_GRANITE_LOWER",
        "m": "ORE_DIORITE_UPPER",
        "n": "ORE_DIORITE_LOWER",
        "o": "ORE_ANDESITE_UPPER",
        "p": "ORE_ANDESITE_LOWER",
        "q": "ORE_TUFF",
        "r": "ORE_COAL_UPPER",
        "s": "ORE_COAL_LOWER",
        "t": "ORE_IRON_UPPER",
        "u": "ORE_IRON_MIDDLE",
        "v": "ORE_IRON_SMALL",
        "w": "ORE_GOLD_EXTRA",
        "x": "ORE_GOLD",
        "y": "ORE_GOLD_LOWER",
        "z": "ORE_REDSTONE",
        "A": "ORE_REDSTONE_LOWER",
        "B": "ORE_DIAMOND",
        "C": "ORE_DIAMOND_LARGE",
        "D": "ORE_DIAMOND_BURIED",
        "E": "ORE_LAPIS",
        "F": "ORE_LAPIS_BURIED",
        "G": "ORE_INFESTED",
        "H": "ORE_EMERALD",
        "I": "ORE_ANCIENT_DEBRIS_LARGE",
        "J": "ORE_ANCIENT_DEBRIS_SMALL",
        "K": "ORE_COPPER",
        "L": "ORE_COPPER_LARGE",
        "M": "ORE_CLAY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Ljava/util/List;": "orePlacement",
        "a(ILnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Ljava/util/List;": "commonOrePlacement",
        "b(ILnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Ljava/util/List;": "rareOrePlacement",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/PlacementUtils": {
      "fields": {
        "a": "HEIGHTMAP",
        "b": "HEIGHTMAP_TOP_SOLID",
        "c": "HEIGHTMAP_WORLD_SURFACE",
        "d": "HEIGHTMAP_OCEAN_FLOOR",
        "e": "FULL_RANGE",
        "f": "RANGE_10_10",
        "g": "RANGE_8_8",
        "h": "RANGE_4_4",
        "i": "RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;Ljava/util/List;)V": "register",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;[Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;)V": "register",
        "a(IFI)Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;": "countExtra",
        "a()Lnet/minecraft/world/level/levelgen/placement/PlacementFilter;": "isEmpty",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/placement/BlockPredicateFilter;": "filteredByBlockSurvival",
        "a(Lnet/minecraft/core/Holder;[Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Lnet/minecraft/core/Holder;": "inlinePlaced",
        "a(Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;[Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Lnet/minecraft/core/Holder;": "inlinePlaced",
        "a(Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;)Lnet/minecraft/core/Holder;": "onlyWhenEmpty",
        "a(Lnet/minecraft/world/level/levelgen/feature/Feature;Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/core/Holder;": "filtered"
      }
    },
    "net/minecraft/data/worldgen/placement/TreePlacements": {
      "fields": {
        "a": "CRIMSON_FUNGI",
        "b": "WARPED_FUNGI",
        "c": "OAK_CHECKED",
        "d": "DARK_OAK_CHECKED",
        "e": "BIRCH_CHECKED",
        "f": "ACACIA_CHECKED",
        "g": "SPRUCE_CHECKED",
        "h": "MANGROVE_CHECKED",
        "i": "CHERRY_CHECKED",
        "j": "PINE_ON_SNOW",
        "k": "SPRUCE_ON_SNOW",
        "l": "PINE_CHECKED",
        "m": "JUNGLE_TREE_CHECKED",
        "n": "FANCY_OAK_CHECKED",
        "o": "MEGA_JUNGLE_TREE_CHECKED",
        "p": "MEGA_SPRUCE_CHECKED",
        "q": "MEGA_PINE_CHECKED",
        "r": "TALL_MANGROVE_CHECKED",
        "s": "JUNGLE_BUSH",
        "t": "SUPER_BIRCH_BEES_0002",
        "u": "SUPER_BIRCH_BEES",
        "v": "OAK_BEES_0002",
        "w": "OAK_BEES_002",
        "x": "BIRCH_BEES_0002_PLACED",
        "y": "BIRCH_BEES_002",
        "z": "FANCY_OAK_BEES_0002",
        "A": "FANCY_OAK_BEES_002",
        "B": "FANCY_OAK_BEES",
        "C": "CHERRY_BEES_005"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/VegetationPlacements": {
      "fields": {
        "a": "BAMBOO_LIGHT",
        "b": "BAMBOO",
        "c": "VINES",
        "d": "PATCH_SUNFLOWER",
        "e": "PATCH_PUMPKIN",
        "f": "PATCH_GRASS_PLAIN",
        "g": "PATCH_GRASS_FOREST",
        "h": "PATCH_GRASS_BADLANDS",
        "i": "PATCH_GRASS_SAVANNA",
        "j": "PATCH_GRASS_NORMAL",
        "k": "PATCH_GRASS_TAIGA_2",
        "l": "PATCH_GRASS_TAIGA",
        "m": "PATCH_GRASS_JUNGLE",
        "n": "GRASS_BONEMEAL",
        "o": "PATCH_DEAD_BUSH_2",
        "p": "PATCH_DEAD_BUSH",
        "q": "PATCH_DEAD_BUSH_BADLANDS",
        "r": "PATCH_MELON",
        "s": "PATCH_MELON_SPARSE",
        "t": "PATCH_BERRY_COMMON",
        "u": "PATCH_BERRY_RARE",
        "v": "PATCH_WATERLILY",
        "w": "PATCH_TALL_GRASS_2",
        "x": "PATCH_TALL_GRASS",
        "y": "PATCH_LARGE_FERN",
        "z": "PATCH_CACTUS_DESERT",
        "A": "PATCH_CACTUS_DECORATED",
        "B": "PATCH_SUGAR_CANE_SWAMP",
        "C": "PATCH_SUGAR_CANE_DESERT",
        "D": "PATCH_SUGAR_CANE_BADLANDS",
        "E": "PATCH_SUGAR_CANE",
        "F": "BROWN_MUSHROOM_NETHER",
        "G": "RED_MUSHROOM_NETHER",
        "H": "BROWN_MUSHROOM_NORMAL",
        "I": "RED_MUSHROOM_NORMAL",
        "J": "BROWN_MUSHROOM_TAIGA",
        "K": "RED_MUSHROOM_TAIGA",
        "L": "BROWN_MUSHROOM_OLD_GROWTH",
        "M": "RED_MUSHROOM_OLD_GROWTH",
        "N": "BROWN_MUSHROOM_SWAMP",
        "O": "RED_MUSHROOM_SWAMP",
        "P": "FLOWER_WARM",
        "Q": "FLOWER_DEFAULT",
        "R": "FLOWER_FLOWER_FOREST",
        "S": "FLOWER_SWAMP",
        "T": "FLOWER_PLAINS",
        "U": "FLOWER_MEADOW",
        "V": "FLOWER_CHERRY",
        "W": "TREES_PLAINS",
        "X": "DARK_FOREST_VEGETATION",
        "Y": "FLOWER_FOREST_FLOWERS",
        "Z": "FOREST_FLOWERS",
        "aa": "TREES_FLOWER_FOREST",
        "ab": "TREES_MEADOW",
        "ac": "TREES_CHERRY",
        "ad": "TREES_TAIGA",
        "ae": "TREES_GROVE",
        "af": "TREES_BADLANDS",
        "ag": "TREES_SNOWY",
        "ah": "TREES_SWAMP",
        "ai": "TREES_WINDSWEPT_SAVANNA",
        "aj": "TREES_SAVANNA",
        "ak": "BIRCH_TALL",
        "al": "TREES_BIRCH",
        "am": "TREES_WINDSWEPT_FOREST",
        "an": "TREES_WINDSWEPT_HILLS",
        "ao": "TREES_WATER",
        "ap": "TREES_BIRCH_AND_OAK",
        "aq": "TREES_SPARSE_JUNGLE",
        "ar": "TREES_OLD_GROWTH_SPRUCE_TAIGA",
        "as": "TREES_OLD_GROWTH_PINE_TAIGA",
        "at": "TREES_JUNGLE",
        "au": "BAMBOO_VEGETATION",
        "av": "MUSHROOM_ISLAND_VEGETATION",
        "aw": "TREES_MANGROVE",
        "ax": "TREE_THRESHOLD"
      },
      "methods": {
        "a(I)Ljava/util/List;": "worldSurfaceSquaredWithCount",
        "a(ILnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Ljava/util/List;": "getMushroomPlacement",
        "b(Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Lcom/google/common/collect/ImmutableList$Builder;": "treePlacementBase",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Ljava/util/List;": "treePlacement",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;Lnet/minecraft/world/level/block/Block;)Ljava/util/List;": "treePlacement",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/data/worldgen/placement/VillagePlacements": {
      "fields": {
        "a": "PILE_HAY_VILLAGE",
        "b": "PILE_MELON_VILLAGE",
        "c": "PILE_SNOW_VILLAGE",
        "d": "PILE_ICE_VILLAGE",
        "e": "PILE_PUMPKIN_VILLAGE",
        "f": "OAK_VILLAGE",
        "g": "ACACIA_VILLAGE",
        "h": "SPRUCE_VILLAGE",
        "i": "PINE_VILLAGE",
        "j": "PATCH_CACTUS_VILLAGE",
        "k": "FLOWER_PLAIN_VILLAGE",
        "l": "PATCH_TAIGA_GRASS_VILLAGE",
        "m": "PATCH_BERRY_BUSH_VILLAGE"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/gametest/framework/AfterBatch": {
      "methods": {
        "a()Ljava/lang/String;": "batch"
      }
    },
    "net/minecraft/gametest/framework/BeforeBatch": {
      "methods": {
        "a()Ljava/lang/String;": "batch"
      }
    },
    "net/minecraft/gametest/framework/ExhaustedAttemptsException": {},
    "net/minecraft/gametest/framework/GameTest": {
      "methods": {
        "a()I": "timeoutTicks",
        "b()Ljava/lang/String;": "batch",
        "c()I": "rotationSteps",
        "d()Z": "required",
        "e()Ljava/lang/String;": "template",
        "f()J": "setupTicks",
        "g()I": "attempts",
        "h()I": "requiredSuccesses"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessAssertion": {},
    "net/minecraft/gametest/framework/GameTestHarnessAssertionPosition": {
      "fields": {
        "a": "absolutePos",
        "b": "relativePos",
        "c": "tick"
      },
      "methods": {
        "a()Ljava/lang/String;": "getMessageToShowAtBlock",
        "b()Lnet/minecraft/core/BlockPos;": "getRelativePos",
        "c()Lnet/minecraft/core/BlockPos;": "getAbsolutePos"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessBatch": {
      "fields": {
        "a": "DEFAULT_BATCH_NAME",
        "b": "name",
        "c": "testFunctions",
        "d": "beforeBatchFunction",
        "e": "afterBatchFunction"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "b()Ljava/util/Collection;": "getTestFunctions",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "runBeforeBatchFunction",
        "b(Lnet/minecraft/server/level/ServerLevel;)V": "runAfterBatchFunction"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessBatchRunner": {
      "fields": {
        "a": "LOGGER",
        "b": "firstTestNorthWestCorner",
        "c": "level",
        "d": "testTicker",
        "e": "testsPerRow",
        "f": "allTestInfos",
        "g": "batches",
        "h": "nextTestNorthWestCorner"
      },
      "methods": {
        "a()Ljava/util/List;": "getTestInfos",
        "b()V": "start",
        "a(I)V": "runBatch",
        "a(Ljava/util/Collection;)Ljava/util/Map;": "createStructuresForBatch",
        "a(Ljava/util/Map;Lnet/minecraft/gametest/framework/GameTestInfo;)V": "lambda$runBatch$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Ljava/util/stream/Stream;": "lambda$new$2",
        "a(Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/gametest/framework/GameTestBatch;)Lcom/mojang/datafixers/util/Pair;": "lambda$new$1",
        "a(Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/gametest/framework/TestFunction;)Lnet/minecraft/gametest/framework/GameTestInfo;": "lambda$new$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessEvent": {
      "fields": {
        "a": "expectedDelay",
        "b": "assertion"
      },
      "methods": {
        "a(Ljava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestEvent;": "create",
        "a(JLjava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestEvent;": "create"
      }
    },
    "net/minecraft/gametest/framework/GameTestGenerator": {},
    "net/minecraft/gametest/framework/GameTestHarnessHelper": {
      "fields": {
        "a": "testInfo",
        "b": "finalCheckAdded"
      },
      "methods": {
        "a()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "b()V": "killAllEntities",
        "a(Ljava/lang/Class;)V": "killAllEntitiesOfClass",
        "a(Lnet/minecraft/world/item/Item;FFF)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnItem",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnItem",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/Entity;": "spawn",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/entity/Entity;": "spawn",
        "a(Lnet/minecraft/world/entity/EntityType;III)Lnet/minecraft/world/entity/Entity;": "spawn",
        "a(Lnet/minecraft/world/entity/EntityType;FFF)Lnet/minecraft/world/entity/Entity;": "spawn",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/Mob;": "spawnWithNoFreeWill",
        "b(Lnet/minecraft/world/entity/EntityType;III)Lnet/minecraft/world/entity/Mob;": "spawnWithNoFreeWill",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/entity/Mob;": "spawnWithNoFreeWill",
        "b(Lnet/minecraft/world/entity/EntityType;FFF)Lnet/minecraft/world/entity/Mob;": "spawnWithNoFreeWill",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;F)Lnet/minecraft/gametest/framework/GameTestSequence;": "walkTo",
        "a(III)V": "pressButton",
        "c(Lnet/minecraft/core/BlockPos;)V": "pressButton",
        "d(Lnet/minecraft/core/BlockPos;)V": "useBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "useBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/BlockHitResult;)V": "useBlock",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/LivingEntity;": "makeAboutToDrown",
        "c()Lnet/minecraft/world/entity/player/Player;": "makeMockSurvivalPlayer",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/LivingEntity;": "withLowHealth",
        "d()Lnet/minecraft/world/entity/player/Player;": "makeMockPlayer",
        "e()Lnet/minecraft/server/level/ServerPlayer;": "makeMockServerPlayerInLevel",
        "b(III)V": "pullLever",
        "e(Lnet/minecraft/core/BlockPos;)V": "pullLever",
        "a(Lnet/minecraft/core/BlockPos;J)V": "pulseRedstone",
        "f(Lnet/minecraft/core/BlockPos;)V": "destroyBlock",
        "a(IIILnet/minecraft/world/level/block/Block;)V": "setBlock",
        "a(IIILnet/minecraft/world/level/block/state/BlockState;)V": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlock",
        "f()V": "setNight",
        "a(I)V": "setDayTime",
        "a(Lnet/minecraft/world/level/block/Block;III)V": "assertBlockPresent",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "assertBlockPresent",
        "b(Lnet/minecraft/world/level/block/Block;III)V": "assertBlockNotPresent",
        "b(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "assertBlockNotPresent",
        "c(Lnet/minecraft/world/level/block/Block;III)V": "succeedWhenBlockPresent",
        "c(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "succeedWhenBlockPresent",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;Ljava/lang/String;)V": "assertBlock",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;Ljava/util/function/Supplier;)V": "assertBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)V": "assertBlockProperty",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/util/function/Predicate;Ljava/lang/String;)V": "assertBlockProperty",
        "b(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;Ljava/util/function/Supplier;)V": "assertBlockState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Ljava/util/function/IntPredicate;Ljava/util/function/Supplier;)V": "assertRedstoneSignal",
        "a(Lnet/minecraft/world/entity/EntityType;)V": "assertEntityPresent",
        "c(Lnet/minecraft/world/entity/EntityType;III)V": "assertEntityPresent",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)V": "assertEntityPresent",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)V": "assertEntityPresent",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;ID)V": "assertEntitiesPresent",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;D)V": "assertEntityPresent",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;D)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/entity/Entity;III)V": "assertEntityInstancePresent",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/BlockPos;)V": "assertEntityInstancePresent",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/BlockPos;DI)V": "assertItemEntityCountIs",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/BlockPos;D)V": "assertItemEntityPresent",
        "b(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/BlockPos;D)V": "assertItemEntityNotPresent",
        "b(Lnet/minecraft/world/entity/EntityType;)V": "assertEntityNotPresent",
        "d(Lnet/minecraft/world/entity/EntityType;III)V": "assertEntityNotPresent",
        "d(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)V": "assertEntityNotPresent",
        "a(Lnet/minecraft/world/entity/EntityType;DDD)V": "assertEntityTouching",
        "b(Lnet/minecraft/world/entity/EntityType;DDD)V": "assertEntityNotTouching",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;Ljava/util/function/Function;Ljava/lang/Object;)V": "assertEntityData",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/item/Item;)V": "assertEntityIsHolding",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/item/Item;)V": "assertEntityInventoryContains",
        "g(Lnet/minecraft/core/BlockPos;)V": "assertContainerEmpty",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/Item;)V": "assertContainerContains",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;)V": "assertSameBlockStates",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)V": "assertSameBlockState",
        "a(JLnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/Item;)V": "assertAtTickTimeContainerContains",
        "a(JLnet/minecraft/core/BlockPos;)V": "assertAtTickTimeContainerEmpty",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;Ljava/util/function/Function;Ljava/lang/Object;)V": "succeedWhenEntityData",
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/function/Predicate;Ljava/lang/String;)V": "assertEntityProperty",
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/function/Function;Ljava/lang/String;Ljava/lang/Object;)V": "assertEntityProperty",
        "e(Lnet/minecraft/world/entity/EntityType;III)V": "succeedWhenEntityPresent",
        "e(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)V": "succeedWhenEntityPresent",
        "f(Lnet/minecraft/world/entity/EntityType;III)V": "succeedWhenEntityNotPresent",
        "f(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)V": "succeedWhenEntityNotPresent",
        "g()V": "succeed",
        "j()V": "ensureSingleFinalCheck",
        "a(Ljava/lang/Runnable;)V": "succeedIf",
        "b(Ljava/lang/Runnable;)V": "succeedWhen",
        "a(ILjava/lang/Runnable;)V": "succeedOnTickWhen",
        "a(JLjava/lang/Runnable;)V": "runAtTickTime",
        "b(JLjava/lang/Runnable;)V": "runAfterDelay",
        "h(Lnet/minecraft/core/BlockPos;)V": "randomTick",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;)V": "fail",
        "a(Ljava/lang/String;Lnet/minecraft/world/entity/Entity;)V": "fail",
        "a(Ljava/lang/String;)V": "fail",
        "c(Ljava/lang/Runnable;)V": "failIf",
        "d(Ljava/lang/Runnable;)V": "failIfEver",
        "h()Lnet/minecraft/gametest/framework/GameTestSequence;": "startSequence",
        "i(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "absolutePos",
        "j(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "relativePos",
        "a(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "absoluteVec",
        "b(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "relativeVec",
        "a(ZLjava/lang/String;)V": "assertTrue",
        "b(ZLjava/lang/String;)V": "assertFalse",
        "i()J": "getTick",
        "k()Lnet/minecraft/world/phys/AABB;": "getBounds",
        "l()Lnet/minecraft/world/phys/AABB;": "getRelativeBounds",
        "a(Ljava/util/function/Consumer;)V": "forEveryBlockInStructure",
        "e(Ljava/lang/Runnable;)V": "onEachTick",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)V": "placeAt",
        "a(Ljava/lang/Runnable;J)V": "lambda$onEachTick$26",
        "b(Ljava/lang/Runnable;J)V": "lambda$failIfEver$25",
        "m()Ljava/lang/Exception;": "lambda$failIf$24",
        "g(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)V": "lambda$succeedWhenEntityNotPresent$23",
        "h(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/core/BlockPos;)V": "lambda$succeedWhenEntityPresent$22",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;Ljava/util/function/Function;Ljava/lang/Object;)V": "lambda$succeedWhenEntityData$21",
        "k(Lnet/minecraft/core/BlockPos;)V": "lambda$assertAtTickTimeContainerEmpty$20",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/Item;)V": "lambda$assertAtTickTimeContainerContains$19",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;)V": "lambda$assertSameBlockStates$18",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/ItemStack;)Z": "lambda$assertEntityInventoryContains$17",
        "a(Ljava/lang/Object;)Z": "lambda$assertEntityInventoryContains$16",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Z": "lambda$assertEntityNotTouching$15",
        "b(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)Z": "lambda$assertEntityTouching$14",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/gametest/framework/GameTestAssertPosException;": "lambda$assertEntityInstancePresent$13",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Z": "lambda$assertEntityInstancePresent$12",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$assertBlockProperty$11",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/util/function/Predicate;Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$assertBlockProperty$10",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$assertBlock$9",
        "c(Ljava/lang/String;)Ljava/lang/String;": "lambda$assertBlock$8",
        "d(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "lambda$succeedWhenBlockPresent$7",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/level/block/Block;)Z": "lambda$assertBlockNotPresent$6",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/level/block/Block;)Z": "lambda$assertBlockPresent$5",
        "l(Lnet/minecraft/core/BlockPos;)V": "lambda$pulseRedstone$4",
        "n()Ljava/lang/String;": "lambda$pressButton$3",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$pressButton$2",
        "b(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;F)V": "lambda$walkTo$1",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "lambda$killAllEntitiesOfClass$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessInfo": {
      "fields": {
        "a": "testFunction",
        "b": "structureBlockPos",
        "c": "level",
        "d": "listeners",
        "e": "timeoutTicks",
        "f": "sequences",
        "g": "runAtTickTimeMap",
        "h": "startTick",
        "i": "tickCount",
        "j": "started",
        "k": "timer",
        "l": "done",
        "m": "rotation",
        "n": "error",
        "o": "structureBlockEntity"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)V": "setStructureBlockPos",
        "a()V": "startExecution",
        "b()V": "tick",
        "A()V": "tickInternal",
        "B()V": "startTest",
        "a(JLjava/lang/Runnable;)V": "setRunAtTickTime",
        "c()Ljava/lang/String;": "getTestName",
        "d()Lnet/minecraft/core/BlockPos;": "getStructureBlockPos",
        "e()Lnet/minecraft/core/Vec3i;": "getStructureSize",
        "f()Lnet/minecraft/world/phys/AABB;": "getStructureBounds",
        "C()Lnet/minecraft/world/level/block/entity/StructureBlockEntity;": "getStructureBlockEntity",
        "g()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "h()Z": "hasSucceeded",
        "i()Z": "hasFailed",
        "j()Z": "hasStarted",
        "k()Z": "isDone",
        "l()J": "getRunTime",
        "D()V": "finish",
        "m()V": "succeed",
        "a(Ljava/lang/Throwable;)V": "fail",
        "n()Ljava/lang/Throwable;": "getError",
        "a(Lnet/minecraft/gametest/framework/GameTestListener;)V": "addListener",
        "a(Lnet/minecraft/core/BlockPos;I)V": "spawnStructure",
        "o()V": "clearStructure",
        "p()J": "getTick",
        "q()Lnet/minecraft/gametest/framework/GameTestSequence;": "createSequence",
        "r()Z": "isRequired",
        "s()Z": "isOptional",
        "t()Ljava/lang/String;": "getStructureName",
        "u()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "v()Lnet/minecraft/gametest/framework/TestFunction;": "getTestFunction",
        "w()I": "getTimeoutTicks",
        "x()Z": "isFlaky",
        "y()I": "maxAttempts",
        "z()I": "requiredSuccesses",
        "b(Lnet/minecraft/gametest/framework/GameTestListener;)V": "lambda$spawnStructure$4",
        "a(Lnet/minecraft/gametest/framework/GameTestSequence;)V": "lambda$tickInternal$3",
        "b(Lnet/minecraft/gametest/framework/GameTestSequence;)V": "lambda$tickInternal$2",
        "c(Lnet/minecraft/gametest/framework/GameTestListener;)V": "lambda$tick$1",
        "d(Lnet/minecraft/gametest/framework/GameTestListener;)V": "lambda$tick$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessListener": {
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "testStructureLoaded",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "testPassed",
        "c(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "testFailed"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessRegistry": {
      "fields": {
        "a": "TEST_FUNCTIONS",
        "b": "TEST_CLASS_NAMES",
        "c": "BEFORE_BATCH_FUNCTIONS",
        "d": "AFTER_BATCH_FUNCTIONS",
        "e": "LAST_FAILED_TESTS"
      },
      "methods": {
        "a(Ljava/lang/Class;)V": "register",
        "a(Ljava/lang/reflect/Method;)V": "register",
        "a(Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/util/function/Function;Ljava/util/Map;)V": "registerBatchFunction",
        "a(Ljava/lang/String;)Ljava/util/Collection;": "getTestFunctionsForClassName",
        "a()Ljava/util/Collection;": "getAllTestFunctions",
        "b()Ljava/util/Collection;": "getAllTestClassNames",
        "b(Ljava/lang/String;)Z": "isTestClass",
        "c(Ljava/lang/String;)Ljava/util/function/Consumer;": "getBeforeBatchFunction",
        "d(Ljava/lang/String;)Ljava/util/function/Consumer;": "getAfterBatchFunction",
        "e(Ljava/lang/String;)Ljava/util/Optional;": "findTestFunction",
        "f(Ljava/lang/String;)Lnet/minecraft/gametest/framework/TestFunction;": "getTestFunction",
        "b(Ljava/lang/reflect/Method;)Ljava/util/Collection;": "useTestGeneratorMethod",
        "c(Ljava/lang/reflect/Method;)Lnet/minecraft/gametest/framework/TestFunction;": "turnMethodIntoTestFunction",
        "d(Ljava/lang/reflect/Method;)Ljava/util/function/Consumer;": "turnMethodIntoConsumer",
        "a(Lnet/minecraft/gametest/framework/TestFunction;Ljava/lang/String;)Z": "isTestFunctionPartOfClass",
        "c()Ljava/util/Collection;": "getLastFailedTests",
        "a(Lnet/minecraft/gametest/framework/TestFunction;)V": "rememberFailedTest",
        "d()V": "forgetFailedTests",
        "a(Ljava/lang/reflect/Method;Ljava/lang/Object;)V": "lambda$turnMethodIntoConsumer$2",
        "a(Ljava/lang/String;Lnet/minecraft/gametest/framework/TestFunction;)Z": "lambda$findTestFunction$1",
        "b(Ljava/lang/String;Lnet/minecraft/gametest/framework/TestFunction;)Z": "lambda$getTestFunctionsForClassName$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessRunner": {
      "fields": {
        "e": "MAX_TESTS_PER_BATCH",
        "a": "PADDING_AROUND_EACH_STRUCTURE",
        "b": "SPACE_BETWEEN_COLUMNS",
        "c": "SPACE_BETWEEN_ROWS",
        "d": "DEFAULT_TESTS_PER_ROW"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;Lnet/minecraft/core/BlockPos;Lnet/minecraft/gametest/framework/GameTestTicker;)V": "runTest",
        "a(Ljava/util/Collection;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/gametest/framework/GameTestTicker;I)Ljava/util/Collection;": "runTestBatches",
        "b(Ljava/util/Collection;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/gametest/framework/GameTestTicker;I)Ljava/util/Collection;": "runTests",
        "a(Ljava/util/Collection;)Ljava/util/Collection;": "groupTestsIntoBatches",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/gametest/framework/GameTestTicker;I)V": "clearAllTests",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "clearMarkers",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "lambda$clearAllTests$3",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "lambda$clearAllTests$2",
        "a(Ljava/util/Map$Entry;)Ljava/util/stream/Stream;": "lambda$groupTestsIntoBatches$1",
        "a(Ljava/lang/String;Lorg/apache/commons/lang3/mutable/MutableInt;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/List;)Lnet/minecraft/gametest/framework/GameTestBatch;": "lambda$groupTestsIntoBatches$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessSequence": {
      "fields": {
        "a": "parent",
        "b": "events",
        "c": "lastTick"
      },
      "methods": {
        "a(Ljava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestSequence;": "thenWaitUntil",
        "a(JLjava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestSequence;": "thenWaitUntil",
        "a(I)Lnet/minecraft/gametest/framework/GameTestSequence;": "thenIdle",
        "b(Ljava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestSequence;": "thenExecute",
        "a(ILjava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestSequence;": "thenExecuteAfter",
        "b(ILjava/lang/Runnable;)Lnet/minecraft/gametest/framework/GameTestSequence;": "thenExecuteFor",
        "a()V": "thenSucceed",
        "a(Ljava/util/function/Supplier;)V": "thenFail",
        "b()Lnet/minecraft/gametest/framework/GameTestSequence$Condition;": "thenTrigger",
        "a(J)V": "tickAndContinue",
        "b(J)V": "tickAndFailIfNotComplete",
        "c(Ljava/lang/Runnable;)V": "executeWithoutFail",
        "c(J)V": "tick",
        "a(Lnet/minecraft/gametest/framework/GameTestSequence$Condition;)V": "lambda$thenTrigger$5",
        "b(Ljava/util/function/Supplier;)V": "lambda$thenFail$4",
        "c(ILjava/lang/Runnable;)V": "lambda$thenExecuteFor$3",
        "d(ILjava/lang/Runnable;)V": "lambda$thenExecuteAfter$2",
        "d(Ljava/lang/Runnable;)V": "lambda$thenExecute$1",
        "c()V": "lambda$thenIdle$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessTicker": {
      "fields": {
        "a": "SINGLETON",
        "b": "testInfos"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "add",
        "a()V": "clear",
        "b()V": "tick"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessTimeout": {},
    "net/minecraft/gametest/framework/GlobalTestReporter": {
      "fields": {
        "a": "DELEGATE"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/TestReporter;)V": "replaceWith",
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "onTestFailed",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "onTestSuccess",
        "a()V": "finish"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessLogger": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "onTestFailed",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "onTestSuccess"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessCollector": {
      "fields": {
        "a": "NOT_STARTED_TEST_CHAR",
        "b": "ONGOING_TEST_CHAR",
        "c": "SUCCESSFUL_TEST_CHAR",
        "d": "FAILED_OPTIONAL_TEST_CHAR",
        "e": "FAILED_REQUIRED_TEST_CHAR",
        "f": "tests",
        "g": "listeners"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "addTestToTrack",
        "a(Lnet/minecraft/gametest/framework/GameTestListener;)V": "addListener",
        "a(Ljava/util/function/Consumer;)V": "addFailureListener",
        "a()I": "getFailedRequiredCount",
        "b()I": "getFailedOptionalCount",
        "c()I": "getDoneCount",
        "d()Z": "hasFailedRequired",
        "e()Z": "hasFailedOptional",
        "f()Ljava/util/Collection;": "getFailedRequired",
        "g()Ljava/util/Collection;": "getFailedOptional",
        "h()I": "getTotalCount",
        "i()Z": "isDone",
        "j()Ljava/lang/String;": "getProgressBar",
        "a(Ljava/lang/StringBuffer;Lnet/minecraft/gametest/framework/GameTestInfo;)V": "lambda$getProgressBar$1",
        "a(Lnet/minecraft/gametest/framework/GameTestListener;Lnet/minecraft/gametest/framework/GameTestInfo;)V": "lambda$addListener$0"
      }
    },
    "net/minecraft/gametest/framework/ReportGameListener": {
      "fields": {
        "c": "originalTestInfo",
        "d": "testTicker",
        "e": "structurePos",
        "a": "attempts",
        "b": "successes"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "testStructureLoaded",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "testPassed",
        "c(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "testFailed",
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;Ljava/lang/String;)V": "reportPassed",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;Ljava/lang/String;)V": "visualizePassedTest",
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;Ljava/lang/Throwable;)V": "reportFailure",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;Ljava/lang/Throwable;)V": "visualizeFailedTest",
        "a()V": "rerunTest",
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;Lnet/minecraft/world/level/block/Block;)V": "spawnBeacon",
        "c(Lnet/minecraft/gametest/framework/GameTestInfo;Ljava/lang/String;)V": "spawnLectern",
        "a(Ljava/lang/String;ZLjava/lang/String;)Lnet/minecraft/world/item/ItemStack;": "createBook",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/ChatFormatting;Ljava/lang/String;)V": "say",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Ljava/lang/String;)V": "showRedBox",
        "a(Ljava/lang/String;Lnet/minecraft/ChatFormatting;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$say$2",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$say$1",
        "a(Ljava/lang/StringBuffer;Ljava/lang/String;)V": "lambda$createBook$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessStructures": {
      "fields": {
        "c": "LOGGER",
        "a": "DEFAULT_TEST_STRUCTURES_DIR",
        "b": "testStructuresDir",
        "d": "HOW_MANY_CHUNKS_TO_LOAD_IN_EACH_DIRECTION_OF_STRUCTURE"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/block/Rotation;": "getRotationForRotationSteps",
        "a(Lnet/minecraft/world/level/block/Rotation;)I": "getRotationStepsForRotation",
        "a([Ljava/lang/String;)V": "main",
        "a(Lnet/minecraft/world/level/block/entity/StructureBlockEntity;)Lnet/minecraft/world/phys/AABB;": "getStructureBounds",
        "b(Lnet/minecraft/world/level/block/entity/StructureBlockEntity;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getStructureBoundingBox",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;)V": "addCommandBlockAndButtonToStartTest",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Vec3i;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;)V": "createNewEmptyStructureBlock",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;ILnet/minecraft/server/level/ServerLevel;Z)Lnet/minecraft/world/level/block/entity/StructureBlockEntity;": "spawnStructure",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;)V": "forceLoadChunks",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;ILnet/minecraft/server/level/ServerLevel;)V": "clearSpaceForStructure",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Vec3i;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getStructureBoundingBox",
        "a(Lnet/minecraft/core/BlockPos;ILnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "findStructureBlockContainingPos",
        "b(Lnet/minecraft/core/BlockPos;ILnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/core/BlockPos;": "findNearestStructureBlock",
        "c(Lnet/minecraft/core/BlockPos;ILnet/minecraft/server/level/ServerLevel;)Ljava/util/Collection;": "findStructureBlocks",
        "a(Ljava/lang/String;Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;": "getStructureTemplate",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/server/level/ServerLevel;Z)Lnet/minecraft/world/level/block/entity/StructureBlockEntity;": "createStructureBlock",
        "a(Ljava/nio/file/Path;)Lnet/minecraft/nbt/CompoundTag;": "tryLoadStructure",
        "a(ILnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;)V": "clearBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;)Z": "doesStructureContain",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)I": "lambda$findNearestStructureBlock$5",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "lambda$findStructureBlockContainingPos$4",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "lambda$clearSpaceForStructure$3",
        "a(ILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "lambda$clearSpaceForStructure$2",
        "b(Ljava/nio/file/Path;)V": "lambda$main$1",
        "c(Ljava/nio/file/Path;)Z": "lambda$main$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessTestClassArgument": {
      "fields": {
        "a": "EXAMPLES"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;)Ljava/lang/String;": "parse",
        "a()Lnet/minecraft/gametest/framework/TestClassNameArgument;": "testClassName",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/lang/String;": "getTestClassName"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessTestCommand": {
      "fields": {
        "a": "DEFAULT_CLEAR_RADIUS",
        "b": "MAX_CLEAR_RADIUS",
        "c": "STRUCTURE_BLOCK_NEARBY_SEARCH_RADIUS",
        "d": "STRUCTURE_BLOCK_FULL_SEARCH_RADIUS",
        "e": "TEST_POS_Z_OFFSET_FROM_PLAYER",
        "f": "SHOW_POS_DURATION_MS",
        "g": "DEFAULT_X_SIZE",
        "h": "DEFAULT_Y_SIZE",
        "i": "DEFAULT_Z_SIZE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;III)I": "createNewStructure",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "showPos",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "runNearbyTest",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "runAllNearbyTests",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/gametest/framework/MultipleTestTracker;)V": "runTest",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/gametest/framework/MultipleTestTracker;)V": "showTestSummaryIfAllDone",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "clearAllTests",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/gametest/framework/TestFunction;I)I": "runTest",
        "a(Lnet/minecraft/gametest/framework/TestFunction;Lnet/minecraft/server/level/ServerLevel;)V": "runTestPreparation",
        "a(Lnet/minecraft/commands/CommandSourceStack;II)I": "runAllTests",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;II)I": "runAllTestsInClass",
        "a(Lnet/minecraft/commands/CommandSourceStack;ZII)I": "runLastFailedTests",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;II)V": "runTests",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)V": "say",
        "c(Lnet/minecraft/commands/CommandSourceStack;)I": "exportNearestTestStructure",
        "c(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "exportTestStructure",
        "d(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "importTestStructure",
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/lang/String;Lnet/minecraft/ChatFormatting;)V": "say",
        "a(Lnet/minecraft/ChatFormatting;Ljava/lang/String;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$say$29",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$say$28",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$say$27",
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "lambda$runTests$26",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/gametest/framework/MultipleTestTracker;Lnet/minecraft/core/BlockPos;)V": "lambda$runAllNearbyTests$25",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$showPos$24",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$23",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$22",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$21",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$20",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$19",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$18",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$17",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$16",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "m(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "n(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "o(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "p(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "q(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "r(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "s(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "t(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "u(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "v(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "w(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "x(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$0"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessTestFunction": {
      "fields": {
        "a": "batchName",
        "b": "testName",
        "c": "structureName",
        "d": "required",
        "e": "maxAttempts",
        "f": "requiredSuccesses",
        "g": "function",
        "h": "maxTicks",
        "i": "setupTicks",
        "j": "rotation"
      },
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestHelper;)V": "run",
        "a()Ljava/lang/String;": "getTestName",
        "b()Ljava/lang/String;": "getStructureName",
        "c()I": "getMaxTicks",
        "d()Z": "isRequired",
        "e()Ljava/lang/String;": "getBatchName",
        "f()J": "getSetupTicks",
        "g()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "h()Z": "isFlaky",
        "i()I": "getMaxAttempts",
        "j()I": "getRequiredSuccesses"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessTestFunctionArgument": {
      "fields": {
        "a": "EXAMPLES"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/gametest/framework/TestFunction;": "parse",
        "a()Lnet/minecraft/gametest/framework/TestFunctionArgument;": "testFunctionArgument",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lnet/minecraft/gametest/framework/TestFunction;": "getTestFunction"
      }
    },
    "net/minecraft/gametest/framework/GameTestHarnessITestReporter": {
      "methods": {
        "a(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "onTestFailed",
        "b(Lnet/minecraft/gametest/framework/GameTestInfo;)V": "onTestSuccess",
        "a()V": "finish"
      }
    },
    "net/minecraft/locale/LocaleLanguage": {
      "fields": {
        "b": "LOGGER",
        "c": "GSON",
        "d": "UNSUPPORTED_FORMAT_PATTERN",
        "a": "DEFAULT",
        "e": "instance"
      },
      "methods": {
        "c()Lnet/minecraft/locale/Language;": "loadDefault",
        "a(Ljava/util/function/BiConsumer;Ljava/lang/String;)V": "parseTranslations",
        "a(Ljava/io/InputStream;Ljava/util/function/BiConsumer;)V": "loadFromJson",
        "a()Lnet/minecraft/locale/Language;": "getInstance",
        "a(Lnet/minecraft/locale/Language;)V": "inject",
        "a(Ljava/lang/String;)Ljava/lang/String;": "getOrDefault",
        "a(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "getOrDefault",
        "b(Ljava/lang/String;)Z": "has",
        "b()Z": "isDefaultRightToLeft",
        "a(Lnet/minecraft/network/chat/FormattedText;)Lnet/minecraft/util/FormattedCharSequence;": "getVisualOrder",
        "a(Ljava/util/List;)Ljava/util/List;": "getVisualOrder"
      }
    },
    "net/minecraft/nbt/NBTTagByteArray": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "data"
      },
      "methods": {
        "a(Ljava/util/List;)[B": "toArray",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "d()Lnet/minecraft/nbt/Tag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "e()[B": "getAsByteArray",
        "a(I)Lnet/minecraft/nbt/ByteTag;": "get",
        "a(ILnet/minecraft/nbt/ByteTag;)Lnet/minecraft/nbt/ByteTag;": "set",
        "b(ILnet/minecraft/nbt/ByteTag;)V": "add",
        "a(ILnet/minecraft/nbt/Tag;)Z": "setTag",
        "b(ILnet/minecraft/nbt/Tag;)Z": "addTag",
        "b(I)Lnet/minecraft/nbt/ByteTag;": "remove",
        "f()B": "getElementType",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "c(I)Lnet/minecraft/nbt/Tag;": "remove",
        "c(ILnet/minecraft/nbt/Tag;)V": "add",
        "d(ILnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "set"
      }
    },
    "net/minecraft/nbt/NBTTagByte": {
      "fields": {
        "w": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "b": "ZERO",
        "c": "ONE",
        "x": "data"
      },
      "methods": {
        "a(B)Lnet/minecraft/nbt/ByteTag;": "valueOf",
        "a(Z)Lnet/minecraft/nbt/ByteTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/ByteTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTList": {
      "methods": {
        "d(ILnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "set",
        "c(ILnet/minecraft/nbt/Tag;)V": "add",
        "c(I)Lnet/minecraft/nbt/Tag;": "remove",
        "a(ILnet/minecraft/nbt/Tag;)Z": "setTag",
        "b(ILnet/minecraft/nbt/Tag;)Z": "addTag",
        "f()B": "getElementType"
      }
    },
    "net/minecraft/nbt/NBTTagCompound": {
      "fields": {
        "a": "CODEC",
        "c": "SELF_SIZE_IN_BYTES",
        "w": "MAP_ENTRY_SIZE_IN_BYTES",
        "b": "TYPE",
        "x": "tags"
      },
      "methods": {
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "e()Ljava/util/Set;": "getAllKeys",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "f()I": "size",
        "a(Ljava/lang/String;Lnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "put",
        "a(Ljava/lang/String;B)V": "putByte",
        "a(Ljava/lang/String;S)V": "putShort",
        "a(Ljava/lang/String;I)V": "putInt",
        "a(Ljava/lang/String;J)V": "putLong",
        "a(Ljava/lang/String;Ljava/util/UUID;)V": "putUUID",
        "a(Ljava/lang/String;)Ljava/util/UUID;": "getUUID",
        "b(Ljava/lang/String;)Z": "hasUUID",
        "a(Ljava/lang/String;F)V": "putFloat",
        "a(Ljava/lang/String;D)V": "putDouble",
        "a(Ljava/lang/String;Ljava/lang/String;)V": "putString",
        "a(Ljava/lang/String;[B)V": "putByteArray",
        "a(Ljava/lang/String;Ljava/util/List;)V": "putByteArray",
        "a(Ljava/lang/String;[I)V": "putIntArray",
        "b(Ljava/lang/String;Ljava/util/List;)V": "putIntArray",
        "a(Ljava/lang/String;[J)V": "putLongArray",
        "c(Ljava/lang/String;Ljava/util/List;)V": "putLongArray",
        "a(Ljava/lang/String;Z)V": "putBoolean",
        "c(Ljava/lang/String;)Lnet/minecraft/nbt/Tag;": "get",
        "d(Ljava/lang/String;)B": "getTagType",
        "e(Ljava/lang/String;)Z": "contains",
        "b(Ljava/lang/String;I)Z": "contains",
        "f(Ljava/lang/String;)B": "getByte",
        "g(Ljava/lang/String;)S": "getShort",
        "h(Ljava/lang/String;)I": "getInt",
        "i(Ljava/lang/String;)J": "getLong",
        "j(Ljava/lang/String;)F": "getFloat",
        "k(Ljava/lang/String;)D": "getDouble",
        "l(Ljava/lang/String;)Ljava/lang/String;": "getString",
        "m(Ljava/lang/String;)[B": "getByteArray",
        "n(Ljava/lang/String;)[I": "getIntArray",
        "o(Ljava/lang/String;)[J": "getLongArray",
        "p(Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "getCompound",
        "c(Ljava/lang/String;I)Lnet/minecraft/nbt/ListTag;": "getList",
        "q(Ljava/lang/String;)Z": "getBoolean",
        "r(Ljava/lang/String;)V": "remove",
        "g()Z": "isEmpty",
        "a(Ljava/lang/String;Lnet/minecraft/nbt/TagType;Ljava/lang/ClassCastException;)Lnet/minecraft/CrashReport;": "createReport",
        "h()Lnet/minecraft/nbt/CompoundTag;": "copy",
        "a(Ljava/lang/String;Lnet/minecraft/nbt/Tag;Ljava/io/DataOutput;)V": "writeNamedTag",
        "a(Ljava/io/DataInput;Lnet/minecraft/nbt/NbtAccounter;)B": "readNamedTagType",
        "b(Ljava/io/DataInput;Lnet/minecraft/nbt/NbtAccounter;)Ljava/lang/String;": "readNamedTagName",
        "a(Lnet/minecraft/nbt/TagType;Ljava/lang/String;Ljava/io/DataInput;ILnet/minecraft/nbt/NbtAccounter;)Lnet/minecraft/nbt/Tag;": "readNamedTagData",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "merge",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "i()Ljava/util/Map;": "entries",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy",
        "s(Ljava/lang/String;)Ljava/lang/String;": "lambda$createReport$3",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lcom/mojang/serialization/Dynamic;": "lambda$static$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "a(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$static$0"
      }
    },
    "net/minecraft/nbt/NBTTagDouble": {
      "fields": {
        "c": "SELF_SIZE_IN_BYTES",
        "a": "ZERO",
        "b": "TYPE",
        "w": "data"
      },
      "methods": {
        "a(D)Lnet/minecraft/nbt/DoubleTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/DoubleTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagEnd": {
      "fields": {
        "c": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "b": "INSTANCE"
      },
      "methods": {
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/EndTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagFloat": {
      "fields": {
        "c": "SELF_SIZE_IN_BYTES",
        "a": "ZERO",
        "b": "TYPE",
        "w": "data"
      },
      "methods": {
        "a(F)Lnet/minecraft/nbt/FloatTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/FloatTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagIntArray": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "data"
      },
      "methods": {
        "a(Ljava/util/List;)[I": "toArray",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/IntArrayTag;": "copy",
        "g()[I": "getAsIntArray",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "a(I)Lnet/minecraft/nbt/IntTag;": "get",
        "a(ILnet/minecraft/nbt/IntTag;)Lnet/minecraft/nbt/IntTag;": "set",
        "b(ILnet/minecraft/nbt/IntTag;)V": "add",
        "a(ILnet/minecraft/nbt/Tag;)Z": "setTag",
        "b(ILnet/minecraft/nbt/Tag;)Z": "addTag",
        "b(I)Lnet/minecraft/nbt/IntTag;": "remove",
        "f()B": "getElementType",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "c(I)Lnet/minecraft/nbt/Tag;": "remove",
        "c(ILnet/minecraft/nbt/Tag;)V": "add",
        "d(ILnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "set",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagInt": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "data"
      },
      "methods": {
        "a(I)Lnet/minecraft/nbt/IntTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/IntTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagList": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "list",
        "w": "type"
      },
      "methods": {
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "g()V": "updateTypeAfterRemove",
        "c(I)Lnet/minecraft/nbt/Tag;": "remove",
        "a(I)Lnet/minecraft/nbt/CompoundTag;": "getCompound",
        "b(I)Lnet/minecraft/nbt/ListTag;": "getList",
        "d(I)S": "getShort",
        "e(I)I": "getInt",
        "f(I)[I": "getIntArray",
        "g(I)[J": "getLongArray",
        "h(I)D": "getDouble",
        "i(I)F": "getFloat",
        "j(I)Ljava/lang/String;": "getString",
        "k(I)Lnet/minecraft/nbt/Tag;": "get",
        "d(ILnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "set",
        "c(ILnet/minecraft/nbt/Tag;)V": "add",
        "a(ILnet/minecraft/nbt/Tag;)Z": "setTag",
        "b(ILnet/minecraft/nbt/Tag;)Z": "addTag",
        "a(Lnet/minecraft/nbt/Tag;)Z": "updateType",
        "e()Lnet/minecraft/nbt/ListTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()B": "getElementType",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagLongArray": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "data"
      },
      "methods": {
        "a(Ljava/util/List;)[J": "toArray",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/LongArrayTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "g()[J": "getAsLongArray",
        "a(I)Lnet/minecraft/nbt/LongTag;": "get",
        "a(ILnet/minecraft/nbt/LongTag;)Lnet/minecraft/nbt/LongTag;": "set",
        "b(ILnet/minecraft/nbt/LongTag;)V": "add",
        "a(ILnet/minecraft/nbt/Tag;)Z": "setTag",
        "b(ILnet/minecraft/nbt/Tag;)Z": "addTag",
        "b(I)Lnet/minecraft/nbt/LongTag;": "remove",
        "f()B": "getElementType",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "c(I)Lnet/minecraft/nbt/Tag;": "remove",
        "c(ILnet/minecraft/nbt/Tag;)V": "add",
        "d(ILnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "set",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTTagLong": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "data"
      },
      "methods": {
        "a(J)Lnet/minecraft/nbt/LongTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/LongTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/NBTReadLimiter": {
      "fields": {
        "a": "UNLIMITED",
        "b": "quota",
        "c": "usage"
      },
      "methods": {
        "a(J)V": "accountBytes",
        "a()J": "getUsage"
      }
    },
    "net/minecraft/nbt/NBTCompressedStreamTools": {
      "methods": {
        "a(Ljava/io/File;)Lnet/minecraft/nbt/CompoundTag;": "readCompressed",
        "b(Ljava/io/InputStream;)Ljava/io/DataInputStream;": "createDecompressorStream",
        "a(Ljava/io/InputStream;)Lnet/minecraft/nbt/CompoundTag;": "readCompressed",
        "a(Ljava/io/File;Lnet/minecraft/nbt/StreamTagVisitor;)V": "parseCompressed",
        "a(Ljava/io/InputStream;Lnet/minecraft/nbt/StreamTagVisitor;)V": "parseCompressed",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/io/File;)V": "writeCompressed",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/io/OutputStream;)V": "writeCompressed",
        "b(Lnet/minecraft/nbt/CompoundTag;Ljava/io/File;)V": "write",
        "b(Ljava/io/File;)Lnet/minecraft/nbt/CompoundTag;": "read",
        "a(Ljava/io/DataInput;)Lnet/minecraft/nbt/CompoundTag;": "read",
        "a(Ljava/io/DataInput;Lnet/minecraft/nbt/NbtAccounter;)Lnet/minecraft/nbt/CompoundTag;": "read",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/io/DataOutput;)V": "write",
        "a(Ljava/io/DataInput;Lnet/minecraft/nbt/StreamTagVisitor;)V": "parse",
        "a(Lnet/minecraft/nbt/Tag;Ljava/io/DataOutput;)V": "writeUnnamedTag",
        "a(Ljava/io/DataInput;ILnet/minecraft/nbt/NbtAccounter;)Lnet/minecraft/nbt/Tag;": "readUnnamedTag"
      }
    },
    "net/minecraft/nbt/DynamicOpsNBT": {
      "fields": {
        "a": "INSTANCE",
        "b": "WRAPPER_MARKER"
      },
      "methods": {
        "a()Lnet/minecraft/nbt/Tag;": "empty",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/nbt/Tag;)Ljava/lang/Object;": "convertTo",
        "a(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getNumberValue",
        "a(Ljava/lang/Number;)Lnet/minecraft/nbt/Tag;": "createNumeric",
        "a(B)Lnet/minecraft/nbt/Tag;": "createByte",
        "a(S)Lnet/minecraft/nbt/Tag;": "createShort",
        "a(I)Lnet/minecraft/nbt/Tag;": "createInt",
        "a(J)Lnet/minecraft/nbt/Tag;": "createLong",
        "a(F)Lnet/minecraft/nbt/Tag;": "createFloat",
        "a(D)Lnet/minecraft/nbt/Tag;": "createDouble",
        "a(Z)Lnet/minecraft/nbt/Tag;": "createBoolean",
        "b(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getStringValue",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/Tag;": "createString",
        "a(Lnet/minecraft/nbt/Tag;Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "mergeToList",
        "a(Lnet/minecraft/nbt/Tag;Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "mergeToList",
        "a(Lnet/minecraft/nbt/Tag;Lnet/minecraft/nbt/Tag;Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "mergeToMap",
        "a(Lnet/minecraft/nbt/Tag;Lcom/mojang/serialization/MapLike;)Lcom/mojang/serialization/DataResult;": "mergeToMap",
        "c(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getMapValues",
        "d(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getMapEntries",
        "e(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getMap",
        "a(Ljava/util/stream/Stream;)Lnet/minecraft/nbt/Tag;": "createMap",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/Tag;": "tryUnwrap",
        "f(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getStream",
        "g(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getList",
        "h(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getByteBuffer",
        "a(Ljava/nio/ByteBuffer;)Lnet/minecraft/nbt/Tag;": "createByteList",
        "i(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getIntStream",
        "a(Ljava/util/stream/IntStream;)Lnet/minecraft/nbt/Tag;": "createIntList",
        "j(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "getLongStream",
        "a(Ljava/util/stream/LongStream;)Lnet/minecraft/nbt/Tag;": "createLongList",
        "b(Ljava/util/stream/Stream;)Lnet/minecraft/nbt/Tag;": "createList",
        "a(Lnet/minecraft/nbt/Tag;Ljava/lang/String;)Lnet/minecraft/nbt/Tag;": "remove",
        "k(Lnet/minecraft/nbt/Tag;)Ljava/util/Optional;": "createCollector",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)V": "lambda$remove$29",
        "a(Ljava/lang/String;Ljava/lang/String;)Z": "lambda$remove$28",
        "l(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$getList$27",
        "a(Lnet/minecraft/nbt/ListTag;Ljava/util/function/Consumer;)V": "lambda$getList$26",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/nbt/Tag;)V": "lambda$getList$25",
        "b()Ljava/lang/String;": "lambda$getStream$24",
        "m(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "lambda$getStream$23",
        "n(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/nbt/Tag;": "lambda$getStream$22",
        "a(Lnet/minecraft/nbt/CompoundTag;Lcom/mojang/datafixers/util/Pair;)V": "lambda$createMap$21",
        "o(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$getMap$20",
        "p(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$getMapEntries$19",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/util/function/BiConsumer;)V": "lambda$getMapEntries$18",
        "a(Ljava/util/function/BiConsumer;Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)V": "lambda$getMapEntries$17",
        "q(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$getMapValues$16",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)Lcom/mojang/datafixers/util/Pair;": "lambda$getMapValues$15",
        "a(Ljava/util/List;)Ljava/lang/String;": "lambda$mergeToMap$14",
        "a(Ljava/util/List;Lnet/minecraft/nbt/CompoundTag;Lcom/mojang/datafixers/util/Pair;)V": "lambda$mergeToMap$13",
        "b(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)V": "lambda$mergeToMap$12",
        "r(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$mergeToMap$11",
        "c(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)V": "lambda$mergeToMap$10",
        "s(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$mergeToMap$9",
        "t(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$mergeToMap$8",
        "u(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "lambda$mergeToList$7",
        "v(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$mergeToList$6",
        "a(Ljava/util/List;Lnet/minecraft/nbt/NbtOps$ListCollector;)Lcom/mojang/serialization/DataResult;": "lambda$mergeToList$5",
        "w(Lnet/minecraft/nbt/Tag;)Lcom/mojang/serialization/DataResult;": "lambda$mergeToList$4",
        "x(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "lambda$mergeToList$3",
        "a(Lnet/minecraft/nbt/Tag;Lnet/minecraft/nbt/NbtOps$ListCollector;)Lcom/mojang/serialization/DataResult;": "lambda$mergeToList$2",
        "c()Ljava/lang/String;": "lambda$getStringValue$1",
        "d()Ljava/lang/String;": "lambda$getNumberValue$0"
      }
    },
    "net/minecraft/nbt/GameProfileSerializer": {
      "fields": {
        "b": "YXZ_LISTTAG_INT_COMPARATOR",
        "c": "YXZ_LISTTAG_DOUBLE_COMPARATOR",
        "a": "SNBT_DATA_TAG",
        "d": "PROPERTIES_START",
        "e": "PROPERTIES_END",
        "f": "ELEMENT_SEPARATOR",
        "g": "KEY_VALUE_SEPARATOR",
        "h": "COMMA_SPLITTER",
        "i": "COLON_SPLITTER",
        "j": "LOGGER",
        "k": "INDENT",
        "l": "NOT_FOUND"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)Lcom/mojang/authlib/GameProfile;": "readGameProfile",
        "a(Lnet/minecraft/nbt/CompoundTag;Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/nbt/CompoundTag;": "writeGameProfile",
        "a(Lnet/minecraft/nbt/Tag;Lnet/minecraft/nbt/Tag;Z)Z": "compareNbt",
        "a(Ljava/util/UUID;)Lnet/minecraft/nbt/IntArrayTag;": "createUUID",
        "a(Lnet/minecraft/nbt/Tag;)Ljava/util/UUID;": "loadUUID",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/core/BlockPos;": "readBlockPos",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "writeBlockPos",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/block/state/BlockState;": "readBlockState",
        "a(Lnet/minecraft/world/level/block/state/StateHolder;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/String;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/block/state/StateHolder;": "setValueHelper",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/nbt/CompoundTag;": "writeBlockState",
        "a(Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/nbt/CompoundTag;": "writeFluidState",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)Ljava/lang/String;": "getName",
        "b(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "prettyPrint",
        "a(Lnet/minecraft/nbt/Tag;Z)Ljava/lang/String;": "prettyPrint",
        "a(Ljava/lang/StringBuilder;Lnet/minecraft/nbt/Tag;IZ)Ljava/lang/StringBuilder;": "prettyPrint",
        "a(ILjava/lang/StringBuilder;)Ljava/lang/StringBuilder;": "indent",
        "c(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "toPrettyComponent",
        "c(Lnet/minecraft/nbt/CompoundTag;)Ljava/lang/String;": "structureToSnbt",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "snbtToStructure",
        "d(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "packStructureTemplate",
        "e(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "unpackStructureTemplate",
        "f(Lnet/minecraft/nbt/CompoundTag;)Ljava/lang/String;": "packBlockState",
        "b(Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "unpackBlockState",
        "g(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "addCurrentDataVersion",
        "a(Lnet/minecraft/nbt/CompoundTag;I)Lnet/minecraft/nbt/CompoundTag;": "addDataVersion",
        "b(Lnet/minecraft/nbt/CompoundTag;I)I": "getDataVersion",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;Ljava/lang/String;)V": "lambda$unpackBlockState$12",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)Ljava/lang/String;": "lambda$packBlockState$11",
        "a(Ljava/util/Map;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/ListTag;": "lambda$unpackStructureTemplate$10",
        "a(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/nbt/CompoundTag;)V": "lambda$packStructureTemplate$9",
        "h(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/ListTag;": "lambda$packStructureTemplate$8",
        "i(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/ListTag;": "lambda$packStructureTemplate$7",
        "a(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/nbt/ListTag;Lnet/minecraft/nbt/ListTag;)V": "lambda$packStructureTemplate$6",
        "a(Lnet/minecraft/nbt/ListTag;)D": "lambda$static$5",
        "b(Lnet/minecraft/nbt/ListTag;)D": "lambda$static$4",
        "c(Lnet/minecraft/nbt/ListTag;)D": "lambda$static$3",
        "d(Lnet/minecraft/nbt/ListTag;)I": "lambda$static$2",
        "e(Lnet/minecraft/nbt/ListTag;)I": "lambda$static$1",
        "f(Lnet/minecraft/nbt/ListTag;)I": "lambda$static$0"
      }
    },
    "net/minecraft/nbt/NBTNumber": {
      "methods": {
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber"
      }
    },
    "net/minecraft/nbt/NBTTagShort": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "data"
      },
      "methods": {
        "a(S)Lnet/minecraft/nbt/ShortTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/ShortTag;": "copy",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "f()J": "getAsLong",
        "g()I": "getAsInt",
        "h()S": "getAsShort",
        "i()B": "getAsByte",
        "j()D": "getAsDouble",
        "k()F": "getAsFloat",
        "l()Ljava/lang/Number;": "getAsNumber",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/SnbtPrinterTagVisitor": {
      "fields": {
        "a": "KEY_ORDER",
        "b": "NO_INDENTATION",
        "c": "SIMPLE_VALUE",
        "d": "NAME_VALUE_SEPARATOR",
        "e": "ELEMENT_SEPARATOR",
        "f": "LIST_OPEN",
        "g": "LIST_CLOSE",
        "h": "LIST_TYPE_SEPARATOR",
        "i": "ELEMENT_SPACING",
        "j": "STRUCT_OPEN",
        "k": "STRUCT_CLOSE",
        "l": "NEWLINE",
        "m": "indentation",
        "n": "depth",
        "o": "path",
        "p": "result"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "visit",
        "a(Lnet/minecraft/nbt/StringTag;)V": "visitString",
        "a(Lnet/minecraft/nbt/ByteTag;)V": "visitByte",
        "a(Lnet/minecraft/nbt/ShortTag;)V": "visitShort",
        "a(Lnet/minecraft/nbt/IntTag;)V": "visitInt",
        "a(Lnet/minecraft/nbt/LongTag;)V": "visitLong",
        "a(Lnet/minecraft/nbt/FloatTag;)V": "visitFloat",
        "a(Lnet/minecraft/nbt/DoubleTag;)V": "visitDouble",
        "a(Lnet/minecraft/nbt/ByteArrayTag;)V": "visitByteArray",
        "a(Lnet/minecraft/nbt/IntArrayTag;)V": "visitIntArray",
        "a(Lnet/minecraft/nbt/LongArrayTag;)V": "visitLongArray",
        "a(Lnet/minecraft/nbt/ListTag;)V": "visitList",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "visitCompound",
        "b()V": "popPath",
        "b(Ljava/lang/String;)V": "pushPath",
        "b(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/List;": "getKeys",
        "a()Ljava/lang/String;": "pathString",
        "a(Ljava/lang/String;)Ljava/lang/String;": "handleEscapePretty",
        "a(Lnet/minecraft/nbt/EndTag;)V": "visitEnd",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/nbt/StreamTagVisitor": {
      "methods": {
        "a()Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitEnd",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(B)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(S)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(I)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(J)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(F)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(D)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a([B)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a([I)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a([J)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(Lnet/minecraft/nbt/TagType;I)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitList",
        "a(Lnet/minecraft/nbt/TagType;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "a(Lnet/minecraft/nbt/TagType;Ljava/lang/String;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "b(Lnet/minecraft/nbt/TagType;I)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitElement",
        "b()Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitContainerEnd",
        "b(Lnet/minecraft/nbt/TagType;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitRootEntry"
      }
    },
    "net/minecraft/nbt/NBTTagString": {
      "fields": {
        "b": "SELF_SIZE_IN_BYTES",
        "a": "TYPE",
        "c": "EMPTY",
        "w": "DOUBLE_QUOTE",
        "x": "SINGLE_QUOTE",
        "y": "ESCAPE",
        "z": "NOT_SET",
        "A": "data"
      },
      "methods": {
        "a(Ljava/io/DataInput;)V": "skipString",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/StringTag;": "valueOf",
        "a(Ljava/io/DataOutput;)V": "write",
        "a()I": "sizeInBytes",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "e()Lnet/minecraft/nbt/StringTag;": "copy",
        "m_()Ljava/lang/String;": "getAsString",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "b(Ljava/lang/String;)Ljava/lang/String;": "quoteAndEscape",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "d()Lnet/minecraft/nbt/Tag;": "copy"
      }
    },
    "net/minecraft/nbt/StringTagVisitor": {
      "fields": {
        "a": "SIMPLE_VALUE",
        "b": "builder"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "visit",
        "a(Lnet/minecraft/nbt/StringTag;)V": "visitString",
        "a(Lnet/minecraft/nbt/ByteTag;)V": "visitByte",
        "a(Lnet/minecraft/nbt/ShortTag;)V": "visitShort",
        "a(Lnet/minecraft/nbt/IntTag;)V": "visitInt",
        "a(Lnet/minecraft/nbt/LongTag;)V": "visitLong",
        "a(Lnet/minecraft/nbt/FloatTag;)V": "visitFloat",
        "a(Lnet/minecraft/nbt/DoubleTag;)V": "visitDouble",
        "a(Lnet/minecraft/nbt/ByteArrayTag;)V": "visitByteArray",
        "a(Lnet/minecraft/nbt/IntArrayTag;)V": "visitIntArray",
        "a(Lnet/minecraft/nbt/LongArrayTag;)V": "visitLongArray",
        "a(Lnet/minecraft/nbt/ListTag;)V": "visitList",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "visitCompound",
        "a(Ljava/lang/String;)Ljava/lang/String;": "handleEscape",
        "a(Lnet/minecraft/nbt/EndTag;)V": "visitEnd"
      }
    },
    "net/minecraft/nbt/NBTBase": {
      "fields": {
        "d": "OBJECT_HEADER",
        "e": "ARRAY_HEADER",
        "f": "OBJECT_REFERENCE",
        "g": "STRING_SIZE",
        "h": "TAG_END",
        "i": "TAG_BYTE",
        "j": "TAG_SHORT",
        "k": "TAG_INT",
        "l": "TAG_LONG",
        "m": "TAG_FLOAT",
        "n": "TAG_DOUBLE",
        "o": "TAG_BYTE_ARRAY",
        "p": "TAG_STRING",
        "q": "TAG_LIST",
        "r": "TAG_COMPOUND",
        "s": "TAG_INT_ARRAY",
        "t": "TAG_LONG_ARRAY",
        "u": "TAG_ANY_NUMERIC",
        "v": "MAX_DEPTH"
      },
      "methods": {
        "a(Ljava/io/DataOutput;)V": "write",
        "b()B": "getId",
        "c()Lnet/minecraft/nbt/TagType;": "getType",
        "d()Lnet/minecraft/nbt/Tag;": "copy",
        "a()I": "sizeInBytes",
        "m_()Ljava/lang/String;": "getAsString",
        "a(Lnet/minecraft/nbt/TagVisitor;)V": "accept",
        "a(Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "accept",
        "b(Lnet/minecraft/nbt/StreamTagVisitor;)V": "acceptAsRoot"
      }
    },
    "net/minecraft/nbt/MojangsonParser": {
      "fields": {
        "a": "ERROR_TRAILING_DATA",
        "b": "ERROR_EXPECTED_KEY",
        "c": "ERROR_EXPECTED_VALUE",
        "d": "ERROR_INSERT_MIXED_LIST",
        "e": "ERROR_INSERT_MIXED_ARRAY",
        "f": "ERROR_INVALID_ARRAY",
        "g": "ELEMENT_SEPARATOR",
        "h": "NAME_VALUE_SEPARATOR",
        "i": "LIST_OPEN",
        "j": "LIST_CLOSE",
        "k": "STRUCT_CLOSE",
        "l": "STRUCT_OPEN",
        "m": "DOUBLE_PATTERN_NOSUFFIX",
        "n": "DOUBLE_PATTERN",
        "o": "FLOAT_PATTERN",
        "p": "BYTE_PATTERN",
        "q": "LONG_PATTERN",
        "r": "SHORT_PATTERN",
        "s": "INT_PATTERN",
        "t": "reader"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "parseTag",
        "a()Lnet/minecraft/nbt/CompoundTag;": "readSingleStruct",
        "b()Ljava/lang/String;": "readKey",
        "c()Lnet/minecraft/nbt/Tag;": "readTypedValue",
        "b(Ljava/lang/String;)Lnet/minecraft/nbt/Tag;": "type",
        "d()Lnet/minecraft/nbt/Tag;": "readValue",
        "e()Lnet/minecraft/nbt/Tag;": "readList",
        "f()Lnet/minecraft/nbt/CompoundTag;": "readStruct",
        "g()Lnet/minecraft/nbt/Tag;": "readListTag",
        "h()Lnet/minecraft/nbt/Tag;": "readArrayTag",
        "a(Lnet/minecraft/nbt/TagType;Lnet/minecraft/nbt/TagType;)Ljava/util/List;": "readArray",
        "i()Z": "hasElementSeparator",
        "a(C)V": "expect",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/nbt/NBTTagType": {
      "methods": {
        "b(Ljava/io/DataInput;ILnet/minecraft/nbt/NbtAccounter;)Lnet/minecraft/nbt/Tag;": "load",
        "a(Ljava/io/DataInput;Lnet/minecraft/nbt/StreamTagVisitor;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "parse",
        "b(Ljava/io/DataInput;Lnet/minecraft/nbt/StreamTagVisitor;)V": "parseRoot",
        "a(Ljava/io/DataInput;I)V": "skip",
        "a(Ljava/io/DataInput;)V": "skip",
        "d()Z": "isValue",
        "a()Ljava/lang/String;": "getName",
        "b()Ljava/lang/String;": "getPrettyName",
        "a(I)Lnet/minecraft/nbt/TagType;": "createInvalid"
      }
    },
    "net/minecraft/nbt/NBTTagTypes": {
      "fields": {
        "a": "TYPES"
      },
      "methods": {
        "a(I)Lnet/minecraft/nbt/TagType;": "getType"
      }
    },
    "net/minecraft/nbt/TagVisitor": {
      "methods": {
        "a(Lnet/minecraft/nbt/StringTag;)V": "visitString",
        "a(Lnet/minecraft/nbt/ByteTag;)V": "visitByte",
        "a(Lnet/minecraft/nbt/ShortTag;)V": "visitShort",
        "a(Lnet/minecraft/nbt/IntTag;)V": "visitInt",
        "a(Lnet/minecraft/nbt/LongTag;)V": "visitLong",
        "a(Lnet/minecraft/nbt/FloatTag;)V": "visitFloat",
        "a(Lnet/minecraft/nbt/DoubleTag;)V": "visitDouble",
        "a(Lnet/minecraft/nbt/ByteArrayTag;)V": "visitByteArray",
        "a(Lnet/minecraft/nbt/IntArrayTag;)V": "visitIntArray",
        "a(Lnet/minecraft/nbt/LongArrayTag;)V": "visitLongArray",
        "a(Lnet/minecraft/nbt/ListTag;)V": "visitList",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "visitCompound",
        "a(Lnet/minecraft/nbt/EndTag;)V": "visitEnd"
      }
    },
    "net/minecraft/nbt/TextComponentTagVisitor": {
      "fields": {
        "a": "LOGGER",
        "b": "INLINE_LIST_THRESHOLD",
        "c": "INLINE_ELEMENT_TYPES",
        "d": "SYNTAX_HIGHLIGHTING_KEY",
        "e": "SYNTAX_HIGHLIGHTING_STRING",
        "f": "SYNTAX_HIGHLIGHTING_NUMBER",
        "g": "SYNTAX_HIGHLIGHTING_NUMBER_TYPE",
        "h": "SIMPLE_VALUE",
        "i": "NAME_VALUE_SEPARATOR",
        "j": "ELEMENT_SEPARATOR",
        "k": "LIST_OPEN",
        "l": "LIST_CLOSE",
        "m": "LIST_TYPE_SEPARATOR",
        "n": "ELEMENT_SPACING",
        "o": "STRUCT_OPEN",
        "p": "STRUCT_CLOSE",
        "q": "NEWLINE",
        "r": "indentation",
        "s": "depth",
        "t": "result"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "visit",
        "a(Lnet/minecraft/nbt/StringTag;)V": "visitString",
        "a(Lnet/minecraft/nbt/ByteTag;)V": "visitByte",
        "a(Lnet/minecraft/nbt/ShortTag;)V": "visitShort",
        "a(Lnet/minecraft/nbt/IntTag;)V": "visitInt",
        "a(Lnet/minecraft/nbt/LongTag;)V": "visitLong",
        "a(Lnet/minecraft/nbt/FloatTag;)V": "visitFloat",
        "a(Lnet/minecraft/nbt/DoubleTag;)V": "visitDouble",
        "a(Lnet/minecraft/nbt/ByteArrayTag;)V": "visitByteArray",
        "a(Lnet/minecraft/nbt/IntArrayTag;)V": "visitIntArray",
        "a(Lnet/minecraft/nbt/LongArrayTag;)V": "visitLongArray",
        "a(Lnet/minecraft/nbt/ListTag;)V": "visitList",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "visitCompound",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "handleEscapePretty",
        "a(Lnet/minecraft/nbt/EndTag;)V": "visitEnd"
      }
    },
    "net/minecraft/nbt/visitors/CollectFields": {
      "fields": {
        "a": "fieldsToGetCount",
        "b": "wantedTypes",
        "c": "stack"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/TagType;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitRootEntry",
        "a(Lnet/minecraft/nbt/TagType;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "a(Lnet/minecraft/nbt/TagType;Ljava/lang/String;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "b()Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitContainerEnd",
        "c()I": "getMissingFieldCount"
      }
    },
    "net/minecraft/nbt/visitors/CollectToTag": {
      "fields": {
        "a": "lastId",
        "b": "rootTag",
        "c": "consumerStack"
      },
      "methods": {
        "d()Lnet/minecraft/nbt/Tag;": "getResult",
        "e()I": "depth",
        "a(Lnet/minecraft/nbt/Tag;)V": "appendEntry",
        "a()Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitEnd",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(B)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(S)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(I)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(J)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(F)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(D)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a([B)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a([I)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a([J)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visit",
        "a(Lnet/minecraft/nbt/TagType;I)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitList",
        "b(Lnet/minecraft/nbt/TagType;I)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitElement",
        "a(Lnet/minecraft/nbt/TagType;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "a(Lnet/minecraft/nbt/TagType;Ljava/lang/String;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "c(Lnet/minecraft/nbt/TagType;)V": "enterContainerIfNeeded",
        "b()Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitContainerEnd",
        "b(Lnet/minecraft/nbt/TagType;)Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitRootEntry",
        "b(Lnet/minecraft/nbt/Tag;)V": "lambda$visitRootEntry$2",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$visitRootEntry$1",
        "b(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$enterContainerIfNeeded$0"
      }
    },
    "net/minecraft/nbt/visitors/FieldSelector": {
      "fields": {
        "a": "path",
        "b": "type",
        "c": "name"
      },
      "methods": {
        "a()Ljava/util/List;": "path",
        "b()Lnet/minecraft/nbt/TagType;": "type",
        "c()Ljava/lang/String;": "name"
      }
    },
    "net/minecraft/nbt/visitors/FieldTree": {
      "fields": {
        "a": "depth",
        "b": "selectedFields",
        "c": "fieldsToRecurse"
      },
      "methods": {
        "a()Lnet/minecraft/nbt/visitors/FieldTree;": "createRoot",
        "a(Lnet/minecraft/nbt/visitors/FieldSelector;)V": "addEntry",
        "a(Lnet/minecraft/nbt/TagType;Ljava/lang/String;)Z": "isSelected",
        "b()I": "depth",
        "c()Ljava/util/Map;": "selectedFields",
        "d()Ljava/util/Map;": "fieldsToRecurse",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/visitors/FieldTree;": "lambda$addEntry$0"
      }
    },
    "net/minecraft/nbt/visitors/SkipFields": {
      "fields": {
        "a": "stack"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/TagType;Ljava/lang/String;)Lnet/minecraft/nbt/StreamTagVisitor$EntryResult;": "visitEntry",
        "b()Lnet/minecraft/nbt/StreamTagVisitor$ValueResult;": "visitContainerEnd"
      }
    },
    "net/minecraft/network/PacketEncryptionHandler": {
      "fields": {
        "a": "cipher",
        "b": "heapIn",
        "c": "heapOut"
      },
      "methods": {
        "a(Lio/netty/buffer/ByteBuf;)[B": "bufToByte",
        "a(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;": "decipher",
        "a(Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)V": "encipher"
      }
    },
    "net/minecraft/network/PacketDecrypter": {
      "fields": {
        "a": "cipher"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V": "decode"
      }
    },
    "net/minecraft/network/PacketEncrypter": {
      "fields": {
        "a": "cipher"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)V": "encode"
      }
    },
    "net/minecraft/network/PacketDecompressor": {
      "fields": {
        "a": "MAXIMUM_COMPRESSED_LENGTH",
        "b": "MAXIMUM_UNCOMPRESSED_LENGTH",
        "c": "inflater",
        "d": "threshold",
        "e": "validateDecompressed"
      },
      "methods": {
        "a(IZ)V": "setThreshold"
      }
    },
    "net/minecraft/network/PacketCompressor": {
      "fields": {
        "a": "encodeBuf",
        "b": "deflater",
        "c": "threshold"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)V": "encode",
        "a()I": "getThreshold",
        "a(I)V": "setThreshold"
      }
    },
    "net/minecraft/network/NetworkManager": {
      "fields": {
        "i": "AVERAGE_PACKETS_SMOOTHING",
        "j": "LOGGER",
        "a": "ROOT_MARKER",
        "b": "PACKET_MARKER",
        "c": "PACKET_RECEIVED_MARKER",
        "d": "PACKET_SENT_MARKER",
        "e": "ATTRIBUTE_PROTOCOL",
        "f": "NETWORK_WORKER_GROUP",
        "g": "NETWORK_EPOLL_WORKER_GROUP",
        "h": "LOCAL_WORKER_GROUP",
        "k": "receiving",
        "l": "queue",
        "m": "channel",
        "n": "address",
        "o": "packetListener",
        "p": "disconnectedReason",
        "q": "encrypted",
        "r": "disconnectionHandled",
        "s": "receivedPackets",
        "t": "sentPackets",
        "u": "averageReceivedPackets",
        "v": "averageSentPackets",
        "w": "tickCount",
        "x": "handlingFault",
        "y": "delayedDisconnect"
      },
      "methods": {
        "a(Lnet/minecraft/network/ConnectionProtocol;)V": "setProtocol",
        "a(Lio/netty/channel/ChannelHandlerContext;Lnet/minecraft/network/protocol/Packet;)V": "channelRead0",
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketListener;)V": "genericsFtw",
        "a(Lnet/minecraft/network/PacketListener;)V": "setListener",
        "a(Lnet/minecraft/network/protocol/Packet;)V": "send",
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketSendListener;)V": "send",
        "b(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketSendListener;)V": "sendPacket",
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketSendListener;Lnet/minecraft/network/ConnectionProtocol;Lnet/minecraft/network/ConnectionProtocol;)V": "doSendPacket",
        "p()Lnet/minecraft/network/ConnectionProtocol;": "getCurrentProtocol",
        "q()V": "flushQueue",
        "a()V": "tick",
        "b()V": "tickSecond",
        "c()Ljava/net/SocketAddress;": "getRemoteAddress",
        "a(Lnet/minecraft/network/chat/Component;)V": "disconnect",
        "d()Z": "isMemoryConnection",
        "e()Lnet/minecraft/network/protocol/PacketFlow;": "getReceiving",
        "f()Lnet/minecraft/network/protocol/PacketFlow;": "getSending",
        "a(Ljava/net/InetSocketAddress;Z)Lnet/minecraft/network/Connection;": "connectToServer",
        "a(Ljava/net/InetSocketAddress;ZLnet/minecraft/network/Connection;)Lio/netty/channel/ChannelFuture;": "connect",
        "a(Lio/netty/channel/ChannelPipeline;Lnet/minecraft/network/protocol/PacketFlow;)V": "configureSerialization",
        "a(Ljava/net/SocketAddress;)Lnet/minecraft/network/Connection;": "connectToLocalServer",
        "a(Ljavax/crypto/Cipher;Ljavax/crypto/Cipher;)V": "setEncryptionKey",
        "g()Z": "isEncrypted",
        "h()Z": "isConnected",
        "i()Z": "isConnecting",
        "j()Lnet/minecraft/network/PacketListener;": "getPacketListener",
        "k()Lnet/minecraft/network/chat/Component;": "getDisconnectedReason",
        "l()V": "setReadOnly",
        "a(IZ)V": "setupCompression",
        "m()V": "handleDisconnection",
        "n()F": "getAverageReceivedPackets",
        "o()F": "getAverageSentPackets",
        "a(Lnet/minecraft/network/PacketSendListener;Lio/netty/util/concurrent/Future;)V": "lambda$doSendPacket$8",
        "b(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketSendListener;Lnet/minecraft/network/ConnectionProtocol;Lnet/minecraft/network/ConnectionProtocol;)V": "lambda$sendPacket$7",
        "b(Lnet/minecraft/network/chat/Component;)V": "lambda$exceptionCaught$6"
      }
    },
    "net/minecraft/network/NetworkManager$QueuedPacket": {
      "fields": {
        "a": "packet",
        "b": "listener"
      }
    },
    "net/minecraft/network/EnumProtocol": {
      "fields": {
        "a": "HANDSHAKING",
        "b": "PLAY",
        "c": "STATUS",
        "d": "LOGIN",
        "e": "NOT_REGISTERED",
        "f": "MIN_PROTOCOL_ID",
        "g": "MAX_PROTOCOL_ID",
        "h": "LOOKUP",
        "i": "PROTOCOL_BY_PACKET",
        "j": "id",
        "k": "flows",
        "l": "$VALUES"
      },
      "methods": {
        "b()Lnet/minecraft/network/ConnectionProtocol$ProtocolBuilder;": "protocol",
        "a(Lnet/minecraft/network/protocol/PacketFlow;Lnet/minecraft/network/protocol/Packet;)I": "getPacketId",
        "a(Lnet/minecraft/network/protocol/PacketFlow;)Lnet/minecraft/network/protocol/BundlerInfo;": "getBundlerInfo",
        "b(Lnet/minecraft/network/protocol/PacketFlow;)Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;": "getPacketsByIds",
        "a(Lnet/minecraft/network/protocol/PacketFlow;ILnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/Packet;": "createPacket",
        "a()I": "getId",
        "a(I)Lnet/minecraft/network/ConnectionProtocol;": "getById",
        "a(Lnet/minecraft/network/protocol/Packet;)Lnet/minecraft/network/ConnectionProtocol;": "getProtocolForPacket",
        "a(Lnet/minecraft/network/ConnectionProtocol;Lnet/minecraft/network/protocol/PacketFlow;Lnet/minecraft/network/ConnectionProtocol$PacketSet;)V": "lambda$static$2",
        "a(Lnet/minecraft/network/ConnectionProtocol;Ljava/lang/Class;)V": "lambda$static$1",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;Ljava/lang/Class;Ljava/lang/Integer;)V": "lambda$getPacketsByIds$0",
        "c()[Lnet/minecraft/network/ConnectionProtocol;": "$values"
      }
    },
    "net/minecraft/network/PacketDataSerializer": {
      "fields": {
        "d": "MAX_VARINT_SIZE",
        "e": "MAX_VARLONG_SIZE",
        "a": "DEFAULT_NBT_QUOTA",
        "f": "source",
        "b": "MAX_STRING_LENGTH",
        "c": "MAX_COMPONENT_STRING_LENGTH",
        "g": "PUBLIC_KEY_SIZE",
        "h": "MAX_PUBLIC_KEY_HEADER_SIZE",
        "i": "MAX_PUBLIC_KEY_LENGTH",
        "j": "GSON"
      },
      "methods": {
        "a(I)I": "getVarIntSize",
        "a(J)I": "getVarLongSize",
        "a(Lcom/mojang/serialization/DynamicOps;Lcom/mojang/serialization/Codec;)Ljava/lang/Object;": "readWithCodec",
        "a(Lcom/mojang/serialization/DynamicOps;Lcom/mojang/serialization/Codec;Ljava/lang/Object;)V": "writeWithCodec",
        "a(Lcom/mojang/serialization/Codec;)Ljava/lang/Object;": "readJsonWithCodec",
        "a(Lcom/mojang/serialization/Codec;Ljava/lang/Object;)V": "writeJsonWithCodec",
        "a(Lnet/minecraft/core/IdMap;Ljava/lang/Object;)V": "writeId",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/core/Holder;Lnet/minecraft/network/FriendlyByteBuf$Writer;)V": "writeId",
        "a(Lnet/minecraft/core/IdMap;)Ljava/lang/Object;": "readById",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Lnet/minecraft/core/Holder;": "readById",
        "a(Ljava/util/function/IntFunction;I)Ljava/util/function/IntFunction;": "limitValue",
        "a(Ljava/util/function/IntFunction;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Ljava/util/Collection;": "readCollection",
        "a(Ljava/util/Collection;Lnet/minecraft/network/FriendlyByteBuf$Writer;)V": "writeCollection",
        "a(Lnet/minecraft/network/FriendlyByteBuf$Reader;)Ljava/util/List;": "readList",
        "a()Lit/unimi/dsi/fastutil/ints/IntList;": "readIntIdList",
        "a(Lit/unimi/dsi/fastutil/ints/IntList;)V": "writeIntIdList",
        "a(Ljava/util/function/IntFunction;Lnet/minecraft/network/FriendlyByteBuf$Reader;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Ljava/util/Map;": "readMap",
        "a(Lnet/minecraft/network/FriendlyByteBuf$Reader;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Ljava/util/Map;": "readMap",
        "a(Ljava/util/Map;Lnet/minecraft/network/FriendlyByteBuf$Writer;Lnet/minecraft/network/FriendlyByteBuf$Writer;)V": "writeMap",
        "a(Ljava/util/function/Consumer;)V": "readWithCount",
        "a(Ljava/util/EnumSet;Ljava/lang/Class;)V": "writeEnumSet",
        "a(Ljava/lang/Class;)Ljava/util/EnumSet;": "readEnumSet",
        "a(Ljava/util/Optional;Lnet/minecraft/network/FriendlyByteBuf$Writer;)V": "writeOptional",
        "b(Lnet/minecraft/network/FriendlyByteBuf$Reader;)Ljava/util/Optional;": "readOptional",
        "c(Lnet/minecraft/network/FriendlyByteBuf$Reader;)Ljava/lang/Object;": "readNullable",
        "a(Ljava/lang/Object;Lnet/minecraft/network/FriendlyByteBuf$Writer;)V": "writeNullable",
        "a(Lcom/mojang/datafixers/util/Either;Lnet/minecraft/network/FriendlyByteBuf$Writer;Lnet/minecraft/network/FriendlyByteBuf$Writer;)V": "writeEither",
        "b(Lnet/minecraft/network/FriendlyByteBuf$Reader;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Lcom/mojang/datafixers/util/Either;": "readEither",
        "b()[B": "readByteArray",
        "a([B)Lnet/minecraft/network/FriendlyByteBuf;": "writeByteArray",
        "b(I)[B": "readByteArray",
        "a([I)Lnet/minecraft/network/FriendlyByteBuf;": "writeVarIntArray",
        "c()[I": "readVarIntArray",
        "c(I)[I": "readVarIntArray",
        "a([J)Lnet/minecraft/network/FriendlyByteBuf;": "writeLongArray",
        "d()[J": "readLongArray",
        "b([J)[J": "readLongArray",
        "a([JI)[J": "readLongArray",
        "e()[B": "accessByteBufWithCorrectSize",
        "f()Lnet/minecraft/core/BlockPos;": "readBlockPos",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/network/FriendlyByteBuf;": "writeBlockPos",
        "g()Lnet/minecraft/world/level/ChunkPos;": "readChunkPos",
        "a(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/network/FriendlyByteBuf;": "writeChunkPos",
        "h()Lnet/minecraft/core/SectionPos;": "readSectionPos",
        "a(Lnet/minecraft/core/SectionPos;)Lnet/minecraft/network/FriendlyByteBuf;": "writeSectionPos",
        "i()Lnet/minecraft/core/GlobalPos;": "readGlobalPos",
        "a(Lnet/minecraft/core/GlobalPos;)V": "writeGlobalPos",
        "j()Lorg/joml/Vector3f;": "readVector3f",
        "a(Lorg/joml/Vector3f;)V": "writeVector3f",
        "k()Lorg/joml/Quaternionf;": "readQuaternion",
        "a(Lorg/joml/Quaternionf;)V": "writeQuaternion",
        "l()Lnet/minecraft/network/chat/Component;": "readComponent",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/FriendlyByteBuf;": "writeComponent",
        "b(Ljava/lang/Class;)Ljava/lang/Enum;": "readEnum",
        "a(Ljava/lang/Enum;)Lnet/minecraft/network/FriendlyByteBuf;": "writeEnum",
        "m()I": "readVarInt",
        "n()J": "readVarLong",
        "a(Ljava/util/UUID;)Lnet/minecraft/network/FriendlyByteBuf;": "writeUUID",
        "o()Ljava/util/UUID;": "readUUID",
        "d(I)Lnet/minecraft/network/FriendlyByteBuf;": "writeVarInt",
        "b(J)Lnet/minecraft/network/FriendlyByteBuf;": "writeVarLong",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/network/FriendlyByteBuf;": "writeNbt",
        "p()Lnet/minecraft/nbt/CompoundTag;": "readNbt",
        "q()Lnet/minecraft/nbt/CompoundTag;": "readAnySizeNbt",
        "a(Lnet/minecraft/nbt/NbtAccounter;)Lnet/minecraft/nbt/CompoundTag;": "readNbt",
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/FriendlyByteBuf;": "writeItem",
        "r()Lnet/minecraft/world/item/ItemStack;": "readItem",
        "s()Ljava/lang/String;": "readUtf",
        "e(I)Ljava/lang/String;": "readUtf",
        "a(Ljava/lang/String;)Lnet/minecraft/network/FriendlyByteBuf;": "writeUtf",
        "a(Ljava/lang/String;I)Lnet/minecraft/network/FriendlyByteBuf;": "writeUtf",
        "g(I)I": "getMaxEncodedUtfLength",
        "t()Lnet/minecraft/resources/ResourceLocation;": "readResourceLocation",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/network/FriendlyByteBuf;": "writeResourceLocation",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/ResourceKey;": "readResourceKey",
        "b(Lnet/minecraft/resources/ResourceKey;)V": "writeResourceKey",
        "u()Ljava/util/Date;": "readDate",
        "a(Ljava/util/Date;)Lnet/minecraft/network/FriendlyByteBuf;": "writeDate",
        "v()Ljava/time/Instant;": "readInstant",
        "a(Ljava/time/Instant;)V": "writeInstant",
        "w()Ljava/security/PublicKey;": "readPublicKey",
        "a(Ljava/security/PublicKey;)Lnet/minecraft/network/FriendlyByteBuf;": "writePublicKey",
        "x()Lnet/minecraft/world/phys/BlockHitResult;": "readBlockHitResult",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "writeBlockHitResult",
        "y()Ljava/util/BitSet;": "readBitSet",
        "a(Ljava/util/BitSet;)V": "writeBitSet",
        "f(I)Ljava/util/BitSet;": "readFixedBitSet",
        "a(Ljava/util/BitSet;I)V": "writeFixedBitSet",
        "z()Lcom/mojang/authlib/GameProfile;": "readGameProfile",
        "a(Lcom/mojang/authlib/GameProfile;)V": "writeGameProfile",
        "A()Lcom/mojang/authlib/properties/PropertyMap;": "readGameProfileProperties",
        "a(Lcom/mojang/authlib/properties/PropertyMap;)V": "writeGameProfileProperties",
        "B()Lcom/mojang/authlib/properties/Property;": "readProperty",
        "a(Lcom/mojang/authlib/properties/Property;)V": "writeProperty"
      }
    },
    "net/minecraft/network/PacketBundlePacker": {
      "fields": {
        "a": "currentBundler",
        "b": "infoForCurrentBundler",
        "c": "flow"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lnet/minecraft/network/protocol/Packet;Ljava/util/List;)V": "decode"
      }
    },
    "net/minecraft/network/PacketBundleUnpacker": {
      "fields": {
        "a": "flow"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lnet/minecraft/network/protocol/Packet;Ljava/util/List;)V": "encode"
      }
    },
    "net/minecraft/network/PacketDecoder": {
      "fields": {
        "a": "LOGGER",
        "b": "flow"
      }
    },
    "net/minecraft/network/PacketEncoder": {
      "fields": {
        "a": "LOGGER",
        "b": "flow"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lnet/minecraft/network/protocol/Packet;Lio/netty/buffer/ByteBuf;)V": "encode"
      }
    },
    "net/minecraft/network/PacketListener": {
      "methods": {
        "a(Lnet/minecraft/network/chat/Component;)V": "onDisconnect",
        "a()Z": "isAcceptingMessages",
        "b()Z": "shouldPropagateHandlingExceptions"
      }
    },
    "net/minecraft/network/PacketSendListener": {
      "methods": {
        "a(Ljava/lang/Runnable;)Lnet/minecraft/network/PacketSendListener;": "thenRun",
        "a(Ljava/util/function/Supplier;)Lnet/minecraft/network/PacketSendListener;": "exceptionallySend",
        "a()V": "onSuccess",
        "b()Lnet/minecraft/network/protocol/Packet;": "onFailure"
      }
    },
    "net/minecraft/network/NetworkManagerServer": {
      "fields": {
        "i": "LOGGER",
        "j": "EXCEED_REASON",
        "k": "rateLimitPacketsPerSecond"
      },
      "methods": {
        "b()V": "tickSecond",
        "p()V": "lambda$tickSecond$0"
      }
    },
    "net/minecraft/network/SkipEncodeException": {},
    "net/minecraft/network/TickablePacketListener": {
      "methods": {
        "c()V": "tick"
      }
    },
    "net/minecraft/network/PacketSplitter": {},
    "net/minecraft/network/PacketPrepender": {
      "fields": {
        "a": "MAX_BYTES"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)V": "encode"
      }
    },
    "net/minecraft/network/chat/ChatDecorator": {
      "fields": {
        "a": "PLAIN"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/network/chat/Component;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/ChatMessageType": {
      "fields": {
        "j": "chat",
        "k": "narration",
        "a": "CODEC",
        "b": "DEFAULT_CHAT_DECORATION",
        "c": "CHAT",
        "d": "SAY_COMMAND",
        "e": "MSG_COMMAND_INCOMING",
        "f": "MSG_COMMAND_OUTGOING",
        "g": "TEAM_MSG_COMMAND_INCOMING",
        "h": "TEAM_MSG_COMMAND_OUTGOING",
        "i": "EMOTE_COMMAND"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "create",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/ChatType$Bound;": "bind",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/network/chat/ChatType$Bound;": "bind",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/ChatType$Bound;": "bind",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/ChatType$Bound;": "bind",
        "a()Lnet/minecraft/network/chat/ChatTypeDecoration;": "chat",
        "b()Lnet/minecraft/network/chat/ChatTypeDecoration;": "narration",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/ChatDecoration": {
      "fields": {
        "b": "translationKey",
        "c": "parameters",
        "d": "style",
        "a": "CODEC"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/ChatTypeDecoration;": "withSender",
        "b(Ljava/lang/String;)Lnet/minecraft/network/chat/ChatTypeDecoration;": "incomingDirectMessage",
        "c(Ljava/lang/String;)Lnet/minecraft/network/chat/ChatTypeDecoration;": "outgoingDirectMessage",
        "d(Ljava/lang/String;)Lnet/minecraft/network/chat/ChatTypeDecoration;": "teamMessage",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/ChatType$Bound;)Lnet/minecraft/network/chat/Component;": "decorate",
        "b(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/ChatType$Bound;)[Lnet/minecraft/network/chat/Component;": "resolveParameters",
        "a()Ljava/lang/String;": "translationKey",
        "b()Ljava/util/List;": "parameters",
        "c()Lnet/minecraft/network/chat/Style;": "style",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/ChatClickable": {
      "fields": {
        "a": "action",
        "b": "value"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/ClickEvent$Action;": "getAction",
        "b()Ljava/lang/String;": "getValue"
      }
    },
    "net/minecraft/network/chat/ChatClickable$EnumClickAction": {
      "fields": {
        "a": "OPEN_URL",
        "b": "OPEN_FILE",
        "c": "RUN_COMMAND",
        "d": "SUGGEST_COMMAND",
        "e": "CHANGE_PAGE",
        "f": "COPY_TO_CLIPBOARD",
        "g": "LOOKUP",
        "h": "allowFromServer",
        "i": "name",
        "j": "$VALUES"
      },
      "methods": {
        "a()Z": "isAllowedFromServer",
        "b()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/ClickEvent$Action;": "getByName",
        "a(Lnet/minecraft/network/chat/ClickEvent$Action;)Lnet/minecraft/network/chat/ClickEvent$Action;": "lambda$static$0",
        "c()[Lnet/minecraft/network/chat/ClickEvent$Action;": "$values"
      }
    },
    "net/minecraft/network/chat/CommonComponents": {
      "fields": {
        "a": "EMPTY",
        "b": "OPTION_ON",
        "c": "OPTION_OFF",
        "d": "GUI_DONE",
        "e": "GUI_CANCEL",
        "f": "GUI_YES",
        "g": "GUI_NO",
        "h": "GUI_OK",
        "i": "GUI_PROCEED",
        "j": "GUI_CONTINUE",
        "k": "GUI_BACK",
        "l": "GUI_TO_TITLE",
        "m": "GUI_ACKNOWLEDGE",
        "n": "GUI_OPEN_IN_BROWSER",
        "o": "GUI_COPY_LINK_TO_CLIPBOARD",
        "p": "CONNECT_FAILED",
        "q": "NEW_LINE",
        "r": "NARRATION_SEPARATOR",
        "s": "ELLIPSIS",
        "t": "SPACE"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/MutableComponent;": "space",
        "a(J)Lnet/minecraft/network/chat/MutableComponent;": "days",
        "b(J)Lnet/minecraft/network/chat/MutableComponent;": "hours",
        "c(J)Lnet/minecraft/network/chat/MutableComponent;": "minutes",
        "a(Z)Lnet/minecraft/network/chat/Component;": "optionStatus",
        "a(Lnet/minecraft/network/chat/Component;Z)Lnet/minecraft/network/chat/MutableComponent;": "optionStatus",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "optionNameValue",
        "a([Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "joinForNarration",
        "b([Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "joinLines",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "joinLines"
      }
    },
    "net/minecraft/network/chat/IChatBaseComponent": {
      "methods": {
        "a()Lnet/minecraft/network/chat/Style;": "getStyle",
        "b()Lnet/minecraft/network/chat/ComponentContents;": "getContents",
        "a(I)Ljava/lang/String;": "getString",
        "c()Ljava/util/List;": "getSiblings",
        "d()Lnet/minecraft/network/chat/MutableComponent;": "plainCopy",
        "e()Lnet/minecraft/network/chat/MutableComponent;": "copy",
        "f()Lnet/minecraft/util/FormattedCharSequence;": "getVisualOrderText",
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit",
        "g()Ljava/util/List;": "toFlatList",
        "a(Lnet/minecraft/network/chat/Style;)Ljava/util/List;": "toFlatList",
        "a(Lnet/minecraft/network/chat/Component;)Z": "contains",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "nullToEmpty",
        "b(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "literal",
        "c(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "translatable",
        "a(Ljava/lang/String;[Ljava/lang/Object;)Lnet/minecraft/network/chat/MutableComponent;": "translatable",
        "a(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "translatableWithFallback",
        "a(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Lnet/minecraft/network/chat/MutableComponent;": "translatableWithFallback",
        "h()Lnet/minecraft/network/chat/MutableComponent;": "empty",
        "d(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "keybind",
        "a(Ljava/lang/String;ZLjava/util/Optional;Lnet/minecraft/network/chat/contents/DataSource;)Lnet/minecraft/network/chat/MutableComponent;": "nbt",
        "b(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "score",
        "a(Ljava/lang/String;Ljava/util/Optional;)Lnet/minecraft/network/chat/MutableComponent;": "selector"
      }
    },
    "net/minecraft/network/chat/IChatBaseComponent$ChatSerializer": {
      "fields": {
        "a": "GSON",
        "b": "JSON_READER_POS",
        "c": "JSON_READER_LINESTART"
      },
      "methods": {
        "a(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;)Lnet/minecraft/network/chat/MutableComponent;": "deserialize",
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "unwrapTextArgument",
        "a(Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;Lcom/google/gson/JsonObject;)Ljava/util/Optional;": "parseSeparator",
        "a(Lnet/minecraft/network/chat/Style;Lcom/google/gson/JsonObject;Lcom/google/gson/JsonSerializationContext;)V": "serializeStyle",
        "a(Lnet/minecraft/network/chat/Component;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;)Lcom/google/gson/JsonElement;": "serialize",
        "a(Lcom/google/gson/JsonSerializationContext;Lcom/google/gson/JsonObject;Ljava/util/Optional;)V": "serializeSeparator",
        "a(Lnet/minecraft/network/chat/Component;)Ljava/lang/String;": "toJson",
        "b(Lnet/minecraft/network/chat/Component;)Ljava/lang/String;": "toStableJson",
        "c(Lnet/minecraft/network/chat/Component;)Lcom/google/gson/JsonElement;": "toJsonTree",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "fromJson",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/network/chat/MutableComponent;": "fromJson",
        "b(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "fromJsonLenient",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/network/chat/MutableComponent;": "fromJson",
        "a(Lcom/google/gson/stream/JsonReader;)I": "getPos"
      }
    },
    "net/minecraft/network/chat/ComponentContents": {
      "fields": {
        "a": "EMPTY"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/MutableComponent;": "resolve"
      }
    },
    "net/minecraft/network/chat/ChatComponentUtils": {
      "fields": {
        "a": "DEFAULT_SEPARATOR_TEXT",
        "b": "DEFAULT_SEPARATOR",
        "c": "DEFAULT_NO_STYLE_SEPARATOR"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/MutableComponent;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/MutableComponent;": "mergeStyles",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Optional;Lnet/minecraft/world/entity/Entity;I)Ljava/util/Optional;": "updateForEntity",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/network/chat/Component;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/MutableComponent;": "updateForEntity",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/network/chat/Style;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/Style;": "resolveStyle",
        "a(Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "formatList",
        "a(Ljava/util/Collection;Ljava/util/function/Function;)Lnet/minecraft/network/chat/Component;": "formatAndSortList",
        "b(Ljava/util/Collection;Ljava/util/function/Function;)Lnet/minecraft/network/chat/Component;": "formatList",
        "a(Ljava/util/Collection;Ljava/util/Optional;Ljava/util/function/Function;)Lnet/minecraft/network/chat/MutableComponent;": "formatList",
        "a(Ljava/util/Collection;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "formatList",
        "a(Ljava/util/Collection;Lnet/minecraft/network/chat/Component;Ljava/util/function/Function;)Lnet/minecraft/network/chat/MutableComponent;": "formatList",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "wrapInSquareBrackets",
        "a(Lcom/mojang/brigadier/Message;)Lnet/minecraft/network/chat/Component;": "fromMessage",
        "b(Lnet/minecraft/network/chat/Component;)Z": "isTranslationResolvable",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "copyOnClickText",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$copyOnClickText$1",
        "b(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$formatList$0"
      }
    },
    "net/minecraft/network/chat/FilterMask": {
      "fields": {
        "a": "CODEC",
        "b": "FULLY_FILTERED",
        "c": "PASS_THROUGH",
        "d": "FILTERED_STYLE",
        "e": "PASS_THROUGH_CODEC",
        "f": "FULLY_FILTERED_CODEC",
        "g": "PARTIALLY_FILTERED_CODEC",
        "h": "HASH",
        "i": "mask",
        "j": "type"
      },
      "methods": {
        "c()Lnet/minecraft/network/chat/FilterMask$Type;": "type",
        "d()Ljava/util/BitSet;": "mask",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/chat/FilterMask;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/chat/FilterMask;)V": "write",
        "a(I)V": "setFiltered",
        "a(Ljava/lang/String;)Ljava/lang/String;": "apply",
        "b(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "applyWithFormatting",
        "a()Z": "isEmpty",
        "b()Z": "isFullyFiltered"
      }
    },
    "net/minecraft/network/chat/IChatFormatted": {
      "fields": {
        "a": "STOP_ITERATION",
        "b": "EMPTY"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "e(Ljava/lang/String;)Lnet/minecraft/network/chat/FormattedText;": "of",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/FormattedText;": "of",
        "a([Lnet/minecraft/network/chat/FormattedText;)Lnet/minecraft/network/chat/FormattedText;": "composite",
        "a(Ljava/util/List;)Lnet/minecraft/network/chat/FormattedText;": "composite",
        "a(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/util/Optional;": "lambda$getString$0"
      }
    },
    "net/minecraft/network/chat/ChatHoverable": {
      "fields": {
        "a": "LOGGER",
        "b": "action",
        "c": "value"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/HoverEvent$Action;": "getAction",
        "a(Lnet/minecraft/network/chat/HoverEvent$Action;)Ljava/lang/Object;": "getValue",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/network/chat/HoverEvent;": "deserialize",
        "b()Lcom/google/gson/JsonObject;": "serialize"
      }
    },
    "net/minecraft/network/chat/ChatHoverable$EnumHoverAction": {
      "fields": {
        "a": "SHOW_TEXT",
        "b": "SHOW_ITEM",
        "c": "SHOW_ENTITY",
        "d": "LOOKUP",
        "e": "name",
        "f": "allowFromServer",
        "g": "argDeserializer",
        "h": "argSerializer",
        "i": "legacyArgDeserializer"
      },
      "methods": {
        "a()Z": "isAllowedFromServer",
        "b()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/HoverEvent$Action;": "getByName",
        "b(Ljava/lang/Object;)Ljava/lang/Object;": "cast",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/network/chat/HoverEvent;": "deserialize",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/HoverEvent;": "deserializeFromLegacy",
        "a(Ljava/lang/Object;)Lcom/google/gson/JsonElement;": "serializeArg",
        "a(Lnet/minecraft/network/chat/HoverEvent$Action;)Lnet/minecraft/network/chat/HoverEvent$Action;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/LastSeenMessages": {
      "fields": {
        "d": "entries",
        "a": "CODEC",
        "b": "EMPTY",
        "c": "LAST_SEEN_MESSAGES_MAX_LENGTH"
      },
      "methods": {
        "a(Lnet/minecraft/util/SignatureUpdater$Output;)V": "updateSignature",
        "a(Lnet/minecraft/network/chat/MessageSignatureCache;)Lnet/minecraft/network/chat/LastSeenMessages$Packed;": "pack",
        "a()Ljava/util/List;": "entries",
        "a(Lnet/minecraft/network/chat/MessageSignatureCache;Lnet/minecraft/network/chat/MessageSignature;)Lnet/minecraft/network/chat/MessageSignature$Packed;": "lambda$pack$0"
      }
    },
    "net/minecraft/network/chat/LastSeenMessagesValidator": {
      "fields": {
        "a": "lastSeenCount",
        "b": "trackedMessages",
        "c": "lastPendingMessage"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/MessageSignature;)V": "addPending",
        "a()I": "trackedMessagesCount",
        "a(I)Z": "applyOffset",
        "a(Lnet/minecraft/network/chat/LastSeenMessages$Update;)Ljava/util/Optional;": "applyUpdate"
      }
    },
    "net/minecraft/network/chat/LastSeenTrackedEntry": {
      "fields": {
        "a": "signature",
        "b": "pending"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/LastSeenTrackedEntry;": "acknowledge",
        "b()Lnet/minecraft/network/chat/MessageSignature;": "signature",
        "c()Z": "pending"
      }
    },
    "net/minecraft/network/chat/MessageSignature": {
      "fields": {
        "c": "bytes",
        "a": "CODEC",
        "b": "BYTES"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/chat/MessageSignature;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/chat/MessageSignature;)V": "write",
        "a(Lnet/minecraft/util/SignatureValidator;Lnet/minecraft/util/SignatureUpdater;)Z": "verify",
        "a()Ljava/nio/ByteBuffer;": "asByteBuffer",
        "a(Lnet/minecraft/network/chat/MessageSignatureCache;)Lnet/minecraft/network/chat/MessageSignature$Packed;": "pack",
        "b()[B": "bytes"
      }
    },
    "net/minecraft/network/chat/MessageSignatureCache": {
      "fields": {
        "a": "NOT_FOUND",
        "b": "DEFAULT_CAPACITY",
        "c": "entries"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/MessageSignatureCache;": "createDefault",
        "a(Lnet/minecraft/network/chat/MessageSignature;)I": "pack",
        "a(I)Lnet/minecraft/network/chat/MessageSignature;": "unpack",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;)V": "push",
        "a(Ljava/util/List;)V": "push",
        "a(Ljava/util/ArrayDeque;)V": "push"
      }
    },
    "net/minecraft/network/chat/IChatMutableComponent": {
      "fields": {
        "c": "contents",
        "d": "siblings",
        "e": "style",
        "f": "visualOrderText",
        "g": "decomposedWith"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/ComponentContents;)Lnet/minecraft/network/chat/MutableComponent;": "create",
        "b()Lnet/minecraft/network/chat/ComponentContents;": "getContents",
        "c()Ljava/util/List;": "getSiblings",
        "b(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/MutableComponent;": "setStyle",
        "a()Lnet/minecraft/network/chat/Style;": "getStyle",
        "f(Ljava/lang/String;)Lnet/minecraft/network/chat/MutableComponent;": "append",
        "b(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "append",
        "a(Ljava/util/function/UnaryOperator;)Lnet/minecraft/network/chat/MutableComponent;": "withStyle",
        "c(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/MutableComponent;": "withStyle",
        "a([Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/MutableComponent;": "withStyle",
        "a(Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/MutableComponent;": "withStyle",
        "f()Lnet/minecraft/util/FormattedCharSequence;": "getVisualOrderText"
      }
    },
    "net/minecraft/network/chat/OutgoingChatMessage": {
      "methods": {
        "a()Lnet/minecraft/network/chat/Component;": "content",
        "a(Lnet/minecraft/server/level/ServerPlayer;ZLnet/minecraft/network/chat/ChatType$Bound;)V": "sendToPlayer",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;)Lnet/minecraft/network/chat/OutgoingChatMessage;": "create"
      }
    },
    "net/minecraft/network/chat/PlayerChatMessage": {
      "fields": {
        "d": "link",
        "e": "signature",
        "f": "signedBody",
        "g": "unsignedContent",
        "h": "filterMask",
        "a": "MAP_CODEC",
        "i": "SYSTEM_SENDER",
        "b": "MESSAGE_EXPIRES_AFTER_SERVER",
        "c": "MESSAGE_EXPIRES_AFTER_CLIENT"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/PlayerChatMessage;": "system",
        "a(Ljava/util/UUID;Ljava/lang/String;)Lnet/minecraft/network/chat/PlayerChatMessage;": "unsigned",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/PlayerChatMessage;": "withUnsignedContent",
        "a()Lnet/minecraft/network/chat/PlayerChatMessage;": "removeUnsignedContent",
        "a(Lnet/minecraft/network/chat/FilterMask;)Lnet/minecraft/network/chat/PlayerChatMessage;": "filter",
        "a(Z)Lnet/minecraft/network/chat/PlayerChatMessage;": "filter",
        "a(Lnet/minecraft/util/SignatureUpdater$Output;Lnet/minecraft/network/chat/SignedMessageLink;Lnet/minecraft/network/chat/SignedMessageBody;)V": "updateSignature",
        "a(Lnet/minecraft/util/SignatureValidator;)Z": "verify",
        "b()Ljava/lang/String;": "signedContent",
        "c()Lnet/minecraft/network/chat/Component;": "decoratedContent",
        "d()Ljava/time/Instant;": "timeStamp",
        "e()J": "salt",
        "a(Ljava/time/Instant;)Z": "hasExpiredServer",
        "b(Ljava/time/Instant;)Z": "hasExpiredClient",
        "f()Ljava/util/UUID;": "sender",
        "g()Z": "isSystem",
        "h()Z": "hasSignature",
        "a(Ljava/util/UUID;)Z": "hasSignatureFrom",
        "i()Z": "isFullyFiltered",
        "j()Lnet/minecraft/network/chat/SignedMessageLink;": "link",
        "k()Lnet/minecraft/network/chat/MessageSignature;": "signature",
        "l()Lnet/minecraft/network/chat/SignedMessageBody;": "signedBody",
        "m()Lnet/minecraft/network/chat/Component;": "unsignedContent",
        "n()Lnet/minecraft/network/chat/FilterMask;": "filterMask",
        "o()Lnet/minecraft/network/chat/Component;": "lambda$decoratedContent$5",
        "a(Lnet/minecraft/util/SignatureUpdater$Output;)V": "lambda$verify$4",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/network/chat/SignedMessageLink;Ljava/util/Optional;Lnet/minecraft/network/chat/SignedMessageBody;Ljava/util/Optional;Lnet/minecraft/network/chat/FilterMask;)Lnet/minecraft/network/chat/PlayerChatMessage;": "lambda$static$2",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;)Ljava/util/Optional;": "lambda$static$1",
        "b(Lnet/minecraft/network/chat/PlayerChatMessage;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/RemoteChatSession": {
      "fields": {
        "a": "sessionId",
        "b": "profilePublicKey"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/SignedMessageValidator;": "createMessageValidator",
        "a(Ljava/util/UUID;)Lnet/minecraft/network/chat/SignedMessageChain$Decoder;": "createMessageDecoder",
        "b()Lnet/minecraft/network/chat/RemoteChatSession$Data;": "asData",
        "c()Z": "hasExpired",
        "d()Ljava/util/UUID;": "sessionId",
        "e()Lnet/minecraft/world/entity/player/ProfilePublicKey;": "profilePublicKey"
      }
    },
    "net/minecraft/network/chat/SignableCommand": {
      "fields": {
        "a": "arguments"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/ParseResults;)Lnet/minecraft/network/chat/SignableCommand;": "of",
        "a(Ljava/lang/String;Lcom/mojang/brigadier/context/CommandContextBuilder;)Ljava/util/List;": "collectArguments",
        "a()Ljava/util/List;": "arguments"
      }
    },
    "net/minecraft/network/chat/SignedMessageBody": {
      "fields": {
        "b": "content",
        "c": "timeStamp",
        "d": "salt",
        "e": "lastSeen",
        "a": "MAP_CODEC"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/SignedMessageBody;": "unsigned",
        "a(Lnet/minecraft/util/SignatureUpdater$Output;)V": "updateSignature",
        "a(Lnet/minecraft/network/chat/MessageSignatureCache;)Lnet/minecraft/network/chat/SignedMessageBody$Packed;": "pack",
        "a()Ljava/lang/String;": "content",
        "b()Ljava/time/Instant;": "timeStamp",
        "c()J": "salt",
        "d()Lnet/minecraft/network/chat/LastSeenMessages;": "lastSeen",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/SignedMessageChain": {
      "fields": {
        "a": "LOGGER",
        "b": "nextLink"
      },
      "methods": {
        "a(Lnet/minecraft/util/Signer;)Lnet/minecraft/network/chat/SignedMessageChain$Encoder;": "encoder",
        "a(Lnet/minecraft/world/entity/player/ProfilePublicKey;)Lnet/minecraft/network/chat/SignedMessageChain$Decoder;": "decoder",
        "a()Lnet/minecraft/network/chat/SignedMessageLink;": "advanceLink",
        "a(Lnet/minecraft/world/entity/player/ProfilePublicKey;Lnet/minecraft/util/SignatureValidator;Lnet/minecraft/network/chat/MessageSignature;Lnet/minecraft/network/chat/SignedMessageBody;)Lnet/minecraft/network/chat/PlayerChatMessage;": "lambda$decoder$2",
        "a(Lnet/minecraft/util/Signer;Lnet/minecraft/network/chat/SignedMessageBody;)Lnet/minecraft/network/chat/MessageSignature;": "lambda$encoder$1",
        "a(Lnet/minecraft/network/chat/SignedMessageLink;Lnet/minecraft/network/chat/SignedMessageBody;Lnet/minecraft/util/SignatureUpdater$Output;)V": "lambda$encoder$0"
      }
    },
    "net/minecraft/network/chat/SignedMessageLink": {
      "fields": {
        "b": "index",
        "c": "sender",
        "d": "sessionId",
        "a": "CODEC"
      },
      "methods": {
        "a(Ljava/util/UUID;)Lnet/minecraft/network/chat/SignedMessageLink;": "unsigned",
        "a(Ljava/util/UUID;Ljava/util/UUID;)Lnet/minecraft/network/chat/SignedMessageLink;": "root",
        "a(Lnet/minecraft/util/SignatureUpdater$Output;)V": "updateSignature",
        "a(Lnet/minecraft/network/chat/SignedMessageLink;)Z": "isDescendantOf",
        "a()Lnet/minecraft/network/chat/SignedMessageLink;": "advance",
        "b()I": "index",
        "c()Ljava/util/UUID;": "sender",
        "d()Ljava/util/UUID;": "sessionId",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/SignedMessageValidator": {
      "fields": {
        "a": "ACCEPT_UNSIGNED",
        "b": "REJECT_ALL"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;)Z": "lambda$static$1",
        "b(Lnet/minecraft/network/chat/PlayerChatMessage;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/ChatModifier": {
      "fields": {
        "a": "EMPTY",
        "b": "FORMATTING_CODEC",
        "c": "DEFAULT_FONT",
        "d": "color",
        "e": "bold",
        "f": "italic",
        "g": "underlined",
        "h": "strikethrough",
        "i": "obfuscated",
        "j": "clickEvent",
        "k": "hoverEvent",
        "l": "insertion",
        "m": "font"
      },
      "methods": {
        "a(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)Lnet/minecraft/network/chat/Style;": "create",
        "a()Lnet/minecraft/network/chat/TextColor;": "getColor",
        "b()Z": "isBold",
        "c()Z": "isItalic",
        "d()Z": "isStrikethrough",
        "e()Z": "isUnderlined",
        "f()Z": "isObfuscated",
        "g()Z": "isEmpty",
        "h()Lnet/minecraft/network/chat/ClickEvent;": "getClickEvent",
        "i()Lnet/minecraft/network/chat/HoverEvent;": "getHoverEvent",
        "j()Ljava/lang/String;": "getInsertion",
        "k()Lnet/minecraft/resources/ResourceLocation;": "getFont",
        "a(Lnet/minecraft/network/chat/TextColor;)Lnet/minecraft/network/chat/Style;": "withColor",
        "a(Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/Style;": "withColor",
        "a(I)Lnet/minecraft/network/chat/Style;": "withColor",
        "a(Ljava/lang/Boolean;)Lnet/minecraft/network/chat/Style;": "withBold",
        "b(Ljava/lang/Boolean;)Lnet/minecraft/network/chat/Style;": "withItalic",
        "c(Ljava/lang/Boolean;)Lnet/minecraft/network/chat/Style;": "withUnderlined",
        "d(Ljava/lang/Boolean;)Lnet/minecraft/network/chat/Style;": "withStrikethrough",
        "e(Ljava/lang/Boolean;)Lnet/minecraft/network/chat/Style;": "withObfuscated",
        "a(Lnet/minecraft/network/chat/ClickEvent;)Lnet/minecraft/network/chat/Style;": "withClickEvent",
        "a(Lnet/minecraft/network/chat/HoverEvent;)Lnet/minecraft/network/chat/Style;": "withHoverEvent",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Style;": "withInsertion",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/network/chat/Style;": "withFont",
        "b(Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/Style;": "applyFormat",
        "c(Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/Style;": "applyLegacyFormat",
        "a([Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/Style;": "applyFormats",
        "a(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "applyTo",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$8",
        "b(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$7",
        "c(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$6",
        "d(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$5",
        "e(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$4",
        "f(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$3",
        "g(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$2",
        "h(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$1",
        "i(Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/ChatModifier$ChatModifierSerializer": {
      "methods": {
        "a(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;)Lnet/minecraft/network/chat/Style;": "deserialize",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/resources/ResourceLocation;": "getFont",
        "b(Lcom/google/gson/JsonObject;)Lnet/minecraft/network/chat/HoverEvent;": "getHoverEvent",
        "c(Lcom/google/gson/JsonObject;)Lnet/minecraft/network/chat/ClickEvent;": "getClickEvent",
        "d(Lcom/google/gson/JsonObject;)Ljava/lang/String;": "getInsertion",
        "e(Lcom/google/gson/JsonObject;)Lnet/minecraft/network/chat/TextColor;": "getTextColor",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;)Ljava/lang/Boolean;": "getOptionalFlag",
        "a(Lnet/minecraft/network/chat/Style;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;)Lcom/google/gson/JsonElement;": "serialize"
      }
    },
    "net/minecraft/network/chat/ChatHexColor": {
      "fields": {
        "b": "CUSTOM_COLOR_PREFIX",
        "a": "CODEC",
        "c": "LEGACY_FORMAT_TO_COLOR",
        "d": "NAMED_COLORS",
        "e": "value",
        "f": "name"
      },
      "methods": {
        "a()I": "getValue",
        "b()Ljava/lang/String;": "serialize",
        "c()Ljava/lang/String;": "formatValue",
        "a(Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/TextColor;": "fromLegacyFormat",
        "a(I)Lnet/minecraft/network/chat/TextColor;": "fromRgb",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/TextColor;": "parseColor"
      }
    },
    "net/minecraft/network/chat/ThrowingComponent": {
      "fields": {
        "a": "component"
      },
      "methods": {
        "b()Lnet/minecraft/network/chat/Component;": "getComponent"
      }
    },
    "net/minecraft/network/chat/contents/BlockDataSource": {
      "fields": {
        "a": "posPattern",
        "b": "compiledPos"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "compilePos",
        "a()Ljava/lang/String;": "posPattern",
        "b()Lnet/minecraft/commands/arguments/coordinates/Coordinates;": "compiledPos"
      }
    },
    "net/minecraft/network/chat/contents/DataSource": {},
    "net/minecraft/network/chat/contents/EntityDataSource": {
      "fields": {
        "a": "selectorPattern",
        "b": "compiledSelector"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/selector/EntitySelector;": "compileSelector",
        "a()Ljava/lang/String;": "selectorPattern",
        "b()Lnet/minecraft/commands/arguments/selector/EntitySelector;": "compiledSelector"
      }
    },
    "net/minecraft/network/chat/contents/KeybindContents": {
      "fields": {
        "b": "name",
        "c": "nameResolver"
      },
      "methods": {
        "b()Lnet/minecraft/network/chat/Component;": "getNestedComponent",
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "a()Ljava/lang/String;": "getName"
      }
    },
    "net/minecraft/network/chat/contents/KeybindResolver": {
      "fields": {
        "a": "keyResolver"
      },
      "methods": {
        "a(Ljava/util/function/Function;)V": "setKeyResolver",
        "a(Ljava/lang/String;)Ljava/util/function/Supplier;": "lambda$static$1",
        "b(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$static$0"
      }
    },
    "net/minecraft/network/chat/contents/LiteralContents": {
      "fields": {
        "b": "text"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "a()Ljava/lang/String;": "text"
      }
    },
    "net/minecraft/network/chat/contents/NbtContents": {
      "fields": {
        "c": "LOGGER",
        "d": "interpreting",
        "e": "separator",
        "f": "nbtPathPattern",
        "g": "dataSource",
        "b": "compiledNbtPath"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;": "compileNbtPath",
        "a()Ljava/lang/String;": "getNbtPath",
        "b()Z": "isInterpreting",
        "c()Ljava/util/Optional;": "getSeparator",
        "d()Lnet/minecraft/network/chat/contents/DataSource;": "getDataSource",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/MutableComponent;": "resolve",
        "a(Ljava/util/stream/Stream;)Lnet/minecraft/network/chat/MutableComponent;": "lambda$resolve$5",
        "a(Ljava/util/stream/Stream;Lnet/minecraft/network/chat/MutableComponent;)Lnet/minecraft/network/chat/MutableComponent;": "lambda$resolve$4",
        "a(Lnet/minecraft/network/chat/MutableComponent;Lnet/minecraft/network/chat/MutableComponent;Lnet/minecraft/network/chat/MutableComponent;)Lnet/minecraft/network/chat/MutableComponent;": "lambda$resolve$3",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/MutableComponent;Lnet/minecraft/network/chat/MutableComponent;)Lnet/minecraft/network/chat/MutableComponent;": "lambda$resolve$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;ILjava/lang/String;)Ljava/util/stream/Stream;": "lambda$resolve$1",
        "a(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/stream/Stream;": "lambda$resolve$0"
      }
    },
    "net/minecraft/network/chat/contents/ScoreContents": {
      "fields": {
        "b": "SCORER_PLACEHOLDER",
        "c": "name",
        "d": "selector",
        "e": "objective"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/selector/EntitySelector;": "parseSelector",
        "a()Ljava/lang/String;": "getName",
        "b()Lnet/minecraft/commands/arguments/selector/EntitySelector;": "getSelector",
        "c()Ljava/lang/String;": "getObjective",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Ljava/lang/String;": "findTargetName",
        "a(Ljava/lang/String;Lnet/minecraft/commands/CommandSourceStack;)Ljava/lang/String;": "getScore",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/MutableComponent;": "resolve"
      }
    },
    "net/minecraft/network/chat/contents/SelectorContents": {
      "fields": {
        "c": "LOGGER",
        "d": "pattern",
        "e": "selector",
        "b": "separator"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/selector/EntitySelector;": "parseSelector",
        "a()Ljava/lang/String;": "getPattern",
        "b()Lnet/minecraft/commands/arguments/selector/EntitySelector;": "getSelector",
        "c()Ljava/util/Optional;": "getSeparator",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/MutableComponent;": "resolve",
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit"
      }
    },
    "net/minecraft/network/chat/contents/StorageDataSource": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "id"
      }
    },
    "net/minecraft/network/chat/contents/TranslatableContents": {
      "fields": {
        "b": "NO_ARGS",
        "c": "TEXT_PERCENT",
        "d": "TEXT_NULL",
        "e": "key",
        "f": "fallback",
        "g": "args",
        "h": "decomposedWith",
        "i": "decomposedParts",
        "j": "FORMAT_PATTERN"
      },
      "methods": {
        "d()V": "decompose",
        "a(Ljava/lang/String;Ljava/util/function/Consumer;)V": "decomposeTemplate",
        "a(I)Lnet/minecraft/network/chat/FormattedText;": "getArgument",
        "a(Lnet/minecraft/network/chat/FormattedText$StyledContentConsumer;Lnet/minecraft/network/chat/Style;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/network/chat/FormattedText$ContentConsumer;)Ljava/util/Optional;": "visit",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/network/chat/MutableComponent;": "resolve",
        "a()Ljava/lang/String;": "getKey",
        "b()Ljava/lang/String;": "getFallback",
        "c()[Ljava/lang/Object;": "getArgs"
      }
    },
    "net/minecraft/network/chat/contents/TranslatableFormatException": {},
    "net/minecraft/network/protocol/BundleDelimiterPacket": {
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/BundlePacket": {
      "fields": {
        "a": "packets"
      },
      "methods": {
        "a()Ljava/lang/Iterable;": "subPackets",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write"
      }
    },
    "net/minecraft/network/protocol/BundlerInfo": {
      "fields": {
        "a": "BUNDLER_PROVIDER",
        "b": "BUNDLE_SIZE_LIMIT",
        "c": "EMPTY"
      },
      "methods": {
        "a(Ljava/lang/Class;Ljava/util/function/Function;Lnet/minecraft/network/protocol/BundleDelimiterPacket;)Lnet/minecraft/network/protocol/BundlerInfo;": "createForPacket",
        "a(Lnet/minecraft/network/protocol/Packet;Ljava/util/function/Consumer;)V": "unbundlePacket",
        "a(Lnet/minecraft/network/protocol/Packet;)Lnet/minecraft/network/protocol/BundlerInfo$Bundler;": "startPacketBundling"
      }
    },
    "net/minecraft/network/protocol/Packet": {
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "b()Z": "isSkippable"
      }
    },
    "net/minecraft/network/protocol/EnumProtocolDirection": {
      "fields": {
        "a": "SERVERBOUND",
        "b": "CLIENTBOUND",
        "c": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/network/protocol/PacketFlow;": "getOpposite",
        "b()[Lnet/minecraft/network/protocol/PacketFlow;": "$values"
      }
    },
    "net/minecraft/network/protocol/PlayerConnectionUtils": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketListener;Lnet/minecraft/server/level/ServerLevel;)V": "ensureRunningOnSameThread",
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketListener;Lnet/minecraft/util/thread/BlockableEventLoop;)V": "ensureRunningOnSameThread"
      }
    },
    "net/minecraft/network/protocol/game/PacketListenerPlayOut": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "handleAddEntity",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddExperienceOrbPacket;)V": "handleAddExperienceOrb",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetObjectivePacket;)V": "handleAddObjective",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddPlayerPacket;)V": "handleAddPlayer",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAnimatePacket;)V": "handleAnimate",
        "a(Lnet/minecraft/network/protocol/game/ClientboundHurtAnimationPacket;)V": "handleHurtAnimation",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAwardStatsPacket;)V": "handleAwardStats",
        "a(Lnet/minecraft/network/protocol/game/ClientboundRecipePacket;)V": "handleAddOrRemoveRecipes",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBlockDestructionPacket;)V": "handleBlockDestruction",
        "a(Lnet/minecraft/network/protocol/game/ClientboundOpenSignEditorPacket;)V": "handleOpenSignEditor",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;)V": "handleBlockEntityData",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBlockEventPacket;)V": "handleBlockEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBlockUpdatePacket;)V": "handleBlockUpdate",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSystemChatPacket;)V": "handleSystemChat",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerChatPacket;)V": "handlePlayerChat",
        "a(Lnet/minecraft/network/protocol/game/ClientboundDisguisedChatPacket;)V": "handleDisguisedChat",
        "a(Lnet/minecraft/network/protocol/game/ClientboundDeleteChatPacket;)V": "handleDeleteChat",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket;)V": "handleChunkBlocksUpdate",
        "a(Lnet/minecraft/network/protocol/game/ClientboundMapItemDataPacket;)V": "handleMapItemData",
        "a(Lnet/minecraft/network/protocol/game/ClientboundContainerClosePacket;)V": "handleContainerClose",
        "a(Lnet/minecraft/network/protocol/game/ClientboundContainerSetContentPacket;)V": "handleContainerContent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundHorseScreenOpenPacket;)V": "handleHorseScreenOpen",
        "a(Lnet/minecraft/network/protocol/game/ClientboundContainerSetDataPacket;)V": "handleContainerSetData",
        "a(Lnet/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket;)V": "handleContainerSetSlot",
        "a(Lnet/minecraft/network/protocol/game/ClientboundCustomPayloadPacket;)V": "handleCustomPayload",
        "a(Lnet/minecraft/network/protocol/game/ClientboundDisconnectPacket;)V": "handleDisconnect",
        "a(Lnet/minecraft/network/protocol/game/ClientboundEntityEventPacket;)V": "handleEntityEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetEntityLinkPacket;)V": "handleEntityLinkPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetPassengersPacket;)V": "handleSetEntityPassengersPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundExplodePacket;)V": "handleExplosion",
        "a(Lnet/minecraft/network/protocol/game/ClientboundGameEventPacket;)V": "handleGameEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundKeepAlivePacket;)V": "handleKeepAlive",
        "a(Lnet/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket;)V": "handleLevelChunkWithLight",
        "a(Lnet/minecraft/network/protocol/game/ClientboundChunksBiomesPacket;)V": "handleChunksBiomes",
        "a(Lnet/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket;)V": "handleForgetLevelChunk",
        "a(Lnet/minecraft/network/protocol/game/ClientboundLevelEventPacket;)V": "handleLevelEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundLoginPacket;)V": "handleLogin",
        "a(Lnet/minecraft/network/protocol/game/ClientboundMoveEntityPacket;)V": "handleMoveEntity",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerPositionPacket;)V": "handleMovePlayer",
        "a(Lnet/minecraft/network/protocol/game/ClientboundLevelParticlesPacket;)V": "handleParticleEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPingPacket;)V": "handlePing",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerAbilitiesPacket;)V": "handlePlayerAbilities",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerInfoRemovePacket;)V": "handlePlayerInfoRemove",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket;)V": "handlePlayerInfoUpdate",
        "a(Lnet/minecraft/network/protocol/game/ClientboundRemoveEntitiesPacket;)V": "handleRemoveEntities",
        "a(Lnet/minecraft/network/protocol/game/ClientboundRemoveMobEffectPacket;)V": "handleRemoveMobEffect",
        "a(Lnet/minecraft/network/protocol/game/ClientboundRespawnPacket;)V": "handleRespawn",
        "a(Lnet/minecraft/network/protocol/game/ClientboundRotateHeadPacket;)V": "handleRotateMob",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetCarriedItemPacket;)V": "handleSetCarriedItem",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetDisplayObjectivePacket;)V": "handleSetDisplayObjective",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetEntityDataPacket;)V": "handleSetEntityData",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetEntityMotionPacket;)V": "handleSetEntityMotion",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetEquipmentPacket;)V": "handleSetEquipment",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetExperiencePacket;)V": "handleSetExperience",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetHealthPacket;)V": "handleSetHealth",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket;)V": "handleSetPlayerTeamPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetScorePacket;)V": "handleSetScore",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket;)V": "handleSetSpawn",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetTimePacket;)V": "handleSetTime",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSoundPacket;)V": "handleSoundEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSoundEntityPacket;)V": "handleSoundEntityEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundTakeItemEntityPacket;)V": "handleTakeItemEntity",
        "a(Lnet/minecraft/network/protocol/game/ClientboundTeleportEntityPacket;)V": "handleTeleportEntity",
        "a(Lnet/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket;)V": "handleUpdateAttributes",
        "a(Lnet/minecraft/network/protocol/game/ClientboundUpdateMobEffectPacket;)V": "handleUpdateMobEffect",
        "a(Lnet/minecraft/network/protocol/game/ClientboundUpdateTagsPacket;)V": "handleUpdateTags",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerCombatEndPacket;)V": "handlePlayerCombatEnd",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerCombatEnterPacket;)V": "handlePlayerCombatEnter",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerCombatKillPacket;)V": "handlePlayerCombatKill",
        "a(Lnet/minecraft/network/protocol/game/ClientboundChangeDifficultyPacket;)V": "handleChangeDifficulty",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetCameraPacket;)V": "handleSetCamera",
        "a(Lnet/minecraft/network/protocol/game/ClientboundInitializeBorderPacket;)V": "handleInitializeBorder",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetBorderLerpSizePacket;)V": "handleSetBorderLerpSize",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetBorderSizePacket;)V": "handleSetBorderSize",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetBorderWarningDelayPacket;)V": "handleSetBorderWarningDelay",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetBorderWarningDistancePacket;)V": "handleSetBorderWarningDistance",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetBorderCenterPacket;)V": "handleSetBorderCenter",
        "a(Lnet/minecraft/network/protocol/game/ClientboundTabListPacket;)V": "handleTabListCustomisation",
        "a(Lnet/minecraft/network/protocol/game/ClientboundResourcePackPacket;)V": "handleResourcePack",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;)V": "handleBossUpdate",
        "a(Lnet/minecraft/network/protocol/game/ClientboundCooldownPacket;)V": "handleItemCooldown",
        "a(Lnet/minecraft/network/protocol/game/ClientboundMoveVehiclePacket;)V": "handleMoveVehicle",
        "a(Lnet/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket;)V": "handleUpdateAdvancementsPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSelectAdvancementsTabPacket;)V": "handleSelectAdvancementsTab",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlaceGhostRecipePacket;)V": "handlePlaceRecipe",
        "a(Lnet/minecraft/network/protocol/game/ClientboundCommandsPacket;)V": "handleCommands",
        "a(Lnet/minecraft/network/protocol/game/ClientboundStopSoundPacket;)V": "handleStopSoundEvent",
        "a(Lnet/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket;)V": "handleCommandSuggestions",
        "a(Lnet/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket;)V": "handleUpdateRecipes",
        "a(Lnet/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket;)V": "handleLookAt",
        "a(Lnet/minecraft/network/protocol/game/ClientboundTagQueryPacket;)V": "handleTagQueryPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundLightUpdatePacket;)V": "handleLightUpdatePacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundOpenBookPacket;)V": "handleOpenBook",
        "a(Lnet/minecraft/network/protocol/game/ClientboundOpenScreenPacket;)V": "handleOpenScreen",
        "a(Lnet/minecraft/network/protocol/game/ClientboundMerchantOffersPacket;)V": "handleMerchantOffers",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetChunkCacheRadiusPacket;)V": "handleSetChunkCacheRadius",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket;)V": "handleSetSimulationDistance",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetChunkCacheCenterPacket;)V": "handleSetChunkCacheCenter",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket;)V": "handleBlockChangedAck",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetActionBarTextPacket;)V": "setActionBarText",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetSubtitleTextPacket;)V": "setSubtitleText",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetTitleTextPacket;)V": "setTitleText",
        "a(Lnet/minecraft/network/protocol/game/ClientboundSetTitlesAnimationPacket;)V": "setTitlesAnimation",
        "a(Lnet/minecraft/network/protocol/game/ClientboundClearTitlesPacket;)V": "handleTitlesClear",
        "a(Lnet/minecraft/network/protocol/game/ClientboundServerDataPacket;)V": "handleServerData",
        "a(Lnet/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket;)V": "handleCustomChatCompletions",
        "a(Lnet/minecraft/network/protocol/game/ClientboundUpdateEnabledFeaturesPacket;)V": "handleEnabledFeatures",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBundlePacket;)V": "handleBundlePacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundDamageEventPacket;)V": "handleDamageEvent"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutSpawnEntity": {
      "fields": {
        "a": "MAGICAL_QUANTIZATION",
        "b": "LIMIT",
        "c": "id",
        "d": "uuid",
        "e": "type",
        "f": "x",
        "g": "y",
        "h": "z",
        "i": "xa",
        "j": "ya",
        "k": "za",
        "l": "xRot",
        "m": "yRot",
        "n": "yHeadRot",
        "o": "data"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()Ljava/util/UUID;": "getUUID",
        "d()Lnet/minecraft/world/entity/EntityType;": "getType",
        "e()D": "getX",
        "f()D": "getY",
        "g()D": "getZ",
        "h()D": "getXa",
        "i()D": "getYa",
        "j()D": "getZa",
        "k()F": "getXRot",
        "l()F": "getYRot",
        "m()F": "getYHeadRot",
        "n()I": "getData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutSpawnEntityExperienceOrb": {
      "fields": {
        "a": "id",
        "b": "x",
        "c": "y",
        "d": "z",
        "e": "value"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()D": "getX",
        "d()D": "getY",
        "e()D": "getZ",
        "f()I": "getValue",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutNamedEntitySpawn": {
      "fields": {
        "a": "entityId",
        "b": "playerId",
        "c": "x",
        "d": "y",
        "e": "z",
        "f": "yRot",
        "g": "xRot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getEntityId",
        "c()Ljava/util/UUID;": "getPlayerId",
        "d()D": "getX",
        "e()D": "getY",
        "f()D": "getZ",
        "g()B": "getyRot",
        "h()B": "getxRot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutAnimation": {
      "fields": {
        "a": "SWING_MAIN_HAND",
        "b": "WAKE_UP",
        "c": "SWING_OFF_HAND",
        "d": "CRITICAL_HIT",
        "e": "MAGIC_CRITICAL_HIT",
        "f": "id",
        "g": "action"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()I": "getAction",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutStatistic": {
      "fields": {
        "a": "stats"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/stats/StatType;)Lnet/minecraft/stats/Stat;": "readStatCap",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/stats/Stat;)V": "writeStatCap",
        "a()Ljava/util/Map;": "getStats",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/stats/Stat;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundBlockChangedAckPacket": {
      "fields": {
        "a": "sequence"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "sequence",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutBlockBreakAnimation": {
      "fields": {
        "a": "id",
        "b": "pos",
        "c": "progress"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()Lnet/minecraft/core/BlockPos;": "getPos",
        "d()I": "getProgress",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutTileEntityData": {
      "fields": {
        "a": "pos",
        "b": "type",
        "c": "tag"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;Ljava/util/function/Function;)Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "create",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "create",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Lnet/minecraft/world/level/block/entity/BlockEntityType;": "getType",
        "d()Lnet/minecraft/nbt/CompoundTag;": "getTag",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutBlockAction": {
      "fields": {
        "a": "pos",
        "b": "b0",
        "c": "b1",
        "d": "block"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()I": "getB0",
        "d()I": "getB1",
        "e()Lnet/minecraft/world/level/block/Block;": "getBlock",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutBlockChange": {
      "fields": {
        "a": "pos",
        "b": "blockState"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "c()Lnet/minecraft/core/BlockPos;": "getPos",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutBoss": {
      "fields": {
        "a": "FLAG_DARKEN",
        "b": "FLAG_MUSIC",
        "c": "FLAG_FOG",
        "d": "id",
        "e": "operation",
        "f": "REMOVE_OPERATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/BossEvent;)Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;": "createAddPacket",
        "a(Ljava/util/UUID;)Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;": "createRemovePacket",
        "b(Lnet/minecraft/world/BossEvent;)Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;": "createUpdateProgressPacket",
        "c(Lnet/minecraft/world/BossEvent;)Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;": "createUpdateNamePacket",
        "d(Lnet/minecraft/world/BossEvent;)Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;": "createUpdateStylePacket",
        "e(Lnet/minecraft/world/BossEvent;)Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;": "createUpdatePropertiesPacket",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(ZZZ)I": "encodeProperties",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket$Handler;)V": "dispatch",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutBoss$Action": {
      "methods": {
        "a()Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket$OperationType;": "getType",
        "a(Ljava/util/UUID;Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket$Handler;)V": "dispatch",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundBundlePacket": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutServerDifficulty": {
      "fields": {
        "a": "difficulty",
        "b": "locked"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Z": "isLocked",
        "c()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket": {
      "fields": {
        "a": "chunkBiomeData",
        "b": "TWO_MEGABYTES"
      },
      "methods": {
        "a(Ljava/util/List;)Lnet/minecraft/network/protocol/game/ClientboundChunksBiomesPacket;": "forChunks",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/List;": "chunkBiomeData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/protocol/game/ClientboundChunksBiomesPacket$ChunkBiomeData;)V": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundClearTitlesPacket": {
      "fields": {
        "a": "resetTimes"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Z": "shouldResetTimes",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutTabComplete": {
      "fields": {
        "a": "id",
        "b": "suggestions"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()Lcom/mojang/brigadier/suggestion/Suggestions;": "getSuggestions",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lcom/mojang/brigadier/suggestion/Suggestion;)V": "lambda$write$2",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lcom/mojang/brigadier/Message;)V": "lambda$write$1",
        "a(Lcom/mojang/brigadier/context/StringRange;Lnet/minecraft/network/FriendlyByteBuf;)Lcom/mojang/brigadier/suggestion/Suggestion;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutCommands": {
      "fields": {
        "a": "MASK_TYPE",
        "b": "FLAG_EXECUTABLE",
        "c": "FLAG_REDIRECT",
        "d": "FLAG_CUSTOM_SUGGESTIONS",
        "e": "TYPE_ROOT",
        "f": "TYPE_LITERAL",
        "g": "TYPE_ARGUMENT",
        "h": "rootIndex",
        "i": "entries"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Ljava/util/List;Ljava/util/function/BiPredicate;)V": "validateEntries",
        "a(Ljava/util/List;)V": "validateEntries",
        "a(Lcom/mojang/brigadier/tree/RootCommandNode;)Lit/unimi/dsi/fastutil/objects/Object2IntMap;": "enumerateNodes",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap;)Ljava/util/List;": "createEntries",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ClientboundCommandsPacket$Entry;": "readNode",
        "a(Lnet/minecraft/network/FriendlyByteBuf;B)Lnet/minecraft/network/protocol/game/ClientboundCommandsPacket$NodeStub;": "read",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Lit/unimi/dsi/fastutil/objects/Object2IntMap;)Lnet/minecraft/network/protocol/game/ClientboundCommandsPacket$Entry;": "createEntry",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/commands/CommandBuildContext;)Lcom/mojang/brigadier/tree/RootCommandNode;": "getRoot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Ljava/util/function/BiPredicate;Ljava/util/List;Lit/unimi/dsi/fastutil/ints/IntSet;I)Z": "lambda$validateEntries$1",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/protocol/game/ClientboundCommandsPacket$Entry;)V": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutCloseWindow": {
      "fields": {
        "a": "containerId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutWindowItems": {
      "fields": {
        "a": "containerId",
        "b": "stateId",
        "c": "items",
        "d": "carriedItem"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()Ljava/util/List;": "getItems",
        "d()Lnet/minecraft/world/item/ItemStack;": "getCarriedItem",
        "e()I": "getStateId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutWindowData": {
      "fields": {
        "a": "containerId",
        "b": "id",
        "c": "value"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()I": "getId",
        "d()I": "getValue",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutSetSlot": {
      "fields": {
        "a": "CARRIED_ITEM",
        "b": "PLAYER_INVENTORY",
        "c": "containerId",
        "d": "stateId",
        "e": "slot",
        "f": "itemStack"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()I": "getSlot",
        "d()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "e()I": "getStateId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutSetCooldown": {
      "fields": {
        "a": "item",
        "b": "duration"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/item/Item;": "getItem",
        "c()I": "getDuration",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket": {
      "fields": {
        "a": "action",
        "b": "entries"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket$Action;": "action",
        "c()Ljava/util/List;": "entries",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket$Action": {
      "fields": {
        "a": "ADD",
        "b": "REMOVE",
        "c": "SET",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ClientboundCustomChatCompletionsPacket$Action;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutCustomPayload": {
      "fields": {
        "s": "MAX_PAYLOAD_SIZE",
        "a": "BRAND",
        "b": "DEBUG_PATHFINDING_PACKET",
        "c": "DEBUG_NEIGHBORSUPDATE_PACKET",
        "d": "DEBUG_STRUCTURES_PACKET",
        "e": "DEBUG_WORLDGENATTEMPT_PACKET",
        "f": "DEBUG_POI_TICKET_COUNT_PACKET",
        "g": "DEBUG_POI_ADDED_PACKET",
        "h": "DEBUG_POI_REMOVED_PACKET",
        "i": "DEBUG_VILLAGE_SECTIONS",
        "j": "DEBUG_GOAL_SELECTOR",
        "k": "DEBUG_BRAIN",
        "l": "DEBUG_BEE",
        "m": "DEBUG_HIVE",
        "n": "DEBUG_GAME_TEST_ADD_MARKER",
        "o": "DEBUG_GAME_TEST_CLEAR",
        "p": "DEBUG_RAIDS",
        "q": "DEBUG_GAME_EVENT",
        "r": "DEBUG_GAME_EVENT_LISTENER",
        "t": "identifier",
        "u": "data"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getIdentifier",
        "c()Lnet/minecraft/network/FriendlyByteBuf;": "getData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundDamageEventPacket": {
      "fields": {
        "a": "entityId",
        "b": "sourceTypeId",
        "c": "sourceCauseId",
        "d": "sourceDirectId",
        "e": "sourcePosition"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;I)V": "writeOptionalEntityId",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)I": "readOptionalEntityId",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/damagesource/DamageSource;": "getSource",
        "a()I": "entityId",
        "c()I": "sourceTypeId",
        "d()I": "sourceCauseId",
        "e()I": "sourceDirectId",
        "f()Ljava/util/Optional;": "sourcePosition",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/phys/Vec3;)V": "lambda$write$1",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/phys/Vec3;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundDeleteChatPacket": {
      "fields": {
        "a": "messageSignature"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/MessageSignature$Packed;": "messageSignature",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutKickDisconnect": {
      "fields": {
        "a": "reason"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getReason",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundDisguisedChatPacket": {
      "fields": {
        "a": "message",
        "b": "chatType"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "b()Z": "isSkippable",
        "a()Lnet/minecraft/network/chat/Component;": "message",
        "c()Lnet/minecraft/network/chat/ChatType$BoundNetwork;": "chatType",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityStatus": {
      "fields": {
        "a": "entityId",
        "b": "eventId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a()B": "getEventId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutExplosion": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "power",
        "e": "toBlow",
        "f": "knockbackX",
        "g": "knockbackY",
        "h": "knockbackZ"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()F": "getKnockbackX",
        "c()F": "getKnockbackY",
        "d()F": "getKnockbackZ",
        "e()D": "getX",
        "f()D": "getY",
        "g()D": "getZ",
        "h()F": "getPower",
        "i()Ljava/util/List;": "getToBlow",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(IIILnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/core/BlockPos;)V": "lambda$write$1",
        "a(IIILnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/core/BlockPos;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutUnloadChunk": {
      "fields": {
        "a": "x",
        "b": "z"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getX",
        "c()I": "getZ",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutGameStateChange": {
      "fields": {
        "a": "NO_RESPAWN_BLOCK_AVAILABLE",
        "b": "START_RAINING",
        "c": "STOP_RAINING",
        "d": "CHANGE_GAME_MODE",
        "e": "WIN_GAME",
        "f": "DEMO_EVENT",
        "g": "ARROW_HIT_PLAYER",
        "h": "RAIN_LEVEL_CHANGE",
        "i": "THUNDER_LEVEL_CHANGE",
        "j": "PUFFER_FISH_STING",
        "k": "GUARDIAN_ELDER_EFFECT",
        "l": "IMMEDIATE_RESPAWN",
        "m": "DEMO_PARAM_INTRO",
        "n": "DEMO_PARAM_HINT_1",
        "o": "DEMO_PARAM_HINT_2",
        "p": "DEMO_PARAM_HINT_3",
        "q": "DEMO_PARAM_HINT_4",
        "r": "event",
        "s": "param"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/protocol/game/ClientboundGameEventPacket$Type;": "getEvent",
        "c()F": "getParam",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutOpenWindowHorse": {
      "fields": {
        "a": "containerId",
        "b": "size",
        "c": "entityId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()I": "getSize",
        "d()I": "getEntityId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundHurtAnimationPacket": {
      "fields": {
        "a": "id",
        "b": "yaw"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "id",
        "c()F": "yaw",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundInitializeBorderPacket": {
      "fields": {
        "a": "newCenterX",
        "b": "newCenterZ",
        "c": "oldSize",
        "d": "newSize",
        "e": "lerpTime",
        "f": "newAbsoluteMaxSize",
        "g": "warningBlocks",
        "h": "warningTime"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()D": "getNewCenterX",
        "c()D": "getNewCenterZ",
        "d()D": "getNewSize",
        "e()D": "getOldSize",
        "f()J": "getLerpTime",
        "g()I": "getNewAbsoluteMaxSize",
        "h()I": "getWarningTime",
        "i()I": "getWarningBlocks",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutKeepAlive": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()J": "getId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData": {
      "fields": {
        "a": "TWO_MEGABYTES",
        "b": "heightmaps",
        "c": "buffer",
        "d": "blockEntitiesData"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;)I": "calculateChunkSize",
        "c()Lio/netty/buffer/ByteBuf;": "getWriteBuffer",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/level/chunk/LevelChunk;)V": "extractChunkData",
        "a(II)Ljava/util/function/Consumer;": "getBlockEntitiesTagsConsumer",
        "a(Lnet/minecraft/network/protocol/game/ClientboundLevelChunkPacketData$BlockEntityTagOutput;II)V": "getBlockEntitiesTags",
        "a()Lnet/minecraft/network/FriendlyByteBuf;": "getReadBuffer",
        "b()Lnet/minecraft/nbt/CompoundTag;": "getHeightmaps",
        "a(IILnet/minecraft/network/protocol/game/ClientboundLevelChunkPacketData$BlockEntityTagOutput;)V": "lambda$getBlockEntitiesTagsConsumer$1",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/protocol/game/ClientboundLevelChunkPacketData$BlockEntityInfo;)V": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket": {
      "fields": {
        "a": "x",
        "b": "z",
        "c": "chunkData",
        "d": "lightData"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getX",
        "c()I": "getZ",
        "d()Lnet/minecraft/network/protocol/game/ClientboundLevelChunkPacketData;": "getChunkData",
        "e()Lnet/minecraft/network/protocol/game/ClientboundLightUpdatePacketData;": "getLightData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutWorldEvent": {
      "fields": {
        "a": "type",
        "b": "pos",
        "c": "data",
        "d": "globalEvent"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Z": "isGlobalEvent",
        "c()I": "getType",
        "d()I": "getData",
        "e()Lnet/minecraft/core/BlockPos;": "getPos",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutWorldParticles": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "xDist",
        "e": "yDist",
        "f": "zDist",
        "g": "maxSpeed",
        "h": "count",
        "i": "overrideLimiter",
        "j": "particle"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Z": "isOverrideLimiter",
        "c()D": "getX",
        "d()D": "getY",
        "e()D": "getZ",
        "f()F": "getXDist",
        "g()F": "getYDist",
        "h()F": "getZDist",
        "i()F": "getMaxSpeed",
        "j()I": "getCount",
        "k()Lnet/minecraft/core/particles/ParticleOptions;": "getParticle",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutLightUpdate": {
      "fields": {
        "a": "x",
        "b": "z",
        "c": "lightData"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getX",
        "c()I": "getZ",
        "d()Lnet/minecraft/network/protocol/game/ClientboundLightUpdatePacketData;": "getLightData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData": {
      "fields": {
        "a": "skyYMask",
        "b": "blockYMask",
        "c": "emptySkyYMask",
        "d": "emptyBlockYMask",
        "e": "skyUpdates",
        "f": "blockUpdates"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/lighting/LevelLightEngine;Lnet/minecraft/world/level/LightLayer;ILjava/util/BitSet;Ljava/util/BitSet;Ljava/util/List;)V": "prepareSectionData",
        "a()Ljava/util/BitSet;": "getSkyYMask",
        "b()Ljava/util/BitSet;": "getEmptySkyYMask",
        "c()Ljava/util/List;": "getSkyUpdates",
        "d()Ljava/util/BitSet;": "getBlockYMask",
        "e()Ljava/util/BitSet;": "getEmptyBlockYMask",
        "f()Ljava/util/List;": "getBlockUpdates",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)[B": "lambda$new$1",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)[B": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutLogin": {
      "fields": {
        "a": "playerId",
        "b": "hardcore",
        "c": "gameType",
        "d": "previousGameType",
        "e": "levels",
        "f": "registryHolder",
        "g": "dimensionType",
        "h": "dimension",
        "i": "seed",
        "j": "maxPlayers",
        "k": "chunkRadius",
        "l": "simulationDistance",
        "m": "reducedDebugInfo",
        "n": "showDeathScreen",
        "o": "isDebug",
        "p": "isFlat",
        "q": "lastDeathLocation",
        "r": "portalCooldown",
        "s": "BUILTIN_CONTEXT_OPS"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "playerId",
        "c()Z": "hardcore",
        "d()Lnet/minecraft/world/level/GameType;": "gameType",
        "e()Lnet/minecraft/world/level/GameType;": "previousGameType",
        "f()Ljava/util/Set;": "levels",
        "g()Lnet/minecraft/core/RegistryAccess$Frozen;": "registryHolder",
        "h()Lnet/minecraft/resources/ResourceKey;": "dimensionType",
        "i()Lnet/minecraft/resources/ResourceKey;": "dimension",
        "j()J": "seed",
        "k()I": "maxPlayers",
        "l()I": "chunkRadius",
        "m()I": "simulationDistance",
        "n()Z": "reducedDebugInfo",
        "o()Z": "showDeathScreen",
        "p()Z": "isDebug",
        "q()Z": "isFlat",
        "r()Ljava/util/Optional;": "lastDeathLocation",
        "s()I": "portalCooldown",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/resources/ResourceKey;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutMap": {
      "fields": {
        "a": "mapId",
        "b": "scale",
        "c": "locked",
        "d": "decorations",
        "e": "colorPatch"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getMapId",
        "a(Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;)V": "applyToMap",
        "c()B": "getScale",
        "d()Z": "isLocked",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Ljava/util/List;)V": "lambda$write$3",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/level/saveddata/maps/MapDecoration;)V": "lambda$write$2",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/util/List;": "lambda$new$1",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/level/saveddata/maps/MapDecoration;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutOpenWindowMerchant": {
      "fields": {
        "a": "containerId",
        "b": "offers",
        "c": "villagerLevel",
        "d": "villagerXp",
        "e": "showProgress",
        "f": "canRestock"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()Lnet/minecraft/world/item/trading/MerchantOffers;": "getOffers",
        "d()I": "getVillagerLevel",
        "e()I": "getVillagerXp",
        "f()Z": "showProgress",
        "g()Z": "canRestock",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntity": {
      "fields": {
        "a": "entityId",
        "b": "xa",
        "c": "ya",
        "d": "za",
        "e": "yRot",
        "f": "xRot",
        "g": "onGround",
        "h": "hasRot",
        "i": "hasPos"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a()S": "getXa",
        "c()S": "getYa",
        "d()S": "getZa",
        "e()B": "getyRot",
        "f()B": "getxRot",
        "g()Z": "hasRotation",
        "h()Z": "hasPosition",
        "i()Z": "isOnGround",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntity$PacketPlayOutRelEntityMove": {
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ClientboundMoveEntityPacket$Pos;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntity$PacketPlayOutRelEntityMoveLook": {
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ClientboundMoveEntityPacket$PosRot;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntity$PacketPlayOutEntityLook": {
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ClientboundMoveEntityPacket$Rot;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutVehicleMove": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "yRot",
        "e": "xRot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()D": "getX",
        "c()D": "getY",
        "d()D": "getZ",
        "e()F": "getYRot",
        "f()F": "getXRot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutOpenBook": {
      "fields": {
        "a": "hand"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/InteractionHand;": "getHand",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutOpenWindow": {
      "fields": {
        "a": "containerId",
        "b": "type",
        "c": "title"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()Lnet/minecraft/world/inventory/MenuType;": "getType",
        "d()Lnet/minecraft/network/chat/Component;": "getTitle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutOpenSignEditor": {
      "fields": {
        "a": "pos",
        "b": "isFrontText"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Z": "isFrontText",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPingPacket": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutAutoRecipe": {
      "fields": {
        "a": "containerId",
        "b": "recipe"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getRecipe",
        "c()I": "getContainerId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutAbilities": {
      "fields": {
        "a": "FLAG_INVULNERABLE",
        "b": "FLAG_FLYING",
        "c": "FLAG_CAN_FLY",
        "d": "FLAG_INSTABUILD",
        "e": "invulnerable",
        "f": "isFlying",
        "g": "canFly",
        "h": "instabuild",
        "i": "flyingSpeed",
        "j": "walkingSpeed"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Z": "isInvulnerable",
        "c()Z": "isFlying",
        "d()Z": "canFly",
        "e()Z": "canInstabuild",
        "f()F": "getFlyingSpeed",
        "g()F": "getWalkingSpeed",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPlayerChatPacket": {
      "fields": {
        "a": "sender",
        "b": "index",
        "c": "signature",
        "d": "body",
        "e": "unsignedContent",
        "f": "filterMask",
        "g": "chatType"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "b()Z": "isSkippable",
        "a()Ljava/util/UUID;": "sender",
        "c()I": "index",
        "d()Lnet/minecraft/network/chat/MessageSignature;": "signature",
        "e()Lnet/minecraft/network/chat/SignedMessageBody$Packed;": "body",
        "f()Lnet/minecraft/network/chat/Component;": "unsignedContent",
        "g()Lnet/minecraft/network/chat/FilterMask;": "filterMask",
        "h()Lnet/minecraft/network/chat/ChatType$BoundNetwork;": "chatType",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPlayerCombatEndPacket": {
      "fields": {
        "a": "duration"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPlayerCombatEnterPacket": {
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPlayerCombatKillPacket": {
      "fields": {
        "a": "playerId",
        "b": "message"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "b()Z": "isSkippable",
        "a()I": "getPlayerId",
        "c()Lnet/minecraft/network/chat/Component;": "getMessage",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPlayerInfoRemovePacket": {
      "fields": {
        "a": "profileIds"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/List;": "profileIds",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket": {
      "fields": {
        "a": "actions",
        "b": "entries"
      },
      "methods": {
        "a(Ljava/util/Collection;)Lnet/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket;": "createPlayerInitializing",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/EnumSet;": "actions",
        "c()Ljava/util/List;": "entries",
        "d()Ljava/util/List;": "newEntries",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket$Entry;)V": "lambda$write$1",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket$Entry;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutLookAt": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "entity",
        "e": "fromAnchor",
        "f": "toAnchor",
        "g": "atEntity"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;": "getFromAnchor",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutPosition": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "yRot",
        "e": "xRot",
        "f": "relativeArguments",
        "g": "id"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()D": "getX",
        "c()D": "getY",
        "d()D": "getZ",
        "e()F": "getYRot",
        "f()F": "getXRot",
        "g()I": "getId",
        "h()Ljava/util/Set;": "getRelativeArguments",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutRecipes": {
      "fields": {
        "a": "state",
        "b": "recipes",
        "c": "toHighlight",
        "d": "bookSettings"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/List;": "getRecipes",
        "c()Ljava/util/List;": "getHighlights",
        "d()Lnet/minecraft/stats/RecipeBookSettings;": "getBookSettings",
        "e()Lnet/minecraft/network/protocol/game/ClientboundRecipePacket$State;": "getState",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutRecipes$Action": {
      "fields": {
        "a": "INIT",
        "b": "ADD",
        "c": "REMOVE",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ClientboundRecipePacket$State;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityDestroy": {
      "fields": {
        "a": "entityIds"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lit/unimi/dsi/fastutil/ints/IntList;": "getEntityIds",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutRemoveEntityEffect": {
      "fields": {
        "a": "entityId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutResourcePackSend": {
      "fields": {
        "a": "MAX_HASH_LENGTH",
        "b": "url",
        "c": "hash",
        "d": "required",
        "e": "prompt"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "getUrl",
        "c()Ljava/lang/String;": "getHash",
        "d()Z": "isRequired",
        "e()Lnet/minecraft/network/chat/Component;": "getPrompt",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutRespawn": {
      "fields": {
        "a": "KEEP_ATTRIBUTES",
        "b": "KEEP_ENTITY_DATA",
        "c": "KEEP_ALL_DATA",
        "d": "dimensionType",
        "e": "dimension",
        "f": "seed",
        "g": "playerGameType",
        "h": "previousPlayerGameType",
        "i": "isDebug",
        "j": "isFlat",
        "k": "dataToKeep",
        "l": "lastDeathLocation",
        "m": "portalCooldown"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/resources/ResourceKey;": "getDimensionType",
        "c()Lnet/minecraft/resources/ResourceKey;": "getDimension",
        "d()J": "getSeed",
        "e()Lnet/minecraft/world/level/GameType;": "getPlayerGameType",
        "f()Lnet/minecraft/world/level/GameType;": "getPreviousPlayerGameType",
        "g()Z": "isDebug",
        "h()Z": "isFlat",
        "a(B)Z": "shouldKeep",
        "i()Ljava/util/Optional;": "getLastDeathLocation",
        "j()I": "getPortalCooldown",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityHeadRotation": {
      "fields": {
        "a": "entityId",
        "b": "yHeadRot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a()B": "getYHeadRot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutMultiBlockChange": {
      "fields": {
        "a": "POS_IN_SECTION_BITS",
        "b": "sectionPos",
        "c": "positions",
        "d": "states"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Ljava/util/function/BiConsumer;)V": "runUpdates",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutSelectAdvancementTab": {
      "fields": {
        "a": "tab"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getTab",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundServerDataPacket": {
      "fields": {
        "a": "motd",
        "b": "iconBytes",
        "c": "enforcesSecureChat"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getMotd",
        "c()Ljava/util/Optional;": "getIconBytes",
        "d()Z": "enforcesSecureChat",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetActionBarTextPacket": {
      "fields": {
        "a": "text"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getText",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetBorderCenterPacket": {
      "fields": {
        "a": "newCenterX",
        "b": "newCenterZ"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()D": "getNewCenterZ",
        "c()D": "getNewCenterX",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetBorderLerpSizePacket": {
      "fields": {
        "a": "oldSize",
        "b": "newSize",
        "c": "lerpTime"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()D": "getOldSize",
        "c()D": "getNewSize",
        "d()J": "getLerpTime",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetBorderSizePacket": {
      "fields": {
        "a": "size"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()D": "getSize",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetBorderWarningDelayPacket": {
      "fields": {
        "a": "warningDelay"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getWarningDelay",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetBorderWarningDistancePacket": {
      "fields": {
        "a": "warningBlocks"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getWarningBlocks",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutCamera": {
      "fields": {
        "a": "cameraId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutHeldItemSlot": {
      "fields": {
        "a": "slot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getSlot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutViewCentre": {
      "fields": {
        "a": "x",
        "b": "z"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getX",
        "c()I": "getZ",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutViewDistance": {
      "fields": {
        "a": "radius"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getRadius",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutSpawnPosition": {
      "fields": {
        "a": "pos",
        "b": "angle"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()F": "getAngle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutScoreboardDisplayObjective": {
      "fields": {
        "a": "slot",
        "b": "objectiveName"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getSlot",
        "c()Ljava/lang/String;": "getObjectiveName",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityMetadata": {
      "fields": {
        "b": "id",
        "c": "packedItems",
        "a": "EOF_MARKER"
      },
      "methods": {
        "a(Ljava/util/List;Lnet/minecraft/network/FriendlyByteBuf;)V": "pack",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/util/List;": "unpack",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "id",
        "c()Ljava/util/List;": "packedItems",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutAttachEntity": {
      "fields": {
        "a": "sourceId",
        "b": "destId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getSourceId",
        "c()I": "getDestId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityVelocity": {
      "fields": {
        "a": "id",
        "b": "xa",
        "c": "ya",
        "d": "za"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()I": "getXa",
        "d()I": "getYa",
        "e()I": "getZa",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityEquipment": {
      "fields": {
        "a": "CONTINUE_MASK",
        "b": "entity",
        "c": "slots"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getEntity",
        "c()Ljava/util/List;": "getSlots",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutExperience": {
      "fields": {
        "a": "experienceProgress",
        "b": "totalExperience",
        "c": "experienceLevel"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()F": "getExperienceProgress",
        "c()I": "getTotalExperience",
        "d()I": "getExperienceLevel",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutUpdateHealth": {
      "fields": {
        "a": "health",
        "b": "food",
        "c": "saturation"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()F": "getHealth",
        "c()I": "getFood",
        "d()F": "getSaturation",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutScoreboardObjective": {
      "fields": {
        "a": "METHOD_ADD",
        "b": "METHOD_REMOVE",
        "c": "METHOD_CHANGE",
        "d": "objectiveName",
        "e": "displayName",
        "f": "renderType",
        "g": "method"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "getObjectiveName",
        "c()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "d()I": "getMethod",
        "e()Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;": "getRenderType",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutMount": {
      "fields": {
        "a": "vehicle",
        "b": "passengers"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()[I": "getPassengers",
        "c()I": "getVehicle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutScoreboardTeam": {
      "fields": {
        "a": "METHOD_ADD",
        "b": "METHOD_REMOVE",
        "c": "METHOD_CHANGE",
        "d": "METHOD_JOIN",
        "e": "METHOD_LEAVE",
        "f": "MAX_VISIBILITY_LENGTH",
        "g": "MAX_COLLISION_LENGTH",
        "h": "method",
        "i": "name",
        "j": "players",
        "k": "parameters"
      },
      "methods": {
        "a(Lnet/minecraft/world/scores/PlayerTeam;Z)Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket;": "createAddOrModifyPacket",
        "a(Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket;": "createRemovePacket",
        "a(Lnet/minecraft/world/scores/PlayerTeam;Ljava/lang/String;Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket$Action;)Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket;": "createPlayerPacket",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(I)Z": "shouldHavePlayerList",
        "b(I)Z": "shouldHaveParameters",
        "a()Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket$Action;": "getPlayerAction",
        "c()Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket$Action;": "getTeamAction",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "d()Ljava/lang/String;": "getName",
        "e()Ljava/util/Collection;": "getPlayers",
        "f()Ljava/util/Optional;": "getParameters",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "g()Ljava/lang/IllegalStateException;": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutScoreboardScore": {
      "fields": {
        "a": "owner",
        "b": "objectiveName",
        "c": "score",
        "d": "method"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "getOwner",
        "c()Ljava/lang/String;": "getObjectiveName",
        "d()I": "getScore",
        "e()Lnet/minecraft/server/ServerScoreboard$Method;": "getMethod",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetSimulationDistancePacket": {
      "fields": {
        "a": "simulationDistance"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "simulationDistance",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetSubtitleTextPacket": {
      "fields": {
        "a": "text"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getText",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutUpdateTime": {
      "fields": {
        "a": "gameTime",
        "b": "dayTime"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()J": "getGameTime",
        "c()J": "getDayTime",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetTitleTextPacket": {
      "fields": {
        "a": "text"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getText",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSetTitlesAnimationPacket": {
      "fields": {
        "a": "fadeIn",
        "b": "stay",
        "c": "fadeOut"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getFadeIn",
        "c()I": "getStay",
        "d()I": "getFadeOut",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntitySound": {
      "fields": {
        "a": "sound",
        "b": "source",
        "c": "id",
        "d": "volume",
        "e": "pitch",
        "f": "seed"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Lnet/minecraft/core/Holder;": "getSound",
        "c()Lnet/minecraft/sounds/SoundSource;": "getSource",
        "d()I": "getId",
        "e()F": "getVolume",
        "f()F": "getPitch",
        "g()J": "getSeed",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/sounds/SoundEvent;)V": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutNamedSoundEffect": {
      "fields": {
        "a": "LOCATION_ACCURACY",
        "b": "sound",
        "c": "source",
        "d": "x",
        "e": "y",
        "f": "z",
        "g": "volume",
        "h": "pitch",
        "i": "seed"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Lnet/minecraft/core/Holder;": "getSound",
        "c()Lnet/minecraft/sounds/SoundSource;": "getSource",
        "d()D": "getX",
        "e()D": "getY",
        "f()D": "getZ",
        "g()F": "getVolume",
        "h()F": "getPitch",
        "i()J": "getSeed",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/sounds/SoundEvent;)V": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutStopSound": {
      "fields": {
        "a": "HAS_SOURCE",
        "b": "HAS_SOUND",
        "c": "name",
        "d": "source"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getName",
        "c()Lnet/minecraft/sounds/SoundSource;": "getSource",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundSystemChatPacket": {
      "fields": {
        "a": "content",
        "b": "overlay"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "b()Z": "isSkippable",
        "a()Lnet/minecraft/network/chat/Component;": "content",
        "c()Z": "overlay",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutPlayerListHeaderFooter": {
      "fields": {
        "a": "header",
        "b": "footer"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getHeader",
        "c()Lnet/minecraft/network/chat/Component;": "getFooter",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutNBTQuery": {
      "fields": {
        "a": "transactionId",
        "b": "tag"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getTransactionId",
        "c()Lnet/minecraft/nbt/CompoundTag;": "getTag",
        "b()Z": "isSkippable",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutCollect": {
      "fields": {
        "a": "itemId",
        "b": "playerId",
        "c": "amount"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getItemId",
        "c()I": "getPlayerId",
        "d()I": "getAmount",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityTeleport": {
      "fields": {
        "a": "id",
        "b": "x",
        "c": "y",
        "d": "z",
        "e": "yRot",
        "f": "xRot",
        "g": "onGround"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()D": "getX",
        "d()D": "getY",
        "e()D": "getZ",
        "f()B": "getyRot",
        "g()B": "getxRot",
        "h()Z": "isOnGround",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutAdvancements": {
      "fields": {
        "a": "reset",
        "b": "added",
        "c": "removed",
        "d": "progress"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/Map;": "getAdded",
        "c()Ljava/util/Set;": "getRemoved",
        "d()Ljava/util/Map;": "getProgress",
        "e()Z": "shouldReset",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/advancements/AdvancementProgress;)V": "lambda$write$1",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/advancements/Advancement$Builder;)V": "lambda$write$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutUpdateAttributes": {
      "fields": {
        "a": "entityId",
        "b": "attributes"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getEntityId",
        "c()Ljava/util/List;": "getValues",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket$AttributeSnapshot;)V": "lambda$write$3",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)V": "lambda$write$2",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket$AttributeSnapshot;": "lambda$new$1",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutUpdateAttributes$AttributeSnapshot": {
      "fields": {
        "a": "attribute",
        "b": "base",
        "c": "modifiers"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/attributes/Attribute;": "getAttribute",
        "b()D": "getBase",
        "c()Ljava/util/Collection;": "getModifiers"
      }
    },
    "net/minecraft/network/protocol/game/ClientboundUpdateEnabledFeaturesPacket": {
      "fields": {
        "a": "features"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/Set;": "features",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutEntityEffect": {
      "fields": {
        "a": "FLAG_AMBIENT",
        "b": "FLAG_VISIBLE",
        "c": "FLAG_SHOW_ICON",
        "d": "entityId",
        "f": "effectAmplifier",
        "g": "effectDurationTicks",
        "h": "flags",
        "i": "factorData"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()I": "getEntityId",
        "d()B": "getEffectAmplifier",
        "e()I": "getEffectDurationTicks",
        "f()Z": "isEffectVisible",
        "g()Z": "isEffectAmbient",
        "h()Z": "effectShowsIcon",
        "i()Lnet/minecraft/world/effect/MobEffectInstance$FactorData;": "getFactorData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/effect/MobEffectInstance$FactorData;)V": "lambda$write$1",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/effect/MobEffectInstance$FactorData;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutRecipeUpdate": {
      "fields": {
        "a": "recipes"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/List;": "getRecipes",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/Recipe;": "fromNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/crafting/Recipe;)V": "toNetwork",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/IllegalArgumentException;": "lambda$fromNetwork$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayOutTags": {
      "fields": {
        "a": "tags"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ClientGamePacketListener;)V": "handle",
        "a()Ljava/util/Map;": "getTags",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/tags/TagNetworkSerialization$NetworkPayload;)V": "lambda$write$2",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/resources/ResourceKey;)V": "lambda$write$1",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/resources/ResourceKey;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/DebugEntityNameGenerator": {
      "fields": {
        "a": "NAMES_FIRST_PART",
        "b": "NAMES_SECOND_PART"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)Ljava/lang/String;": "getEntityName",
        "a(Ljava/util/UUID;)Ljava/lang/String;": "getEntityName",
        "a(Lnet/minecraft/util/RandomSource;[Ljava/lang/String;)Ljava/lang/String;": "getRandomString",
        "b(Ljava/util/UUID;)Lnet/minecraft/util/RandomSource;": "getRandom"
      }
    },
    "net/minecraft/network/protocol/game/PacketDebug": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Ljava/lang/String;II)V": "sendGameTestAddMarker",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "sendGameTestClearPacket",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/ChunkPos;)V": "sendPoiPacketsForChunk",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "sendPoiAddedPacket",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "sendPoiRemovedPacket",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "sendPoiTicketCountPacket",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "sendVillageSectionsPacket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "sendNeighborsUpdatePacket",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "sendStructurePacket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/ai/goal/GoalSelector;)V": "sendGoalSelector",
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/util/Collection;)V": "sendRaids",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "sendEntityBrain",
        "a(Lnet/minecraft/world/entity/animal/Bee;)V": "sendBeeInfo",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;)V": "sendGameEventInfo",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/gameevent/GameEventListener;)V": "sendGameEventListenerInfo",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity;)V": "sendHiveInfo",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/network/FriendlyByteBuf;)V": "writeBrain",
        "a(Lnet/minecraft/world/entity/LivingEntity;J)Ljava/util/List;": "getMemoryDescriptions",
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/lang/Object;)Ljava/lang/String;": "getShortDescription",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/resources/ResourceLocation;)V": "sendPacketToAllPlayers",
        "a(Ljava/util/List;Ljava/util/UUID;Lit/unimi/dsi/fastutil/objects/Object2IntMap;)V": "lambda$writeBrain$10",
        "a(Ljava/util/List;Ljava/lang/String;Lnet/minecraft/world/entity/ai/gossip/GossipType;Ljava/lang/Integer;)V": "lambda$writeBrain$9",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Ljava/lang/String;)V": "lambda$writeBrain$8",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/entity/schedule/Activity;)V": "lambda$writeBrain$7",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/entity/raid/Raid;)V": "lambda$sendRaids$4",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/entity/ai/goal/WrappedGoal;)V": "lambda$sendGoalSelector$3",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$sendPoiAddedPacket$2",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)V": "lambda$sendPoiPacketsForChunk$1",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$sendPoiPacketsForChunk$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketListenerPlayIn": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerboundSwingPacket;)V": "handleAnimate",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatPacket;)V": "handleChat",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatCommandPacket;)V": "handleChatCommand",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatAckPacket;)V": "handleChatAck",
        "a(Lnet/minecraft/network/protocol/game/ServerboundClientCommandPacket;)V": "handleClientCommand",
        "a(Lnet/minecraft/network/protocol/game/ServerboundClientInformationPacket;)V": "handleClientInformation",
        "a(Lnet/minecraft/network/protocol/game/ServerboundContainerButtonClickPacket;)V": "handleContainerButtonClick",
        "a(Lnet/minecraft/network/protocol/game/ServerboundContainerClickPacket;)V": "handleContainerClick",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlaceRecipePacket;)V": "handlePlaceRecipe",
        "a(Lnet/minecraft/network/protocol/game/ServerboundContainerClosePacket;)V": "handleContainerClose",
        "a(Lnet/minecraft/network/protocol/game/ServerboundCustomPayloadPacket;)V": "handleCustomPayload",
        "a(Lnet/minecraft/network/protocol/game/ServerboundInteractPacket;)V": "handleInteract",
        "a(Lnet/minecraft/network/protocol/game/ServerboundKeepAlivePacket;)V": "handleKeepAlive",
        "a(Lnet/minecraft/network/protocol/game/ServerboundMovePlayerPacket;)V": "handleMovePlayer",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPongPacket;)V": "handlePong",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerAbilitiesPacket;)V": "handlePlayerAbilities",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerActionPacket;)V": "handlePlayerAction",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerCommandPacket;)V": "handlePlayerCommand",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerInputPacket;)V": "handlePlayerInput",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCarriedItemPacket;)V": "handleSetCarriedItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCreativeModeSlotPacket;)V": "handleSetCreativeModeSlot",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSignUpdatePacket;)V": "handleSignUpdate",
        "a(Lnet/minecraft/network/protocol/game/ServerboundUseItemOnPacket;)V": "handleUseItemOn",
        "a(Lnet/minecraft/network/protocol/game/ServerboundUseItemPacket;)V": "handleUseItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundTeleportToEntityPacket;)V": "handleTeleportToEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundResourcePackPacket;)V": "handleResourcePackResponse",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPaddleBoatPacket;)V": "handlePaddleBoat",
        "a(Lnet/minecraft/network/protocol/game/ServerboundMoveVehiclePacket;)V": "handleMoveVehicle",
        "a(Lnet/minecraft/network/protocol/game/ServerboundAcceptTeleportationPacket;)V": "handleAcceptTeleportPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundRecipeBookSeenRecipePacket;)V": "handleRecipeBookSeenRecipePacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundRecipeBookChangeSettingsPacket;)V": "handleRecipeBookChangeSettingsPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket;)V": "handleSeenAdvancements",
        "a(Lnet/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket;)V": "handleCustomCommandSuggestions",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCommandBlockPacket;)V": "handleSetCommandBlock",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCommandMinecartPacket;)V": "handleSetCommandMinecart",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPickItemPacket;)V": "handlePickItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundRenameItemPacket;)V": "handleRenameItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetBeaconPacket;)V": "handleSetBeaconPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetStructureBlockPacket;)V": "handleSetStructureBlock",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSelectTradePacket;)V": "handleSelectTrade",
        "a(Lnet/minecraft/network/protocol/game/ServerboundEditBookPacket;)V": "handleEditBook",
        "a(Lnet/minecraft/network/protocol/game/ServerboundEntityTagQuery;)V": "handleEntityTagQuery",
        "a(Lnet/minecraft/network/protocol/game/ServerboundBlockEntityTagQuery;)V": "handleBlockEntityTagQuery",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetJigsawBlockPacket;)V": "handleSetJigsawBlock",
        "a(Lnet/minecraft/network/protocol/game/ServerboundJigsawGeneratePacket;)V": "handleJigsawGenerate",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChangeDifficultyPacket;)V": "handleChangeDifficulty",
        "a(Lnet/minecraft/network/protocol/game/ServerboundLockDifficultyPacket;)V": "handleLockDifficulty",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket;)V": "handleChatSessionUpdate"
      }
    },
    "net/minecraft/network/protocol/game/ServerPacketListener": {
      "methods": {
        "b()Z": "shouldPropagateHandlingExceptions"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInTeleportAccept": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInTileNBTQuery": {
      "fields": {
        "a": "transactionId",
        "b": "pos"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getTransactionId",
        "c()Lnet/minecraft/core/BlockPos;": "getPos",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInDifficultyChange": {
      "fields": {
        "a": "difficulty"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ServerboundChatAckPacket": {
      "fields": {
        "a": "offset"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "offset",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ServerboundChatCommandPacket": {
      "fields": {
        "a": "command",
        "b": "timeStamp",
        "c": "salt",
        "d": "argumentSignatures",
        "e": "lastSeenMessages"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "command",
        "c()Ljava/time/Instant;": "timeStamp",
        "d()J": "salt",
        "e()Lnet/minecraft/commands/arguments/ArgumentSignatures;": "argumentSignatures",
        "f()Lnet/minecraft/network/chat/LastSeenMessages$Update;": "lastSeenMessages",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInChat": {
      "fields": {
        "a": "message",
        "b": "timeStamp",
        "c": "salt",
        "d": "signature",
        "e": "lastSeenMessages"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "message",
        "c()Ljava/time/Instant;": "timeStamp",
        "d()J": "salt",
        "e()Lnet/minecraft/network/chat/MessageSignature;": "signature",
        "f()Lnet/minecraft/network/chat/LastSeenMessages$Update;": "lastSeenMessages",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket": {
      "fields": {
        "a": "chatSession"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/RemoteChatSession$Data;": "chatSession",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInClientCommand": {
      "fields": {
        "a": "action"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/protocol/game/ServerboundClientCommandPacket$Action;": "getAction",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInClientCommand$EnumClientCommand": {
      "fields": {
        "a": "PERFORM_RESPAWN",
        "b": "REQUEST_STATS",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ServerboundClientCommandPacket$Action;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSettings": {
      "fields": {
        "b": "language",
        "c": "viewDistance",
        "d": "chatVisibility",
        "e": "chatColors",
        "f": "modelCustomisation",
        "g": "mainHand",
        "h": "textFilteringEnabled",
        "i": "allowsListing",
        "a": "MAX_LANGUAGE_LENGTH"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "language",
        "c()I": "viewDistance",
        "d()Lnet/minecraft/world/entity/player/ChatVisiblity;": "chatVisibility",
        "e()Z": "chatColors",
        "f()I": "modelCustomisation",
        "g()Lnet/minecraft/world/entity/HumanoidArm;": "mainHand",
        "h()Z": "textFilteringEnabled",
        "i()Z": "allowsListing",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInTabComplete": {
      "fields": {
        "a": "id",
        "b": "command"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()Ljava/lang/String;": "getCommand",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInEnchantItem": {
      "fields": {
        "a": "containerId",
        "b": "buttonId"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getContainerId",
        "c()I": "getButtonId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInWindowClick": {
      "fields": {
        "a": "MAX_SLOT_COUNT",
        "b": "containerId",
        "c": "stateId",
        "d": "slotNum",
        "e": "buttonNum",
        "f": "clickType",
        "g": "carriedItem",
        "h": "changedSlots"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()I": "getSlotNum",
        "d()I": "getButtonNum",
        "e()Lnet/minecraft/world/item/ItemStack;": "getCarriedItem",
        "f()Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;": "getChangedSlots",
        "g()Lnet/minecraft/world/inventory/ClickType;": "getClickType",
        "h()I": "getStateId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/lang/Integer;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInCloseWindow": {
      "fields": {
        "a": "containerId"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getContainerId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInCustomPayload": {
      "fields": {
        "b": "MAX_PAYLOAD_SIZE",
        "a": "BRAND",
        "c": "identifier",
        "d": "data"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getIdentifier",
        "c()Lnet/minecraft/network/FriendlyByteBuf;": "getData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInBEdit": {
      "fields": {
        "a": "MAX_BYTES_PER_CHAR",
        "b": "TITLE_MAX_CHARS",
        "c": "PAGE_MAX_CHARS",
        "d": "MAX_PAGES_COUNT",
        "e": "slot",
        "f": "pages",
        "g": "title"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Ljava/util/List;": "getPages",
        "c()Ljava/util/Optional;": "getTitle",
        "d()I": "getSlot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Ljava/lang/String;)V": "lambda$write$3",
        "b(Lnet/minecraft/network/FriendlyByteBuf;Ljava/lang/String;)V": "lambda$write$2",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/lang/String;": "lambda$new$1",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInEntityNBTQuery": {
      "fields": {
        "a": "transactionId",
        "b": "entityId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getTransactionId",
        "c()I": "getEntityId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInUseEntity": {
      "fields": {
        "a": "entityId",
        "b": "action",
        "c": "usingSecondaryAction",
        "d": "ATTACK_ACTION"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;Z)Lnet/minecraft/network/protocol/game/ServerboundInteractPacket;": "createAttackPacket",
        "a(Lnet/minecraft/world/entity/Entity;ZLnet/minecraft/world/InteractionHand;)Lnet/minecraft/network/protocol/game/ServerboundInteractPacket;": "createInteractionPacket",
        "a(Lnet/minecraft/world/entity/Entity;ZLnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/network/protocol/game/ServerboundInteractPacket;": "createInteractionPacket",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "getTarget",
        "a()Z": "isUsingSecondaryAction",
        "a(Lnet/minecraft/network/protocol/game/ServerboundInteractPacket$Handler;)V": "dispatch",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInUseEntity$EnumEntityUseAction": {
      "methods": {
        "a()Lnet/minecraft/network/protocol/game/ServerboundInteractPacket$ActionType;": "getType",
        "a(Lnet/minecraft/network/protocol/game/ServerboundInteractPacket$Handler;)V": "dispatch",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInJigsawGenerate": {
      "fields": {
        "a": "pos",
        "b": "levels",
        "c": "keepJigsaws"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()I": "levels",
        "d()Z": "keepJigsaws",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInKeepAlive": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()J": "getId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInDifficultyLock": {
      "fields": {
        "a": "locked"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()Z": "isLocked",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInFlying": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "yRot",
        "e": "xRot",
        "f": "onGround",
        "g": "hasPos",
        "h": "hasRot"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(D)D": "getX",
        "b(D)D": "getY",
        "c(D)D": "getZ",
        "a(F)F": "getYRot",
        "b(F)F": "getXRot",
        "a()Z": "isOnGround",
        "c()Z": "hasPosition",
        "d()Z": "hasRotation",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInFlying$PacketPlayInPosition": {
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ServerboundMovePlayerPacket$Pos;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInFlying$PacketPlayInPositionLook": {
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ServerboundMovePlayerPacket$PosRot;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInFlying$PacketPlayInLook": {
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/protocol/game/ServerboundMovePlayerPacket$Rot;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInVehicleMove": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "d": "yRot",
        "e": "xRot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()D": "getX",
        "c()D": "getY",
        "d()D": "getZ",
        "e()F": "getYRot",
        "f()F": "getXRot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInBoatMove": {
      "fields": {
        "a": "left",
        "b": "right"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Z": "getLeft",
        "c()Z": "getRight",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInPickItem": {
      "fields": {
        "a": "slot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getSlot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInAutoRecipe": {
      "fields": {
        "a": "containerId",
        "b": "recipe",
        "c": "shiftDown"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getContainerId",
        "c()Lnet/minecraft/resources/ResourceLocation;": "getRecipe",
        "d()Z": "isShiftDown",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInAbilities": {
      "fields": {
        "a": "FLAG_FLYING",
        "b": "isFlying"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Z": "isFlying",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInBlockDig": {
      "fields": {
        "a": "pos",
        "b": "direction",
        "c": "action",
        "d": "sequence"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Lnet/minecraft/core/Direction;": "getDirection",
        "d()Lnet/minecraft/network/protocol/game/ServerboundPlayerActionPacket$Action;": "getAction",
        "e()I": "getSequence",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInBlockDig$EnumPlayerDigType": {
      "fields": {
        "a": "START_DESTROY_BLOCK",
        "b": "ABORT_DESTROY_BLOCK",
        "c": "STOP_DESTROY_BLOCK",
        "d": "DROP_ALL_ITEMS",
        "e": "DROP_ITEM",
        "f": "RELEASE_USE_ITEM",
        "g": "SWAP_ITEM_WITH_OFFHAND",
        "h": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ServerboundPlayerActionPacket$Action;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInEntityAction": {
      "fields": {
        "a": "id",
        "b": "action",
        "c": "data"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getId",
        "c()Lnet/minecraft/network/protocol/game/ServerboundPlayerCommandPacket$Action;": "getAction",
        "d()I": "getData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInEntityAction$EnumPlayerAction": {
      "fields": {
        "a": "PRESS_SHIFT_KEY",
        "b": "RELEASE_SHIFT_KEY",
        "c": "STOP_SLEEPING",
        "d": "START_SPRINTING",
        "e": "STOP_SPRINTING",
        "f": "START_RIDING_JUMP",
        "g": "STOP_RIDING_JUMP",
        "h": "OPEN_INVENTORY",
        "i": "START_FALL_FLYING",
        "j": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ServerboundPlayerCommandPacket$Action;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSteerVehicle": {
      "fields": {
        "a": "FLAG_JUMPING",
        "b": "FLAG_SHIFT_KEY_DOWN",
        "c": "xxa",
        "d": "zza",
        "e": "isJumping",
        "f": "isShiftKeyDown"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()F": "getXxa",
        "c()F": "getZza",
        "d()Z": "isJumping",
        "e()Z": "isShiftKeyDown",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/ServerboundPongPacket": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInRecipeSettings": {
      "fields": {
        "a": "bookType",
        "b": "isOpen",
        "c": "isFiltering"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/inventory/RecipeBookType;": "getBookType",
        "c()Z": "isOpen",
        "d()Z": "isFiltering",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInRecipeDisplayed": {
      "fields": {
        "a": "recipe"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getRecipe",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInItemName": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Ljava/lang/String;": "getName",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInResourcePackStatus": {
      "fields": {
        "a": "action"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/protocol/game/ServerboundResourcePackPacket$Action;": "getAction",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInResourcePackStatus$EnumResourcePackStatus": {
      "fields": {
        "a": "SUCCESSFULLY_LOADED",
        "b": "DECLINED",
        "c": "FAILED_DOWNLOAD",
        "d": "ACCEPTED",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ServerboundResourcePackPacket$Action;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInAdvancements": {
      "fields": {
        "a": "action",
        "b": "tab"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/Advancement;)Lnet/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket;": "openedTab",
        "a()Lnet/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket;": "closedScreen",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "c()Lnet/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket$Action;": "getAction",
        "d()Lnet/minecraft/resources/ResourceLocation;": "getTab",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInAdvancements$Status": {
      "fields": {
        "a": "OPENED_TAB",
        "b": "CLOSED_SCREEN",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket$Action;": "$values"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInTrSel": {
      "fields": {
        "a": "item"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getItem",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInBeacon": {
      "fields": {
        "a": "primary",
        "b": "secondary"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Ljava/util/Optional;": "getPrimary",
        "c()Ljava/util/Optional;": "getSecondary",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInHeldItemSlot": {
      "fields": {
        "a": "slot"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()I": "getSlot",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSetCommandBlock": {
      "fields": {
        "a": "FLAG_TRACK_OUTPUT",
        "b": "FLAG_CONDITIONAL",
        "c": "FLAG_AUTOMATIC",
        "d": "pos",
        "e": "command",
        "f": "trackOutput",
        "g": "conditional",
        "h": "automatic",
        "i": "mode"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Ljava/lang/String;": "getCommand",
        "d()Z": "isTrackOutput",
        "e()Z": "isConditional",
        "f()Z": "isAutomatic",
        "g()Lnet/minecraft/world/level/block/entity/CommandBlockEntity$Mode;": "getMode",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSetCommandMinecart": {
      "fields": {
        "a": "entity",
        "b": "command",
        "c": "trackOutput"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/level/BaseCommandBlock;": "getCommandBlock",
        "a()Ljava/lang/String;": "getCommand",
        "c()Z": "isTrackOutput",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSetCreativeSlot": {
      "fields": {
        "a": "slotNum",
        "b": "itemStack"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getSlotNum",
        "c()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSetJigsaw": {
      "fields": {
        "a": "pos",
        "b": "name",
        "c": "target",
        "d": "pool",
        "e": "finalState",
        "f": "joint"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Lnet/minecraft/resources/ResourceLocation;": "getName",
        "d()Lnet/minecraft/resources/ResourceLocation;": "getTarget",
        "e()Lnet/minecraft/resources/ResourceLocation;": "getPool",
        "f()Ljava/lang/String;": "getFinalState",
        "g()Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;": "getJoint",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInStruct": {
      "fields": {
        "a": "FLAG_IGNORE_ENTITIES",
        "b": "FLAG_SHOW_AIR",
        "c": "FLAG_SHOW_BOUNDING_BOX",
        "d": "pos",
        "e": "updateType",
        "f": "mode",
        "g": "name",
        "h": "offset",
        "i": "size",
        "j": "mirror",
        "k": "rotation",
        "l": "data",
        "m": "ignoreEntities",
        "n": "showAir",
        "o": "showBoundingBox",
        "p": "integrity",
        "q": "seed"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Lnet/minecraft/world/level/block/entity/StructureBlockEntity$UpdateType;": "getUpdateType",
        "d()Lnet/minecraft/world/level/block/state/properties/StructureMode;": "getMode",
        "e()Ljava/lang/String;": "getName",
        "f()Lnet/minecraft/core/BlockPos;": "getOffset",
        "g()Lnet/minecraft/core/Vec3i;": "getSize",
        "h()Lnet/minecraft/world/level/block/Mirror;": "getMirror",
        "i()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "j()Ljava/lang/String;": "getData",
        "k()Z": "isIgnoreEntities",
        "l()Z": "isShowAir",
        "m()Z": "isShowBoundingBox",
        "n()F": "getIntegrity",
        "o()J": "getSeed",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInUpdateSign": {
      "fields": {
        "a": "MAX_STRING_LENGTH",
        "b": "pos",
        "c": "lines",
        "d": "isFrontText"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()Z": "isFrontText",
        "d()[Ljava/lang/String;": "getLines",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInArmAnimation": {
      "fields": {
        "a": "hand"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/InteractionHand;": "getHand",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInSpectate": {
      "fields": {
        "a": "uuid"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInUseItem": {
      "fields": {
        "a": "blockHit",
        "b": "hand",
        "c": "sequence"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/InteractionHand;": "getHand",
        "c()Lnet/minecraft/world/phys/BlockHitResult;": "getHitResult",
        "d()I": "getSequence",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/PacketPlayInBlockPlace": {
      "fields": {
        "a": "hand",
        "b": "sequence"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/game/ServerGamePacketListener;)V": "handle",
        "a()Lnet/minecraft/world/InteractionHand;": "getHand",
        "c()I": "getSequence",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/game/VecDeltaCodec": {
      "fields": {
        "a": "TRUNCATION_STEPS",
        "b": "base"
      },
      "methods": {
        "a(D)J": "encode",
        "a(J)D": "decode",
        "a(JJJ)Lnet/minecraft/world/phys/Vec3;": "decode",
        "a(Lnet/minecraft/world/phys/Vec3;)J": "encodeX",
        "b(Lnet/minecraft/world/phys/Vec3;)J": "encodeY",
        "c(Lnet/minecraft/world/phys/Vec3;)J": "encodeZ",
        "d(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "delta",
        "e(Lnet/minecraft/world/phys/Vec3;)V": "setBase"
      }
    },
    "net/minecraft/network/protocol/handshake/PacketHandshakingInSetProtocol": {
      "fields": {
        "a": "MAX_HOST_LENGTH",
        "b": "protocolVersion",
        "c": "hostName",
        "d": "port",
        "e": "intention"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/handshake/ServerHandshakePacketListener;)V": "handle",
        "a()Lnet/minecraft/network/ConnectionProtocol;": "getIntention",
        "c()I": "getProtocolVersion",
        "d()Ljava/lang/String;": "getHostName",
        "e()I": "getPort",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/handshake/PacketHandshakingInListener": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/handshake/ClientIntentionPacket;)V": "handleIntention"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginOutListener": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/login/ClientboundHelloPacket;)V": "handleHello",
        "a(Lnet/minecraft/network/protocol/login/ClientboundGameProfilePacket;)V": "handleGameProfile",
        "a(Lnet/minecraft/network/protocol/login/ClientboundLoginDisconnectPacket;)V": "handleDisconnect",
        "a(Lnet/minecraft/network/protocol/login/ClientboundLoginCompressionPacket;)V": "handleCompression",
        "a(Lnet/minecraft/network/protocol/login/ClientboundCustomQueryPacket;)V": "handleCustomQuery"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginOutCustomPayload": {
      "fields": {
        "a": "MAX_PAYLOAD_SIZE",
        "b": "transactionId",
        "c": "identifier",
        "d": "data"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ClientLoginPacketListener;)V": "handle",
        "a()I": "getTransactionId",
        "c()Lnet/minecraft/resources/ResourceLocation;": "getIdentifier",
        "d()Lnet/minecraft/network/FriendlyByteBuf;": "getData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginOutSuccess": {
      "fields": {
        "a": "gameProfile"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ClientLoginPacketListener;)V": "handle",
        "a()Lcom/mojang/authlib/GameProfile;": "getGameProfile",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginOutEncryptionBegin": {
      "fields": {
        "a": "serverId",
        "b": "publicKey",
        "c": "challenge"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ClientLoginPacketListener;)V": "handle",
        "a()Ljava/lang/String;": "getServerId",
        "c()Ljava/security/PublicKey;": "getPublicKey",
        "d()[B": "getChallenge",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginOutSetCompression": {
      "fields": {
        "a": "compressionThreshold"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ClientLoginPacketListener;)V": "handle",
        "a()I": "getCompressionThreshold",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginOutDisconnect": {
      "fields": {
        "a": "reason"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ClientLoginPacketListener;)V": "handle",
        "a()Lnet/minecraft/network/chat/Component;": "getReason",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginInListener": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/login/ServerboundHelloPacket;)V": "handleHello",
        "a(Lnet/minecraft/network/protocol/login/ServerboundKeyPacket;)V": "handleKey",
        "a(Lnet/minecraft/network/protocol/login/ServerboundCustomQueryPacket;)V": "handleCustomQueryPacket"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginInCustomPayload": {
      "fields": {
        "a": "MAX_PAYLOAD_SIZE",
        "b": "transactionId",
        "c": "data"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ServerLoginPacketListener;)V": "handle",
        "a()I": "getTransactionId",
        "c()Lnet/minecraft/network/FriendlyByteBuf;": "getData",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/network/FriendlyByteBuf;)V": "lambda$write$1",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/network/FriendlyByteBuf;": "lambda$new$0"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginInStart": {
      "fields": {
        "a": "name",
        "b": "profileId"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ServerLoginPacketListener;)V": "handle",
        "a()Ljava/lang/String;": "name",
        "c()Ljava/util/Optional;": "profileId",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/login/PacketLoginInEncryptionBegin": {
      "fields": {
        "a": "keybytes",
        "b": "encryptedChallenge"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/login/ServerLoginPacketListener;)V": "handle",
        "a(Ljava/security/PrivateKey;)Ljavax/crypto/SecretKey;": "getSecretKey",
        "a([BLjava/security/PrivateKey;)Z": "isChallengeValid",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/status/PacketStatusOutListener": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/status/ClientboundStatusResponsePacket;)V": "handleStatusResponse",
        "a(Lnet/minecraft/network/protocol/status/ClientboundPongResponsePacket;)V": "handlePongResponse"
      }
    },
    "net/minecraft/network/protocol/status/PacketStatusOutPong": {
      "fields": {
        "a": "time"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/status/ClientStatusPacketListener;)V": "handle",
        "a()J": "getTime",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/status/PacketStatusOutServerInfo": {
      "fields": {
        "a": "status"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/status/ClientStatusPacketListener;)V": "handle",
        "a()Lnet/minecraft/network/protocol/status/ServerStatus;": "status",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/status/ServerPing": {
      "fields": {
        "b": "description",
        "c": "players",
        "d": "version",
        "e": "favicon",
        "f": "enforcesSecureChat",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/Component;": "description",
        "b()Ljava/util/Optional;": "players",
        "c()Ljava/util/Optional;": "version",
        "d()Ljava/util/Optional;": "favicon",
        "e()Z": "enforcesSecureChat",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/protocol/status/ServerPing$ServerPingPlayerSample": {
      "fields": {
        "b": "max",
        "c": "online",
        "d": "sample",
        "e": "PROFILE_CODEC",
        "a": "CODEC"
      },
      "methods": {
        "a()I": "max",
        "b()I": "online",
        "c()Ljava/util/List;": "sample",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/protocol/status/ServerPing$ServerData": {
      "fields": {
        "b": "name",
        "c": "protocol",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/network/protocol/status/ServerStatus$Version;": "current",
        "b()Ljava/lang/String;": "name",
        "c()I": "protocol",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/network/protocol/status/PacketStatusInListener": {
      "methods": {
        "a(Lnet/minecraft/network/protocol/status/ServerboundPingRequestPacket;)V": "handlePingRequest",
        "a(Lnet/minecraft/network/protocol/status/ServerboundStatusRequestPacket;)V": "handleStatusRequest"
      }
    },
    "net/minecraft/network/protocol/status/PacketStatusInPing": {
      "fields": {
        "a": "time"
      },
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/status/ServerStatusPacketListener;)V": "handle",
        "a()J": "getTime",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/protocol/status/PacketStatusInStart": {
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/network/protocol/status/ServerStatusPacketListener;)V": "handle",
        "a(Lnet/minecraft/network/PacketListener;)V": "handle"
      }
    },
    "net/minecraft/network/syncher/DataWatcherObject": {
      "fields": {
        "a": "id",
        "b": "serializer"
      },
      "methods": {
        "a()I": "getId",
        "b()Lnet/minecraft/network/syncher/EntityDataSerializer;": "getSerializer"
      }
    },
    "net/minecraft/network/syncher/DataWatcherSerializer": {
      "methods": {
        "a(Lnet/minecraft/network/FriendlyByteBuf;Ljava/lang/Object;)V": "write",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Ljava/lang/Object;": "read",
        "a(I)Lnet/minecraft/network/syncher/EntityDataAccessor;": "createAccessor",
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "copy",
        "a(Lnet/minecraft/network/FriendlyByteBuf$Writer;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Lnet/minecraft/network/syncher/EntityDataSerializer;": "simple",
        "b(Lnet/minecraft/network/FriendlyByteBuf$Writer;Lnet/minecraft/network/FriendlyByteBuf$Reader;)Lnet/minecraft/network/syncher/EntityDataSerializer;": "optional",
        "a(Ljava/lang/Class;)Lnet/minecraft/network/syncher/EntityDataSerializer;": "simpleEnum",
        "a(Lnet/minecraft/core/IdMap;)Lnet/minecraft/network/syncher/EntityDataSerializer;": "simpleId",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/network/FriendlyByteBuf;)Ljava/lang/Object;": "lambda$simpleId$2",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/network/FriendlyByteBuf;Ljava/lang/Object;)V": "lambda$simpleId$1",
        "a(Ljava/lang/Class;Lnet/minecraft/network/FriendlyByteBuf;)Ljava/lang/Enum;": "lambda$simpleEnum$0"
      }
    },
    "net/minecraft/network/syncher/DataWatcherRegistry": {
      "fields": {
        "C": "SERIALIZERS",
        "a": "BYTE",
        "b": "INT",
        "c": "LONG",
        "d": "FLOAT",
        "e": "STRING",
        "f": "COMPONENT",
        "g": "OPTIONAL_COMPONENT",
        "h": "ITEM_STACK",
        "i": "BLOCK_STATE",
        "j": "OPTIONAL_BLOCK_STATE",
        "k": "BOOLEAN",
        "l": "PARTICLE",
        "m": "ROTATIONS",
        "n": "BLOCK_POS",
        "o": "OPTIONAL_BLOCK_POS",
        "p": "DIRECTION",
        "q": "OPTIONAL_UUID",
        "r": "OPTIONAL_GLOBAL_POS",
        "s": "COMPOUND_TAG",
        "t": "VILLAGER_DATA",
        "u": "OPTIONAL_UNSIGNED_INT",
        "v": "POSE",
        "w": "CAT_VARIANT",
        "x": "FROG_VARIANT",
        "y": "PAINTING_VARIANT",
        "z": "SNIFFER_STATE",
        "A": "VECTOR3",
        "B": "QUATERNION"
      },
      "methods": {
        "a(Lnet/minecraft/network/syncher/EntityDataSerializer;)V": "registerSerializer",
        "a(I)Lnet/minecraft/network/syncher/EntityDataSerializer;": "getSerializer",
        "b(Lnet/minecraft/network/syncher/EntityDataSerializer;)I": "getSerializedId",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Ljava/lang/Byte;)V": "lambda$static$0"
      }
    },
    "net/minecraft/network/syncher/DataWatcher": {
      "fields": {
        "a": "LOGGER",
        "b": "ENTITY_ID_POOL",
        "c": "MAX_ID_VALUE",
        "d": "entity",
        "e": "itemsById",
        "f": "lock",
        "g": "isDirty"
      },
      "methods": {
        "a(Ljava/lang/Class;Lnet/minecraft/network/syncher/EntityDataSerializer;)Lnet/minecraft/network/syncher/EntityDataAccessor;": "defineId",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;Ljava/lang/Object;)V": "define",
        "c(Lnet/minecraft/network/syncher/EntityDataAccessor;Ljava/lang/Object;)V": "createDataItem",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)Z": "hasItem",
        "c(Lnet/minecraft/network/syncher/EntityDataAccessor;)Lnet/minecraft/network/syncher/SynchedEntityData$DataItem;": "getItem",
        "b(Lnet/minecraft/network/syncher/EntityDataAccessor;)Ljava/lang/Object;": "get",
        "b(Lnet/minecraft/network/syncher/EntityDataAccessor;Ljava/lang/Object;)V": "set",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;Ljava/lang/Object;Z)V": "set",
        "a()Z": "isDirty",
        "b()Ljava/util/List;": "packDirty",
        "c()Ljava/util/List;": "getNonDefaultValues",
        "a(Ljava/util/List;)V": "assignValues",
        "a(Lnet/minecraft/network/syncher/SynchedEntityData$DataItem;Lnet/minecraft/network/syncher/SynchedEntityData$DataValue;)V": "assignValue",
        "d()Z": "isEmpty"
      }
    },
    "net/minecraft/network/syncher/DataWatcher$Item": {
      "fields": {
        "a": "accessor",
        "b": "value",
        "c": "initialValue",
        "d": "dirty"
      },
      "methods": {
        "a()Lnet/minecraft/network/syncher/EntityDataAccessor;": "getAccessor",
        "a(Ljava/lang/Object;)V": "setValue",
        "b()Ljava/lang/Object;": "getValue",
        "c()Z": "isDirty",
        "a(Z)V": "setDirty",
        "d()Z": "isSetToDefault",
        "e()Lnet/minecraft/network/syncher/SynchedEntityData$DataValue;": "value"
      }
    },
    "net/minecraft/recipebook/AutoRecipeAbstract": {
      "methods": {
        "a(IIILnet/minecraft/world/item/crafting/Recipe;Ljava/util/Iterator;I)V": "placeRecipe",
        "a(Ljava/util/Iterator;IIII)V": "addItemToSlot"
      }
    },
    "net/minecraft/recipebook/AutoRecipe": {
      "fields": {
        "d": "LOGGER",
        "a": "stackedContents",
        "b": "inventory",
        "c": "menu"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/crafting/Recipe;Z)V": "recipeClicked",
        "a()V": "clearGrid",
        "a(Lnet/minecraft/world/item/crafting/Recipe;Z)V": "handleRecipeClicked",
        "a(Ljava/util/Iterator;IIII)V": "addItemToSlot",
        "a(ZIZ)I": "getStackSize",
        "a(Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/item/ItemStack;)V": "moveItemToGrid",
        "b()Z": "testClearGrid",
        "c()I": "getAmountOfFreeSlotsInInventory"
      }
    },
    "net/minecraft/resources/DynamicOpsWrapper": {
      "fields": {
        "a": "delegate"
      }
    },
    "net/minecraft/resources/FileToIdConverter": {
      "fields": {
        "a": "prefix",
        "b": "extension"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/FileToIdConverter;": "json",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "idToFile",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "fileToId",
        "c(Lnet/minecraft/resources/ResourceLocation;)Z": "lambda$listMatchingResourceStacks$1",
        "d(Lnet/minecraft/resources/ResourceLocation;)Z": "lambda$listMatchingResources$0"
      }
    },
    "net/minecraft/resources/HolderSetCodec": {
      "fields": {
        "a": "registryKey",
        "b": "elementCodec",
        "c": "homogenousListCodec",
        "d": "registryAwareCodec"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;Z)Lcom/mojang/serialization/Codec;": "homogenousList",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;Z)Lcom/mojang/serialization/Codec;": "create",
        "a(Lnet/minecraft/core/HolderSet;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "encode",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "decodeWithoutRegistry",
        "b(Lnet/minecraft/core/HolderSet;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "encodeWithoutRegistry",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/serialization/DataResult;": "lambda$decodeWithoutRegistry$7",
        "a(Lnet/minecraft/core/Holder;)Ljava/lang/String;": "lambda$decodeWithoutRegistry$6",
        "a(Lnet/minecraft/core/HolderSet;)Ljava/lang/String;": "lambda$encode$5",
        "a(Lnet/minecraft/core/HolderGetter;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$decode$4",
        "a(Lnet/minecraft/core/HolderGetter;Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/core/HolderSet;": "lambda$decode$3",
        "a(Ljava/util/List;)Lcom/mojang/datafixers/util/Either;": "lambda$homogenousList$2",
        "a(Lcom/mojang/datafixers/util/Either;)Ljava/util/List;": "lambda$homogenousList$1",
        "b(Ljava/util/List;)Ljava/util/List;": "lambda$homogenousList$0"
      }
    },
    "net/minecraft/resources/RegistryDataLoader": {
      "fields": {
        "c": "LOGGER",
        "a": "WORLDGEN_REGISTRIES",
        "b": "DIMENSION_REGISTRIES"
      },
      "methods": {
        "a(Lnet/minecraft/core/RegistryAccess;Ljava/util/List;)Lnet/minecraft/resources/RegistryOps$RegistryInfoLookup;": "createContext",
        "a(Lnet/minecraft/core/WritableRegistry;)Lnet/minecraft/resources/RegistryOps$RegistryInfo;": "createInfoForNewRegistry",
        "a(Ljava/util/Map;)V": "logErrors",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "registryDirPath",
        "a(Ljava/lang/String;)V": "lambda$loadRegistryContents$9",
        "a(Ljava/io/PrintWriter;Ljava/util/Map$Entry;)V": "lambda$logErrors$8",
        "b(Ljava/io/PrintWriter;Ljava/util/Map$Entry;)V": "lambda$logErrors$7",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/resources/ResourceLocation;": "lambda$logErrors$6",
        "b(Ljava/util/Map$Entry;)Lnet/minecraft/resources/ResourceLocation;": "lambda$logErrors$5",
        "a(Ljava/util/Map;Lcom/mojang/datafixers/util/Pair;)V": "lambda$createContext$4",
        "a(Ljava/util/Map;Lnet/minecraft/core/RegistryAccess$RegistryEntry;)V": "lambda$createContext$3",
        "b(Ljava/util/Map;Lcom/mojang/datafixers/util/Pair;)V": "lambda$load$2",
        "a(Ljava/util/Map;Lnet/minecraft/resources/RegistryDataLoader$RegistryData;)Lcom/mojang/datafixers/util/Pair;": "lambda$load$0"
      }
    },
    "net/minecraft/resources/RegistryFileCodec": {
      "fields": {
        "a": "registryKey",
        "b": "elementCodec",
        "c": "allowInline"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;)Lnet/minecraft/resources/RegistryFileCodec;": "create",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/Codec;Z)Lnet/minecraft/resources/RegistryFileCodec;": "create",
        "a(Lnet/minecraft/core/Holder;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "encode",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$decode$9",
        "a(Lcom/mojang/datafixers/util/Pair;Lnet/minecraft/core/Holder$Reference;)Lcom/mojang/datafixers/util/Pair;": "lambda$decode$8",
        "a(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$decode$7",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$decode$6",
        "b(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$decode$5",
        "a()Ljava/lang/String;": "lambda$decode$4",
        "b()Ljava/lang/String;": "lambda$decode$3",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$encode$2",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$encode$1",
        "a(Lnet/minecraft/core/Holder;)Ljava/lang/String;": "lambda$encode$0"
      }
    },
    "net/minecraft/resources/RegistryFixedCodec": {
      "fields": {
        "a": "registryKey"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/RegistryFixedCodec;": "create",
        "a(Lnet/minecraft/core/Holder;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "encode",
        "a()Ljava/lang/String;": "lambda$decode$9",
        "a(Ljava/util/Optional;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/serialization/DataResult;": "lambda$decode$8",
        "a(Lcom/mojang/datafixers/util/Pair;Lnet/minecraft/core/Holder$Reference;)Lcom/mojang/datafixers/util/Pair;": "lambda$decode$7",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lcom/mojang/serialization/DataResult;": "lambda$decode$6",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "lambda$decode$5",
        "b()Ljava/lang/String;": "lambda$encode$4",
        "a(Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$encode$3",
        "c()Ljava/lang/String;": "lambda$encode$2",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$encode$1",
        "a(Lnet/minecraft/core/Holder;)Ljava/lang/String;": "lambda$encode$0"
      }
    },
    "net/minecraft/resources/RegistryOps": {
      "fields": {
        "b": "lookupProvider"
      },
      "methods": {
        "a(Lnet/minecraft/resources/RegistryOps$RegistryInfoLookup;)Lnet/minecraft/resources/RegistryOps$RegistryInfoLookup;": "memoizeLookup",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/core/HolderLookup$Provider;)Lnet/minecraft/resources/RegistryOps;": "create",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/resources/RegistryOps$RegistryInfoLookup;)Lnet/minecraft/resources/RegistryOps;": "create",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "owner",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "getter",
        "c(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "retrieveGetter",
        "d(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "retrieveElement",
        "a(Ljava/lang/Object;)Lnet/minecraft/core/Holder$Reference;": "lambda$retrieveElement$11",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/DataResult;": "lambda$retrieveElement$10",
        "a()Ljava/lang/String;": "lambda$retrieveElement$9",
        "e(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$retrieveElement$8",
        "f(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$retrieveElement$7",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/RegistryOps$RegistryInfo;)Ljava/util/Optional;": "lambda$retrieveElement$6",
        "b(Ljava/lang/Object;)Lnet/minecraft/core/HolderGetter;": "lambda$retrieveGetter$5",
        "a(Lnet/minecraft/resources/ResourceKey;Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/DataResult;": "lambda$retrieveGetter$4",
        "b()Ljava/lang/String;": "lambda$retrieveGetter$3",
        "g(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/DataResult;": "lambda$retrieveGetter$2",
        "h(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$retrieveGetter$1",
        "a(Lnet/minecraft/resources/RegistryOps$RegistryInfo;)Lcom/mojang/serialization/DataResult;": "lambda$retrieveGetter$0"
      }
    },
    "net/minecraft/resources/ResourceKey": {
      "fields": {
        "a": "VALUES",
        "b": "registryName",
        "c": "location"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "create",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "createRegistryKey",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "create",
        "b(Lnet/minecraft/resources/ResourceKey;)Z": "isFor",
        "c(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "cast",
        "a()Lnet/minecraft/resources/ResourceLocation;": "location",
        "b()Lnet/minecraft/resources/ResourceLocation;": "registry",
        "a(Lnet/minecraft/resources/ResourceKey$InternKey;)Lnet/minecraft/resources/ResourceKey;": "lambda$create$1",
        "b(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "lambda$codec$0"
      }
    },
    "net/minecraft/resources/MinecraftKey": {
      "fields": {
        "a": "CODEC",
        "e": "ERROR_INVALID",
        "b": "NAMESPACE_SEPARATOR",
        "c": "DEFAULT_NAMESPACE",
        "d": "REALMS_NAMESPACE",
        "f": "namespace",
        "g": "path"
      },
      "methods": {
        "a(Ljava/lang/String;C)Lnet/minecraft/resources/ResourceLocation;": "of",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "tryParse",
        "a(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "tryBuild",
        "b(Ljava/lang/String;C)[Ljava/lang/String;": "decompose",
        "b(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "read",
        "a()Ljava/lang/String;": "getPath",
        "b()Ljava/lang/String;": "getNamespace",
        "c(Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "withPath",
        "a(Ljava/util/function/UnaryOperator;)Lnet/minecraft/resources/ResourceLocation;": "withPath",
        "d(Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "withPrefix",
        "e(Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "withSuffix",
        "a(Lnet/minecraft/resources/ResourceLocation;)I": "compareTo",
        "c()Ljava/lang/String;": "toDebugFileName",
        "d()Ljava/lang/String;": "toLanguageKey",
        "e()Ljava/lang/String;": "toShortLanguageKey",
        "f(Ljava/lang/String;)Ljava/lang/String;": "toLanguageKey",
        "b(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "toLanguageKey",
        "a(Lcom/mojang/brigadier/StringReader;)Lnet/minecraft/resources/ResourceLocation;": "read",
        "a(C)Z": "isAllowedInResourceLocation",
        "h(Ljava/lang/String;)Z": "isValidPath",
        "i(Ljava/lang/String;)Z": "isValidNamespace",
        "c(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "assertValidNamespace",
        "b(C)Z": "validPathChar",
        "c(C)Z": "validNamespaceChar",
        "g(Ljava/lang/String;)Z": "isValidResourceLocation",
        "d(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "assertValidPath",
        "a(Ljava/lang/String;Lnet/minecraft/ResourceLocationException;)Ljava/lang/String;": "lambda$read$0"
      }
    },
    "net/minecraft/server/DispenserRegistry": {
      "fields": {
        "a": "STDOUT",
        "c": "isBootstrapped",
        "d": "LOGGER",
        "b": "bootstrapDuration"
      },
      "methods": {
        "a()V": "bootStrap",
        "a(Ljava/lang/Iterable;Ljava/util/function/Function;Ljava/util/Set;)V": "checkTranslations",
        "a(Ljava/util/Set;)V": "checkGameruleTranslations",
        "b()Ljava/util/Set;": "getMissingTranslations",
        "a(Ljava/util/function/Supplier;)V": "checkBootstrapCalled",
        "b(Ljava/util/function/Supplier;)Ljava/lang/RuntimeException;": "createBootstrapException",
        "c()V": "validate",
        "d()V": "wrapStreams",
        "a(Ljava/lang/String;)V": "realStdoutPrintln",
        "b(Ljava/lang/String;)V": "lambda$validate$3",
        "e()Ljava/lang/String;": "lambda$validate$2",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "lambda$getMissingTranslations$1",
        "a(Ljava/util/function/Function;Lnet/minecraft/locale/Language;Ljava/util/Set;Ljava/lang/Object;)V": "lambda$checkTranslations$0"
      }
    },
    "net/minecraft/server/ServerCommand": {
      "fields": {
        "a": "msg",
        "b": "source"
      }
    },
    "net/minecraft/server/DebugOutputStream": {
      "fields": {
        "b": "LOGGER"
      },
      "methods": {
        "a(Ljava/lang/String;)V": "logLine"
      }
    },
    "net/minecraft/server/EULA": {
      "fields": {
        "a": "LOGGER",
        "b": "file",
        "c": "agreed"
      },
      "methods": {
        "b()Z": "readFile",
        "a()Z": "hasAgreedToEULA",
        "c()V": "saveDefaults"
      }
    },
    "net/minecraft/server/RedirectStream": {
      "fields": {
        "b": "LOGGER",
        "a": "name"
      },
      "methods": {
        "a(Ljava/lang/String;)V": "logLine"
      }
    },
    "net/minecraft/server/Main": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)V": "writePidFile",
        "a(Lnet/minecraft/server/dedicated/DedicatedServerProperties;Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;ZLnet/minecraft/server/packs/repository/PackRepository;)Lnet/minecraft/server/WorldLoader$InitConfig;": "loadOrCreateConfig",
        "a(Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;Lnet/minecraft/server/packs/repository/PackRepository;Lnet/minecraft/server/WorldStem;Lnet/minecraft/server/dedicated/DedicatedServerSettings;Lnet/minecraft/server/Services;Ljoptsimple/OptionSet;Ljoptsimple/OptionSpec;Ljoptsimple/OptionSpec;Ljoptsimple/OptionSpec;Ljoptsimple/OptionSpec;Ljoptsimple/OptionSpec;Ljoptsimple/OptionSpec;Ljava/lang/Thread;)Lnet/minecraft/server/dedicated/DedicatedServer;": "lambda$main$3",
        "a()Z": "lambda$main$2",
        "a(Lnet/minecraft/server/WorldLoader$InitConfig;Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;Ljoptsimple/OptionSet;Ljoptsimple/OptionSpec;Lnet/minecraft/server/dedicated/DedicatedServerSettings;Ljoptsimple/OptionSpec;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "lambda$main$1",
        "a(Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;Ljoptsimple/OptionSet;Ljoptsimple/OptionSpec;Lnet/minecraft/server/dedicated/DedicatedServerSettings;Ljoptsimple/OptionSpec;Lnet/minecraft/server/WorldLoader$DataLoadContext;)Lnet/minecraft/server/WorldLoader$DataLoadOutput;": "lambda$main$0"
      }
    },
    "net/minecraft/server/MinecraftServer": {
      "fields": {
        "n": "LOGGER",
        "b": "VANILLA_BRAND",
        "o": "AVERAGE_TICK_TIME_SMOOTHING",
        "p": "TICK_STATS_SPAN",
        "c": "MS_PER_TICK",
        "q": "OVERLOADED_THRESHOLD",
        "r": "OVERLOADED_WARNING_INTERVAL",
        "s": "STATUS_EXPIRE_TIME_NS",
        "t": "MAX_STATUS_PLAYER_SAMPLE",
        "d": "START_CHUNK_RADIUS",
        "u": "START_TICKING_CHUNK_COUNT",
        "v": "AUTOSAVE_INTERVAL",
        "w": "MAX_TICK_LATENCY",
        "e": "ABSOLUTE_MAX_WORLD_SIZE",
        "f": "DEMO_SETTINGS",
        "x": "DELAYED_TASKS_TICK_EXTENSION",
        "g": "ANONYMOUS_PLAYER_PROFILE",
        "h": "storageSource",
        "i": "playerDataStorage",
        "y": "tickables",
        "z": "metricsRecorder",
        "A": "profiler",
        "B": "onMetricsRecordingStopped",
        "C": "onMetricsRecordingFinished",
        "D": "willStartRecordingMetrics",
        "E": "debugCommandProfiler",
        "F": "debugCommandProfilerDelayStart",
        "G": "connection",
        "H": "progressListenerFactory",
        "I": "status",
        "J": "statusIcon",
        "K": "random",
        "L": "fixerUpper",
        "M": "localIp",
        "N": "port",
        "O": "registries",
        "P": "levels",
        "Q": "playerList",
        "R": "running",
        "S": "stopped",
        "T": "tickCount",
        "j": "proxy",
        "U": "onlineMode",
        "V": "preventProxyConnections",
        "W": "pvp",
        "X": "allowFlight",
        "Y": "motd",
        "Z": "playerIdleTimeout",
        "k": "tickTimes",
        "aa": "keyPair",
        "ab": "singleplayerProfile",
        "ac": "isDemo",
        "ad": "isReady",
        "ae": "lastOverloadWarning",
        "l": "services",
        "af": "lastServerStatus",
        "ag": "serverThread",
        "ah": "nextTickTime",
        "ai": "delayedTasksMaxNextTickTime",
        "aj": "mayHaveDelayedTasks",
        "ak": "packRepository",
        "al": "scoreboard",
        "am": "commandStorage",
        "an": "customBossEvents",
        "ao": "functionManager",
        "ap": "frameTimer",
        "aq": "enforceWhitelist",
        "ar": "averageTickTime",
        "as": "executor",
        "at": "serverId",
        "au": "resources",
        "av": "structureTemplateManager",
        "aw": "isSaving"
      },
      "methods": {
        "a(Ljava/util/function/Function;)Lnet/minecraft/server/MinecraftServer;": "spin",
        "a(Lnet/minecraft/world/level/storage/DimensionDataStorage;)V": "readScoreboard",
        "e()Z": "initServer",
        "n_()V": "loadLevel",
        "r()V": "forceDifficulty",
        "a(Lnet/minecraft/server/level/progress/ChunkProgressListener;)V": "createLevels",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/storage/ServerLevelData;ZZ)V": "setInitialSpawn",
        "b(Lnet/minecraft/server/level/progress/ChunkProgressListener;)V": "prepareLevels",
        "o_()Lnet/minecraft/world/level/GameType;": "getDefaultGameType",
        "h()Z": "isHardcore",
        "i()I": "getOperatorUserPermissionLevel",
        "j()I": "getFunctionCompilationLevel",
        "k()Z": "shouldRconBroadcast",
        "a(ZZZ)Z": "saveAllChunks",
        "b(ZZZ)Z": "saveEverything",
        "t()V": "stopServer",
        "u()Ljava/lang/String;": "getLocalIp",
        "a_(Ljava/lang/String;)V": "setLocalIp",
        "v()Z": "isRunning",
        "a(Z)V": "halt",
        "w()V": "runServer",
        "a(Ljava/lang/Throwable;)Lnet/minecraft/CrashReport;": "constructOrExtractCrashReport",
        "bf()Z": "haveTime",
        "p_()V": "waitUntilNextTick",
        "a(Ljava/lang/Runnable;)Lnet/minecraft/server/TickTask;": "wrapRunnable",
        "a(Lnet/minecraft/server/TickTask;)Z": "shouldRun",
        "x()Z": "pollTask",
        "bg()Z": "pollTaskInternal",
        "b(Lnet/minecraft/server/TickTask;)V": "doRunTask",
        "bh()Ljava/util/Optional;": "loadStatusIcon",
        "y()Ljava/util/Optional;": "getWorldScreenshotFile",
        "z()Ljava/io/File;": "getServerDirectory",
        "a(Lnet/minecraft/CrashReport;)V": "onServerCrash",
        "g()V": "onServerExit",
        "a(Ljava/util/function/BooleanSupplier;)V": "tickServer",
        "bi()Lnet/minecraft/network/protocol/status/ServerStatus;": "buildServerStatus",
        "bj()Lnet/minecraft/network/protocol/status/ServerStatus$Players;": "buildPlayerStatus",
        "b(Ljava/util/function/BooleanSupplier;)V": "tickChildren",
        "b(Lnet/minecraft/server/level/ServerLevel;)V": "synchronizeTime",
        "A()V": "forceTimeSynchronization",
        "B()Z": "isNetherEnabled",
        "b(Ljava/lang/Runnable;)V": "addTickable",
        "b(Ljava/lang/String;)V": "setId",
        "C()Z": "isShutdown",
        "c(Ljava/lang/String;)Ljava/io/File;": "getFile",
        "D()Lnet/minecraft/server/level/ServerLevel;": "overworld",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "E()Ljava/util/Set;": "levelKeys",
        "F()Ljava/lang/Iterable;": "getAllLevels",
        "G()Ljava/lang/String;": "getServerVersion",
        "H()I": "getPlayerCount",
        "I()I": "getMaxPlayers",
        "J()[Ljava/lang/String;": "getPlayerNames",
        "b(Lnet/minecraft/SystemReport;)Lnet/minecraft/SystemReport;": "fillSystemReport",
        "a(Lnet/minecraft/SystemReport;)Lnet/minecraft/SystemReport;": "fillServerSystemReport",
        "K()Lnet/minecraft/util/ModCheck;": "getModdedStatus",
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "L()Ljava/security/KeyPair;": "getKeyPair",
        "M()I": "getPort",
        "a(I)V": "setPort",
        "N()Lcom/mojang/authlib/GameProfile;": "getSingleplayerProfile",
        "b(Lcom/mojang/authlib/GameProfile;)V": "setSingleplayerProfile",
        "O()Z": "isSingleplayer",
        "P()V": "initializeKeyPair",
        "a(Lnet/minecraft/world/Difficulty;Z)V": "setDifficulty",
        "b(I)I": "getScaledTrackingDistance",
        "bs()V": "updateMobSpawningFlags",
        "b(Z)V": "setDifficultyLocked",
        "c(Lnet/minecraft/server/level/ServerPlayer;)V": "sendDifficultyUpdate",
        "Q()Z": "isSpawningMonsters",
        "R()Z": "isDemo",
        "c(Z)V": "setDemo",
        "S()Ljava/util/Optional;": "getServerResourcePack",
        "T()Z": "isResourcePackRequired",
        "l()Z": "isDedicatedServer",
        "m()I": "getRateLimitPacketsPerSecond",
        "U()Z": "usesAuthentication",
        "d(Z)V": "setUsesAuthentication",
        "V()Z": "getPreventProxyConnections",
        "e(Z)V": "setPreventProxyConnections",
        "W()Z": "isSpawningAnimals",
        "X()Z": "areNpcsEnabled",
        "n()Z": "isEpollEnabled",
        "Y()Z": "isPvpAllowed",
        "f(Z)V": "setPvpAllowed",
        "Z()Z": "isFlightAllowed",
        "g(Z)V": "setFlightAllowed",
        "o()Z": "isCommandBlockEnabled",
        "aa()Ljava/lang/String;": "getMotd",
        "d(Ljava/lang/String;)V": "setMotd",
        "ab()Z": "isStopped",
        "ac()Lnet/minecraft/server/players/PlayerList;": "getPlayerList",
        "a(Lnet/minecraft/server/players/PlayerList;)V": "setPlayerList",
        "p()Z": "isPublished",
        "a(Lnet/minecraft/world/level/GameType;)V": "setDefaultGameType",
        "ad()Lnet/minecraft/server/network/ServerConnectionListener;": "getConnection",
        "ae()Z": "isReady",
        "af()Z": "hasGui",
        "a(Lnet/minecraft/world/level/GameType;ZI)Z": "publishServer",
        "ag()I": "getTickCount",
        "ah()I": "getSpawnProtectionRadius",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z": "isUnderSpawnProtection",
        "ai()Z": "repliesToStatus",
        "aj()Z": "hidesOnlinePlayers",
        "ak()Ljava/net/Proxy;": "getProxy",
        "al()I": "getPlayerIdleTimeout",
        "c(I)V": "setPlayerIdleTimeout",
        "am()Lcom/mojang/authlib/minecraft/MinecraftSessionService;": "getSessionService",
        "an()Lnet/minecraft/util/SignatureValidator;": "getProfileKeySignatureValidator",
        "ao()Lcom/mojang/authlib/GameProfileRepository;": "getProfileRepository",
        "ap()Lnet/minecraft/server/players/GameProfileCache;": "getProfileCache",
        "aq()Lnet/minecraft/network/protocol/status/ServerStatus;": "getStatus",
        "ar()V": "invalidateStatus",
        "as()I": "getAbsoluteMaxWorldSize",
        "at()Z": "scheduleExecutables",
        "c(Ljava/lang/Runnable;)V": "executeIfPossible",
        "au()Ljava/lang/Thread;": "getRunningThread",
        "av()I": "getCompressionThreshold",
        "aw()Z": "enforceSecureProfile",
        "ax()J": "getNextTickTime",
        "ay()Lcom/mojang/datafixers/DataFixer;": "getFixerUpper",
        "a(Lnet/minecraft/server/level/ServerLevel;)I": "getSpawnRadius",
        "az()Lnet/minecraft/server/ServerAdvancementManager;": "getAdvancements",
        "aA()Lnet/minecraft/server/ServerFunctionManager;": "getFunctions",
        "a(Ljava/util/Collection;)Ljava/util/concurrent/CompletableFuture;": "reloadResources",
        "a(Lnet/minecraft/server/packs/repository/PackRepository;Lnet/minecraft/world/level/DataPackConfig;ZLnet/minecraft/world/flag/FeatureFlagSet;)Lnet/minecraft/world/level/WorldDataConfiguration;": "configurePackRepository",
        "a(Lnet/minecraft/server/packs/repository/PackRepository;)Lnet/minecraft/world/level/DataPackConfig;": "getSelectedPacks",
        "a(Lnet/minecraft/commands/CommandSourceStack;)V": "kickUnlistedPlayers",
        "aB()Lnet/minecraft/server/packs/repository/PackRepository;": "getPackRepository",
        "aC()Lnet/minecraft/commands/Commands;": "getCommands",
        "aD()Lnet/minecraft/commands/CommandSourceStack;": "createCommandSourceStack",
        "e_()Z": "acceptsSuccess",
        "q_()Z": "acceptsFailure",
        "N_()Z": "shouldInformAdmins",
        "aE()Lnet/minecraft/world/item/crafting/RecipeManager;": "getRecipeManager",
        "aF()Lnet/minecraft/server/ServerScoreboard;": "getScoreboard",
        "aG()Lnet/minecraft/world/level/storage/CommandStorage;": "getCommandStorage",
        "aH()Lnet/minecraft/world/level/storage/loot/LootDataManager;": "getLootData",
        "aI()Lnet/minecraft/world/level/GameRules;": "getGameRules",
        "aJ()Lnet/minecraft/server/bossevents/CustomBossEvents;": "getCustomBossEvents",
        "aK()Z": "isEnforceWhitelist",
        "h(Z)V": "setEnforceWhitelist",
        "aL()F": "getAverageTickTime",
        "c(Lcom/mojang/authlib/GameProfile;)I": "getProfilePermissions",
        "aM()Lnet/minecraft/util/FrameTimer;": "getFrameTimer",
        "aN()Lnet/minecraft/util/profiling/ProfilerFiller;": "getProfiler",
        "a(Lcom/mojang/authlib/GameProfile;)Z": "isSingleplayerOwner",
        "a(Ljava/nio/file/Path;)V": "dumpServerProperties",
        "b(Ljava/nio/file/Path;)V": "saveDebugReport",
        "c(Ljava/nio/file/Path;)V": "dumpMiscStats",
        "d(Ljava/nio/file/Path;)V": "dumpGameRules",
        "e(Ljava/nio/file/Path;)V": "dumpClasspath",
        "f(Ljava/nio/file/Path;)V": "dumpThreads",
        "g(Ljava/nio/file/Path;)V": "dumpNativeModules",
        "bt()V": "startMetricsRecordingTick",
        "bu()V": "endMetricsRecordingTick",
        "aO()Z": "isRecordingMetrics",
        "a(Ljava/util/function/Consumer;Ljava/util/function/Consumer;)V": "startRecordingMetrics",
        "aP()V": "stopRecordingMetrics",
        "aQ()V": "finishRecordingMetrics",
        "aR()V": "cancelRecordingMetrics",
        "a(Lnet/minecraft/world/level/storage/LevelResource;)Ljava/nio/file/Path;": "getWorldPath",
        "aS()Z": "forceSynchronousWrites",
        "aT()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;": "getStructureManager",
        "aV()Lnet/minecraft/core/RegistryAccess$Frozen;": "registryAccess",
        "aW()Lnet/minecraft/core/LayeredRegistryAccess;": "registries",
        "b(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/server/level/ServerPlayerGameMode;": "createGameModeForPlayer",
        "aX()Lnet/minecraft/world/level/GameType;": "getForcedGameType",
        "aZ()Z": "isCurrentlySaving",
        "ba()Z": "isTimeProfilerRunning",
        "bb()V": "startTimeProfiler",
        "bc()Lnet/minecraft/util/profiling/ProfileResults;": "stopTimeProfiler",
        "bd()I": "getMaxChainedNeighborUpdates",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/ChatType$Bound;Ljava/lang/String;)V": "logChatMessage",
        "be()Lnet/minecraft/network/chat/ChatDecorator;": "getChatDecorator",
        "d(Ljava/lang/Runnable;)V": "doRunTask",
        "e(Ljava/lang/Runnable;)Z": "shouldRun",
        "f(Ljava/lang/Runnable;)Ljava/lang/Runnable;": "wrapRunnable",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/util/profiling/ProfileResults;)V": "lambda$startRecordingMetrics$30",
        "h(Ljava/nio/file/Path;)V": "lambda$startMetricsRecordingTick$29",
        "i(Ljava/nio/file/Path;)V": "lambda$startMetricsRecordingTick$28",
        "a(Lnet/minecraft/util/NativeModuleLister$NativeModuleInfo;)Ljava/lang/String;": "lambda$dumpNativeModules$27",
        "a(Ljava/util/Collection;Ljava/lang/String;)Z": "lambda$getSelectedPacks$26",
        "a(Ljava/util/Collection;Lnet/minecraft/server/MinecraftServer$ReloadableResources;)V": "lambda$reloadResources$25",
        "a(Lnet/minecraft/core/RegistryAccess$Frozen;Lcom/google/common/collect/ImmutableList;)Ljava/util/concurrent/CompletionStage;": "lambda$reloadResources$24",
        "a(Lnet/minecraft/server/packs/resources/CloseableResourceManager;Lnet/minecraft/server/ReloadableServerResources;)Lnet/minecraft/server/MinecraftServer$ReloadableResources;": "lambda$reloadResources$23",
        "a(Lnet/minecraft/server/packs/resources/CloseableResourceManager;Lnet/minecraft/server/ReloadableServerResources;Ljava/lang/Throwable;)V": "lambda$reloadResources$22",
        "b(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableList;": "lambda$reloadResources$21",
        "bx()Ljava/lang/String;": "lambda$fillSystemReport$18",
        "a(Lnet/minecraft/server/packs/repository/Pack;)Ljava/lang/String;": "lambda$fillSystemReport$16",
        "bz()Ljava/lang/String;": "lambda$fillSystemReport$15",
        "bA()Ljava/lang/String;": "lambda$fillSystemReport$14",
        "c(Lnet/minecraft/server/level/ServerLevel;)Ljava/lang/String;": "lambda$tickChildren$13",
        "bC()Z": "lambda$waitUntilNextTick$8",
        "bD()Z": "lambda$stopServer$7",
        "d(Lnet/minecraft/server/level/ServerLevel;)Z": "lambda$stopServer$6",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/server/level/ServerChunkCache;Lnet/minecraft/world/level/storage/ServerLevelData;Lnet/minecraft/core/Holder$Reference;)V": "lambda$setInitialSpawn$5",
        "a(Ljava/lang/Thread;Ljava/lang/Throwable;)V": "lambda$spin$3",
        "a(Ljava/util/concurrent/atomic/AtomicReference;)V": "lambda$spin$2",
        "m(Ljava/nio/file/Path;)V": "lambda$new$1",
        "a(Lnet/minecraft/util/profiling/ProfileResults;)V": "lambda$new$0"
      }
    },
    "net/minecraft/server/MinecraftServer$ReloadableResources": {
      "fields": {
        "a": "resourceManager",
        "b": "managers"
      },
      "methods": {
        "a()Lnet/minecraft/server/packs/resources/CloseableResourceManager;": "resourceManager",
        "b()Lnet/minecraft/server/ReloadableServerResources;": "managers"
      }
    },
    "net/minecraft/server/MinecraftServer$ServerResourcePackInfo": {
      "fields": {
        "a": "url",
        "b": "hash",
        "c": "isRequired",
        "d": "prompt"
      },
      "methods": {
        "a()Ljava/lang/String;": "url",
        "b()Ljava/lang/String;": "hash",
        "c()Z": "isRequired",
        "d()Lnet/minecraft/network/chat/Component;": "prompt"
      }
    },
    "net/minecraft/server/MinecraftServer$TimeProfiler": {
      "fields": {
        "a": "startNanos",
        "b": "startTick"
      },
      "methods": {
        "a(JI)Lnet/minecraft/util/profiling/ProfileResults;": "stop"
      }
    },
    "net/minecraft/server/AdvancementDataPlayer": {
      "fields": {
        "a": "LOGGER",
        "b": "GSON",
        "c": "TYPE_TOKEN",
        "d": "dataFixer",
        "e": "playerList",
        "f": "playerSavePath",
        "g": "progress",
        "h": "visible",
        "i": "progressChanged",
        "j": "rootsToUpdate",
        "k": "player",
        "l": "lastSelectedTab",
        "m": "isFirstPacket"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "setPlayer",
        "a()V": "stopListening",
        "a(Lnet/minecraft/server/ServerAdvancementManager;)V": "reload",
        "b(Lnet/minecraft/server/ServerAdvancementManager;)V": "registerListeners",
        "c(Lnet/minecraft/server/ServerAdvancementManager;)V": "checkForAutomaticTriggers",
        "d(Lnet/minecraft/server/ServerAdvancementManager;)V": "load",
        "b()V": "save",
        "a(Lnet/minecraft/advancements/Advancement;Ljava/lang/String;)Z": "award",
        "b(Lnet/minecraft/advancements/Advancement;Ljava/lang/String;)Z": "revoke",
        "c(Lnet/minecraft/advancements/Advancement;)V": "markForVisibilityUpdate",
        "d(Lnet/minecraft/advancements/Advancement;)V": "registerListeners",
        "e(Lnet/minecraft/advancements/Advancement;)V": "unregisterListeners",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "flushDirty",
        "a(Lnet/minecraft/advancements/Advancement;)V": "setSelectedTab",
        "b(Lnet/minecraft/advancements/Advancement;)Lnet/minecraft/advancements/AdvancementProgress;": "getOrStartProgress",
        "a(Lnet/minecraft/advancements/Advancement;Lnet/minecraft/advancements/AdvancementProgress;)V": "startProgress",
        "a(Lnet/minecraft/advancements/Advancement;Ljava/util/Set;Ljava/util/Set;)V": "updateTreeVisibility"
      }
    },
    "net/minecraft/server/RegistryLayer": {
      "fields": {
        "a": "STATIC",
        "b": "WORLDGEN",
        "c": "DIMENSIONS",
        "d": "RELOADABLE",
        "e": "VALUES",
        "f": "STATIC_ACCESS",
        "g": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/core/LayeredRegistryAccess;": "createRegistryAccess",
        "b()[Lnet/minecraft/server/RegistryLayer;": "$values"
      }
    },
    "net/minecraft/server/DataPackResources": {
      "fields": {
        "a": "LOGGER",
        "b": "DATA_RELOAD_INITIAL_TASK",
        "c": "commandBuildContext",
        "d": "commands",
        "e": "recipes",
        "f": "tagManager",
        "g": "lootData",
        "h": "advancements",
        "i": "functionLibrary"
      },
      "methods": {
        "a()Lnet/minecraft/server/ServerFunctionLibrary;": "getFunctionLibrary",
        "b()Lnet/minecraft/world/level/storage/loot/LootDataManager;": "getLootData",
        "c()Lnet/minecraft/world/item/crafting/RecipeManager;": "getRecipeManager",
        "d()Lnet/minecraft/commands/Commands;": "getCommands",
        "e()Lnet/minecraft/server/ServerAdvancementManager;": "getAdvancements",
        "f()Ljava/util/List;": "listeners",
        "a(Lnet/minecraft/core/RegistryAccess;)V": "updateRegistryTags",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/tags/TagManager$LoadResult;)V": "updateRegistryTags",
        "a(Ljava/util/Map$Entry;)Ljava/util/List;": "lambda$updateRegistryTags$4",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/util/Map$Entry;)Lnet/minecraft/tags/TagKey;": "lambda$updateRegistryTags$3",
        "b(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/tags/TagManager$LoadResult;)V": "lambda$updateRegistryTags$2",
        "a(Lnet/minecraft/server/ReloadableServerResources;Ljava/lang/Object;)Lnet/minecraft/server/ReloadableServerResources;": "lambda$loadResources$1",
        "a(Lnet/minecraft/server/ReloadableServerResources;Ljava/lang/Object;Ljava/lang/Throwable;)V": "lambda$loadResources$0"
      }
    },
    "net/minecraft/server/CancelledPacketHandleException": {
      "fields": {
        "a": "RUNNING_ON_DIFFERENT_THREAD"
      }
    },
    "net/minecraft/server/AdvancementDataWorld": {
      "fields": {
        "a": "LOGGER",
        "b": "GSON",
        "c": "advancements",
        "d": "lootData"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/advancements/Advancement;": "getAdvancement",
        "a()Ljava/util/Collection;": "getAllAdvancements"
      }
    },
    "net/minecraft/server/CustomFunctionManager": {
      "fields": {
        "a": "LOGGER",
        "b": "LISTER",
        "c": "functions",
        "d": "tagsLoader",
        "e": "tags",
        "f": "functionCompilationLevel",
        "g": "dispatcher"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "getFunction",
        "a()Ljava/util/Map;": "getFunctions",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Collection;": "getTag",
        "b()Ljava/lang/Iterable;": "getAvailableTags",
        "a(Lnet/minecraft/server/packs/resources/Resource;)Ljava/util/List;": "readLines",
        "a(Lcom/mojang/datafixers/util/Pair;)V": "lambda$reload$7",
        "a(Lcom/google/common/collect/ImmutableMap$Builder;Lnet/minecraft/resources/ResourceLocation;Ljava/util/concurrent/CompletableFuture;)V": "lambda$reload$6",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/google/common/collect/ImmutableMap$Builder;Lnet/minecraft/commands/CommandFunction;Ljava/lang/Throwable;)Ljava/lang/Object;": "lambda$reload$5",
        "a(Ljava/util/concurrent/Executor;Ljava/util/Map;)Ljava/util/concurrent/CompletionStage;": "lambda$reload$4",
        "a(Ljava/util/Map;Ljava/lang/Void;Ljava/lang/Throwable;)Ljava/util/Map;": "lambda$reload$3",
        "a(Ljava/util/Map$Entry;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/commands/CommandFunction;": "lambda$reload$2"
      }
    },
    "net/minecraft/server/CustomFunctionData": {
      "fields": {
        "a": "NO_RECURSIVE_TRACES",
        "b": "TICK_FUNCTION_TAG",
        "c": "LOAD_FUNCTION_TAG",
        "d": "server",
        "e": "context",
        "f": "ticking",
        "g": "postReload",
        "h": "library"
      },
      "methods": {
        "a()I": "getCommandLimit",
        "b()Lcom/mojang/brigadier/CommandDispatcher;": "getDispatcher",
        "c()V": "tick",
        "a(Ljava/util/Collection;Lnet/minecraft/resources/ResourceLocation;)V": "executeTagFunctions",
        "a(Lnet/minecraft/commands/CommandFunction;Lnet/minecraft/commands/CommandSourceStack;)I": "execute",
        "a(Lnet/minecraft/commands/CommandFunction;Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/ServerFunctionManager$TraceCallbacks;)I": "execute",
        "a(Lnet/minecraft/server/ServerFunctionLibrary;)V": "replaceLibrary",
        "b(Lnet/minecraft/server/ServerFunctionLibrary;)V": "postReload",
        "d()Lnet/minecraft/commands/CommandSourceStack;": "getGameLoopSender",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "get",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Collection;": "getTag",
        "e()Ljava/lang/Iterable;": "getFunctionNames",
        "f()Ljava/lang/Iterable;": "getTagNames"
      }
    },
    "net/minecraft/server/CustomFunctionData$ExecutionContext": {
      "fields": {
        "b": "depth",
        "c": "tracer",
        "d": "commandQueue",
        "e": "nestedCalls",
        "f": "abortCurrentDepth",
        "this$0": "this$0"
      },
      "methods": {
        "a(Lnet/minecraft/commands/CommandFunction;Lnet/minecraft/commands/CommandSourceStack;)V": "delayFunctionCall",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/commands/CommandSourceStack;": "wrapSender",
        "b(Lnet/minecraft/commands/CommandFunction;Lnet/minecraft/commands/CommandSourceStack;)I": "runTopCommand",
        "a(Ljava/lang/String;)V": "reportError"
      }
    },
    "net/minecraft/server/CustomFunctionData$ExecutionContext$AbortingReturnValueConsumer": {
      "fields": {
        "b": "wrapped",
        "this$1": "this$1"
      }
    },
    "net/minecraft/server/CustomFunctionData$QueuedCommand": {
      "fields": {
        "a": "sender",
        "b": "depth",
        "c": "entry"
      },
      "methods": {
        "a(Lnet/minecraft/server/ServerFunctionManager;Ljava/util/Deque;ILnet/minecraft/server/ServerFunctionManager$TraceCallbacks;)V": "execute"
      }
    },
    "net/minecraft/server/CustomFunctionData$TraceCallbacks": {
      "methods": {
        "a(ILjava/lang/String;)V": "onCommand",
        "a(ILjava/lang/String;I)V": "onReturn",
        "b(ILjava/lang/String;)V": "onError",
        "a(ILnet/minecraft/resources/ResourceLocation;I)V": "onCall"
      }
    },
    "net/minecraft/server/IMinecraftServer": {
      "methods": {
        "a()Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "getProperties",
        "b()Ljava/lang/String;": "getServerIp",
        "d()I": "getServerPort",
        "f()Ljava/lang/String;": "getServerName",
        "G()Ljava/lang/String;": "getServerVersion",
        "H()I": "getPlayerCount",
        "I()I": "getMaxPlayers",
        "J()[Ljava/lang/String;": "getPlayerNames",
        "q()Ljava/lang/String;": "getLevelIdName",
        "s()Ljava/lang/String;": "getPluginNames",
        "a(Ljava/lang/String;)Ljava/lang/String;": "runCommand"
      }
    },
    "net/minecraft/server/ScoreboardServer": {
      "fields": {
        "g": "server",
        "h": "trackedObjectives",
        "i": "dirtyListeners"
      },
      "methods": {
        "a(Lnet/minecraft/world/scores/Score;)V": "onScoreChanged",
        "a(Ljava/lang/String;)V": "onPlayerRemoved",
        "a(Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)V": "onPlayerScoreRemoved",
        "a(ILnet/minecraft/world/scores/Objective;)V": "setDisplayObjective",
        "a(Ljava/lang/String;Lnet/minecraft/world/scores/PlayerTeam;)Z": "addPlayerToTeam",
        "b(Ljava/lang/String;Lnet/minecraft/world/scores/PlayerTeam;)V": "removePlayerFromTeam",
        "a(Lnet/minecraft/world/scores/Objective;)V": "onObjectiveAdded",
        "b(Lnet/minecraft/world/scores/Objective;)V": "onObjectiveChanged",
        "c(Lnet/minecraft/world/scores/Objective;)V": "onObjectiveRemoved",
        "a(Lnet/minecraft/world/scores/PlayerTeam;)V": "onTeamAdded",
        "b(Lnet/minecraft/world/scores/PlayerTeam;)V": "onTeamChanged",
        "c(Lnet/minecraft/world/scores/PlayerTeam;)V": "onTeamRemoved",
        "a(Ljava/lang/Runnable;)V": "addDirtyListener",
        "a()V": "setDirty",
        "d(Lnet/minecraft/world/scores/Objective;)Ljava/util/List;": "getStartTrackingPackets",
        "e(Lnet/minecraft/world/scores/Objective;)V": "startTrackingObjective",
        "f(Lnet/minecraft/world/scores/Objective;)Ljava/util/List;": "getStopTrackingPackets",
        "g(Lnet/minecraft/world/scores/Objective;)V": "stopTrackingObjective",
        "h(Lnet/minecraft/world/scores/Objective;)I": "getObjectiveDisplaySlotCount",
        "b()Lnet/minecraft/world/scores/ScoreboardSaveData;": "createData",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/scores/ScoreboardSaveData;": "createData"
      }
    },
    "net/minecraft/server/ScoreboardServer$Action": {
      "fields": {
        "a": "CHANGE",
        "b": "REMOVE",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/server/Services": {
      "fields": {
        "a": "sessionService",
        "b": "servicesKeySet",
        "c": "profileRepository",
        "d": "profileCache",
        "e": "USERID_CACHE_FILE"
      },
      "methods": {
        "a(Lcom/mojang/authlib/yggdrasil/YggdrasilAuthenticationService;Ljava/io/File;)Lnet/minecraft/server/Services;": "create",
        "a()Lnet/minecraft/util/SignatureValidator;": "profileKeySignatureValidator",
        "b()Lcom/mojang/authlib/minecraft/MinecraftSessionService;": "sessionService",
        "c()Lcom/mojang/authlib/yggdrasil/ServicesKeySet;": "servicesKeySet",
        "d()Lcom/mojang/authlib/GameProfileRepository;": "profileRepository",
        "e()Lnet/minecraft/server/players/GameProfileCache;": "profileCache"
      }
    },
    "net/minecraft/server/TickTask": {
      "fields": {
        "a": "tick",
        "b": "runnable"
      },
      "methods": {
        "a()I": "getTick"
      }
    },
    "net/minecraft/server/WorldLoader": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/server/WorldLoader$InitConfig;Lnet/minecraft/server/WorldLoader$WorldDataSupplier;Lnet/minecraft/server/WorldLoader$ResultFactory;Ljava/util/concurrent/Executor;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "load",
        "a(Lnet/minecraft/core/RegistryAccess$Frozen;Lnet/minecraft/server/WorldLoader$ResultFactory;Lnet/minecraft/server/packs/resources/CloseableResourceManager;Lnet/minecraft/core/LayeredRegistryAccess;Lnet/minecraft/server/WorldLoader$DataLoadOutput;Lnet/minecraft/server/ReloadableServerResources;)Ljava/lang/Object;": "lambda$load$1",
        "a(Lnet/minecraft/server/packs/resources/CloseableResourceManager;Lnet/minecraft/server/ReloadableServerResources;Ljava/lang/Throwable;)V": "lambda$load$0"
      }
    },
    "net/minecraft/server/WorldStem": {
      "fields": {
        "a": "resourceManager",
        "b": "dataPackResources",
        "c": "registries"
      },
      "methods": {
        "a()Lnet/minecraft/server/packs/resources/CloseableResourceManager;": "resourceManager",
        "b()Lnet/minecraft/server/ReloadableServerResources;": "dataPackResources",
        "c()Lnet/minecraft/core/LayeredRegistryAccess;": "registries"
      }
    },
    "net/minecraft/server/advancements/AdvancementVisibilityEvaluator": {
      "fields": {
        "a": "VISIBILITY_DEPTH"
      },
      "methods": {
        "a(Lnet/minecraft/advancements/Advancement;Z)Lnet/minecraft/server/advancements/AdvancementVisibilityEvaluator$VisibilityRule;": "evaluateVisibilityRule",
        "a(Lit/unimi/dsi/fastutil/Stack;)Z": "evaluateVisiblityForUnfinishedNode",
        "a(Lnet/minecraft/advancements/Advancement;Lit/unimi/dsi/fastutil/Stack;Ljava/util/function/Predicate;Lnet/minecraft/server/advancements/AdvancementVisibilityEvaluator$Output;)Z": "evaluateVisibility",
        "a(Lnet/minecraft/advancements/Advancement;Ljava/util/function/Predicate;Lnet/minecraft/server/advancements/AdvancementVisibilityEvaluator$Output;)V": "evaluateVisibility"
      }
    },
    "net/minecraft/server/bossevents/BossBattleCustom": {
      "fields": {
        "h": "id",
        "i": "players",
        "j": "value",
        "k": "max"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getTextId",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "addPlayer",
        "a(Ljava/util/UUID;)V": "addOfflinePlayer",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "removePlayer",
        "b()V": "removeAllPlayers",
        "c()I": "getValue",
        "d()I": "getMax",
        "a(I)V": "setValue",
        "b(I)V": "setMax",
        "e()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a(Ljava/util/Collection;)Z": "setPlayers",
        "f()Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/bossevents/CustomBossEvent;": "load",
        "c(Lnet/minecraft/server/level/ServerPlayer;)V": "onPlayerConnect",
        "d(Lnet/minecraft/server/level/ServerPlayer;)V": "onPlayerDisconnect"
      }
    },
    "net/minecraft/server/bossevents/BossBattleCustomData": {
      "fields": {
        "a": "events"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/bossevents/CustomBossEvent;": "get",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/server/bossevents/CustomBossEvent;": "create",
        "a(Lnet/minecraft/server/bossevents/CustomBossEvent;)V": "remove",
        "a()Ljava/util/Collection;": "getIds",
        "b()Ljava/util/Collection;": "getEvents",
        "c()Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "onPlayerConnect",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "onPlayerDisconnect"
      }
    },
    "net/minecraft/server/commands/CommandAdvancement": {
      "fields": {
        "a": "SUGGEST_ADVANCEMENTS"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/util/Collection;)I": "perform",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/server/commands/AdvancementCommands$Action;Lnet/minecraft/advancements/Advancement;Ljava/lang/String;)I": "performCriterion",
        "a(Lnet/minecraft/advancements/Advancement;Lnet/minecraft/server/commands/AdvancementCommands$Mode;)Ljava/util/List;": "getAdvancements",
        "a(Lnet/minecraft/advancements/Advancement;Ljava/util/List;)V": "addChildren",
        "a(Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/lang/String;Lnet/minecraft/advancements/Advancement;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$performCriterion$21",
        "b(Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/lang/String;Lnet/minecraft/advancements/Advancement;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$performCriterion$20",
        "a(Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$perform$19",
        "b(Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$perform$18",
        "c(Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$perform$17",
        "d(Lnet/minecraft/server/commands/AdvancementCommands$Action;Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$perform$16",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$10",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$3",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "c(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandAdvancement$Action": {
      "fields": {
        "a": "GRANT",
        "b": "REVOKE",
        "c": "key",
        "d": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/lang/Iterable;)I": "perform",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/advancements/Advancement;)Z": "perform",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/advancements/Advancement;Ljava/lang/String;)Z": "performCriterion",
        "a()Ljava/lang/String;": "getKey",
        "b()[Lnet/minecraft/server/commands/AdvancementCommands$Action;": "$values"
      }
    },
    "net/minecraft/server/commands/CommandAdvancement$Filter": {
      "fields": {
        "a": "ONLY",
        "b": "THROUGH",
        "c": "FROM",
        "d": "UNTIL",
        "e": "EVERYTHING",
        "f": "parents",
        "g": "children",
        "h": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/server/commands/AdvancementCommands$Mode;": "$values"
      }
    },
    "net/minecraft/server/commands/CommandAttribute": {
      "fields": {
        "a": "ERROR_NOT_LIVING_ENTITY",
        "b": "ERROR_NO_SUCH_ATTRIBUTE",
        "c": "ERROR_NO_SUCH_MODIFIER",
        "d": "ERROR_MODIFIER_ALREADY_PRESENT"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "getAttributeInstance",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/LivingEntity;": "getLivingEntity",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;)Lnet/minecraft/world/entity/LivingEntity;": "getEntityWithAttribute",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;D)I": "getAttributeValue",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;D)I": "getAttributeBase",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;Ljava/util/UUID;D)I": "getAttributeModifier",
        "c(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;D)I": "setAttributeBase",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;Ljava/util/UUID;Ljava/lang/String;DLnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;)I": "addModifier",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;Ljava/util/UUID;)I": "removeModifier",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/network/chat/Component;": "getAttributeDescription",
        "a(Ljava/util/UUID;Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$removeModifier$21",
        "b(Ljava/util/UUID;Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$addModifier$20",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/Entity;D)Lnet/minecraft/network/chat/Component;": "lambda$setAttributeBase$19",
        "a(Ljava/util/UUID;Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/Entity;D)Lnet/minecraft/network/chat/Component;": "lambda$getAttributeModifier$18",
        "b(Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/Entity;D)Lnet/minecraft/network/chat/Component;": "lambda$getAttributeBase$17",
        "c(Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/Entity;D)Lnet/minecraft/network/chat/Component;": "lambda$getAttributeValue$16",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$4",
        "a(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "b(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandBanIp": {
      "fields": {
        "a": "ERROR_INVALID_IP",
        "b": "ERROR_ALREADY_BANNED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;Lnet/minecraft/network/chat/Component;)I": "banIpOrName",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;Lnet/minecraft/network/chat/Component;)I": "banIp",
        "a(Ljava/util/List;)Lnet/minecraft/network/chat/Component;": "lambda$banIp$4",
        "a(Ljava/lang/String;Lnet/minecraft/server/players/IpBanListEntry;)Lnet/minecraft/network/chat/Component;": "lambda$banIp$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandBanList": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "showList",
        "a(Lnet/minecraft/server/players/BanListEntry;)Lnet/minecraft/network/chat/Component;": "lambda$showList$6",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$showList$5",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$showList$4",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandBan": {
      "fields": {
        "a": "ERROR_ALREADY_BANNED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/network/chat/Component;)I": "banPlayers",
        "a(Lcom/mojang/authlib/GameProfile;Lnet/minecraft/server/players/UserBanListEntry;)Lnet/minecraft/network/chat/Component;": "lambda$banPlayers$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandBossBar": {
      "fields": {
        "b": "ERROR_ALREADY_EXISTS",
        "c": "ERROR_DOESNT_EXIST",
        "d": "ERROR_NO_PLAYER_CHANGE",
        "e": "ERROR_NO_NAME_CHANGE",
        "f": "ERROR_NO_COLOR_CHANGE",
        "g": "ERROR_NO_STYLE_CHANGE",
        "h": "ERROR_NO_VALUE_CHANGE",
        "i": "ERROR_NO_MAX_CHANGE",
        "j": "ERROR_ALREADY_HIDDEN",
        "k": "ERROR_ALREADY_VISIBLE",
        "a": "SUGGEST_BOSS_BAR"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;)I": "getValue",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;)I": "getMax",
        "c(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;)I": "getVisible",
        "d(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;)I": "getPlayers",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;Z)I": "setVisible",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;I)I": "setValue",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;I)I": "setMax",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;Lnet/minecraft/world/BossEvent$BossBarColor;)I": "setColor",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;Lnet/minecraft/world/BossEvent$BossBarOverlay;)I": "setStyle",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;Lnet/minecraft/network/chat/Component;)I": "setName",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;Ljava/util/Collection;)I": "setPlayers",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "listBars",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/chat/Component;)I": "createBar",
        "e(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;)I": "removeBar",
        "a(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/bossevents/CustomBossEvent;": "getBossBar",
        "a(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$removeBar$47",
        "b(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$createBar$46",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listBars$45",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$listBars$44",
        "a(Lnet/minecraft/server/bossevents/CustomBossEvent;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$setPlayers$43",
        "c(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$setPlayers$42",
        "d(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$setName$41",
        "e(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$setStyle$40",
        "f(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$setColor$39",
        "a(Lnet/minecraft/server/bossevents/CustomBossEvent;I)Lnet/minecraft/network/chat/Component;": "lambda$setMax$38",
        "b(Lnet/minecraft/server/bossevents/CustomBossEvent;I)Lnet/minecraft/network/chat/Component;": "lambda$setValue$37",
        "g(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$setVisible$36",
        "h(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$setVisible$35",
        "i(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$getPlayers$34",
        "j(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$getPlayers$33",
        "k(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$getVisible$32",
        "l(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$getVisible$31",
        "m(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$getMax$30",
        "n(Lnet/minecraft/server/bossevents/CustomBossEvent;)Lnet/minecraft/network/chat/Component;": "lambda$getValue$29",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$28",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$27",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$26",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$25",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$24",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$23",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$22",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$21",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$20",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$19",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$18",
        "m(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$17",
        "n(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$16",
        "o(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "p(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "q(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "r(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "s(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "t(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "u(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "v(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "w(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "x(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "y(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "z(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$2",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandClear": {
      "fields": {
        "a": "ERROR_SINGLE",
        "b": "ERROR_MULTIPLE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Ljava/util/function/Predicate;I)I": "clearInventory",
        "a(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$clearInventory$12",
        "b(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$clearInventory$11",
        "c(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$clearInventory$10",
        "d(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$clearInventory$9",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$register$5",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$register$3",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$2",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandClone": {
      "fields": {
        "b": "ERROR_OVERLAP",
        "c": "ERROR_AREA_TOO_LARGE",
        "d": "ERROR_FAILED",
        "a": "FILTER_AIR"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandBuildContext;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "beginEndDestinationAndModeSuffix",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/server/level/ServerLevel;Ljava/lang/String;)Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;": "getLoadedDimensionAndPosition",
        "a(Lnet/minecraft/commands/CommandBuildContext;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "destinationAndModeSuffix",
        "a(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "wrapWithCloneMode",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;Ljava/util/function/Predicate;Lnet/minecraft/server/commands/CloneCommands$Mode;)I": "clone",
        "a(I)Lnet/minecraft/network/chat/Component;": "lambda$clone$23",
        "a(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$wrapWithCloneMode$22",
        "b(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$wrapWithCloneMode$21",
        "c(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$wrapWithCloneMode$20",
        "a(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$destinationAndModeSuffix$19",
        "a(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/function/Predicate;": "lambda$destinationAndModeSuffix$18",
        "b(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$destinationAndModeSuffix$17",
        "b(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/function/Predicate;": "lambda$destinationAndModeSuffix$16",
        "c(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$destinationAndModeSuffix$15",
        "a(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$destinationAndModeSuffix$14",
        "c(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/function/Predicate;": "lambda$destinationAndModeSuffix$13",
        "b(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$destinationAndModeSuffix$12",
        "d(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$destinationAndModeSuffix$11",
        "c(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$destinationAndModeSuffix$10",
        "a(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;": "lambda$destinationAndModeSuffix$9",
        "b(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;": "lambda$destinationAndModeSuffix$8",
        "c(Lnet/minecraft/server/commands/CloneCommands$CommandFunction;Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/commands/CloneCommands$DimensionAndPosition;": "lambda$destinationAndModeSuffix$7",
        "d(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/level/ServerLevel;": "lambda$beginEndDestinationAndModeSuffix$6",
        "e(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/level/ServerLevel;": "lambda$beginEndDestinationAndModeSuffix$5",
        "f(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/level/ServerLevel;": "lambda$register$4",
        "g(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/server/level/ServerLevel;": "lambda$register$3",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$2",
        "d(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$static$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandClone$CommandCloneStoredTileEntity": {
      "fields": {
        "a": "pos",
        "b": "state",
        "c": "tag"
      }
    },
    "net/minecraft/server/commands/CommandClone$Mode": {
      "fields": {
        "a": "FORCE",
        "b": "MOVE",
        "c": "NORMAL",
        "d": "canOverlap",
        "e": "$VALUES"
      },
      "methods": {
        "a()Z": "canOverlap",
        "b()[Lnet/minecraft/server/commands/CloneCommands$Mode;": "$values"
      }
    },
    "net/minecraft/server/commands/DamageCommand": {
      "fields": {
        "a": "ERROR_INVULNERABLE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;FLnet/minecraft/world/damagesource/DamageSource;)I": "damage",
        "a(FLnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$damage$6",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandDatapack": {
      "fields": {
        "a": "ERROR_UNKNOWN_PACK",
        "b": "ERROR_PACK_ALREADY_ENABLED",
        "c": "ERROR_PACK_ALREADY_DISABLED",
        "d": "ERROR_PACK_FEATURES_NOT_ENABLED",
        "e": "SELECTED_PACKS",
        "f": "UNSELECTED_PACKS"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/packs/repository/Pack;Lnet/minecraft/server/commands/DataPackCommand$Inserter;)I": "enablePack",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/packs/repository/Pack;)I": "disablePack",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "listPacks",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "listAvailablePacks",
        "c(Lnet/minecraft/commands/CommandSourceStack;)I": "listEnabledPacks",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;Z)Lnet/minecraft/server/packs/repository/Pack;": "getPack",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listEnabledPacks$31",
        "a(Lnet/minecraft/server/packs/repository/Pack;)Lnet/minecraft/network/chat/Component;": "lambda$listEnabledPacks$30",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$listEnabledPacks$29",
        "a(Ljava/util/List;)Lnet/minecraft/network/chat/Component;": "lambda$listAvailablePacks$28",
        "b(Lnet/minecraft/server/packs/repository/Pack;)Lnet/minecraft/network/chat/Component;": "lambda$listAvailablePacks$27",
        "b()Lnet/minecraft/network/chat/Component;": "lambda$listAvailablePacks$26",
        "a(Ljava/util/Collection;Lnet/minecraft/world/flag/FeatureFlagSet;Lnet/minecraft/server/packs/repository/Pack;)Z": "lambda$listAvailablePacks$25",
        "c(Lnet/minecraft/server/packs/repository/Pack;)Lnet/minecraft/network/chat/Component;": "lambda$disablePack$24",
        "d(Lnet/minecraft/server/packs/repository/Pack;)Lnet/minecraft/network/chat/Component;": "lambda$enablePack$23",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$22",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$21",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$20",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$19",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$18",
        "a(Ljava/util/List;Lnet/minecraft/server/packs/repository/Pack;)V": "lambda$register$17",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$16",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/util/List;Lnet/minecraft/server/packs/repository/Pack;)V": "lambda$register$14",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/util/List;Lnet/minecraft/server/packs/repository/Pack;)V": "lambda$register$12",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "b(Ljava/util/List;Lnet/minecraft/server/packs/repository/Pack;)V": "lambda$register$10",
        "e(Lnet/minecraft/server/packs/repository/Pack;)Lnet/minecraft/server/packs/repository/Pack;": "lambda$register$9",
        "d(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$8",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$7",
        "a(Ljava/util/Collection;Ljava/lang/String;)Z": "lambda$static$6",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;Lnet/minecraft/server/packs/repository/Pack;)Z": "lambda$static$5",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$4",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandDeop": {
      "fields": {
        "a": "ERROR_NOT_OP"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "deopPlayers",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$deopPlayers$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandDebug": {
      "fields": {
        "a": "LOGGER",
        "b": "ERROR_NOT_RUNNING",
        "c": "ERROR_ALREADY_RUNNING"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "start",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "stop",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "traceFunction",
        "a(ILjava/util/Collection;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$traceFunction$8",
        "b(ILjava/util/Collection;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$traceFunction$7",
        "a(DLnet/minecraft/util/profiling/ProfileResults;D)Lnet/minecraft/network/chat/Component;": "lambda$stop$6",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$start$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$3",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "d(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandGamemodeDefault": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/level/GameType;)I": "setMode",
        "a(Lnet/minecraft/world/level/GameType;)Lnet/minecraft/network/chat/Component;": "lambda$setMode$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandDifficulty": {
      "fields": {
        "a": "ERROR_ALREADY_DIFFICULT"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/Difficulty;)I": "setDifficulty"
      }
    },
    "net/minecraft/server/commands/CommandEffect": {
      "fields": {
        "a": "ERROR_GIVE_FAILED",
        "b": "ERROR_CLEAR_EVERYTHING_FAILED",
        "c": "ERROR_CLEAR_SPECIFIC_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/core/Holder;Ljava/lang/Integer;IZ)I": "giveEffect",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "clearEffects",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/core/Holder;)I": "clearEffect"
      }
    },
    "net/minecraft/server/commands/CommandMe": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandEnchant": {
      "fields": {
        "a": "ERROR_NOT_LIVING_ENTITY",
        "b": "ERROR_NO_ITEM",
        "c": "ERROR_INCOMPATIBLE",
        "d": "ERROR_LEVEL_TOO_HIGH",
        "e": "ERROR_NOTHING_HAPPENED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/core/Holder;I)I": "enchant",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$enchant$8",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$enchant$7",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$4",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandExecute": {
      "fields": {
        "a": "MAX_TEST_AREA",
        "b": "ERROR_AREA_TOO_LARGE",
        "c": "ERROR_CONDITIONAL_FAILED",
        "d": "ERROR_CONDITIONAL_FAILED_COUNT",
        "e": "CALLBACK_CHAINER",
        "f": "SUGGEST_PREDICATE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lcom/mojang/brigadier/tree/LiteralCommandNode;Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;Z)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "wrapStores",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;Z)Lnet/minecraft/commands/CommandSourceStack;": "storeValue",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/bossevents/CustomBossEvent;ZZ)Lnet/minecraft/commands/CommandSourceStack;": "storeValue",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/function/IntFunction;Z)Lnet/minecraft/commands/CommandSourceStack;": "storeData",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "isChunkLoaded",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;ZLnet/minecraft/commands/CommandBuildContext;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "addConditionals",
        "a(ZLnet/minecraft/server/commands/ExecuteCommand$CommandNumericPredicate;)Lcom/mojang/brigadier/Command;": "createNumericConditionalHandler",
        "a(Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;)I": "checkMatchingData",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/util/function/BiPredicate;)Z": "checkScore",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/advancements/critereon/MinMaxBounds$Ints;)Z": "checkScore",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Z": "checkCustomPredicate",
        "a(Lcom/mojang/brigadier/context/CommandContext;ZZ)Ljava/util/Collection;": "expect",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/ArgumentBuilder;ZLnet/minecraft/server/commands/ExecuteCommand$CommandPredicate;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "addConditional",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/ArgumentBuilder;ZZ)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "addIfBlocksConditional",
        "a(Lcom/mojang/brigadier/context/CommandContext;Z)I": "checkIfRegions",
        "b(Lcom/mojang/brigadier/context/CommandContext;Z)I": "checkUnlessRegions",
        "c(Lcom/mojang/brigadier/context/CommandContext;Z)Ljava/util/OptionalInt;": "checkRegions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Z)Ljava/util/OptionalInt;": "checkRegions",
        "a(Ljava/util/function/Function;)Lcom/mojang/brigadier/RedirectModifier;": "expandOneToOneEntityRelation",
        "b(Ljava/util/function/Function;)Lcom/mojang/brigadier/RedirectModifier;": "expandOneToManyEntityRelation",
        "a(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;)Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;": "createRelationOperations",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/Holder$Reference;)Lnet/minecraft/commands/CommandSourceStack;": "spawnEntityAndRedirect",
        "a(Lnet/minecraft/world/entity/Entity;)Ljava/util/stream/Stream;": "lambda$createRelationOperations$83",
        "b(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$82",
        "c(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$81",
        "d(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$80",
        "e(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$79",
        "f(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$78",
        "g(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$77",
        "h(Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lambda$createRelationOperations$76",
        "a(Ljava/util/function/Function;Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$expandOneToManyEntityRelation$75",
        "i(Lnet/minecraft/world/entity/Entity;)Z": "lambda$expandOneToManyEntityRelation$74",
        "b(Ljava/util/function/Function;Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$expandOneToOneEntityRelation$73",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;)Ljava/util/List;": "lambda$expandOneToOneEntityRelation$72",
        "j(Lnet/minecraft/world/entity/Entity;)Z": "lambda$expandOneToOneEntityRelation$71",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$checkUnlessRegions$70",
        "a(Ljava/util/OptionalInt;)Lnet/minecraft/network/chat/Component;": "lambda$checkIfRegions$69",
        "a(ZLcom/mojang/brigadier/context/CommandContext;)I": "lambda$addIfBlocksConditional$68",
        "b(ZLcom/mojang/brigadier/context/CommandContext;)I": "lambda$addIfBlocksConditional$67",
        "a(ZZLcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$addIfBlocksConditional$66",
        "a(ZLnet/minecraft/server/commands/ExecuteCommand$CommandPredicate;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$addConditional$65",
        "b()Lnet/minecraft/network/chat/Component;": "lambda$addConditional$64",
        "b(ZLnet/minecraft/server/commands/ExecuteCommand$CommandPredicate;Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$addConditional$63",
        "a(Lnet/minecraft/server/commands/ExecuteCommand$CommandNumericPredicate;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$createNumericConditionalHandler$62",
        "c()Lnet/minecraft/network/chat/Component;": "lambda$createNumericConditionalHandler$61",
        "b(Lnet/minecraft/server/commands/ExecuteCommand$CommandNumericPredicate;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$createNumericConditionalHandler$60",
        "a(I)Lnet/minecraft/network/chat/Component;": "lambda$createNumericConditionalHandler$59",
        "a(Lcom/mojang/brigadier/tree/CommandNode;ZLnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$addConditionals$58",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$addConditionals$57",
        "a(ZLnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$addConditionals$56",
        "a(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$55",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$addConditionals$54",
        "c(ZLcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$addConditionals$53",
        "c(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$52",
        "d(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$51",
        "a(Ljava/lang/Integer;Ljava/lang/Integer;)Z": "lambda$addConditionals$50",
        "e(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$49",
        "b(Ljava/lang/Integer;Ljava/lang/Integer;)Z": "lambda$addConditionals$48",
        "f(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$47",
        "c(Ljava/lang/Integer;Ljava/lang/Integer;)Z": "lambda$addConditionals$46",
        "g(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$45",
        "d(Ljava/lang/Integer;Ljava/lang/Integer;)Z": "lambda$addConditionals$44",
        "h(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$43",
        "i(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$42",
        "j(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$41",
        "k(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$40",
        "l(Lcom/mojang/brigadier/context/CommandContext;)Z": "lambda$addConditionals$39",
        "a(Lnet/minecraft/server/commands/data/DataAccessor;ZLnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/function/IntFunction;Lcom/mojang/brigadier/context/CommandContext;ZI)V": "lambda$storeData$38",
        "a(ZZLnet/minecraft/server/bossevents/CustomBossEvent;Lcom/mojang/brigadier/context/CommandContext;ZI)V": "lambda$storeValue$37",
        "a(Ljava/util/Collection;Lnet/minecraft/world/scores/Scoreboard;Lnet/minecraft/world/scores/Objective;ZLcom/mojang/brigadier/context/CommandContext;ZI)V": "lambda$storeValue$36",
        "a(Lcom/mojang/brigadier/tree/LiteralCommandNode;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$wrapStores$35",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$34",
        "a(Lcom/mojang/brigadier/context/CommandContext;I)Lnet/minecraft/nbt/Tag;": "lambda$wrapStores$33",
        "b(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$32",
        "b(Lcom/mojang/brigadier/context/CommandContext;I)Lnet/minecraft/nbt/Tag;": "lambda$wrapStores$31",
        "c(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$30",
        "c(Lcom/mojang/brigadier/context/CommandContext;I)Lnet/minecraft/nbt/Tag;": "lambda$wrapStores$29",
        "d(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$28",
        "d(Lcom/mojang/brigadier/context/CommandContext;I)Lnet/minecraft/nbt/Tag;": "lambda$wrapStores$27",
        "e(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$26",
        "e(Lcom/mojang/brigadier/context/CommandContext;I)Lnet/minecraft/nbt/Tag;": "lambda$wrapStores$25",
        "f(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$24",
        "f(Lcom/mojang/brigadier/context/CommandContext;I)Lnet/minecraft/nbt/Tag;": "lambda$wrapStores$23",
        "d(ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$22",
        "e(ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$21",
        "f(ZLcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$wrapStores$20",
        "m(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$19",
        "n(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$18",
        "o(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$17",
        "p(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$16",
        "q(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$15",
        "r(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$register$14",
        "s(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$register$13",
        "t(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$12",
        "u(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$11",
        "v(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$register$10",
        "w(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$register$9",
        "x(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$register$8",
        "y(Lcom/mojang/brigadier/context/CommandContext;)Ljava/util/Collection;": "lambda$register$7",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$6",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$4",
        "a(Lcom/mojang/brigadier/ResultConsumer;Lcom/mojang/brigadier/ResultConsumer;)Lcom/mojang/brigadier/ResultConsumer;": "lambda$static$3",
        "a(Lcom/mojang/brigadier/ResultConsumer;Lcom/mojang/brigadier/ResultConsumer;Lcom/mojang/brigadier/context/CommandContext;ZI)V": "lambda$static$2",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandXp": {
      "fields": {
        "a": "ERROR_SET_POINTS_INVALID"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/server/commands/ExperienceCommand$Type;)I": "queryExperience",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;ILnet/minecraft/server/commands/ExperienceCommand$Type;)I": "addExperience",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;ILnet/minecraft/server/commands/ExperienceCommand$Type;)I": "setExperience",
        "a(Lnet/minecraft/server/commands/ExperienceCommand$Type;ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$setExperience$14",
        "b(Lnet/minecraft/server/commands/ExperienceCommand$Type;ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$setExperience$13",
        "c(Lnet/minecraft/server/commands/ExperienceCommand$Type;ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$addExperience$12",
        "d(Lnet/minecraft/server/commands/ExperienceCommand$Type;ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$addExperience$11",
        "a(Lnet/minecraft/server/commands/ExperienceCommand$Type;Lnet/minecraft/server/level/ServerPlayer;I)Lnet/minecraft/network/chat/Component;": "lambda$queryExperience$10",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$9",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandXp$Unit": {
      "fields": {
        "a": "POINTS",
        "b": "LEVELS",
        "c": "add",
        "d": "set",
        "e": "name",
        "f": "query",
        "g": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerPlayer;)I": "lambda$static$3",
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/lang/Integer;)Z": "lambda$static$2",
        "b(Lnet/minecraft/server/level/ServerPlayer;)I": "lambda$static$1",
        "b(Lnet/minecraft/server/level/ServerPlayer;Ljava/lang/Integer;)Z": "lambda$static$0",
        "a()[Lnet/minecraft/server/commands/ExperienceCommand$Type;": "$values"
      }
    },
    "net/minecraft/server/commands/FillBiomeCommand": {
      "fields": {
        "a": "ERROR_NOT_LOADED",
        "b": "ERROR_VOLUME_TOO_LARGE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(I)I": "quantize",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "quantize",
        "a(Lorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/Holder;Ljava/util/function/Predicate;)Lnet/minecraft/world/level/biome/BiomeResolver;": "makeResolver",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder$Reference;Ljava/util/function/Predicate;)I": "fill",
        "a(Lorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/network/chat/Component;": "lambda$fill$6",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Ljava/util/function/Predicate;Lorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/core/Holder;IIILnet/minecraft/world/level/biome/Climate$Sampler;)Lnet/minecraft/core/Holder;": "lambda$makeResolver$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandFill": {
      "fields": {
        "a": "ERROR_AREA_TOO_LARGE",
        "b": "HOLLOW_CORE",
        "c": "ERROR_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/commands/arguments/blocks/BlockInput;Lnet/minecraft/server/commands/FillCommand$Mode;Ljava/util/function/Predicate;)I": "fillBlocks",
        "a(I)Lnet/minecraft/network/chat/Component;": "lambda$fillBlocks$10",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "a(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$register$5",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandFill$Mode": {
      "fields": {
        "a": "REPLACE",
        "b": "OUTLINE",
        "c": "HOLLOW",
        "d": "DESTROY",
        "e": "filter",
        "f": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;Lnet/minecraft/commands/arguments/blocks/BlockInput;Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/commands/arguments/blocks/BlockInput;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;Lnet/minecraft/commands/arguments/blocks/BlockInput;Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/commands/arguments/blocks/BlockInput;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;Lnet/minecraft/commands/arguments/blocks/BlockInput;Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/commands/arguments/blocks/BlockInput;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;Lnet/minecraft/commands/arguments/blocks/BlockInput;Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/commands/arguments/blocks/BlockInput;": "lambda$static$0",
        "a()[Lnet/minecraft/server/commands/FillCommand$Mode;": "$values"
      }
    },
    "net/minecraft/server/commands/CommandForceload": {
      "fields": {
        "a": "MAX_CHUNK_LIMIT",
        "b": "ERROR_TOO_MANY_CHUNKS",
        "c": "ERROR_NOT_TICKING",
        "d": "ERROR_ALL_ADDED",
        "e": "ERROR_NONE_REMOVED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/level/ColumnPos;)I": "queryForceLoad",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "listForceLoad",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "removeAll",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/level/ColumnPos;Lnet/minecraft/server/level/ColumnPos;Z)I": "changeForceLoad",
        "a(ZLnet/minecraft/world/level/ChunkPos;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/network/chat/Component;": "lambda$changeForceLoad$16",
        "a(ZLnet/minecraft/world/level/ChunkPos;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/network/chat/Component;": "lambda$changeForceLoad$15",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/network/chat/Component;": "lambda$removeAll$14",
        "a(Lnet/minecraft/server/level/ServerLevel;J)V": "lambda$removeAll$13",
        "a(ILnet/minecraft/resources/ResourceKey;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$listForceLoad$12",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$listForceLoad$11",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/network/chat/Component;": "lambda$queryForceLoad$10",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$2",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandFunction": {
      "fields": {
        "a": "SUGGEST_FUNCTION"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "runFunction",
        "a(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$runFunction$7",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$runFunction$6",
        "b(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$runFunction$5",
        "c(ILjava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$runFunction$4",
        "a(Lorg/apache/commons/lang3/mutable/MutableObject;I)V": "lambda$runFunction$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandGamemode": {
      "fields": {
        "a": "PERMISSION_LEVEL"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/GameType;)V": "logGamemodeChange",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/util/Collection;Lnet/minecraft/world/level/GameType;)I": "setMode",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$logGamemodeChange$4",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$logGamemodeChange$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandGamerule": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/world/level/GameRules$Key;)I": "setRule",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/level/GameRules$Key;)I": "queryRule"
      }
    },
    "net/minecraft/server/commands/CommandGive": {
      "fields": {
        "a": "MAX_ALLOWED_ITEMSTACKS"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/commands/arguments/item/ItemInput;Ljava/util/Collection;I)I": "giveItem"
      }
    },
    "net/minecraft/server/commands/CommandHelp": {
      "fields": {
        "a": "ERROR_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "a(Lcom/mojang/brigadier/ParseResults;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$register$2",
        "b(Lcom/mojang/brigadier/CommandDispatcher;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/ItemCommands": {
      "fields": {
        "a": "ERROR_TARGET_NOT_A_CONTAINER",
        "c": "ERROR_SOURCE_NOT_A_CONTAINER",
        "b": "ERROR_TARGET_INAPPLICABLE_SLOT",
        "d": "ERROR_SOURCE_INAPPLICABLE_SLOT",
        "e": "ERROR_TARGET_NO_CHANGES",
        "f": "ERROR_TARGET_NO_CHANGES_KNOWN_ITEM",
        "g": "SUGGEST_MODIFIER"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)I": "modifyBlockItem",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;ILnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)I": "modifyEntityItem",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/item/ItemStack;)I": "setBlockItem",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;Lcom/mojang/brigadier/exceptions/Dynamic3CommandExceptionType;)Lnet/minecraft/world/Container;": "getContainer",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;ILnet/minecraft/world/item/ItemStack;)I": "setEntityItem",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;ILjava/util/Collection;I)I": "blockToEntities",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;ILjava/util/Collection;ILnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)I": "blockToEntities",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/BlockPos;I)I": "blockToBlock",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/BlockPos;ILnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)I": "blockToBlock",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;ILnet/minecraft/core/BlockPos;I)I": "entityToBlock",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;ILnet/minecraft/core/BlockPos;ILnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)I": "entityToBlock",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;ILjava/util/Collection;I)I": "entityToEntities",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;ILjava/util/Collection;ILnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)I": "entityToEntities",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "applyModifier",
        "a(Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/world/item/ItemStack;": "getEntityItem",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;I)Lnet/minecraft/world/item/ItemStack;": "getBlockItem",
        "a(Ljava/util/List;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "lambda$setEntityItem$27",
        "b(Ljava/util/List;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "lambda$setEntityItem$26",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "lambda$setBlockItem$25",
        "a(Ljava/util/Map;)Lnet/minecraft/network/chat/Component;": "lambda$modifyEntityItem$24",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/network/chat/Component;": "lambda$modifyEntityItem$23",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "lambda$modifyBlockItem$22",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$21",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$20",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$19",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$18",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$17",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$16",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "m(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "n(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$7",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$6",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$5",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$4",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "a(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "b(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/JfrCommand": {
      "fields": {
        "a": "START_FAILED",
        "b": "DUMP_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "startJfr",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "stopJfr",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$stopJfr$6",
        "a(Ljava/nio/file/Path;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$stopJfr$5",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$startJfr$4",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandKick": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/network/chat/Component;)I": "kickPlayers",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$kickPlayers$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandKill": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "kill",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$kill$4",
        "b(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$kill$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandList": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "listPlayers",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "listPlayersWithUuids",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/function/Function;)I": "format",
        "a(Ljava/util/List;Lnet/minecraft/server/players/PlayerList;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$format$3"
      }
    },
    "net/minecraft/server/commands/CommandLocate": {
      "fields": {
        "a": "LOGGER",
        "b": "ERROR_STRUCTURE_NOT_FOUND",
        "c": "ERROR_STRUCTURE_INVALID",
        "d": "ERROR_BIOME_NOT_FOUND",
        "e": "ERROR_POI_NOT_FOUND",
        "f": "MAX_STRUCTURE_SEARCH_RADIUS",
        "g": "MAX_BIOME_SEARCH_RADIUS",
        "h": "BIOME_SAMPLE_RESOLUTION_HORIZONTAL",
        "i": "BIOME_SAMPLE_RESOLUTION_VERTICAL",
        "j": "POI_SEARCH_RADIUS"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument$Result;)I": "locateStructure",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;)I": "locateBiome",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;)I": "locatePoi",
        "a(Lcom/mojang/datafixers/util/Pair;)Ljava/lang/String;": "getElementName",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;Lnet/minecraft/core/BlockPos;Lcom/mojang/datafixers/util/Pair;Ljava/lang/String;ZLjava/time/Duration;)I": "showLocateResult",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument$Result;Lnet/minecraft/core/BlockPos;Lcom/mojang/datafixers/util/Pair;Ljava/lang/String;ZLjava/time/Duration;)I": "showLocateResult",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;Lcom/mojang/datafixers/util/Pair;Ljava/lang/String;ZLjava/lang/String;Ljava/time/Duration;)I": "showLocateResult",
        "a(IIII)F": "dist",
        "a(Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/network/chat/Component;I)Lnet/minecraft/network/chat/Component;": "lambda$showLocateResult$17",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/String;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$showLocateResult$16",
        "a(Lcom/mojang/datafixers/util/Pair;Lnet/minecraft/tags/TagKey;)Ljava/lang/String;": "lambda$showLocateResult$15",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$showLocateResult$14",
        "a(Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;Lcom/mojang/datafixers/util/Pair;Lnet/minecraft/core/HolderSet$Named;)Ljava/lang/String;": "lambda$showLocateResult$13",
        "a(Lnet/minecraft/commands/arguments/ResourceOrTagArgument$Result;Lnet/minecraft/core/Holder$Reference;)Ljava/lang/String;": "lambda$showLocateResult$12",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$getElementName$11",
        "a(Lnet/minecraft/commands/arguments/ResourceOrTagKeyArgument$Result;)Lcom/mojang/brigadier/exceptions/CommandSyntaxException;": "lambda$locateStructure$10",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/core/HolderSet$Direct;": "lambda$getHolders$8",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$4",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "d(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandLoot": {
      "fields": {
        "a": "SUGGEST_LOOT_TABLE",
        "b": "ERROR_NO_HELD_ITEMS",
        "c": "ERROR_NO_LOOT_TABLE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lcom/mojang/brigadier/builder/ArgumentBuilder;Lnet/minecraft/server/commands/LootCommand$TailProvider;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "addTargets",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/Container;": "getContainer",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;Ljava/util/List;Lnet/minecraft/server/commands/LootCommand$Callback;)I": "blockDistribute",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/item/ItemStack;)Z": "distributeToContainer",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;IILjava/util/List;Lnet/minecraft/server/commands/LootCommand$Callback;)I": "blockReplace",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "canMergeItems",
        "a(Ljava/util/Collection;Ljava/util/List;Lnet/minecraft/server/commands/LootCommand$Callback;)I": "playerGive",
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/List;IILjava/util/List;)V": "setSlots",
        "a(Ljava/util/Collection;IILjava/util/List;Lnet/minecraft/server/commands/LootCommand$Callback;)I": "entityReplace",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/phys/Vec3;Ljava/util/List;Lnet/minecraft/server/commands/LootCommand$Callback;)I": "dropInWorld",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/List;)V": "callback",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/List;Lnet/minecraft/resources/ResourceLocation;)V": "callback",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getSourceHandItem",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/server/commands/LootCommand$DropConsumer;)I": "dropBlockLoot",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/commands/LootCommand$DropConsumer;)I": "dropKillLoot",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/commands/LootCommand$DropConsumer;)I": "dropChestLoot",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/server/commands/LootCommand$DropConsumer;)I": "dropFishingLoot",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/level/storage/loot/LootParams;Lnet/minecraft/server/commands/LootCommand$DropConsumer;)I": "drop"
      }
    },
    "net/minecraft/server/commands/CommandTell": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "sendMessage",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/util/Collection;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandOp": {
      "fields": {
        "a": "ERROR_ALREADY_OP"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "opPlayers",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$opPlayers$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$3",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Ljava/lang/String;": "lambda$register$2",
        "a(Lnet/minecraft/server/players/PlayerList;Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandPardon": {
      "fields": {
        "a": "ERROR_NOT_BANNED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "pardonPlayers",
        "a(Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/network/chat/Component;": "lambda$pardonPlayers$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandPardonIP": {
      "fields": {
        "a": "ERROR_INVALID",
        "b": "ERROR_NOT_BANNED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "unban",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$unban$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandParticle": {
      "fields": {
        "a": "ERROR_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/particles/ParticleOptions;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;FIZLjava/util/Collection;)I": "sendParticles",
        "a(Lnet/minecraft/core/particles/ParticleOptions;)Lnet/minecraft/network/chat/Component;": "lambda$sendParticles$8",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/PerfCommand": {
      "fields": {
        "a": "LOGGER",
        "b": "ERROR_NOT_RUNNING",
        "c": "ERROR_ALREADY_RUNNING"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "startProfilingDedicatedServer",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "stopProfilingDedicatedServer",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/nio/file/Path;Lnet/minecraft/server/MinecraftServer;)V": "saveResults",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/util/profiling/ProfileResults;)V": "whenStopped",
        "a(DI)Lnet/minecraft/network/chat/Component;": "lambda$whenStopped$7",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$saveResults$6",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$startProfilingDedicatedServer$5",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/MinecraftServer;Ljava/nio/file/Path;)V": "lambda$startProfilingDedicatedServer$4",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/util/profiling/ProfileResults;)V": "lambda$startProfilingDedicatedServer$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/PlaceCommand": {
      "fields": {
        "a": "ERROR_FEATURE_FAILED",
        "b": "ERROR_JIGSAW_FAILED",
        "c": "ERROR_STRUCTURE_FAILED",
        "d": "ERROR_TEMPLATE_INVALID",
        "e": "ERROR_TEMPLATE_FAILED",
        "f": "SUGGEST_TEMPLATES"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/Holder$Reference;Lnet/minecraft/core/BlockPos;)I": "placeFeature",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/Holder;Lnet/minecraft/resources/ResourceLocation;ILnet/minecraft/core/BlockPos;)I": "placeJigsaw",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/Holder$Reference;Lnet/minecraft/core/BlockPos;)I": "placeStructure",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/block/Mirror;FI)I": "placeTemplate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/ChunkPos;)V": "checkLoaded",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/ChunkPos;)Z": "lambda$checkLoaded$21",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/network/chat/Component;": "lambda$placeTemplate$20",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/network/chat/Component;": "lambda$placeStructure$19",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructureStart;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/ChunkPos;)V": "lambda$placeStructure$18",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$placeStructure$17",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/network/chat/Component;": "lambda$placeJigsaw$16",
        "b(Ljava/lang/String;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/network/chat/Component;": "lambda$placeFeature$15",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandPlaySound": {
      "fields": {
        "a": "ERROR_TOO_FAR"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/sounds/SoundSource;)Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;": "source",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/sounds/SoundSource;Lnet/minecraft/world/phys/Vec3;FFF)I": "playSound",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$playSound$7",
        "b(Lnet/minecraft/resources/ResourceLocation;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$playSound$6",
        "a(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$source$5",
        "b(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$source$4",
        "c(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$source$3",
        "d(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$source$2",
        "e(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$source$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandPublish": {
      "fields": {
        "a": "ERROR_FAILED",
        "b": "ERROR_ALREADY_PUBLISHED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;IZLnet/minecraft/world/level/GameType;)I": "publish",
        "a(I)Lnet/minecraft/network/chat/MutableComponent;": "getSuccessMessage",
        "b(I)Lnet/minecraft/network/chat/Component;": "lambda$publish$6",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandRecipe": {
      "fields": {
        "a": "ERROR_GIVE_FAILED",
        "b": "ERROR_TAKE_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Ljava/util/Collection;)I": "giveRecipes",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Ljava/util/Collection;)I": "takeRecipes",
        "a(Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$takeRecipes$8",
        "b(Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$takeRecipes$7",
        "c(Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$giveRecipes$6",
        "d(Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$giveRecipes$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandReload": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Ljava/util/Collection;Lnet/minecraft/commands/CommandSourceStack;)V": "reloadPacks",
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register"
      }
    },
    "net/minecraft/server/commands/ReturnCommand": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "setReturn",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/RideCommand": {
      "fields": {
        "a": "ERROR_NOT_RIDING",
        "b": "ERROR_ALREADY_RIDING",
        "c": "ERROR_MOUNT_FAILED",
        "d": "ERROR_MOUNTING_PLAYER",
        "e": "ERROR_MOUNTING_LOOP",
        "f": "ERROR_WRONG_DIMENSION"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)I": "mount",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;)I": "dismount",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$dismount$8",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$mount$7",
        "c(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Z": "lambda$mount$6",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$3",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "b(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandSaveAll": {
      "fields": {
        "a": "ERROR_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Z)I": "saveAll",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$saveAll$4",
        "b()Lnet/minecraft/network/chat/Component;": "lambda$saveAll$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSaveOff": {
      "fields": {
        "a": "ERROR_ALREADY_OFF"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSaveOn": {
      "fields": {
        "a": "ERROR_ALREADY_ON"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSay": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSchedule": {
      "fields": {
        "a": "ERROR_SAME_TICK",
        "b": "ERROR_CANT_REMOVE",
        "c": "SUGGEST_SCHEDULE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lcom/mojang/datafixers/util/Pair;IZ)I": "schedule",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "remove",
        "a(Lnet/minecraft/resources/ResourceLocation;ZLnet/minecraft/world/level/timers/TimerQueue;JLnet/minecraft/commands/CommandSourceStack;ILjava/util/Collection;)V": "lambda$schedule$10",
        "a(Lnet/minecraft/resources/ResourceLocation;ZLnet/minecraft/world/level/timers/TimerQueue;JLnet/minecraft/commands/CommandSourceStack;ILnet/minecraft/commands/CommandFunction;)V": "lambda$schedule$8"
      }
    },
    "net/minecraft/server/commands/CommandScoreboard": {
      "fields": {
        "a": "ERROR_OBJECTIVE_ALREADY_EXISTS",
        "b": "ERROR_DISPLAY_SLOT_ALREADY_EMPTY",
        "c": "ERROR_DISPLAY_SLOT_ALREADY_SET",
        "d": "ERROR_TRIGGER_ALREADY_ENABLED",
        "e": "ERROR_NOT_TRIGGER",
        "f": "ERROR_NO_VALUE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a()Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;": "createRenderTypeModify",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestTriggers",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)I": "getScore",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;Lnet/minecraft/commands/arguments/OperationArgument$Operation;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;)I": "performOperation",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;)I": "enableTrigger",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "resetScores",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;)I": "resetScore",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;I)I": "setScore",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;I)I": "addScore",
        "c(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/scores/Objective;I)I": "removeScore",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "listTrackedPlayers",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "listTrackedPlayerScores",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "clearDisplaySlot",
        "a(Lnet/minecraft/commands/CommandSourceStack;ILnet/minecraft/world/scores/Objective;)I": "setDisplaySlot",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/Objective;Lnet/minecraft/network/chat/Component;)I": "setDisplayName",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/Objective;Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;)I": "setRenderType",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/Objective;)I": "removeObjective",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;Lnet/minecraft/network/chat/Component;)I": "addObjective",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "listObjectives",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listObjectives$48",
        "b()Lnet/minecraft/network/chat/Component;": "lambda$listObjectives$47",
        "a(Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/network/chat/Component;": "lambda$addObjective$46",
        "b(Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/network/chat/Component;": "lambda$removeObjective$45",
        "c(Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/network/chat/Component;": "lambda$setRenderType$44",
        "d(Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/network/chat/Component;": "lambda$setDisplayName$43",
        "a(ILnet/minecraft/world/scores/Objective;)Lnet/minecraft/network/chat/Component;": "lambda$setDisplaySlot$42",
        "a(I)Lnet/minecraft/network/chat/Component;": "lambda$clearDisplaySlot$41",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/network/chat/Component;": "lambda$listTrackedPlayerScores$40",
        "a(Ljava/lang/String;Ljava/util/Map;)Lnet/minecraft/network/chat/Component;": "lambda$listTrackedPlayerScores$39",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$listTrackedPlayerScores$38",
        "b(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listTrackedPlayers$37",
        "c()Lnet/minecraft/network/chat/Component;": "lambda$listTrackedPlayers$36",
        "a(ILnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$removeScore$35",
        "a(ILnet/minecraft/world/scores/Objective;Ljava/util/Collection;I)Lnet/minecraft/network/chat/Component;": "lambda$removeScore$34",
        "b(ILnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$addScore$33",
        "b(ILnet/minecraft/world/scores/Objective;Ljava/util/Collection;I)Lnet/minecraft/network/chat/Component;": "lambda$addScore$32",
        "a(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;I)Lnet/minecraft/network/chat/Component;": "lambda$setScore$31",
        "b(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;I)Lnet/minecraft/network/chat/Component;": "lambda$setScore$30",
        "a(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$resetScore$29",
        "b(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$resetScore$28",
        "c(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$resetScores$27",
        "d(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$resetScores$26",
        "c(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$enableTrigger$25",
        "d(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$enableTrigger$24",
        "e(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$performOperation$23",
        "c(Lnet/minecraft/world/scores/Objective;Ljava/util/Collection;I)Lnet/minecraft/network/chat/Component;": "lambda$performOperation$22",
        "a(Ljava/lang/String;Lnet/minecraft/world/scores/Score;Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/network/chat/Component;": "lambda$getScore$21",
        "a(Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$createRenderTypeModify$20",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$19",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$18",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$17",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$16",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "m(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "n(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "o(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "p(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "q(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "c(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandSeed": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Z)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$register$1",
        "a(ZLnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSetBlock": {
      "fields": {
        "a": "ERROR_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;Lnet/minecraft/commands/arguments/blocks/BlockInput;Lnet/minecraft/server/commands/SetBlockCommand$Mode;Ljava/util/function/Predicate;)I": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/network/chat/Component;": "lambda$setBlock$6",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "a(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$register$3",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSetBlock$Filter": {},
    "net/minecraft/server/commands/CommandSetBlock$Mode": {
      "fields": {
        "a": "REPLACE",
        "b": "DESTROY",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/server/commands/SetBlockCommand$Mode;": "$values"
      }
    },
    "net/minecraft/server/commands/CommandIdleTimeout": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "setIdleTimeout",
        "a(I)Lnet/minecraft/network/chat/Component;": "lambda$setIdleTimeout$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSpawnpoint": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/core/BlockPos;F)I": "setSpawn"
      }
    },
    "net/minecraft/server/commands/CommandSetWorldSpawn": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/BlockPos;F)I": "setSpawn",
        "a(Lnet/minecraft/core/BlockPos;F)Lnet/minecraft/network/chat/Component;": "lambda$setSpawn$4",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/SpawnArmorTrimsCommand": {
      "fields": {
        "a": "MATERIAL_AND_SLOT_TO_ITEM",
        "b": "VANILLA_TRIM_PATTERNS",
        "c": "VANILLA_TRIM_MATERIALS",
        "d": "TRIM_PATTERN_ORDER",
        "e": "TRIM_MATERIAL_ORDER"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/player/Player;)I": "spawnArmorTrims",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$spawnArmorTrims$7",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandSpectate": {
      "fields": {
        "a": "ERROR_SELF",
        "b": "ERROR_NOT_SPECTATOR"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerPlayer;)I": "spectate",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$spectate$6",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$spectate$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$1",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/CommandSpreadPlayers": {
      "fields": {
        "a": "MAX_ITERATION_COUNT",
        "b": "ERROR_FAILED_TO_SPREAD_TEAMS",
        "c": "ERROR_FAILED_TO_SPREAD_ENTITIES",
        "d": "ERROR_INVALID_MAX_HEIGHT"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/phys/Vec2;FFIZLjava/util/Collection;)I": "spreadPlayers",
        "a(Ljava/util/Collection;)I": "getNumberOfTeams",
        "a(Lnet/minecraft/world/phys/Vec2;DLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;DDDDI[Lnet/minecraft/server/commands/SpreadPlayersCommand$Position;Z)V": "spreadPositions",
        "a(Ljava/util/Collection;Lnet/minecraft/server/level/ServerLevel;[Lnet/minecraft/server/commands/SpreadPlayersCommand$Position;IZ)D": "setPlayerPositions",
        "a(Lnet/minecraft/util/RandomSource;IDDDD)[Lnet/minecraft/server/commands/SpreadPlayersCommand$Position;": "createInitialPositions"
      }
    },
    "net/minecraft/server/commands/CommandStop": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandStopSound": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/sounds/SoundSource;Lnet/minecraft/resources/ResourceLocation;)I": "stopSound",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$stopSound$8",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/network/chat/Component;": "lambda$stopSound$7",
        "a(Lnet/minecraft/sounds/SoundSource;)Lnet/minecraft/network/chat/Component;": "lambda$stopSound$6",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/sounds/SoundSource;)Lnet/minecraft/network/chat/Component;": "lambda$stopSound$5",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$4",
        "a(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "b(Lnet/minecraft/sounds/SoundSource;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandSummon": {
      "fields": {
        "a": "ERROR_FAILED",
        "b": "ERROR_DUPLICATE_UUID",
        "c": "INVALID_POSITION"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;Lnet/minecraft/commands/CommandBuildContext;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/Holder$Reference;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/nbt/CompoundTag;Z)Lnet/minecraft/world/entity/Entity;": "createEntity",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/core/Holder$Reference;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/nbt/CompoundTag;Z)I": "spawnEntity"
      }
    },
    "net/minecraft/server/commands/CommandTag": {
      "fields": {
        "a": "ERROR_ADD_FAILED",
        "b": "ERROR_REMOVE_FAILED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Ljava/util/Collection;)Ljava/util/Collection;": "getTags",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Ljava/lang/String;)I": "addTag",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Ljava/lang/String;)I": "removeTag",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "listTags",
        "a(Ljava/util/Collection;Ljava/util/Set;)Lnet/minecraft/network/chat/Component;": "lambda$listTags$12",
        "b(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listTags$11",
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/Set;)Lnet/minecraft/network/chat/Component;": "lambda$listTags$10",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "lambda$listTags$9",
        "a(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$removeTag$8",
        "b(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$removeTag$7",
        "c(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$addTag$6",
        "d(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$addTag$5",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$2",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandTeam": {
      "fields": {
        "a": "ERROR_TEAM_ALREADY_EXISTS",
        "b": "ERROR_TEAM_ALREADY_EMPTY",
        "c": "ERROR_TEAM_ALREADY_NAME",
        "d": "ERROR_TEAM_ALREADY_COLOR",
        "e": "ERROR_TEAM_ALREADY_FRIENDLYFIRE_ENABLED",
        "f": "ERROR_TEAM_ALREADY_FRIENDLYFIRE_DISABLED",
        "g": "ERROR_TEAM_ALREADY_FRIENDLYINVISIBLES_ENABLED",
        "h": "ERROR_TEAM_ALREADY_FRIENDLYINVISIBLES_DISABLED",
        "i": "ERROR_TEAM_NAMETAG_VISIBLITY_UNCHANGED",
        "j": "ERROR_TEAM_DEATH_MESSAGE_VISIBLITY_UNCHANGED",
        "k": "ERROR_TEAM_COLLISION_UNCHANGED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "leaveTeam",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Ljava/util/Collection;)I": "joinTeam",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/world/scores/Team$Visibility;)I": "setNametagVisibility",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/world/scores/Team$Visibility;)I": "setDeathMessageVisibility",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/world/scores/Team$CollisionRule;)I": "setCollision",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Z)I": "setFriendlySight",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Z)I": "setFriendlyFire",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/network/chat/Component;)I": "setDisplayName",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/ChatFormatting;)I": "setColor",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;)I": "emptyTeam",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;)I": "deleteTeam",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)I": "createTeam",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;Lnet/minecraft/network/chat/Component;)I": "createTeam",
        "c(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;)I": "listMembers",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "listTeams",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/network/chat/Component;)I": "setPrefix",
        "c(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/network/chat/Component;)I": "setSuffix",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$setSuffix$47",
        "b(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$setPrefix$46",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listTeams$45",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$listTeams$44",
        "a(Lnet/minecraft/world/scores/PlayerTeam;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$listMembers$43",
        "a(Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$listMembers$42",
        "b(Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$createTeam$41",
        "c(Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$deleteTeam$40",
        "a(Ljava/util/Collection;Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$emptyTeam$39",
        "a(Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/ChatFormatting;)Lnet/minecraft/network/chat/Component;": "lambda$setColor$38",
        "d(Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$setDisplayName$37",
        "a(ZLnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$setFriendlyFire$36",
        "b(ZLnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$setFriendlySight$35",
        "a(Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/world/scores/Team$CollisionRule;)Lnet/minecraft/network/chat/Component;": "lambda$setCollision$34",
        "a(Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/world/scores/Team$Visibility;)Lnet/minecraft/network/chat/Component;": "lambda$setDeathMessageVisibility$33",
        "b(Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/world/scores/Team$Visibility;)Lnet/minecraft/network/chat/Component;": "lambda$setNametagVisibility$32",
        "b(Ljava/util/Collection;Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$joinTeam$31",
        "c(Ljava/util/Collection;Lnet/minecraft/world/scores/PlayerTeam;)Lnet/minecraft/network/chat/Component;": "lambda$joinTeam$30",
        "b(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$leaveTeam$29",
        "c(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$leaveTeam$28",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$27",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$26",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$25",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$24",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$23",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$22",
        "g(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$21",
        "h(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$20",
        "i(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$19",
        "j(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$18",
        "k(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$17",
        "l(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$16",
        "m(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$15",
        "n(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "o(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$13",
        "p(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "q(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "r(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "s(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "t(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "u(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "v(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "w(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "x(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "y(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "z(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "A(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "b(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandTeamMsg": {
      "fields": {
        "a": "SUGGEST_STYLE",
        "b": "ERROR_NOT_ON_TEAM"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/scores/PlayerTeam;Ljava/util/List;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "sendMessage",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/scores/PlayerTeam;Ljava/util/List;Lnet/minecraft/network/chat/PlayerChatMessage;)V": "lambda$register$1",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandTeleport": {
      "fields": {
        "a": "INVALID_POSITION"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/world/entity/Entity;)I": "teleportToEntity",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/commands/arguments/coordinates/Coordinates;Lnet/minecraft/commands/arguments/coordinates/Coordinates;Lnet/minecraft/server/commands/TeleportCommand$LookAt;)I": "teleportToPos",
        "a(D)Ljava/lang/String;": "formatDouble",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerLevel;DDDLjava/util/Set;FFLnet/minecraft/server/commands/TeleportCommand$LookAt;)V": "performTeleport"
      }
    },
    "net/minecraft/server/commands/CommandTellRaw": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandTime": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/server/level/ServerLevel;)I": "getDayTime",
        "c(Lnet/minecraft/commands/CommandSourceStack;I)I": "queryTime",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "setTime",
        "b(Lnet/minecraft/commands/CommandSourceStack;I)I": "addTime"
      }
    },
    "net/minecraft/server/commands/CommandTitle": {
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "clearTitle",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "resetTitle",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;Lnet/minecraft/network/chat/Component;Ljava/lang/String;Ljava/util/function/Function;)I": "showTitle",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;III)I": "setTimes",
        "a(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$setTimes$14",
        "b(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$setTimes$13",
        "a(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$showTitle$12",
        "b(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$showTitle$11",
        "c(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$resetTitle$10",
        "d(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$resetTitle$9",
        "e(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$clearTitle$8",
        "f(Ljava/util/Collection;)Lnet/minecraft/network/chat/Component;": "lambda$clearTitle$7",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandTrigger": {
      "fields": {
        "a": "ERROR_NOT_PRIMED",
        "b": "ERROR_INVALID_OBJECTIVE"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "suggestObjectives",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/Score;I)I": "addValue",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/Score;I)I": "setValue",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/scores/Score;)I": "simpleTrigger",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/world/scores/Score;": "getScore"
      }
    },
    "net/minecraft/server/commands/CommandWeather": {
      "fields": {
        "a": "DEFAULT_TIME"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;ILnet/minecraft/util/valueproviders/IntProvider;)I": "getDuration",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "setClear",
        "b(Lnet/minecraft/commands/CommandSourceStack;I)I": "setRain",
        "c(Lnet/minecraft/commands/CommandSourceStack;I)I": "setThunder",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$setThunder$9",
        "b()Lnet/minecraft/network/chat/Component;": "lambda$setRain$8",
        "c()Lnet/minecraft/network/chat/Component;": "lambda$setClear$7",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$6",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$5",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$4",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandWhitelist": {
      "fields": {
        "a": "ERROR_ALREADY_ENABLED",
        "b": "ERROR_ALREADY_DISABLED",
        "c": "ERROR_ALREADY_WHITELISTED",
        "d": "ERROR_NOT_WHITELISTED"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "reload",
        "a(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "addPlayers",
        "b(Lnet/minecraft/commands/CommandSourceStack;Ljava/util/Collection;)I": "removePlayers",
        "b(Lnet/minecraft/commands/CommandSourceStack;)I": "enableWhitelist",
        "c(Lnet/minecraft/commands/CommandSourceStack;)I": "disableWhitelist",
        "d(Lnet/minecraft/commands/CommandSourceStack;)I": "showList",
        "a([Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "lambda$showList$17",
        "a()Lnet/minecraft/network/chat/Component;": "lambda$showList$16",
        "b()Lnet/minecraft/network/chat/Component;": "lambda$disableWhitelist$15",
        "c()Lnet/minecraft/network/chat/Component;": "lambda$enableWhitelist$14",
        "a(Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/network/chat/Component;": "lambda$removePlayers$13",
        "b(Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/network/chat/Component;": "lambda$addPlayers$12",
        "d()Lnet/minecraft/network/chat/Component;": "lambda$reload$11",
        "a(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "b(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$9",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$8",
        "c(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$7",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$register$6",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Ljava/lang/String;": "lambda$register$5",
        "a(Lnet/minecraft/server/players/PlayerList;Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$register$4",
        "d(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$3",
        "e(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$2",
        "f(Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$1",
        "e(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$0"
      }
    },
    "net/minecraft/server/commands/CommandWorldBorder": {
      "fields": {
        "a": "ERROR_SAME_CENTER",
        "b": "ERROR_SAME_SIZE",
        "c": "ERROR_TOO_SMALL",
        "d": "ERROR_TOO_BIG",
        "e": "ERROR_TOO_FAR_OUT",
        "f": "ERROR_SAME_WARNING_TIME",
        "g": "ERROR_SAME_WARNING_DISTANCE",
        "h": "ERROR_SAME_DAMAGE_BUFFER",
        "i": "ERROR_SAME_DAMAGE_AMOUNT"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/commands/CommandSourceStack;F)I": "setDamageBuffer",
        "b(Lnet/minecraft/commands/CommandSourceStack;F)I": "setDamageAmount",
        "a(Lnet/minecraft/commands/CommandSourceStack;I)I": "setWarningTime",
        "b(Lnet/minecraft/commands/CommandSourceStack;I)I": "setWarningDistance",
        "a(Lnet/minecraft/commands/CommandSourceStack;)I": "getSize",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/phys/Vec2;)I": "setCenter",
        "a(Lnet/minecraft/commands/CommandSourceStack;DJ)I": "setSize"
      }
    },
    "net/minecraft/server/commands/data/CommandDataAccessorTile": {
      "fields": {
        "b": "ERROR_NOT_A_BLOCK_ENTITY",
        "a": "PROVIDER",
        "c": "entity",
        "d": "pos"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setData",
        "a()Lnet/minecraft/nbt/CompoundTag;": "getData",
        "b()Lnet/minecraft/network/chat/Component;": "getModifiedSuccess",
        "a(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;DI)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Ljava/lang/String;)Lnet/minecraft/server/commands/data/DataCommands$DataProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/data/CommandDataAccessor": {
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setData",
        "a()Lnet/minecraft/nbt/CompoundTag;": "getData",
        "b()Lnet/minecraft/network/chat/Component;": "getModifiedSuccess",
        "a(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;DI)Lnet/minecraft/network/chat/Component;": "getPrintSuccess"
      }
    },
    "net/minecraft/server/commands/data/CommandData": {
      "fields": {
        "d": "ERROR_MERGE_UNCHANGED",
        "e": "ERROR_GET_NOT_NUMBER",
        "f": "ERROR_GET_NON_EXISTENT",
        "g": "ERROR_MULTIPLE_TAGS",
        "h": "ERROR_EXPECTED_OBJECT",
        "i": "ERROR_EXPECTED_VALUE",
        "j": "ERROR_INVALID_SUBSTRING",
        "a": "ALL_PROVIDERS",
        "b": "TARGET_PROVIDERS",
        "c": "SOURCE_PROVIDERS"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/CommandDispatcher;)V": "register",
        "a(Lnet/minecraft/nbt/Tag;)Ljava/lang/String;": "getAsText",
        "a(Ljava/util/List;Lnet/minecraft/server/commands/data/DataCommands$StringProcessor;)Ljava/util/List;": "stringifyTagList",
        "a(Ljava/util/function/BiConsumer;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "decorateModification",
        "a(Ljava/lang/String;II)Ljava/lang/String;": "validatedSubstring",
        "b(Ljava/lang/String;II)Ljava/lang/String;": "substring",
        "a(Ljava/lang/String;I)Ljava/lang/String;": "substring",
        "a(II)I": "getOffset",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;)Ljava/util/List;": "getSingletonSource",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;)Ljava/util/List;": "resolveSourcePath",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Ljava/util/List;)I": "manipulateData",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;)I": "removeData",
        "a(Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Lnet/minecraft/server/commands/data/DataAccessor;)Lnet/minecraft/nbt/Tag;": "getSingleTag",
        "b(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;)I": "getData",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;D)I": "getNumeric",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/data/DataAccessor;)I": "getData",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/nbt/CompoundTag;)I": "mergeData",
        "a(Lnet/minecraft/server/commands/data/DataAccessor;)Lnet/minecraft/network/chat/Component;": "lambda$mergeData$44",
        "a(Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/network/chat/Component;": "lambda$getData$43",
        "a(Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;DI)Lnet/minecraft/network/chat/Component;": "lambda$getNumeric$42",
        "a(Lnet/minecraft/server/commands/data/DataAccessor;Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "lambda$getData$41",
        "b(Lnet/minecraft/server/commands/data/DataAccessor;)Lnet/minecraft/network/chat/Component;": "lambda$removeData$40",
        "c(Lnet/minecraft/server/commands/data/DataAccessor;)Lnet/minecraft/network/chat/Component;": "lambda$manipulateData$39",
        "a(Ljava/util/function/BiConsumer;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$decorateModification$38",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$decorateModification$37",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$36",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$decorateModification$35",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$decorateModification$34",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$33",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/lang/String;": "lambda$decorateModification$32",
        "b(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$31",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/lang/String;": "lambda$decorateModification$30",
        "c(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$29",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$decorateModification$28",
        "d(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$27",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$decorateModification$26",
        "b(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$decorateModification$25",
        "b(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$decorateModification$24",
        "e(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$23",
        "f(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lnet/minecraft/server/commands/data/DataCommands$DataManipulator;Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$decorateModification$22",
        "a(Lcom/mojang/brigadier/builder/ArgumentBuilder;Lnet/minecraft/server/commands/data/DataCommands$DataManipulatorDecorator;)V": "lambda$register$21",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/List;)I": "lambda$register$20",
        "b(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/List;)I": "lambda$register$19",
        "c(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/List;)I": "lambda$register$18",
        "d(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/List;)I": "lambda$register$17",
        "e(Lcom/mojang/brigadier/context/CommandContext;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/List;)I": "lambda$register$16",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$register$15",
        "a(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$14",
        "b(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$register$13",
        "b(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$12",
        "c(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$11",
        "d(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$10",
        "c(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/builder/ArgumentBuilder;)Lcom/mojang/brigadier/builder/ArgumentBuilder;": "lambda$register$9",
        "e(Lnet/minecraft/server/commands/data/DataCommands$DataProvider;Lcom/mojang/brigadier/context/CommandContext;)I": "lambda$register$8",
        "a(Lnet/minecraft/commands/CommandSourceStack;)Z": "lambda$register$7",
        "a(Ljava/util/function/Function;)Lnet/minecraft/server/commands/data/DataCommands$DataProvider;": "lambda$static$6",
        "b(Ljava/util/function/Function;)Lnet/minecraft/server/commands/data/DataCommands$DataProvider;": "lambda$static$5",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$4",
        "a(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$3",
        "b(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$2",
        "c(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$1",
        "d(Ljava/lang/Object;)Lcom/mojang/brigadier/Message;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/data/CommandDataAccessorEntity": {
      "fields": {
        "b": "ERROR_NO_PLAYERS",
        "a": "PROVIDER",
        "c": "entity"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setData",
        "a()Lnet/minecraft/nbt/CompoundTag;": "getData",
        "b()Lnet/minecraft/network/chat/Component;": "getModifiedSuccess",
        "a(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;DI)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Ljava/lang/String;)Lnet/minecraft/server/commands/data/DataCommands$DataProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/server/commands/data/CommandDataStorage": {
      "fields": {
        "b": "SUGGEST_STORAGE",
        "a": "PROVIDER",
        "c": "storage",
        "d": "id"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;)Lnet/minecraft/world/level/storage/CommandStorage;": "getGlobalTags",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setData",
        "a()Lnet/minecraft/nbt/CompoundTag;": "getData",
        "b()Lnet/minecraft/network/chat/Component;": "getModifiedSuccess",
        "a(Lnet/minecraft/nbt/Tag;)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;DI)Lnet/minecraft/network/chat/Component;": "getPrintSuccess",
        "a(Ljava/lang/String;)Lnet/minecraft/server/commands/data/DataCommands$DataProvider;": "lambda$static$1",
        "a(Lcom/mojang/brigadier/context/CommandContext;Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;)Ljava/util/concurrent/CompletableFuture;": "lambda$static$0"
      }
    },
    "net/minecraft/server/dedicated/DedicatedPlayerList": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Z)V": "setUsingWhiteList",
        "a(Lcom/mojang/authlib/GameProfile;)V": "op",
        "b(Lcom/mojang/authlib/GameProfile;)V": "deop",
        "a()V": "reloadWhiteList",
        "w()V": "saveIpBanList",
        "x()V": "saveUserBanList",
        "y()V": "loadIpBanList",
        "z()V": "loadUserBanList",
        "A()V": "loadOps",
        "B()V": "saveOps",
        "C()V": "loadWhiteList",
        "D()V": "saveWhiteList",
        "c(Lcom/mojang/authlib/GameProfile;)Z": "isWhiteListed",
        "b()Lnet/minecraft/server/dedicated/DedicatedServer;": "getServer",
        "d(Lcom/mojang/authlib/GameProfile;)Z": "canBypassPlayerLimit",
        "c()Lnet/minecraft/server/MinecraftServer;": "getServer"
      }
    },
    "net/minecraft/server/dedicated/DedicatedServer": {
      "fields": {
        "n": "LOGGER",
        "o": "CONVERSION_RETRY_DELAY_MS",
        "p": "CONVERSION_RETRIES",
        "q": "consoleInput",
        "r": "queryThreadGs4",
        "s": "rconConsoleSource",
        "t": "rconThread",
        "u": "settings",
        "v": "gui",
        "w": "textFilterClient"
      },
      "methods": {
        "e()Z": "initServer",
        "W()Z": "isSpawningAnimals",
        "Q()Z": "isSpawningMonsters",
        "X()Z": "areNpcsEnabled",
        "a()Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "getProperties",
        "r()V": "forceDifficulty",
        "h()Z": "isHardcore",
        "a(Lnet/minecraft/SystemReport;)Lnet/minecraft/SystemReport;": "fillServerSystemReport",
        "a(Ljava/nio/file/Path;)V": "dumpServerProperties",
        "g()V": "onServerExit",
        "b(Ljava/util/function/BooleanSupplier;)V": "tickChildren",
        "B()Z": "isNetherEnabled",
        "a(Ljava/lang/String;Lnet/minecraft/commands/CommandSourceStack;)V": "handleConsoleInput",
        "bf()V": "handleConsoleInputs",
        "l()Z": "isDedicatedServer",
        "m()I": "getRateLimitPacketsPerSecond",
        "n()Z": "isEpollEnabled",
        "bg()Lnet/minecraft/server/dedicated/DedicatedPlayerList;": "getPlayerList",
        "p()Z": "isPublished",
        "b()Ljava/lang/String;": "getServerIp",
        "d()I": "getServerPort",
        "f()Ljava/lang/String;": "getServerName",
        "bh()V": "showGui",
        "af()Z": "hasGui",
        "o()Z": "isCommandBlockEnabled",
        "ah()I": "getSpawnProtectionRadius",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z": "isUnderSpawnProtection",
        "ai()Z": "repliesToStatus",
        "aj()Z": "hidesOnlinePlayers",
        "i()I": "getOperatorUserPermissionLevel",
        "j()I": "getFunctionCompilationLevel",
        "c(I)V": "setPlayerIdleTimeout",
        "k()Z": "shouldRconBroadcast",
        "N_()Z": "shouldInformAdmins",
        "as()I": "getAbsoluteMaxWorldSize",
        "av()I": "getCompressionThreshold",
        "aw()Z": "enforceSecureProfile",
        "bi()Z": "convertOldUsers",
        "bs()V": "waitForRetry",
        "bj()J": "getMaxTickLength",
        "bd()I": "getMaxChainedNeighborUpdates",
        "s()Ljava/lang/String;": "getPluginNames",
        "a(Ljava/lang/String;)Ljava/lang/String;": "runCommand",
        "i(Z)V": "storeUsingWhiteList",
        "t()V": "stopServer",
        "a(Lcom/mojang/authlib/GameProfile;)Z": "isSingleplayerOwner",
        "b(I)I": "getScaledTrackingDistance",
        "q()Ljava/lang/String;": "getLevelIdName",
        "aS()Z": "forceSynchronousWrites",
        "aX()Lnet/minecraft/world/level/GameType;": "getForcedGameType",
        "S()Ljava/util/Optional;": "getServerResourcePack",
        "ac()Lnet/minecraft/server/players/PlayerList;": "getPlayerList",
        "a(ZLnet/minecraft/server/dedicated/DedicatedServerProperties;)Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "lambda$storeUsingWhiteList$4",
        "e(Ljava/lang/String;)V": "lambda$runCommand$3",
        "a(ILnet/minecraft/server/dedicated/DedicatedServerProperties;)Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "lambda$setPlayerIdleTimeout$2"
      }
    },
    "net/minecraft/server/dedicated/DedicatedServerProperties": {
      "fields": {
        "Z": "LOGGER",
        "aa": "SHA1",
        "ab": "COMMA_SPLITTER",
        "a": "onlineMode",
        "b": "preventProxyConnections",
        "c": "serverIp",
        "d": "spawnAnimals",
        "e": "spawnNpcs",
        "f": "pvp",
        "g": "allowFlight",
        "h": "motd",
        "i": "forceGameMode",
        "j": "enforceWhitelist",
        "k": "difficulty",
        "l": "gamemode",
        "m": "levelName",
        "n": "serverPort",
        "o": "announcePlayerAchievements",
        "p": "enableQuery",
        "q": "queryPort",
        "r": "enableRcon",
        "s": "rconPort",
        "t": "rconPassword",
        "u": "hardcore",
        "v": "allowNether",
        "w": "spawnMonsters",
        "x": "useNativeTransport",
        "y": "enableCommandBlock",
        "z": "spawnProtection",
        "A": "opPermissionLevel",
        "B": "functionPermissionLevel",
        "C": "maxTickTime",
        "D": "maxChainedNeighborUpdates",
        "E": "rateLimitPacketsPerSecond",
        "F": "viewDistance",
        "G": "simulationDistance",
        "H": "maxPlayers",
        "I": "networkCompressionThreshold",
        "J": "broadcastRconToOps",
        "K": "broadcastConsoleToOps",
        "L": "maxWorldSize",
        "M": "syncChunkWrites",
        "N": "enableJmxMonitoring",
        "O": "enableStatus",
        "P": "hideOnlinePlayers",
        "Q": "entityBroadcastRangePercentage",
        "R": "textFilteringConfig",
        "S": "serverResourcePackInfo",
        "T": "initialDataPackConfiguration",
        "U": "playerIdleTimeout",
        "V": "whiteList",
        "W": "enforceSecureProfile",
        "ac": "worldDimensionData",
        "X": "worldOptions"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "fromFile",
        "a(Lnet/minecraft/core/RegistryAccess;Ljava/util/Properties;)Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "reload",
        "c(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "parseResourcePackPrompt",
        "a(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Ljava/util/Optional;": "getServerPackInfo",
        "b(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/world/level/DataPackConfig;": "getDatapackConfig",
        "d(Ljava/lang/String;)Lnet/minecraft/world/flag/FeatureFlagSet;": "getFeatures",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/level/levelgen/WorldDimensions;": "createDimensions",
        "b(Lnet/minecraft/core/RegistryAccess;Ljava/util/Properties;)Lnet/minecraft/server/dedicated/Settings;": "reload"
      }
    },
    "net/minecraft/server/dedicated/DedicatedServerProperties$WorldDimensionData": {
      "fields": {
        "a": "generatorSettings",
        "b": "levelType",
        "c": "LEGACY_PRESET_NAMES"
      },
      "methods": {
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/level/levelgen/WorldDimensions;": "create",
        "a()Lcom/google/gson/JsonObject;": "generatorSettings",
        "b()Ljava/lang/String;": "levelType"
      }
    },
    "net/minecraft/server/dedicated/DedicatedServerSettings": {
      "fields": {
        "a": "source",
        "b": "properties"
      },
      "methods": {
        "a()Lnet/minecraft/server/dedicated/DedicatedServerProperties;": "getProperties",
        "b()V": "forceSave",
        "a(Ljava/util/function/UnaryOperator;)Lnet/minecraft/server/dedicated/DedicatedServerSettings;": "update"
      }
    },
    "net/minecraft/server/dedicated/ThreadWatchdog": {
      "fields": {
        "a": "LOGGER",
        "b": "MAX_SHUTDOWN_TIME",
        "c": "SHUTDOWN_STATUS",
        "d": "server",
        "e": "maxTickTime"
      },
      "methods": {
        "a()V": "exit",
        "b()Ljava/lang/String;": "lambda$run$2",
        "a(Lnet/minecraft/server/level/ServerLevel;)Ljava/lang/String;": "lambda$run$1",
        "c()Ljava/lang/String;": "lambda$run$0"
      }
    },
    "net/minecraft/server/dedicated/PropertyManager": {
      "fields": {
        "a": "LOGGER",
        "Y": "properties"
      },
      "methods": {
        "b(Ljava/nio/file/Path;)Ljava/util/Properties;": "loadFromFile",
        "c(Ljava/nio/file/Path;)V": "store",
        "a(Ljava/util/function/Function;)Ljava/util/function/Function;": "wrapNumberDeserializer",
        "a(Ljava/util/function/IntFunction;Ljava/util/function/Function;)Ljava/util/function/Function;": "dispatchNumberOrString",
        "c(Ljava/lang/String;)Ljava/lang/String;": "getStringRaw",
        "a(Ljava/lang/String;Ljava/util/function/Function;)Ljava/lang/Object;": "getLegacy",
        "a(Ljava/lang/String;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;": "get",
        "b(Ljava/lang/String;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Lnet/minecraft/server/dedicated/Settings$MutableValue;": "getMutable",
        "a(Ljava/lang/String;Ljava/util/function/Function;Ljava/util/function/UnaryOperator;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;": "get",
        "a(Ljava/lang/String;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;": "get",
        "b(Ljava/lang/String;Ljava/util/function/Function;Ljava/lang/Object;)Lnet/minecraft/server/dedicated/Settings$MutableValue;": "getMutable",
        "a(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "get",
        "a(Ljava/lang/String;)Ljava/lang/String;": "getLegacyString",
        "a(Ljava/lang/String;I)I": "get",
        "b(Ljava/lang/String;I)Lnet/minecraft/server/dedicated/Settings$MutableValue;": "getMutable",
        "a(Ljava/lang/String;Ljava/util/function/UnaryOperator;I)I": "get",
        "a(Ljava/lang/String;J)J": "get",
        "a(Ljava/lang/String;Z)Z": "get",
        "b(Ljava/lang/String;Z)Lnet/minecraft/server/dedicated/Settings$MutableValue;": "getMutable",
        "b(Ljava/lang/String;)Ljava/lang/Boolean;": "getLegacyBoolean",
        "a()Ljava/util/Properties;": "cloneProperties",
        "b(Lnet/minecraft/core/RegistryAccess;Ljava/util/Properties;)Lnet/minecraft/server/dedicated/Settings;": "reload"
      }
    },
    "net/minecraft/server/dedicated/PropertyManager$EditableProperty": {
      "fields": {
        "b": "key",
        "c": "value",
        "d": "serializer",
        "this$0": "this$0"
      },
      "methods": {
        "a(Lnet/minecraft/core/RegistryAccess;Ljava/lang/Object;)Lnet/minecraft/server/dedicated/Settings;": "update"
      }
    },
    "net/minecraft/server/gui/ServerGUI": {
      "fields": {
        "a": "MONOSPACED",
        "b": "LOGGER",
        "c": "TITLE",
        "d": "SHUTDOWN_TITLE",
        "e": "server",
        "f": "logAppenderThread",
        "g": "finalizers",
        "h": "isClosing"
      },
      "methods": {
        "a(Lnet/minecraft/server/dedicated/DedicatedServer;)Lnet/minecraft/server/gui/MinecraftServerGui;": "showFrameFor",
        "a(Ljava/lang/Runnable;)V": "addFinalizer",
        "c()Ljavax/swing/JComponent;": "buildInfoPanel",
        "d()Ljavax/swing/JComponent;": "buildPlayerPanel",
        "e()Ljavax/swing/JComponent;": "buildChatPanel",
        "a()V": "start",
        "b()V": "close",
        "f()V": "runFinalizers",
        "a(Ljavax/swing/JTextArea;Ljavax/swing/JScrollPane;Ljava/lang/String;)V": "print"
      }
    },
    "net/minecraft/server/gui/PlayerListBox": {
      "fields": {
        "a": "server",
        "b": "tickCount"
      },
      "methods": {
        "a()V": "tick"
      }
    },
    "net/minecraft/server/gui/GuiStatsComponent": {
      "fields": {
        "a": "DECIMAL_FORMAT",
        "b": "values",
        "c": "vp",
        "d": "msgs",
        "e": "server",
        "f": "timer"
      },
      "methods": {
        "b()V": "tick",
        "a([J)D": "getAverage",
        "a()V": "close",
        "a(Ljava/awt/event/ActionEvent;)V": "lambda$new$1",
        "a(Ljava/text/DecimalFormat;)V": "lambda$static$0"
      }
    },
    "net/minecraft/server/level/PlayerChunk": {
      "fields": {
        "a": "UNLOADED_CHUNK",
        "b": "UNLOADED_CHUNK_FUTURE",
        "c": "UNLOADED_LEVEL_CHUNK",
        "d": "NOT_DONE_YET",
        "e": "UNLOADED_LEVEL_CHUNK_FUTURE",
        "f": "CHUNK_STATUSES",
        "g": "futures",
        "h": "levelHeightAccessor",
        "i": "fullChunkFuture",
        "j": "tickingChunkFuture",
        "k": "entityTickingChunkFuture",
        "l": "chunkToSave",
        "m": "chunkToSaveHistory",
        "n": "oldTicketLevel",
        "o": "ticketLevel",
        "p": "queueLevel",
        "q": "pos",
        "r": "hasChangedSections",
        "s": "changedBlocksPerSection",
        "t": "blockChangedLightSectionFilter",
        "u": "skyChangedLightSectionFilter",
        "v": "lightEngine",
        "w": "onLevelChange",
        "x": "playerProvider",
        "y": "wasAccessibleSinceLastSave",
        "z": "pendingFullStateConfirmation"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)Ljava/util/concurrent/CompletableFuture;": "getFutureIfPresentUnchecked",
        "b(Lnet/minecraft/world/level/chunk/ChunkStatus;)Ljava/util/concurrent/CompletableFuture;": "getFutureIfPresent",
        "a()Ljava/util/concurrent/CompletableFuture;": "getTickingChunkFuture",
        "b()Ljava/util/concurrent/CompletableFuture;": "getEntityTickingChunkFuture",
        "c()Ljava/util/concurrent/CompletableFuture;": "getFullChunkFuture",
        "d()Lnet/minecraft/world/level/chunk/LevelChunk;": "getTickingChunk",
        "e()Lnet/minecraft/world/level/chunk/LevelChunk;": "getFullChunk",
        "f()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getLastAvailableStatus",
        "g()Lnet/minecraft/world/level/chunk/ChunkAccess;": "getLastAvailable",
        "h()Ljava/util/concurrent/CompletableFuture;": "getChunkToSave",
        "a(Lnet/minecraft/core/BlockPos;)V": "blockChanged",
        "a(Lnet/minecraft/world/level/LightLayer;I)V": "sectionLightChanged",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;)V": "broadcastChanges",
        "a(Ljava/util/List;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "broadcastBlockEntityIfNeeded",
        "a(Ljava/util/List;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "broadcastBlockEntity",
        "a(Ljava/util/List;Lnet/minecraft/network/protocol/Packet;)V": "broadcast",
        "a(Ljava/lang/String;Ljava/util/concurrent/CompletableFuture;)V": "addSaveDependency",
        "a(Ljava/util/concurrent/CompletableFuture;Ljava/lang/String;)V": "updateChunkToSave",
        "i()Lnet/minecraft/server/level/FullChunkStatus;": "getFullStatus",
        "j()Lnet/minecraft/world/level/ChunkPos;": "getPos",
        "k()I": "getTicketLevel",
        "l()I": "getQueueLevel",
        "b(I)V": "setQueueLevel",
        "a(I)V": "setTicketLevel",
        "m()Z": "wasAccessibleSinceLastSave",
        "n()V": "refreshAccessibility",
        "a(Lnet/minecraft/world/level/chunk/ImposterProtoChunk;)V": "replaceProtoChunk",
        "o()Ljava/util/List;": "getAllFutures",
        "a(Ljava/util/concurrent/CompletableFuture;Lcom/mojang/datafixers/util/Either;)V": "lambda$scheduleFullChunkPromotion$8",
        "a(Ljava/util/concurrent/CompletableFuture;Lnet/minecraft/world/level/chunk/LevelChunk;)V": "lambda$scheduleFullChunkPromotion$7",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$updateChunkToSave$5",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/server/level/ChunkHolder$ChunkLoadingFailure;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$updateChunkToSave$4",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$updateChunkToSave$3",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/lang/Object;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$addSaveDependency$2"
      }
    },
    "net/minecraft/server/level/PlayerChunk$Failure": {
      "fields": {
        "b": "UNLOADED"
      }
    },
    "net/minecraft/server/level/ChunkLevel": {
      "fields": {
        "b": "FULL_CHUNK_LEVEL",
        "c": "BLOCK_TICKING_LEVEL",
        "d": "ENTITY_TICKING_LEVEL",
        "a": "MAX_LEVEL"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/chunk/ChunkStatus;": "generationStatus",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)I": "byStatus",
        "b(I)Lnet/minecraft/server/level/FullChunkStatus;": "fullStatus",
        "a(Lnet/minecraft/server/level/FullChunkStatus;)I": "byStatus",
        "c(I)Z": "isEntityTicking",
        "d(I)Z": "isBlockTicking",
        "e(I)Z": "isLoaded"
      }
    },
    "net/minecraft/server/level/PlayerChunkMap": {
      "fields": {
        "e": "CHUNK_TYPE_REPLACEABLE",
        "f": "CHUNK_TYPE_UNKNOWN",
        "g": "CHUNK_TYPE_FULL",
        "h": "LOGGER",
        "i": "CHUNK_SAVED_PER_TICK",
        "j": "CHUNK_SAVED_EAGERLY_PER_TICK",
        "k": "EAGER_CHUNK_SAVE_COOLDOWN_IN_MILLIS",
        "l": "MIN_VIEW_DISTANCE",
        "a": "MAX_VIEW_DISTANCE",
        "b": "FORCED_TICKET_LEVEL",
        "m": "updatingChunkMap",
        "n": "visibleChunkMap",
        "o": "pendingUnloads",
        "p": "entitiesInLevel",
        "q": "level",
        "r": "lightEngine",
        "s": "mainThreadExecutor",
        "t": "generator",
        "u": "randomState",
        "v": "chunkGeneratorState",
        "w": "overworldDataStorage",
        "x": "poiManager",
        "y": "toDrop",
        "z": "modified",
        "A": "queueSorter",
        "B": "worldgenMailbox",
        "C": "mainThreadMailbox",
        "D": "progressListener",
        "E": "chunkStatusListener",
        "F": "distanceManager",
        "G": "tickingGenerated",
        "H": "structureTemplateManager",
        "I": "storageName",
        "J": "playerMap",
        "K": "entityMap",
        "L": "chunkTypeCache",
        "M": "chunkSaveCooldowns",
        "N": "unloadQueue",
        "O": "viewDistance"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/chunk/ChunkGenerator;": "generator",
        "b()Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;": "generatorState",
        "c()Lnet/minecraft/world/level/levelgen/RandomState;": "randomState",
        "d()V": "debugReloadGenerator",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/entity/Entity;)D": "euclideanDistanceSquared",
        "a(IIIII)Z": "isChunkInRange",
        "b(IIIII)Z": "isChunkOnRangeBorder",
        "e()Lnet/minecraft/server/level/ThreadedLevelLightEngine;": "getLightEngine",
        "a(J)Lnet/minecraft/server/level/ChunkHolder;": "getUpdatingChunkIfPresent",
        "b(J)Lnet/minecraft/server/level/ChunkHolder;": "getVisibleChunkIfPresent",
        "c(J)Ljava/util/function/IntSupplier;": "getChunkQueueLevel",
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "getChunkDebugData",
        "a(Lnet/minecraft/server/level/ChunkHolder;ILjava/util/function/IntFunction;)Ljava/util/concurrent/CompletableFuture;": "getChunkRangeFuture",
        "a(Ljava/lang/IllegalStateException;Ljava/lang/String;)Lnet/minecraft/ReportedException;": "debugFuturesAndCreateReportedException",
        "a(Lnet/minecraft/server/level/ChunkHolder;)Ljava/util/concurrent/CompletableFuture;": "prepareEntityTickingChunk",
        "a(JILnet/minecraft/server/level/ChunkHolder;I)Lnet/minecraft/server/level/ChunkHolder;": "updateChunkScheduling",
        "a(Z)V": "saveAllChunks",
        "a(Ljava/util/function/BooleanSupplier;)V": "tick",
        "f()Z": "hasWork",
        "b(Ljava/util/function/BooleanSupplier;)V": "processUnloads",
        "a(JLnet/minecraft/server/level/ChunkHolder;)V": "scheduleUnload",
        "g()Z": "promoteChunkMap",
        "a(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkStatus;)Ljava/util/concurrent/CompletableFuture;": "schedule",
        "f(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "scheduleChunkLoad",
        "b(Lnet/minecraft/nbt/CompoundTag;)Z": "isChunkDataValid",
        "a(Ljava/lang/Throwable;Lnet/minecraft/world/level/ChunkPos;)Lcom/mojang/datafixers/util/Either;": "handleChunkLoadFailure",
        "g(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "createEmptyChunk",
        "h(Lnet/minecraft/world/level/ChunkPos;)V": "markPositionReplaceable",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/ChunkStatus$ChunkType;)B": "markPosition",
        "b(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkStatus;)Ljava/util/concurrent/CompletableFuture;": "scheduleChunkGeneration",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "releaseLightTicket",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;I)Lnet/minecraft/world/level/chunk/ChunkStatus;": "getDependencyStatus",
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/util/List;)V": "postLoadProtoChunk",
        "d(Lnet/minecraft/server/level/ChunkHolder;)Ljava/util/concurrent/CompletableFuture;": "protoChunkToFullChunk",
        "b(Lnet/minecraft/server/level/ChunkHolder;)Ljava/util/concurrent/CompletableFuture;": "prepareTickingChunk",
        "c(Lnet/minecraft/server/level/ChunkHolder;)Ljava/util/concurrent/CompletableFuture;": "prepareAccessibleChunk",
        "h()I": "getTickingGenerated",
        "e(Lnet/minecraft/server/level/ChunkHolder;)Z": "saveChunkIfNeeded",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)Z": "save",
        "i(Lnet/minecraft/world/level/ChunkPos;)Z": "isExistingChunkFull",
        "a(I)V": "setViewDistance",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/ChunkPos;Lorg/apache/commons/lang3/mutable/MutableObject;ZZ)V": "updateChunkTracking",
        "i()I": "size",
        "j()Lnet/minecraft/server/level/DistanceManager;": "getDistanceManager",
        "k()Ljava/lang/Iterable;": "getChunks",
        "a(Ljava/io/Writer;)V": "dumpChunks",
        "a(Ljava/util/concurrent/CompletableFuture;)Ljava/lang/String;": "printFuture",
        "j(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "readChunk",
        "c(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "upgradeChunkTag",
        "c(Lnet/minecraft/world/level/ChunkPos;)Z": "anyPlayerCloseEnoughForSpawning",
        "d(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/List;": "getPlayersCloseForSpawning",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/ChunkPos;)Z": "playerIsCloseEnoughForSpawning",
        "b(Lnet/minecraft/server/level/ServerPlayer;)Z": "skipPlayer",
        "a(Lnet/minecraft/server/level/ServerPlayer;Z)V": "updatePlayerStatus",
        "c(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/core/SectionPos;": "updatePlayerPos",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "move",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)Ljava/util/List;": "getPlayers",
        "a(Lnet/minecraft/world/entity/Entity;)V": "addEntity",
        "b(Lnet/minecraft/world/entity/Entity;)V": "removeEntity",
        "l()V": "tick",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/network/protocol/Packet;)V": "broadcast",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/network/protocol/Packet;)V": "broadcastAndSend",
        "a(Ljava/util/List;)V": "resendBiomesForChunks",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lorg/apache/commons/lang3/mutable/MutableObject;Lnet/minecraft/world/level/chunk/LevelChunk;)V": "playerLoadedChunk",
        "m()Lnet/minecraft/world/entity/ai/village/poi/PoiManager;": "getPoiManager",
        "n()Ljava/lang/String;": "getStorageName",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/server/level/FullChunkStatus;)V": "onFullChunkStatusChange",
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/util/List;)V": "lambda$resendBiomesForChunks$60",
        "d(Lnet/minecraft/server/level/ServerPlayer;)Ljava/util/List;": "lambda$resendBiomesForChunks$59",
        "a(Ljava/util/Optional;)Ljava/util/Optional;": "lambda$readChunk$58",
        "a(Lnet/minecraft/server/level/ChunkHolder$ChunkLoadingFailure;)Ljava/lang/String;": "lambda$printFuture$57",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;)Ljava/lang/String;": "lambda$printFuture$56",
        "b(Lnet/minecraft/world/level/chunk/LevelChunk;)Ljava/lang/Integer;": "lambda$dumpChunks$55",
        "c(Lnet/minecraft/world/level/chunk/LevelChunk;)Ljava/lang/Integer;": "lambda$dumpChunks$54",
        "d(Lnet/minecraft/world/level/chunk/LevelChunk;)Ljava/lang/Integer;": "lambda$dumpChunks$53",
        "b(Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/Optional;": "lambda$dumpChunks$52",
        "a(Lnet/minecraft/world/level/ChunkPos;ILorg/apache/commons/lang3/mutable/MutableObject;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$setViewDistance$51",
        "a(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Runnable;)V": "lambda$prepareAccessibleChunk$50",
        "a(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$prepareAccessibleChunk$49",
        "b(Ljava/util/List;)Lnet/minecraft/world/level/chunk/LevelChunk;": "lambda$prepareAccessibleChunk$48",
        "b(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Runnable;)V": "lambda$prepareTickingChunk$47",
        "a(Lnet/minecraft/server/level/ChunkHolder;Lcom/mojang/datafixers/util/Either;)V": "lambda$prepareTickingChunk$46",
        "a(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/LevelChunk;)V": "lambda$prepareTickingChunk$45",
        "a(Lorg/apache/commons/lang3/mutable/MutableObject;Lnet/minecraft/world/level/chunk/LevelChunk;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$prepareTickingChunk$44",
        "a(Lcom/mojang/datafixers/util/Either;Ljava/lang/Throwable;)Ljava/lang/Object;": "lambda$prepareTickingChunk$43",
        "b(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$prepareTickingChunk$42",
        "e(Lnet/minecraft/world/level/chunk/LevelChunk;)V": "lambda$prepareTickingChunk$41",
        "c(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Runnable;)V": "lambda$prepareTickingChunk$40",
        "c(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$prepareTickingChunk$39",
        "c(Ljava/util/List;)Lnet/minecraft/world/level/chunk/LevelChunk;": "lambda$prepareTickingChunk$38",
        "b(I)Lnet/minecraft/world/level/chunk/ChunkStatus;": "lambda$prepareTickingChunk$37",
        "d(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Runnable;)V": "lambda$protoChunkToFullChunk$36",
        "b(Lnet/minecraft/server/level/ChunkHolder;Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$protoChunkToFullChunk$35",
        "a(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$protoChunkToFullChunk$34",
        "f(Lnet/minecraft/server/level/ChunkHolder;)Lnet/minecraft/server/level/FullChunkStatus;": "lambda$protoChunkToFullChunk$33",
        "a(Lnet/minecraft/world/level/chunk/ProtoChunk;Lnet/minecraft/world/level/chunk/LevelChunk;)V": "lambda$protoChunkToFullChunk$32",
        "k(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "lambda$releaseLightTicket$31",
        "l(Lnet/minecraft/world/level/ChunkPos;)V": "lambda$releaseLightTicket$30",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkStatus;Ljava/util/concurrent/Executor;Lcom/mojang/datafixers/util/Either;)Ljava/util/concurrent/CompletionStage;": "lambda$scheduleChunkGeneration$29",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/server/level/ChunkHolder$ChunkLoadingFailure;)Ljava/util/concurrent/CompletableFuture;": "lambda$scheduleChunkGeneration$28",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkStatus;Ljava/util/concurrent/Executor;Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "lambda$scheduleChunkGeneration$27",
        "a(Lnet/minecraft/CrashReport;)V": "lambda$scheduleChunkGeneration$26",
        "b(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "lambda$scheduleChunkGeneration$25",
        "c(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "lambda$scheduleChunkGeneration$24",
        "e(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Runnable;)V": "lambda$scheduleChunkGeneration$23",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)Ljava/lang/String;": "lambda$scheduleChunkGeneration$22",
        "b(Lnet/minecraft/world/level/chunk/ChunkStatus;I)Lnet/minecraft/world/level/chunk/ChunkStatus;": "lambda$scheduleChunkGeneration$21",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Throwable;)Lcom/mojang/datafixers/util/Either;": "lambda$scheduleChunkLoad$20",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/util/Optional;)Lcom/mojang/datafixers/util/Either;": "lambda$scheduleChunkLoad$19",
        "b(Lnet/minecraft/world/level/ChunkPos;Ljava/util/Optional;)Ljava/util/Optional;": "lambda$scheduleChunkLoad$18",
        "b(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)Z": "lambda$scheduleChunkLoad$17",
        "d(Lnet/minecraft/server/level/ChunkHolder;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "lambda$schedule$16",
        "a(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Void;Ljava/lang/Throwable;)V": "lambda$scheduleUnload$15",
        "a(Lnet/minecraft/server/level/ChunkHolder;Ljava/util/concurrent/CompletableFuture;JLnet/minecraft/world/level/chunk/ChunkAccess;)V": "lambda$scheduleUnload$14",
        "q()Z": "lambda$saveAllChunks$13",
        "a(Lorg/apache/commons/lang3/mutable/MutableBoolean;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "lambda$saveAllChunks$12",
        "c(Lnet/minecraft/world/level/chunk/ChunkAccess;)Z": "lambda$saveAllChunks$11",
        "g(Lnet/minecraft/server/level/ChunkHolder;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$saveAllChunks$10",
        "d(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$prepareEntityTickingChunk$9",
        "d(Ljava/util/List;)Lnet/minecraft/world/level/chunk/LevelChunk;": "lambda$prepareEntityTickingChunk$8",
        "c(I)Lnet/minecraft/world/level/chunk/ChunkStatus;": "lambda$prepareEntityTickingChunk$7",
        "a(Ljava/lang/StringBuilder;Lnet/minecraft/server/level/ChunkHolder;)V": "lambda$debugFuturesAndCreateReportedException$6",
        "a(Ljava/lang/StringBuilder;Lnet/minecraft/server/level/ChunkHolder;Lcom/mojang/datafixers/util/Pair;)V": "lambda$debugFuturesAndCreateReportedException$5",
        "a(IIILjava/util/List;)Lcom/mojang/datafixers/util/Either;": "lambda$getChunkRangeFuture$4",
        "e(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$getChunkRangeFuture$3",
        "d(J)I": "lambda$getChunkQueueLevel$2",
        "a(Lnet/minecraft/world/level/chunk/ChunkGenerator;)V": "lambda$debugReloadGenerator$1",
        "a(Lcom/google/gson/JsonElement;)Lcom/mojang/serialization/DataResult;": "lambda$debugReloadGenerator$0"
      }
    },
    "net/minecraft/server/level/PlayerChunkMap$EntityTracker": {
      "fields": {
        "b": "serverEntity",
        "c": "entity",
        "d": "range",
        "e": "lastSectionPos",
        "f": "seenBy"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/Packet;)V": "broadcast",
        "b(Lnet/minecraft/network/protocol/Packet;)V": "broadcastAndSend",
        "a()V": "broadcastRemoved",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "removePlayer",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "updatePlayer",
        "a(I)I": "scaledRange",
        "b()I": "getEffectiveRange",
        "a(Ljava/util/List;)V": "updatePlayers"
      }
    },
    "net/minecraft/server/level/ChunkTaskQueue": {
      "fields": {
        "a": "PRIORITY_LEVEL_COUNT",
        "b": "taskQueue",
        "c": "firstQueue",
        "d": "name",
        "e": "acquired",
        "f": "maxTasks"
      },
      "methods": {
        "a(ILnet/minecraft/world/level/ChunkPos;I)V": "resortChunkTasks",
        "a(Ljava/util/Optional;JI)V": "submit",
        "a(JZ)V": "release",
        "a(J)Ljava/lang/Runnable;": "acquire",
        "a()Ljava/util/stream/Stream;": "pop",
        "b()Z": "hasWork",
        "c()Lit/unimi/dsi/fastutil/longs/LongSet;": "getAcquired",
        "a(JLjava/util/Optional;)Lcom/mojang/datafixers/util/Either;": "lambda$pop$6",
        "b(J)Lcom/mojang/datafixers/util/Either;": "lambda$pop$5",
        "c(J)V": "lambda$acquire$4",
        "a(Ljava/util/Optional;)Z": "lambda$release$3",
        "d(J)Ljava/util/List;": "lambda$submit$2",
        "e(J)Ljava/util/List;": "lambda$resortChunkTasks$1",
        "a(I)Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;": "lambda$new$0"
      }
    },
    "net/minecraft/server/level/ChunkTaskQueueSorter": {
      "fields": {
        "a": "LOGGER",
        "b": "queues",
        "c": "sleeping",
        "d": "mailbox"
      },
      "methods": {
        "a()Z": "hasWork",
        "a(Ljava/util/function/Function;JLjava/util/function/IntSupplier;)Lnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Message;": "message",
        "a(Ljava/lang/Runnable;JLjava/util/function/IntSupplier;)Lnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Message;": "message",
        "a(Lnet/minecraft/server/level/ChunkHolder;Ljava/lang/Runnable;)Lnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Message;": "message",
        "a(Lnet/minecraft/server/level/ChunkHolder;Ljava/util/function/Function;)Lnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Message;": "message",
        "a(Ljava/lang/Runnable;JZ)Lnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Release;": "release",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Z)Lnet/minecraft/util/thread/ProcessorHandle;": "getProcessor",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/util/thread/ProcessorHandle;": "getReleaseProcessor",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;JLjava/lang/Runnable;Z)V": "release",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Ljava/util/function/Function;JLjava/util/function/IntSupplier;Z)V": "submit",
        "a(Lnet/minecraft/server/level/ChunkTaskPriorityQueue;Lnet/minecraft/util/thread/ProcessorHandle;)V": "pollTask",
        "b(Lnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/server/level/ChunkTaskPriorityQueue;": "getQueue",
        "b()Ljava/lang/String;": "getDebugStatus",
        "a(Ljava/util/Map$Entry;)Ljava/lang/String;": "lambda$getDebugStatus$19",
        "a(Ljava/lang/Long;)Ljava/lang/String;": "lambda$getDebugStatus$18",
        "b(Lnet/minecraft/server/level/ChunkTaskPriorityQueue;Lnet/minecraft/util/thread/ProcessorHandle;)V": "lambda$pollTask$17",
        "a(Lnet/minecraft/server/level/ChunkTaskPriorityQueue;Lnet/minecraft/util/thread/ProcessorHandle;Ljava/lang/Void;)V": "lambda$pollTask$16",
        "a(I)[Ljava/util/concurrent/CompletableFuture;": "lambda$pollTask$15",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Lcom/mojang/datafixers/util/Either;)Ljava/util/concurrent/CompletableFuture;": "lambda$pollTask$14",
        "a(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;": "lambda$pollTask$13",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Ljava/util/function/IntSupplier;JLjava/util/function/Function;Z)V": "lambda$submit$12",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;JZLjava/lang/Runnable;)V": "lambda$release$11",
        "a(Ljava/util/function/IntSupplier;Lnet/minecraft/world/level/ChunkPos;ILjava/util/function/IntConsumer;)V": "lambda$onLevelChange$10",
        "a(ILnet/minecraft/world/level/ChunkPos;ILnet/minecraft/server/level/ChunkTaskPriorityQueue;)V": "lambda$onLevelChange$9",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Lnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/util/thread/StrictQueue$IntRunnable;": "lambda$getReleaseProcessor$8",
        "b(Lnet/minecraft/util/thread/ProcessorHandle;Lnet/minecraft/util/thread/ProcessorHandle;)V": "lambda$getReleaseProcessor$7",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Lnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Release;)V": "lambda$getReleaseProcessor$6",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;ZLnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/util/thread/StrictQueue$IntRunnable;": "lambda$getProcessor$5",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Lnet/minecraft/util/thread/ProcessorHandle;Z)V": "lambda$getProcessor$4",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;ZLnet/minecraft/server/level/ChunkTaskPriorityQueueSorter$Message;)V": "lambda$getProcessor$3",
        "a(Ljava/lang/Runnable;Lnet/minecraft/util/thread/ProcessorHandle;)Ljava/lang/Runnable;": "lambda$message$2",
        "b(Ljava/lang/Runnable;Lnet/minecraft/util/thread/ProcessorHandle;)V": "lambda$message$1",
        "a(ILnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/server/level/ChunkTaskPriorityQueue;": "lambda$new$0"
      }
    },
    "net/minecraft/server/level/ChunkMap": {
      "methods": {
        "a(J)Z": "isSource",
        "a(JIZ)V": "checkNeighborsAfterUpdate",
        "a(JJI)I": "getComputedLevel",
        "b(JJI)I": "computeLevelFromNeighbor",
        "b(J)I": "getLevelFromSource",
        "b(JIZ)V": "update"
      }
    },
    "net/minecraft/server/level/BlockPosition2D": {
      "fields": {
        "a": "x",
        "b": "z",
        "c": "COORD_BITS",
        "d": "COORD_MASK"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/ChunkPos;": "toChunkPos",
        "b()J": "toLong",
        "a(II)J": "asLong",
        "a(J)I": "getX",
        "b(J)I": "getZ",
        "c()I": "x",
        "d()I": "z"
      }
    },
    "net/minecraft/server/level/DemoPlayerInteractManager": {
      "fields": {
        "a": "DEMO_DAYS",
        "b": "TOTAL_PLAY_TICKS",
        "e": "displayedIntro",
        "f": "demoHasEnded",
        "g": "demoEndedReminder",
        "h": "gameModeTicks"
      },
      "methods": {
        "a()V": "tick",
        "f()V": "outputDemoReminder",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/network/protocol/game/ServerboundPlayerActionPacket$Action;Lnet/minecraft/core/Direction;II)V": "handleBlockBreakAction",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "useItem",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "useItemOn"
      }
    },
    "net/minecraft/server/level/ChunkMapDistance": {
      "fields": {
        "a": "LOGGER",
        "b": "PLAYER_TICKET_LEVEL",
        "c": "INITIAL_TICKET_LIST_CAPACITY",
        "d": "playersPerChunk",
        "e": "tickets",
        "f": "ticketTracker",
        "g": "naturalSpawnChunkCounter",
        "h": "tickingTicketsTracker",
        "i": "playerTicketManager",
        "j": "chunksToUpdateFutures",
        "k": "ticketThrottler",
        "l": "ticketThrottlerInput",
        "m": "ticketThrottlerReleaser",
        "n": "ticketsToRelease",
        "o": "mainThreadExecutor",
        "p": "ticketTickCounter",
        "q": "simulationDistance"
      },
      "methods": {
        "a()V": "purgeStaleTickets",
        "a(Lnet/minecraft/util/SortedArraySet;)I": "getTicketLevelAt",
        "a(J)Z": "isChunkToRemove",
        "b(J)Lnet/minecraft/server/level/ChunkHolder;": "getChunk",
        "a(JILnet/minecraft/server/level/ChunkHolder;I)Lnet/minecraft/server/level/ChunkHolder;": "updateChunkScheduling",
        "a(JLnet/minecraft/server/level/Ticket;)V": "addTicket",
        "b(JLnet/minecraft/server/level/Ticket;)V": "removeTicket",
        "a(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "addTicket",
        "b(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "removeTicket",
        "c(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "addRegionTicket",
        "d(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "removeRegionTicket",
        "g(J)Lnet/minecraft/util/SortedArraySet;": "getTickets",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "updateChunkForced",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/server/level/ServerPlayer;)V": "addPlayer",
        "b(Lnet/minecraft/core/SectionPos;Lnet/minecraft/server/level/ServerPlayer;)V": "removePlayer",
        "g()I": "getPlayerTicketLevel",
        "c(J)Z": "inEntityTickingRange",
        "d(J)Z": "inBlockTickingRange",
        "e(J)Ljava/lang/String;": "getTicketDebugString",
        "a(I)V": "updatePlayerTickets",
        "b(I)V": "updateSimulationDistance",
        "b()I": "getNaturalSpawnChunkCount",
        "f(J)Z": "hasPlayersNearby",
        "c()Ljava/lang/String;": "getDebugStatus",
        "a(Ljava/lang/String;)V": "dumpTickets",
        "d()Lnet/minecraft/server/level/TickingTracker;": "tickingTracker",
        "e()V": "removeTicketsOnClosing",
        "f()Z": "hasTickets",
        "h(J)Lit/unimi/dsi/fastutil/objects/ObjectSet;": "lambda$addPlayer$6",
        "i(J)Lnet/minecraft/util/SortedArraySet;": "lambda$getTickets$5",
        "a(JLcom/mojang/datafixers/util/Either;)V": "lambda$runAllUpdates$4",
        "j(J)V": "lambda$runAllUpdates$3",
        "h()V": "lambda$runAllUpdates$2",
        "a(Lnet/minecraft/server/level/Ticket;)Z": "lambda$runAllUpdates$1"
      }
    },
    "net/minecraft/server/level/FullChunkStatus": {
      "fields": {
        "a": "INACCESSIBLE",
        "b": "FULL",
        "c": "BLOCK_TICKING",
        "d": "ENTITY_TICKING",
        "e": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/FullChunkStatus;)Z": "isOrAfter",
        "a()[Lnet/minecraft/server/level/FullChunkStatus;": "$values"
      }
    },
    "net/minecraft/server/level/PlayerMap": {
      "fields": {
        "a": "players"
      },
      "methods": {
        "a(J)Ljava/util/Set;": "getPlayers",
        "a(JLnet/minecraft/server/level/ServerPlayer;Z)V": "addPlayer",
        "a(JLnet/minecraft/server/level/ServerPlayer;)V": "removePlayer",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "ignorePlayer",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "unIgnorePlayer",
        "c(Lnet/minecraft/server/level/ServerPlayer;)Z": "ignoredOrUnknown",
        "d(Lnet/minecraft/server/level/ServerPlayer;)Z": "ignored",
        "a(JJLnet/minecraft/server/level/ServerPlayer;)V": "updatePlayer"
      }
    },
    "net/minecraft/server/level/WorldProviderNormal": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;II)Lnet/minecraft/core/BlockPos;": "getOverworldRespawnPos",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/core/BlockPos;": "getSpawnPosInChunk"
      }
    },
    "net/minecraft/server/level/LightEngineGraphSection": {
      "methods": {
        "a(JIZ)V": "checkNeighborsAfterUpdate",
        "a(JJI)I": "getComputedLevel",
        "b(JJI)I": "computeLevelFromNeighbor",
        "b(J)I": "getLevelFromSource",
        "b(JIZ)V": "update"
      }
    },
    "net/minecraft/server/level/BossBattleServer": {
      "fields": {
        "h": "players",
        "i": "unmodifiablePlayers",
        "j": "visible"
      },
      "methods": {
        "a(F)V": "setProgress",
        "a(Lnet/minecraft/world/BossEvent$BossBarColor;)V": "setColor",
        "a(Lnet/minecraft/world/BossEvent$BossBarOverlay;)V": "setOverlay",
        "a(Z)Lnet/minecraft/world/BossEvent;": "setDarkenScreen",
        "b(Z)Lnet/minecraft/world/BossEvent;": "setPlayBossMusic",
        "c(Z)Lnet/minecraft/world/BossEvent;": "setCreateWorldFog",
        "a(Lnet/minecraft/network/chat/Component;)V": "setName",
        "a(Ljava/util/function/Function;)V": "broadcast",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "addPlayer",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "removePlayer",
        "b()V": "removeAllPlayers",
        "g()Z": "isVisible",
        "d(Z)V": "setVisible",
        "h()Ljava/util/Collection;": "getPlayers"
      }
    },
    "net/minecraft/server/level/ChunkProviderServer": {
      "fields": {
        "b": "CHUNK_STATUSES",
        "c": "distanceManager",
        "d": "level",
        "e": "mainThread",
        "f": "lightEngine",
        "g": "mainThreadProcessor",
        "h": "dataStorage",
        "i": "lastInhabitedUpdate",
        "j": "spawnEnemies",
        "k": "spawnFriendlies",
        "l": "CACHE_SIZE",
        "m": "lastChunkPos",
        "n": "lastChunkStatus",
        "o": "lastChunk",
        "p": "lastSpawnState"
      },
      "methods": {
        "a()Lnet/minecraft/server/level/ThreadedLevelLightEngine;": "getLightEngine",
        "b(J)Lnet/minecraft/server/level/ChunkHolder;": "getVisibleChunkIfPresent",
        "b()I": "getTickingGenerated",
        "a(JLnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/chunk/ChunkStatus;)V": "storeInCache",
        "a(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(II)Lnet/minecraft/world/level/chunk/LevelChunk;": "getChunkNow",
        "r()V": "clearCache",
        "b(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Ljava/util/concurrent/CompletableFuture;": "getChunkFuture",
        "c(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Ljava/util/concurrent/CompletableFuture;": "getChunkFutureMainThread",
        "a(Lnet/minecraft/server/level/ChunkHolder;I)Z": "chunkAbsent",
        "b(II)Z": "hasChunk",
        "c(II)Lnet/minecraft/world/level/chunk/LightChunk;": "getChunkForLighting",
        "c()Lnet/minecraft/world/level/Level;": "getLevel",
        "d()Z": "pollTask",
        "s()Z": "runDistanceManagerUpdates",
        "a(J)Z": "isPositionTicking",
        "a(Z)V": "save",
        "a(Ljava/util/function/BooleanSupplier;Z)V": "tick",
        "t()V": "tickChunks",
        "a(JLjava/util/function/Consumer;)V": "getFullChunk",
        "e()Ljava/lang/String;": "gatherStats",
        "f()I": "getPendingTasksCount",
        "g()Lnet/minecraft/world/level/chunk/ChunkGenerator;": "getGenerator",
        "h()Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;": "getGeneratorState",
        "i()Lnet/minecraft/world/level/levelgen/RandomState;": "randomState",
        "j()I": "getLoadedChunksCount",
        "a(Lnet/minecraft/core/BlockPos;)V": "blockChanged",
        "a(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;)V": "onLightUpdate",
        "a(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "addRegionTicket",
        "b(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "removeRegionTicket",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "updateChunkForced",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "move",
        "a(Lnet/minecraft/world/entity/Entity;)V": "removeEntity",
        "b(Lnet/minecraft/world/entity/Entity;)V": "addEntity",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/network/protocol/Packet;)V": "broadcastAndSend",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/network/protocol/Packet;)V": "broadcast",
        "a(I)V": "setViewDistance",
        "b(I)V": "setSimulationDistance",
        "a(ZZ)V": "setSpawnSettings",
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "getChunkDebugData",
        "k()Lnet/minecraft/world/level/storage/DimensionDataStorage;": "getDataStorage",
        "l()Lnet/minecraft/world/entity/ai/village/poi/PoiManager;": "getPoiManager",
        "m()Lnet/minecraft/world/level/chunk/storage/ChunkScanAccess;": "chunkScanner",
        "n()Lnet/minecraft/world/level/NaturalSpawner$SpawnState;": "getLastSpawnState",
        "o()V": "removeTicketsOnClosing",
        "p()Lnet/minecraft/world/level/lighting/LevelLightEngine;": "getLightEngine",
        "q()Lnet/minecraft/world/level/BlockGetter;": "getLevel",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/LightLayer;)V": "lambda$onLightUpdate$6",
        "a(Lnet/minecraft/server/level/ServerChunkCache$ChunkAndHolder;)V": "lambda$tickChunks$5",
        "a(ZLnet/minecraft/server/level/ChunkHolder$ChunkLoadingFailure;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$getChunk$2",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$getChunk$1"
      }
    },
    "net/minecraft/server/level/EntityTrackerEntry": {
      "fields": {
        "a": "LOGGER",
        "b": "TOLERANCE_LEVEL_ROTATION",
        "c": "level",
        "d": "entity",
        "e": "updateInterval",
        "f": "trackDelta",
        "g": "broadcast",
        "h": "positionCodec",
        "i": "yRotp",
        "j": "xRotp",
        "k": "yHeadRotp",
        "l": "ap",
        "m": "tickCount",
        "n": "teleportDelay",
        "o": "lastPassengers",
        "p": "wasRiding",
        "q": "wasOnGround",
        "r": "trackedDataValues"
      },
      "methods": {
        "a()V": "sendChanges",
        "a(Ljava/util/List;Ljava/util/List;)Ljava/util/stream/Stream;": "removedPassengers",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "removePairing",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "addPairing",
        "a(Lnet/minecraft/server/level/ServerPlayer;Ljava/util/function/Consumer;)V": "sendPairingData",
        "b()V": "sendDirtyEntityData",
        "a(Lnet/minecraft/network/protocol/Packet;)V": "broadcastAndSend"
      }
    },
    "net/minecraft/server/level/WorldServer": {
      "fields": {
        "a": "END_SPAWN_POINT",
        "b": "RAIN_DELAY",
        "c": "RAIN_DURATION",
        "D": "THUNDER_DELAY",
        "d": "THUNDER_DURATION",
        "E": "LOGGER",
        "F": "EMPTY_TIME_NO_TICK",
        "G": "MAX_SCHEDULED_TICKS_PER_TICK",
        "H": "players",
        "I": "chunkSource",
        "J": "server",
        "K": "serverLevelData",
        "L": "entityTickList",
        "M": "entityManager",
        "N": "gameEventDispatcher",
        "e": "noSave",
        "O": "sleepStatus",
        "P": "emptyTime",
        "Q": "portalForcer",
        "R": "blockTicks",
        "S": "fluidTicks",
        "T": "navigatingMobs",
        "U": "isUpdatingNavigations",
        "f": "raids",
        "V": "blockEvents",
        "W": "blockEventsToReschedule",
        "X": "handlingTick",
        "Y": "customSpawners",
        "Z": "dragonFight",
        "aa": "dragonParts",
        "ab": "structureManager",
        "ac": "structureCheck",
        "ad": "tickTime",
        "ae": "randomSequences"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/dimension/end/EndDragonFight;)V": "setDragonFight",
        "a(IIZZ)V": "setWeatherParameters",
        "a(III)Lnet/minecraft/core/Holder;": "getUncachedNoiseBiome",
        "a()Lnet/minecraft/world/level/StructureManager;": "structureManager",
        "a(Ljava/util/function/BooleanSupplier;)V": "tick",
        "a(J)Z": "shouldTickBlocksAt",
        "b()V": "tickTime",
        "b(J)V": "setDayTime",
        "a(ZZ)V": "tickCustomSpawners",
        "i(Lnet/minecraft/world/entity/Entity;)Z": "shouldDiscardEntity",
        "ap()V": "wakeUpAllPlayers",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;I)V": "tickChunk",
        "D(Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "findLightningRod",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "findLightningTargetAround",
        "c()Z": "isHandlingTick",
        "d()Z": "canSleepThroughNights",
        "aq()V": "announceSleepStatus",
        "e()V": "updateSleepingPlayerList",
        "f()Lnet/minecraft/server/ServerScoreboard;": "getScoreboard",
        "ar()V": "advanceWeatherCycle",
        "as()V": "resetWeatherCycle",
        "g()V": "resetEmptyTime",
        "d(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "tickBlock",
        "a(Lnet/minecraft/world/entity/Entity;)V": "tickNonPassenger",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)V": "tickPassenger",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;)Z": "mayInteract",
        "a(Lnet/minecraft/util/ProgressListener;ZZ)V": "save",
        "at()V": "saveLevelData",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Ljava/util/function/Predicate;Ljava/util/List;)V": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Ljava/util/function/Predicate;Ljava/util/List;I)V": "getEntities",
        "h()Ljava/util/List;": "getDragons",
        "a(Ljava/util/function/Predicate;)Ljava/util/List;": "getPlayers",
        "a(Ljava/util/function/Predicate;I)Ljava/util/List;": "getPlayers",
        "i()Lnet/minecraft/server/level/ServerPlayer;": "getRandomPlayer",
        "b(Lnet/minecraft/world/entity/Entity;)Z": "addFreshEntity",
        "c(Lnet/minecraft/world/entity/Entity;)Z": "addWithUUID",
        "d(Lnet/minecraft/world/entity/Entity;)V": "addDuringTeleport",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "addDuringCommandTeleport",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "addDuringPortalTeleport",
        "c(Lnet/minecraft/server/level/ServerPlayer;)V": "addNewPlayer",
        "d(Lnet/minecraft/server/level/ServerPlayer;)V": "addRespawnedPlayer",
        "e(Lnet/minecraft/server/level/ServerPlayer;)V": "addPlayer",
        "j(Lnet/minecraft/world/entity/Entity;)Z": "addEntity",
        "e(Lnet/minecraft/world/entity/Entity;)Z": "tryAddFreshEntityWithPassengers",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;)V": "unload",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "removePlayerImmediately",
        "a(ILnet/minecraft/core/BlockPos;I)V": "destroyBlockProgress",
        "a(Lnet/minecraft/world/entity/player/Player;DDDLnet/minecraft/core/Holder;Lnet/minecraft/sounds/SoundSource;FFJ)V": "playSeededSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;Lnet/minecraft/sounds/SoundSource;FFJ)V": "playSeededSound",
        "b(ILnet/minecraft/core/BlockPos;I)V": "globalLevelEvent",
        "a(Lnet/minecraft/world/entity/player/Player;ILnet/minecraft/core/BlockPos;I)V": "levelEvent",
        "j()I": "getLogicalHeight",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEvent$Context;)V": "gameEvent",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;I)V": "sendBlockUpdated",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "updateNeighborsAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/Direction;)V": "updateNeighborsAtExceptFromFacing",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/entity/Entity;B)V": "broadcastEntityEvent",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;)V": "broadcastDamageEvent",
        "k()Lnet/minecraft/server/level/ServerChunkCache;": "getChunkSource",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/level/ExplosionDamageCalculator;DDDFZLnet/minecraft/world/level/Level$ExplosionInteraction;)Lnet/minecraft/world/level/Explosion;": "explode",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;II)V": "blockEvent",
        "au()V": "runBlockEvents",
        "a(Lnet/minecraft/world/level/BlockEventData;)Z": "doBlockEvent",
        "l()Lnet/minecraft/world/ticks/LevelTicks;": "getBlockTicks",
        "m()Lnet/minecraft/world/ticks/LevelTicks;": "getFluidTicks",
        "n()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "o()Lnet/minecraft/world/level/portal/PortalForcer;": "getPortalForcer",
        "p()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;": "getStructureManager",
        "a(Lnet/minecraft/core/particles/ParticleOptions;DDDIDDDD)I": "sendParticles",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/core/particles/ParticleOptions;ZDDDIDDDD)Z": "sendParticles",
        "a(Lnet/minecraft/server/level/ServerPlayer;ZDDDLnet/minecraft/network/protocol/Packet;)Z": "sendParticles",
        "a(I)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "b(I)Lnet/minecraft/world/entity/Entity;": "getEntityOrPart",
        "a(Ljava/util/UUID;)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a(Lnet/minecraft/tags/TagKey;Lnet/minecraft/core/BlockPos;IZ)Lnet/minecraft/core/BlockPos;": "findNearestMapStructure",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;III)Lcom/mojang/datafixers/util/Pair;": "findClosestBiome3d",
        "q()Lnet/minecraft/world/item/crafting/RecipeManager;": "getRecipeManager",
        "r()Z": "noSave",
        "s()Lnet/minecraft/world/level/storage/DimensionDataStorage;": "getDataStorage",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "getMapData",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;)V": "setMapData",
        "t()I": "getFreeMapId",
        "a(Lnet/minecraft/core/BlockPos;F)V": "setDefaultSpawnPos",
        "u()Lit/unimi/dsi/fastutil/longs/LongSet;": "getForcedChunks",
        "a(IIZ)Z": "setChunkForced",
        "v()Ljava/util/List;": "players",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)V": "onBlockStateChange",
        "w()Lnet/minecraft/world/entity/ai/village/poi/PoiManager;": "getPoiManager",
        "b(Lnet/minecraft/core/BlockPos;)Z": "isVillage",
        "a(Lnet/minecraft/core/SectionPos;)Z": "isVillage",
        "a(Lnet/minecraft/core/BlockPos;I)Z": "isCloseToVillage",
        "b(Lnet/minecraft/core/SectionPos;)I": "sectionsToVillage",
        "x()Lnet/minecraft/world/entity/raid/Raids;": "getRaids",
        "c(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/raid/Raid;": "getRaidAt",
        "d(Lnet/minecraft/core/BlockPos;)Z": "isRaided",
        "a(Lnet/minecraft/world/entity/ai/village/ReputationEventType;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/ReputationEventHandler;)V": "onReputationEvent",
        "a(Ljava/nio/file/Path;)V": "saveDebugReport",
        "a(Ljava/io/Writer;Ljava/lang/Iterable;)V": "dumpEntities",
        "a(Ljava/io/Writer;)V": "dumpBlockEntityTickers",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "clearBlockEvents",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "blockUpdated",
        "a(Lnet/minecraft/core/Direction;Z)F": "getShade",
        "y()Ljava/lang/Iterable;": "getAllEntities",
        "z()Z": "isFlat",
        "A()J": "getSeed",
        "B()Lnet/minecraft/world/level/dimension/end/EndDragonFight;": "getDragonFight",
        "C()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "D()Ljava/lang/String;": "getWatchdogStats",
        "a(Ljava/lang/Iterable;Ljava/util/function/Function;)Ljava/lang/String;": "getTypeCount",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "makeObsidianPlatform",
        "E()Lnet/minecraft/world/level/entity/LevelEntityGetter;": "getEntities",
        "a(Ljava/util/stream/Stream;)V": "addLegacyChunkEntities",
        "b(Ljava/util/stream/Stream;)V": "addWorldGenChunkEntities",
        "b(Lnet/minecraft/world/level/chunk/LevelChunk;)V": "startTickingChunk",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "onStructureStartsAvailable",
        "F()Ljava/lang/String;": "gatherChunkSourceStats",
        "c(J)Z": "areEntitiesLoaded",
        "d(J)Z": "isPositionTickingWithEntitiesLoaded",
        "e(Lnet/minecraft/core/BlockPos;)Z": "isPositionEntityTicking",
        "f(Lnet/minecraft/core/BlockPos;)Z": "isNaturalSpawningAllowed",
        "a(Lnet/minecraft/world/level/ChunkPos;)Z": "isNaturalSpawningAllowed",
        "G()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/util/RandomSource;": "getRandomSequence",
        "H()Lnet/minecraft/world/RandomSequences;": "getRandomSequences",
        "I()Lnet/minecraft/world/scores/Scoreboard;": "getScoreboard",
        "J()Lnet/minecraft/world/level/chunk/ChunkSource;": "getChunkSource",
        "K()Lnet/minecraft/world/ticks/LevelTickAccess;": "getFluidTicks",
        "L()Lnet/minecraft/world/ticks/LevelTickAccess;": "getBlockTicks",
        "b(Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "lambda$onStructureStartsAvailable$24",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "lambda$makeObsidianPlatform$23",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "lambda$makeObsidianPlatform$22",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap$Entry;)Ljava/lang/String;": "lambda$getTypeCount$21",
        "k(Lnet/minecraft/world/entity/Entity;)Ljava/lang/String;": "lambda$getWatchdogStats$20",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/BlockEventData;)Z": "lambda$clearBlockEvents$19",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "lambda$onBlockStateChange$18",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "lambda$onBlockStateChange$17",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "lambda$onBlockStateChange$16",
        "E(Lnet/minecraft/core/BlockPos;)V": "lambda$onBlockStateChange$15",
        "a(Ljava/util/function/Predicate;Ljava/util/List;ILnet/minecraft/world/entity/Entity;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "lambda$getEntities$14",
        "l(Lnet/minecraft/world/entity/Entity;)Ljava/lang/String;": "lambda$tickPassenger$13",
        "m(Lnet/minecraft/world/entity/Entity;)Ljava/lang/String;": "lambda$tickNonPassenger$12",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$findLightningTargetAround$11",
        "F(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "lambda$findLightningRod$10",
        "G(Lnet/minecraft/core/BlockPos;)Z": "lambda$findLightningRod$9",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$findLightningRod$8",
        "f(Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$wakeUpAllPlayers$7",
        "a(Lnet/minecraft/util/profiling/ProfilerFiller;Lnet/minecraft/world/entity/Entity;)V": "lambda$tick$6",
        "e(J)Lnet/minecraft/world/RandomSequences;": "lambda$new$5",
        "f(J)Lnet/minecraft/world/RandomSequences;": "lambda$new$4",
        "a(JLnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/RandomSequences;": "lambda$new$3",
        "av()Lnet/minecraft/world/entity/raid/Raids;": "lambda$new$2",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/raid/Raids;": "lambda$new$1",
        "a(Lnet/minecraft/server/MinecraftServer;)Lnet/minecraft/world/level/storage/DimensionDataStorage;": "lambda$new$0"
      }
    },
    "net/minecraft/server/level/EntityPlayer": {
      "fields": {
        "b": "LOGGER",
        "cl": "NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ",
        "cm": "NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y",
        "c": "connection",
        "d": "server",
        "e": "gameMode",
        "cn": "advancements",
        "co": "stats",
        "cp": "lastRecordedHealthAndAbsorption",
        "cq": "lastRecordedFoodLevel",
        "cr": "lastRecordedAirLevel",
        "cs": "lastRecordedArmor",
        "ct": "lastRecordedLevel",
        "cu": "lastRecordedExperience",
        "cv": "lastSentHealth",
        "cw": "lastSentFood",
        "cx": "lastFoodSaturationZero",
        "cy": "lastSentExp",
        "cz": "spawnInvulnerableTime",
        "cA": "chatVisibility",
        "cB": "canChatColor",
        "cC": "lastActionTime",
        "cD": "camera",
        "cE": "isChangingDimension",
        "cF": "seenCredits",
        "cG": "recipeBook",
        "cH": "levitationStartPos",
        "cI": "levitationStartTime",
        "cJ": "disconnected",
        "cK": "startingToFallPosition",
        "cL": "enteredNetherPosition",
        "cM": "enteredLavaOnVehiclePosition",
        "cN": "lastSectionPos",
        "cO": "respawnDimension",
        "cP": "respawnPosition",
        "cQ": "respawnForced",
        "cR": "respawnAngle",
        "cT": "textFilteringEnabled",
        "cU": "allowsListing",
        "cV": "wardenSpawnTracker",
        "cW": "containerSynchronizer",
        "cX": "containerListener",
        "cY": "chatSession",
        "cZ": "containerCounter",
        "f": "latency",
        "g": "wonGame"
      },
      "methods": {
        "d(Lnet/minecraft/server/level/ServerLevel;)V": "fudgeSpawnLocation",
        "u(I)I": "getCoprime",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(I)V": "setExperiencePoints",
        "b(I)V": "setExperienceLevels",
        "c(I)V": "giveExperienceLevels",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "onEnchantmentPerformed",
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;)V": "initMenu",
        "h()V": "initInventoryMenu",
        "Q_()V": "onEnterCombat",
        "F_()V": "onLeaveCombat",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)V": "onInsideBlock",
        "k()Lnet/minecraft/world/item/ItemCooldowns;": "createItemCooldowns",
        "l()V": "tick",
        "m()V": "doTick",
        "n()V": "resetFallDistance",
        "o()V": "trackStartFallingPosition",
        "p()V": "trackEnteredOrExitedLavaOnVehicle",
        "a(Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;I)V": "updateScoreForCriteria",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "gn()V": "tellNeutralMobsThatIDied",
        "a(Lnet/minecraft/world/entity/Entity;ILnet/minecraft/world/damagesource/DamageSource;)V": "awardKillScore",
        "a(Ljava/lang/String;Ljava/lang/String;[Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;)V": "handleTeamKill",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canHarmPlayer",
        "go()Z": "isPvpAllowed",
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/level/portal/PortalInfo;": "findDimensionEntryPoint",
        "b(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "changeDimension",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "createEndPlatform",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/level/border/WorldBorder;)Ljava/util/Optional;": "getExitPortal",
        "e(Lnet/minecraft/server/level/ServerLevel;)V": "triggerDimensionChangeTriggers",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Z": "broadcastToPlayer",
        "a(Lnet/minecraft/world/entity/Entity;I)V": "take",
        "a(Lnet/minecraft/core/BlockPos;)Lcom/mojang/datafixers/util/Either;": "startSleepInBed",
        "b(Lnet/minecraft/core/BlockPos;)V": "startSleeping",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "bedInRange",
        "i(Lnet/minecraft/core/BlockPos;)Z": "isReachableBedBlock",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "bedBlocked",
        "a(ZZ)V": "stopSleepInBed",
        "a(DDD)V": "dismountTo",
        "b(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isInvulnerableTo",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "c(Lnet/minecraft/core/BlockPos;)V": "onChangedBlock",
        "a(DDDZ)V": "doCheckFallDamage",
        "a(Lnet/minecraft/world/level/block/entity/SignBlockEntity;Z)V": "openTextEdit",
        "gp()V": "nextContainerCounter",
        "a(Lnet/minecraft/world/MenuProvider;)Ljava/util/OptionalInt;": "openMenu",
        "a(ILnet/minecraft/world/item/trading/MerchantOffers;IIZZ)V": "sendMerchantOffers",
        "a(Lnet/minecraft/world/entity/animal/horse/AbstractHorse;Lnet/minecraft/world/Container;)V": "openHorseInventory",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;)V": "openItemGui",
        "a(Lnet/minecraft/world/level/block/entity/CommandBlockEntity;)V": "openCommandBlock",
        "q()V": "closeContainer",
        "r()V": "doCloseContainer",
        "a(FFZZ)V": "setPlayerInput",
        "a(Lnet/minecraft/stats/Stat;I)V": "awardStat",
        "a(Lnet/minecraft/stats/Stat;)V": "resetStat",
        "a(Ljava/util/Collection;)I": "awardRecipes",
        "a(Lnet/minecraft/world/item/crafting/Recipe;Ljava/util/List;)V": "triggerRecipeCrafted",
        "a([Lnet/minecraft/resources/ResourceLocation;)V": "awardRecipesByKey",
        "b(Ljava/util/Collection;)I": "resetRecipes",
        "d(I)V": "giveExperiencePoints",
        "s()V": "disconnect",
        "t()Z": "hasDisconnected",
        "u()V": "resetSentInfo",
        "a(Lnet/minecraft/network/chat/Component;Z)V": "displayClientMessage",
        "Z_()V": "completeUsingItem",
        "a(Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;Lnet/minecraft/world/phys/Vec3;)V": "lookAt",
        "a(Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;)V": "lookAt",
        "a(Lnet/minecraft/server/level/ServerPlayer;Z)V": "restoreFrom",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;)V": "onEffectAdded",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;ZLnet/minecraft/world/entity/Entity;)V": "onEffectUpdated",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;)V": "onEffectRemoved",
        "b(DDD)V": "teleportTo",
        "c(DDD)V": "teleportRelative",
        "a(Lnet/minecraft/server/level/ServerLevel;DDDLjava/util/Set;FF)Z": "teleportTo",
        "d(DDD)V": "moveTo",
        "a(Lnet/minecraft/world/entity/Entity;)V": "crit",
        "b(Lnet/minecraft/world/entity/Entity;)V": "magicCrit",
        "w()V": "onUpdateAbilities",
        "x()Lnet/minecraft/server/level/ServerLevel;": "serverLevel",
        "a(Lnet/minecraft/world/level/GameType;)Z": "setGameMode",
        "G_()Z": "isSpectator",
        "f()Z": "isCreative",
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "b(Lnet/minecraft/network/chat/Component;Z)V": "sendSystemMessage",
        "a(Lnet/minecraft/network/chat/OutgoingChatMessage;ZLnet/minecraft/network/chat/ChatType$Bound;)V": "sendChatMessage",
        "y()Ljava/lang/String;": "getIpAddress",
        "a(Lnet/minecraft/network/protocol/game/ServerboundClientInformationPacket;)V": "updateOptions",
        "z()Z": "canChatInColor",
        "A()Lnet/minecraft/world/entity/player/ChatVisiblity;": "getChatVisibility",
        "v(Z)Z": "acceptsSystemMessages",
        "gq()Z": "acceptsChatMessages",
        "a(Ljava/lang/String;Ljava/lang/String;ZLnet/minecraft/network/chat/Component;)V": "sendTexturePack",
        "a(Lnet/minecraft/network/protocol/status/ServerStatus;)V": "sendServerStatus",
        "B()I": "getPermissionLevel",
        "C()V": "resetLastActionTime",
        "D()Lnet/minecraft/stats/ServerStatsCounter;": "getStats",
        "E()Lnet/minecraft/stats/ServerRecipeBook;": "getRecipeBook",
        "F()V": "updateInvisibilityStatus",
        "G()Lnet/minecraft/world/entity/Entity;": "getCamera",
        "c(Lnet/minecraft/world/entity/Entity;)V": "setCamera",
        "H()V": "processPortalCooldown",
        "d(Lnet/minecraft/world/entity/Entity;)V": "attack",
        "I()J": "getLastActionTime",
        "J()Lnet/minecraft/network/chat/Component;": "getTabListDisplayName",
        "a(Lnet/minecraft/world/InteractionHand;)V": "swing",
        "K()Z": "isChangingDimension",
        "L()V": "hasChangedDimension",
        "M()Lnet/minecraft/server/PlayerAdvancements;": "getAdvancements",
        "a(Lnet/minecraft/server/level/ServerLevel;DDDFF)V": "teleportTo",
        "N()Lnet/minecraft/core/BlockPos;": "getRespawnPosition",
        "O()F": "getRespawnAngle",
        "P()Lnet/minecraft/resources/ResourceKey;": "getRespawnDimension",
        "Q()Z": "isRespawnForced",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/BlockPos;FZZ)V": "setRespawnPosition",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/network/protocol/Packet;)V": "trackChunk",
        "a(Lnet/minecraft/world/level/ChunkPos;)V": "untrackChunk",
        "R()Lnet/minecraft/core/SectionPos;": "getLastSectionPos",
        "a(Lnet/minecraft/core/SectionPos;)V": "setLastSectionPos",
        "a(Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playNotifySound",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/world/item/ItemStack;ZZ)Lnet/minecraft/world/entity/item/ItemEntity;": "drop",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "setServerLevel",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)Lnet/minecraft/world/level/GameType;": "readPlayerMode",
        "b(Lnet/minecraft/world/level/GameType;)Lnet/minecraft/world/level/GameType;": "calculateGameModeForNewPlayer",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "loadGameTypes",
        "k(Lnet/minecraft/nbt/CompoundTag;)V": "storeGameTypes",
        "U()Z": "isTextFilteringEnabled",
        "b(Lnet/minecraft/server/level/ServerPlayer;)Z": "shouldFilterMessageTo",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "mayInteract",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "updateUsingItem",
        "a(Z)Z": "drop",
        "V()Z": "allowsListing",
        "W()Ljava/util/Optional;": "getWardenSpawnTracker",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "onItemPickup",
        "a(Lnet/minecraft/network/chat/RemoteChatSession;)V": "setChatSession",
        "X()Lnet/minecraft/network/chat/RemoteChatSession;": "getChatSession",
        "a(DD)V": "indicateDamage",
        "a(Lnet/minecraft/world/entity/Entity;Z)Z": "startRiding",
        "Y()V": "stopRiding",
        "a(Lnet/minecraft/world/entity/player/Inventory;I)V": "lambda$drop$12",
        "c(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/protocol/Packet;": "lambda$sendSystemMessage$11",
        "a(ILnet/minecraft/world/scores/Score;)V": "lambda$awardStat$10",
        "a(Lnet/minecraft/util/Unit;)V": "lambda$startSleepInBed$9",
        "a(Lnet/minecraft/world/entity/monster/Monster;)Z": "lambda$startSleepInBed$8",
        "a(Lnet/minecraft/world/entity/Mob;)V": "lambda$tellNeutralMobsThatIDied$7",
        "b(Lnet/minecraft/world/entity/Mob;)Z": "lambda$tellNeutralMobsThatIDied$6",
        "d(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/protocol/Packet;": "lambda$die$5",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$die$4",
        "b(ILnet/minecraft/world/scores/Score;)V": "lambda$updateScoreForCriteria$3",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$addAdditionalSaveData$2",
        "b(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$addAdditionalSaveData$1",
        "a(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;)V": "lambda$readAdditionalSaveData$0"
      }
    },
    "net/minecraft/server/level/PlayerInteractManager": {
      "fields": {
        "a": "LOGGER",
        "c": "level",
        "d": "player",
        "b": "gameModeForPlayer",
        "e": "previousGameModeForPlayer",
        "f": "isDestroyingBlock",
        "g": "destroyProgressStart",
        "h": "destroyPos",
        "i": "gameTicks",
        "j": "hasDelayedDestroy",
        "k": "delayedDestroyPos",
        "l": "delayedTickStart",
        "m": "lastSentState"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/GameType;)Z": "changeGameModeForPlayer",
        "a(Lnet/minecraft/world/level/GameType;Lnet/minecraft/world/level/GameType;)V": "setGameModeForPlayer",
        "b()Lnet/minecraft/world/level/GameType;": "getGameModeForPlayer",
        "c()Lnet/minecraft/world/level/GameType;": "getPreviousGameModeForPlayer",
        "d()Z": "isSurvival",
        "e()Z": "isCreative",
        "a()V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;I)F": "incrementDestroyProgress",
        "a(Lnet/minecraft/core/BlockPos;ZILjava/lang/String;)V": "debugLogging",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/network/protocol/game/ServerboundPlayerActionPacket$Action;Lnet/minecraft/core/Direction;II)V": "handleBlockBreakAction",
        "a(Lnet/minecraft/core/BlockPos;ILjava/lang/String;)V": "destroyAndAck",
        "a(Lnet/minecraft/core/BlockPos;)Z": "destroyBlock",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "useItem",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "useItemOn",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "setLevel"
      }
    },
    "net/minecraft/server/level/LightEngineThreaded": {
      "fields": {
        "a": "DEFAULT_BATCH_SIZE",
        "d": "LOGGER",
        "e": "taskMailbox",
        "f": "lightTasks",
        "h": "sorterMailbox",
        "i": "taskPerBatch",
        "j": "scheduled"
      },
      "methods": {
        "a()I": "runLightUpdates",
        "a(Lnet/minecraft/core/BlockPos;)V": "checkBlock",
        "a(Lnet/minecraft/world/level/ChunkPos;)V": "updateChunkStatus",
        "a(Lnet/minecraft/core/SectionPos;Z)V": "updateSectionStatus",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "propagateLightSources",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "setLightEnabled",
        "a(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/chunk/DataLayer;)V": "queueSectionData",
        "a(IILnet/minecraft/server/level/ThreadedLevelLightEngine$TaskType;Ljava/lang/Runnable;)V": "addTask",
        "a(IILjava/util/function/IntSupplier;Lnet/minecraft/server/level/ThreadedLevelLightEngine$TaskType;Ljava/lang/Runnable;)V": "addTask",
        "b(Lnet/minecraft/world/level/ChunkPos;Z)V": "retainData",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Z)Ljava/util/concurrent/CompletableFuture;": "initializeLight",
        "b(Lnet/minecraft/world/level/chunk/ChunkAccess;Z)Ljava/util/concurrent/CompletableFuture;": "lightChunk",
        "b()V": "tryScheduleUpdate",
        "f()V": "runUpdate",
        "g()V": "lambda$tryScheduleUpdate$27",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Runnable;)V": "lambda$lightChunk$26",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$lightChunk$25",
        "c(Lnet/minecraft/world/level/ChunkPos;Z)Ljava/lang/String;": "lambda$lightChunk$24",
        "a(ZLnet/minecraft/world/level/ChunkPos;)V": "lambda$lightChunk$23",
        "b(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Runnable;)V": "lambda$initializeLight$22",
        "a(Lnet/minecraft/world/level/ChunkPos;ZLnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "lambda$initializeLight$21",
        "c(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "lambda$initializeLight$20",
        "b(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/ChunkPos;)V": "lambda$initializeLight$19",
        "d(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "lambda$retainData$18",
        "d(Lnet/minecraft/world/level/ChunkPos;Z)V": "lambda$retainData$17",
        "h()I": "lambda$retainData$16",
        "a(Lnet/minecraft/server/level/ThreadedLevelLightEngine$TaskType;Ljava/lang/Runnable;)V": "lambda$addTask$15",
        "b(Lnet/minecraft/core/SectionPos;)Ljava/lang/String;": "lambda$queueSectionData$14",
        "b(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/chunk/DataLayer;)V": "lambda$queueSectionData$13",
        "i()I": "lambda$queueSectionData$12",
        "e(Lnet/minecraft/world/level/ChunkPos;Z)Ljava/lang/String;": "lambda$setLightEnabled$11",
        "f(Lnet/minecraft/world/level/ChunkPos;Z)V": "lambda$setLightEnabled$10",
        "e(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "lambda$propagateLightSources$9",
        "f(Lnet/minecraft/world/level/ChunkPos;)V": "lambda$propagateLightSources$8",
        "b(Lnet/minecraft/core/SectionPos;Z)Ljava/lang/String;": "lambda$updateSectionStatus$7",
        "c(Lnet/minecraft/core/SectionPos;Z)V": "lambda$updateSectionStatus$6",
        "j()I": "lambda$updateSectionStatus$5",
        "g(Lnet/minecraft/world/level/ChunkPos;)Ljava/lang/String;": "lambda$updateChunkStatus$4",
        "h(Lnet/minecraft/world/level/ChunkPos;)V": "lambda$updateChunkStatus$3",
        "k()I": "lambda$updateChunkStatus$2",
        "b(Lnet/minecraft/core/BlockPos;)Ljava/lang/String;": "lambda$checkBlock$1",
        "c(Lnet/minecraft/core/BlockPos;)V": "lambda$checkBlock$0"
      }
    },
    "net/minecraft/server/level/LightEngineThreaded$Update": {
      "fields": {
        "a": "PRE_UPDATE",
        "b": "POST_UPDATE",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/server/level/ThreadedLevelLightEngine$TaskType;": "$values"
      }
    },
    "net/minecraft/server/level/Ticket": {
      "fields": {
        "a": "type",
        "b": "ticketLevel",
        "c": "key",
        "d": "createdTick"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/Ticket;)I": "compareTo",
        "a()Lnet/minecraft/server/level/TicketType;": "getType",
        "b()I": "getTicketLevel",
        "a(J)V": "setCreatedTick",
        "b(J)Z": "timedOut"
      }
    },
    "net/minecraft/server/level/TicketType": {
      "fields": {
        "i": "name",
        "j": "comparator",
        "k": "timeout",
        "a": "START",
        "b": "DRAGON",
        "c": "PLAYER",
        "d": "FORCED",
        "e": "LIGHT",
        "f": "PORTAL",
        "g": "POST_TELEPORT",
        "h": "UNKNOWN"
      },
      "methods": {
        "a(Ljava/lang/String;Ljava/util/Comparator;)Lnet/minecraft/server/level/TicketType;": "create",
        "a(Ljava/lang/String;Ljava/util/Comparator;I)Lnet/minecraft/server/level/TicketType;": "create",
        "a()Ljava/util/Comparator;": "getComparator",
        "b()J": "timeout"
      }
    },
    "net/minecraft/server/level/TickingTracker": {
      "fields": {
        "a": "MAX_LEVEL",
        "c": "INITIAL_TICKET_LIST_CAPACITY",
        "b": "chunks",
        "d": "tickets"
      },
      "methods": {
        "g(J)Lnet/minecraft/util/SortedArraySet;": "getTickets",
        "a(Lnet/minecraft/util/SortedArraySet;)I": "getTicketLevelAt",
        "a(JLnet/minecraft/server/level/Ticket;)V": "addTicket",
        "b(JLnet/minecraft/server/level/Ticket;)V": "removeTicket",
        "a(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "addTicket",
        "b(Lnet/minecraft/server/level/TicketType;Lnet/minecraft/world/level/ChunkPos;ILjava/lang/Object;)V": "removeTicket",
        "a(I)V": "replacePlayerTicketsLevel",
        "b(J)I": "getLevelFromSource",
        "a(Lnet/minecraft/world/level/ChunkPos;)I": "getLevel",
        "c(J)I": "getLevel",
        "a(JI)V": "setLevel",
        "a()V": "runAllUpdates",
        "d(J)Ljava/lang/String;": "getTicketDebugString",
        "h(J)Lnet/minecraft/util/SortedArraySet;": "lambda$getTickets$0"
      }
    },
    "net/minecraft/server/level/RegionLimitedWorldAccess": {
      "fields": {
        "a": "LOGGER",
        "b": "cache",
        "c": "center",
        "d": "size",
        "e": "level",
        "f": "seed",
        "g": "levelData",
        "h": "random",
        "i": "dimensionType",
        "j": "blockTicks",
        "k": "fluidTicks",
        "l": "biomeManager",
        "m": "firstPos",
        "n": "lastPos",
        "o": "structureManager",
        "p": "generatingStatus",
        "q": "writeRadiusCutoff",
        "r": "currentlyGenerating",
        "s": "subTickCount",
        "t": "WORLDGEN_REGION_RANDOM"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;I)Z": "isOldChunkAround",
        "a()Lnet/minecraft/world/level/ChunkPos;": "getCenter",
        "a(Ljava/util/function/Supplier;)V": "setCurrentlyGenerating",
        "a(II)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "b(II)Z": "hasChunk",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(DDDDLjava/util/function/Predicate;)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "v_()I": "getSkyDarken",
        "z_()Lnet/minecraft/world/level/biome/BiomeManager;": "getBiomeManager",
        "a(III)Lnet/minecraft/core/Holder;": "getUncachedNoiseBiome",
        "a(Lnet/minecraft/core/Direction;Z)F": "getShade",
        "s_()Lnet/minecraft/world/level/lighting/LevelLightEngine;": "getLightEngine",
        "a(Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/entity/Entity;I)Z": "destroyBlock",
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "f_(Lnet/minecraft/core/BlockPos;)Z": "ensureCanWrite",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)Z": "setBlock",
        "f(Lnet/minecraft/core/BlockPos;)V": "markPosForPostprocessing",
        "b(Lnet/minecraft/world/entity/Entity;)Z": "addFreshEntity",
        "a(Lnet/minecraft/core/BlockPos;Z)Z": "removeBlock",
        "w_()Lnet/minecraft/world/level/border/WorldBorder;": "getWorldBorder",
        "r_()Z": "isClientSide",
        "C()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "B_()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "G()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures",
        "u_()Lnet/minecraft/world/level/storage/LevelData;": "getLevelData",
        "d_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/DifficultyInstance;": "getCurrentDifficultyAt",
        "n()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "J()Lnet/minecraft/world/level/chunk/ChunkSource;": "getChunkSource",
        "A()J": "getSeed",
        "L()Lnet/minecraft/world/ticks/LevelTickAccess;": "getBlockTicks",
        "K()Lnet/minecraft/world/ticks/LevelTickAccess;": "getFluidTicks",
        "t_()I": "getSeaLevel",
        "y_()Lnet/minecraft/util/RandomSource;": "getRandom",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playSound",
        "a(Lnet/minecraft/core/particles/ParticleOptions;DDDDDD)V": "addParticle",
        "a(Lnet/minecraft/world/entity/player/Player;ILnet/minecraft/core/BlockPos;I)V": "levelEvent",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEvent$Context;)V": "gameEvent",
        "x_()Lnet/minecraft/world/level/dimension/DimensionType;": "dimensionType",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "isStateAtPosition",
        "b(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "isFluidAtPosition",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "v()Ljava/util/List;": "players",
        "C_()I": "getMinBuildHeight",
        "D_()I": "getHeight",
        "A_()J": "nextSubTickCount"
      }
    },
    "net/minecraft/server/level/progress/WorldLoadListener": {
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;)V": "updateSpawnPos",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/ChunkStatus;)V": "onStatusChange",
        "a()V": "start",
        "b()V": "stop"
      }
    },
    "net/minecraft/server/level/progress/WorldLoadListenerFactory": {},
    "net/minecraft/server/level/progress/WorldLoadListenerLogger": {
      "fields": {
        "a": "LOGGER",
        "b": "maxCount",
        "c": "count",
        "d": "startTime",
        "e": "nextTickTime"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;)V": "updateSpawnPos",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/ChunkStatus;)V": "onStatusChange",
        "a()V": "start",
        "b()V": "stop",
        "c()I": "getProgress"
      }
    },
    "net/minecraft/server/network/FilteredText": {
      "fields": {
        "b": "raw",
        "c": "mask",
        "a": "EMPTY"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/server/network/FilteredText;": "passThrough",
        "b(Ljava/lang/String;)Lnet/minecraft/server/network/FilteredText;": "fullyFiltered",
        "a()Ljava/lang/String;": "filtered",
        "b()Ljava/lang/String;": "filteredOrEmpty",
        "c()Z": "isFiltered",
        "d()Ljava/lang/String;": "raw",
        "e()Lnet/minecraft/network/chat/FilterMask;": "mask"
      }
    },
    "net/minecraft/server/network/LegacyPingHandler": {
      "fields": {
        "b": "LOGGER",
        "a": "FAKE_PROTOCOL_VERSION",
        "c": "serverConnectionListener"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;)V": "sendFlushAndClose",
        "a(Ljava/lang/String;)Lio/netty/buffer/ByteBuf;": "createReply"
      }
    },
    "net/minecraft/server/network/MemoryServerHandshakePacketListenerImpl": {
      "fields": {
        "a": "server",
        "b": "connection"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/handshake/ClientIntentionPacket;)V": "handleIntention",
        "a(Lnet/minecraft/network/chat/Component;)V": "onDisconnect",
        "a()Z": "isAcceptingMessages"
      }
    },
    "net/minecraft/server/network/ServerConnection": {
      "fields": {
        "d": "LOGGER",
        "a": "SERVER_EVENT_GROUP",
        "b": "SERVER_EPOLL_EVENT_GROUP",
        "e": "server",
        "c": "running",
        "f": "channels",
        "g": "connections"
      },
      "methods": {
        "a(Ljava/net/InetAddress;I)V": "startTcpServerListener",
        "a()Ljava/net/SocketAddress;": "startMemoryChannel",
        "b()V": "stop",
        "c()V": "tick",
        "d()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "e()Ljava/util/List;": "getConnections",
        "a(Lnet/minecraft/network/Connection;Lnet/minecraft/network/chat/Component;)V": "lambda$tick$2"
      }
    },
    "net/minecraft/server/network/ServerConnection$LatencySimulator": {
      "fields": {
        "a": "TIMER",
        "b": "delay",
        "c": "jitter",
        "d": "queuedMessages"
      },
      "methods": {
        "a(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V": "delayDownstream",
        "a(Lio/netty/util/Timeout;)V": "onTimeout"
      }
    },
    "net/minecraft/server/network/ServerConnection$LatencySimulator$DelayedMessage": {
      "fields": {
        "a": "ctx",
        "b": "msg"
      }
    },
    "net/minecraft/server/network/PlayerConnection": {
      "fields": {
        "c": "LOGGER",
        "d": "LATENCY_CHECK_INTERVAL",
        "a": "MAX_INTERACTION_DISTANCE",
        "e": "NO_BLOCK_UPDATES_TO_ACK",
        "f": "TRACKED_MESSAGE_DISCONNECT_THRESHOLD",
        "g": "CHAT_VALIDATION_FAILED",
        "h": "connection",
        "i": "server",
        "b": "player",
        "j": "tickCount",
        "k": "ackBlockChangesUpTo",
        "l": "keepAliveTime",
        "m": "keepAlivePending",
        "n": "keepAliveChallenge",
        "o": "chatSpamTickCount",
        "p": "dropSpamTickCount",
        "q": "firstGoodX",
        "r": "firstGoodY",
        "s": "firstGoodZ",
        "t": "lastGoodX",
        "u": "lastGoodY",
        "v": "lastGoodZ",
        "w": "lastVehicle",
        "x": "vehicleFirstGoodX",
        "y": "vehicleFirstGoodY",
        "z": "vehicleFirstGoodZ",
        "A": "vehicleLastGoodX",
        "B": "vehicleLastGoodY",
        "C": "vehicleLastGoodZ",
        "D": "awaitingPositionFromClient",
        "E": "awaitingTeleport",
        "F": "awaitingTeleportTime",
        "G": "clientIsFloating",
        "H": "aboveGroundTickCount",
        "I": "clientVehicleIsFloating",
        "J": "aboveGroundVehicleTickCount",
        "K": "receivedMovePacketCount",
        "L": "knownMovePacketCount",
        "M": "lastChatTimeStamp",
        "N": "chatSession",
        "O": "signedMessageDecoder",
        "P": "lastSeenMessages",
        "Q": "messageSignatureCache",
        "R": "chatMessageChain"
      },
      "methods": {
        "c()V": "tick",
        "d()V": "resetPosition",
        "a()Z": "isAcceptingMessages",
        "g()Z": "isSingleplayerOwner",
        "b(Lnet/minecraft/network/chat/Component;)V": "disconnect",
        "a(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;": "filterTextPacket",
        "a(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;": "filterTextPacket",
        "a(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "filterTextPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerInputPacket;)V": "handlePlayerInput",
        "b(DDDFF)Z": "containsInvalidValues",
        "a(D)D": "clampHorizontal",
        "b(D)D": "clampVertical",
        "a(Lnet/minecraft/network/protocol/game/ServerboundMoveVehiclePacket;)V": "handleMoveVehicle",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "noBlocksAround",
        "a(Lnet/minecraft/network/protocol/game/ServerboundAcceptTeleportationPacket;)V": "handleAcceptTeleportPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundRecipeBookSeenRecipePacket;)V": "handleRecipeBookSeenRecipePacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundRecipeBookChangeSettingsPacket;)V": "handleRecipeBookChangeSettingsPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSeenAdvancementsPacket;)V": "handleSeenAdvancements",
        "a(Lnet/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket;)V": "handleCustomCommandSuggestions",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCommandBlockPacket;)V": "handleSetCommandBlock",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCommandMinecartPacket;)V": "handleSetCommandMinecart",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPickItemPacket;)V": "handlePickItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundRenameItemPacket;)V": "handleRenameItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetBeaconPacket;)V": "handleSetBeaconPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetStructureBlockPacket;)V": "handleSetStructureBlock",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetJigsawBlockPacket;)V": "handleSetJigsawBlock",
        "a(Lnet/minecraft/network/protocol/game/ServerboundJigsawGeneratePacket;)V": "handleJigsawGenerate",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSelectTradePacket;)V": "handleSelectTrade",
        "a(Lnet/minecraft/network/protocol/game/ServerboundEditBookPacket;)V": "handleEditBook",
        "a(Ljava/util/List;I)V": "updateBookContents",
        "a(Lnet/minecraft/server/network/FilteredText;Ljava/util/List;I)V": "signBook",
        "a(Ljava/util/List;Ljava/util/function/UnaryOperator;Lnet/minecraft/world/item/ItemStack;)V": "updateBookPages",
        "a(Lnet/minecraft/network/protocol/game/ServerboundEntityTagQuery;)V": "handleEntityTagQuery",
        "a(Lnet/minecraft/network/protocol/game/ServerboundBlockEntityTagQuery;)V": "handleBlockEntityTagQuery",
        "a(Lnet/minecraft/network/protocol/game/ServerboundMovePlayerPacket;)V": "handleMovePlayer",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/phys/AABB;DDD)Z": "isPlayerCollidingWithAnythingNew",
        "a(DDDFF)V": "teleport",
        "a(DDDFFLjava/util/Set;)V": "teleport",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerActionPacket;)V": "handlePlayerAction",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/ItemStack;)Z": "wasBlockPlacementAttempt",
        "a(Lnet/minecraft/network/protocol/game/ServerboundUseItemOnPacket;)V": "handleUseItemOn",
        "a(Lnet/minecraft/network/protocol/game/ServerboundUseItemPacket;)V": "handleUseItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundTeleportToEntityPacket;)V": "handleTeleportToEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ServerboundResourcePackPacket;)V": "handleResourcePackResponse",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPaddleBoatPacket;)V": "handlePaddleBoat",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPongPacket;)V": "handlePong",
        "a(Lnet/minecraft/network/chat/Component;)V": "onDisconnect",
        "a(I)V": "ackBlockChangesUpTo",
        "a(Lnet/minecraft/network/protocol/Packet;)V": "send",
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/network/PacketSendListener;)V": "send",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCarriedItemPacket;)V": "handleSetCarriedItem",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatPacket;)V": "handleChat",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatCommandPacket;)V": "handleChatCommand",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatCommandPacket;Lnet/minecraft/network/chat/LastSeenMessages;)V": "performChatCommand",
        "a(Lnet/minecraft/network/chat/SignedMessageChain$DecodeException;)V": "handleMessageDecodeFailure",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatCommandPacket;Lnet/minecraft/network/chat/SignableCommand;Lnet/minecraft/network/chat/LastSeenMessages;)Ljava/util/Map;": "collectSignedArguments",
        "b(Ljava/lang/String;)Lcom/mojang/brigadier/ParseResults;": "parseCommand",
        "a(Ljava/lang/String;Ljava/time/Instant;Lnet/minecraft/network/chat/LastSeenMessages$Update;)Ljava/util/Optional;": "tryHandleChat",
        "a(Lnet/minecraft/network/chat/LastSeenMessages$Update;)Ljava/util/Optional;": "unpackAndApplyLastSeen",
        "a(Ljava/time/Instant;)Z": "updateChatOrder",
        "c(Ljava/lang/String;)Z": "isChatMessageIllegal",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatPacket;Lnet/minecraft/network/chat/LastSeenMessages;)Lnet/minecraft/network/chat/PlayerChatMessage;": "getSignedMessage",
        "b(Lnet/minecraft/network/chat/PlayerChatMessage;)V": "broadcastChatMessage",
        "h()V": "detectRateSpam",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatAckPacket;)V": "handleChatAck",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSwingPacket;)V": "handleAnimate",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerCommandPacket;)V": "handlePlayerCommand",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;)V": "addPendingMessage",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;Lnet/minecraft/network/chat/ChatType$Bound;)V": "sendPlayerChatMessage",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/ChatType$Bound;)V": "sendDisguisedChatMessage",
        "e()Ljava/net/SocketAddress;": "getRemoteAddress",
        "a(Lnet/minecraft/network/protocol/game/ServerboundInteractPacket;)V": "handleInteract",
        "a(Lnet/minecraft/network/protocol/game/ServerboundClientCommandPacket;)V": "handleClientCommand",
        "a(Lnet/minecraft/network/protocol/game/ServerboundContainerClosePacket;)V": "handleContainerClose",
        "a(Lnet/minecraft/network/protocol/game/ServerboundContainerClickPacket;)V": "handleContainerClick",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlaceRecipePacket;)V": "handlePlaceRecipe",
        "a(Lnet/minecraft/network/protocol/game/ServerboundContainerButtonClickPacket;)V": "handleContainerButtonClick",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSetCreativeModeSlotPacket;)V": "handleSetCreativeModeSlot",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSignUpdatePacket;)V": "handleSignUpdate",
        "a(Lnet/minecraft/network/protocol/game/ServerboundSignUpdatePacket;Ljava/util/List;)V": "updateSignText",
        "a(Lnet/minecraft/network/protocol/game/ServerboundKeepAlivePacket;)V": "handleKeepAlive",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlayerAbilitiesPacket;)V": "handlePlayerAbilities",
        "a(Lnet/minecraft/network/protocol/game/ServerboundClientInformationPacket;)V": "handleClientInformation",
        "a(Lnet/minecraft/network/protocol/game/ServerboundCustomPayloadPacket;)V": "handleCustomPayload",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChangeDifficultyPacket;)V": "handleChangeDifficulty",
        "a(Lnet/minecraft/network/protocol/game/ServerboundLockDifficultyPacket;)V": "handleLockDifficulty",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket;)V": "handleChatSessionUpdate",
        "a(Lnet/minecraft/network/chat/RemoteChatSession;)V": "resetPlayerChatState",
        "f()Lnet/minecraft/server/level/ServerPlayer;": "getPlayer",
        "a(Lnet/minecraft/network/chat/RemoteChatSession;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "lambda$resetPlayerChatState$15",
        "b(Lnet/minecraft/network/protocol/game/ServerboundSignUpdatePacket;Ljava/util/List;)V": "lambda$handleSignUpdate$14",
        "a(Lnet/minecraft/network/protocol/game/ServerboundPlaceRecipePacket;Lnet/minecraft/world/item/crafting/Recipe;)V": "lambda$handlePlaceRecipe$13",
        "a(Lnet/minecraft/commands/CommandSigningContext;Lnet/minecraft/commands/CommandSourceStack;)Lnet/minecraft/commands/CommandSourceStack;": "lambda$performChatCommand$12",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatCommandPacket;Ljava/util/Optional;)V": "lambda$handleChatCommand$11",
        "a(Lnet/minecraft/network/protocol/game/ServerboundChatPacket;Ljava/util/Optional;)V": "lambda$handleChat$10",
        "a(Ljava/util/concurrent/CompletableFuture;Ljava/util/concurrent/CompletableFuture;Lnet/minecraft/network/chat/PlayerChatMessage;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "lambda$handleChat$9",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;Ljava/util/concurrent/CompletableFuture;Ljava/util/concurrent/CompletableFuture;Ljava/lang/Void;)V": "lambda$handleChat$8",
        "b(Lnet/minecraft/network/protocol/Packet;)Ljava/lang/String;": "lambda$send$7",
        "a(Ljava/util/function/UnaryOperator;Lnet/minecraft/server/network/FilteredText;)Lnet/minecraft/nbt/StringTag;": "lambda$updateBookPages$6",
        "d(Ljava/lang/String;)Ljava/lang/String;": "lambda$signBook$5",
        "a(ILjava/util/List;)V": "lambda$handleEditBook$4",
        "b(ILjava/util/List;)V": "lambda$handleEditBook$3",
        "a(Lnet/minecraft/network/protocol/game/ServerboundCommandSuggestionPacket;Lcom/mojang/brigadier/suggestion/Suggestions;)V": "lambda$handleCustomCommandSuggestions$2"
      }
    },
    "net/minecraft/server/network/HandshakeListener": {
      "fields": {
        "a": "IGNORE_STATUS_REASON",
        "b": "server",
        "c": "connection"
      },
      "methods": {
        "a(Lnet/minecraft/network/protocol/handshake/ClientIntentionPacket;)V": "handleIntention",
        "a(Lnet/minecraft/network/chat/Component;)V": "onDisconnect",
        "a()Z": "isAcceptingMessages"
      }
    },
    "net/minecraft/server/network/LoginListener": {
      "fields": {
        "a": "UNIQUE_THREAD_ID",
        "b": "LOGGER",
        "c": "MAX_TICKS_BEFORE_LOGIN",
        "d": "RANDOM",
        "e": "challenge",
        "f": "server",
        "g": "connection",
        "h": "state",
        "i": "tick",
        "j": "gameProfile",
        "k": "serverId",
        "l": "delayedAcceptPlayer"
      },
      "methods": {
        "c()V": "tick",
        "a()Z": "isAcceptingMessages",
        "b(Lnet/minecraft/network/chat/Component;)V": "disconnect",
        "d()V": "handleAcceptedLogin",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "placeNewPlayer",
        "a(Lnet/minecraft/network/chat/Component;)V": "onDisconnect",
        "e()Ljava/lang/String;": "getUserName",
        "a(Lnet/minecraft/network/protocol/login/ServerboundHelloPacket;)V": "handleHello",
        "a(Ljava/lang/String;)Z": "isValidUsername",
        "a(Lnet/minecraft/network/protocol/login/ServerboundKeyPacket;)V": "handleKey",
        "a(Lnet/minecraft/network/protocol/login/ServerboundCustomQueryPacket;)V": "handleCustomQueryPacket",
        "a(Lcom/mojang/authlib/GameProfile;)Lcom/mojang/authlib/GameProfile;": "createFakeProfile"
      }
    },
    "net/minecraft/server/network/LoginListener$EnumProtocolState": {
      "fields": {
        "a": "HELLO",
        "b": "KEY",
        "c": "AUTHENTICATING",
        "d": "NEGOTIATING",
        "e": "READY_TO_ACCEPT",
        "f": "DELAY_ACCEPT",
        "g": "ACCEPTED",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/server/network/ServerPlayerConnection": {
      "methods": {
        "f()Lnet/minecraft/server/level/ServerPlayer;": "getPlayer",
        "a(Lnet/minecraft/network/protocol/Packet;)V": "send"
      }
    },
    "net/minecraft/server/network/PacketStatusListener": {
      "fields": {
        "a": "DISCONNECT_REASON",
        "b": "status",
        "c": "connection",
        "d": "hasRequestedStatus"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/Component;)V": "onDisconnect",
        "a()Z": "isAcceptingMessages",
        "a(Lnet/minecraft/network/protocol/status/ServerboundStatusRequestPacket;)V": "handleStatusRequest",
        "a(Lnet/minecraft/network/protocol/status/ServerboundPingRequestPacket;)V": "handlePingRequest"
      }
    },
    "net/minecraft/server/network/ITextFilter": {
      "methods": {
        "a()V": "join",
        "b()V": "leave",
        "a(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;": "processStreamMessage",
        "a(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "processMessageBundle"
      }
    },
    "net/minecraft/server/network/TextFilter": {
      "fields": {
        "a": "LOGGER",
        "b": "WORKER_COUNT",
        "c": "THREAD_FACTORY",
        "d": "DEFAULT_ENDPOINT",
        "e": "chatEndpoint",
        "f": "chatEncoder",
        "g": "joinEndpoint",
        "h": "joinEncoder",
        "i": "leaveEndpoint",
        "j": "leaveEncoder",
        "k": "authKey",
        "l": "chatIgnoreStrategy",
        "m": "workerPool"
      },
      "methods": {
        "a(Ljava/net/URI;Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/lang/String;)Ljava/net/URL;": "getEndpoint",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "getEndpointFromConfig",
        "a(Ljava/lang/String;)Lnet/minecraft/server/network/TextFilterClient;": "createFromConfig",
        "a(Lcom/mojang/authlib/GameProfile;Ljava/net/URL;Lnet/minecraft/server/network/TextFilterClient$JoinOrLeaveEncoder;Ljava/util/concurrent/Executor;)V": "processJoinOrLeave",
        "a(Lcom/mojang/authlib/GameProfile;Ljava/lang/String;Lnet/minecraft/server/network/TextFilterClient$IgnoreStrategy;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;": "requestMessageProcessing",
        "a(Ljava/lang/String;Lcom/google/gson/JsonArray;Lnet/minecraft/server/network/TextFilterClient$IgnoreStrategy;)Lnet/minecraft/network/chat/FilterMask;": "parseMask",
        "a(Ljava/io/InputStream;)V": "drainStream",
        "a(Lcom/google/gson/JsonObject;Ljava/net/URL;)Lcom/google/gson/JsonObject;": "processRequestResponse",
        "b(Lcom/google/gson/JsonObject;Ljava/net/URL;)V": "processRequest",
        "c(Lcom/google/gson/JsonObject;Ljava/net/URL;)Ljava/net/HttpURLConnection;": "makeRequest",
        "a(Lcom/mojang/authlib/GameProfile;Ljava/lang/String;Lnet/minecraft/server/network/TextFilterClient$IgnoreStrategy;)Lnet/minecraft/server/network/FilteredText;": "lambda$requestMessageProcessing$5",
        "a(Lnet/minecraft/server/network/TextFilterClient$JoinOrLeaveEncoder;Lcom/mojang/authlib/GameProfile;Ljava/net/URL;)V": "lambda$processJoinOrLeave$4",
        "a(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/authlib/GameProfile;Ljava/lang/String;)Lcom/google/gson/JsonObject;": "lambda$createFromConfig$3",
        "a(ILjava/lang/String;Ljava/lang/String;Lcom/mojang/authlib/GameProfile;Ljava/lang/String;)Lcom/google/gson/JsonObject;": "lambda$createFromConfig$2",
        "a(Ljava/lang/String;Ljava/lang/String;Lcom/mojang/authlib/GameProfile;)Lcom/google/gson/JsonObject;": "lambda$createFromConfig$1",
        "a(Ljava/lang/Runnable;)Ljava/lang/Thread;": "lambda$static$0"
      }
    },
    "net/minecraft/server/packs/ResourcePackAbstract": {
      "fields": {
        "a": "LOGGER",
        "d": "name",
        "e": "isBuiltin"
      },
      "methods": {
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;)Ljava/lang/Object;": "getMetadataSection",
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;Ljava/io/InputStream;)Ljava/lang/Object;": "getMetadataFromStream",
        "a()Ljava/lang/String;": "packId",
        "b()Z": "isBuiltin"
      }
    },
    "net/minecraft/server/packs/BuiltInMetadata": {
      "fields": {
        "a": "EMPTY",
        "b": "values"
      },
      "methods": {
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;)Ljava/lang/Object;": "get",
        "a()Lnet/minecraft/server/packs/BuiltInMetadata;": "of",
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;Ljava/lang/Object;)Lnet/minecraft/server/packs/BuiltInMetadata;": "of",
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;Ljava/lang/Object;Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;Ljava/lang/Object;)Lnet/minecraft/server/packs/BuiltInMetadata;": "of"
      }
    },
    "net/minecraft/server/packs/FeatureFlagsMetadataSection": {
      "fields": {
        "b": "flags",
        "c": "CODEC",
        "a": "TYPE"
      },
      "methods": {
        "a()Lnet/minecraft/world/flag/FeatureFlagSet;": "flags",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/server/packs/ResourcePackFile": {
      "fields": {
        "d": "LOGGER",
        "a": "SPLITTER",
        "e": "file",
        "f": "zipFile",
        "g": "failedToLoad"
      },
      "methods": {
        "c()Ljava/util/zip/ZipFile;": "getOrCreateZipFile",
        "b(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "getPathFromLocation",
        "a([Ljava/lang/String;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getRootResource",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getResource",
        "a(Ljava/lang/String;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getResource",
        "a(Lnet/minecraft/server/packs/PackType;)Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/server/packs/PackResources$ResourceOutput;)V": "listResources"
      }
    },
    "net/minecraft/server/packs/IResourcePack": {
      "fields": {
        "b": "METADATA_EXTENSION",
        "c": "PACK_META"
      },
      "methods": {
        "a([Ljava/lang/String;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getRootResource",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getResource",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/server/packs/PackResources$ResourceOutput;)V": "listResources",
        "a(Lnet/minecraft/server/packs/PackType;)Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;)Ljava/lang/Object;": "getMetadataSection",
        "a()Ljava/lang/String;": "packId",
        "b()Z": "isBuiltin"
      }
    },
    "net/minecraft/server/packs/EnumResourcePackType": {
      "fields": {
        "a": "CLIENT_RESOURCES",
        "b": "SERVER_DATA",
        "c": "directory",
        "d": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getDirectory",
        "b()[Lnet/minecraft/server/packs/PackType;": "$values"
      }
    },
    "net/minecraft/server/packs/PathPackResources": {
      "fields": {
        "a": "LOGGER",
        "d": "PATH_JOINER",
        "e": "root"
      },
      "methods": {
        "a([Ljava/lang/String;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getRootResource",
        "a(Ljava/nio/file/Path;)Z": "validatePath",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getResource",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/nio/file/Path;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getResource",
        "b(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/resources/IoSupplier;": "returnFileIfExists",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/server/packs/PackResources$ResourceOutput;)V": "listResources",
        "a(Ljava/lang/String;Ljava/nio/file/Path;Ljava/util/List;Lnet/minecraft/server/packs/PackResources$ResourceOutput;)V": "listPath",
        "a(Lnet/minecraft/server/packs/PackType;)Ljava/util/Set;": "getNamespaces",
        "a(Ljava/nio/file/Path;Ljava/lang/String;Lnet/minecraft/server/packs/PackResources$ResourceOutput;Ljava/nio/file/Path;)V": "lambda$listPath$5",
        "a(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Z": "lambda$listPath$4",
        "a(Ljava/lang/String;Lcom/mojang/serialization/DataResult$PartialResult;)V": "lambda$listResources$3",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/lang/String;Lnet/minecraft/server/packs/PackResources$ResourceOutput;Ljava/util/List;)V": "lambda$listResources$2",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/mojang/serialization/DataResult$PartialResult;)Lnet/minecraft/server/packs/resources/IoSupplier;": "lambda$getResource$1",
        "a(Ljava/nio/file/Path;Ljava/util/List;)Lnet/minecraft/server/packs/resources/IoSupplier;": "lambda$getResource$0"
      }
    },
    "net/minecraft/server/packs/ResourcePackVanilla": {
      "fields": {
        "a": "LOGGER",
        "d": "metadata",
        "e": "namespaces",
        "f": "rootPaths",
        "g": "pathsForType"
      },
      "methods": {
        "a([Ljava/lang/String;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getRootResource",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/resources/ResourceLocation;Ljava/util/function/Consumer;)V": "listRawPaths",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/server/packs/PackResources$ResourceOutput;)V": "listResources",
        "a(Lnet/minecraft/server/packs/PackResources$ResourceOutput;Ljava/lang/String;Ljava/nio/file/Path;Ljava/util/List;)V": "getResources",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/packs/resources/IoSupplier;": "getResource",
        "a(Lnet/minecraft/server/packs/PackType;)Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;)Ljava/lang/Object;": "getMetadataSection",
        "a()Ljava/lang/String;": "packId",
        "b()Z": "isBuiltin",
        "c()Lnet/minecraft/server/packs/resources/ResourceProvider;": "asProvider",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "lambda$asProvider$7",
        "a(Lnet/minecraft/server/packs/resources/IoSupplier;)Lnet/minecraft/server/packs/resources/Resource;": "lambda$asProvider$6",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/mojang/serialization/DataResult$PartialResult;)Lnet/minecraft/server/packs/resources/IoSupplier;": "lambda$getResource$5",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/PackType;Ljava/util/List;)Lnet/minecraft/server/packs/resources/IoSupplier;": "lambda$getResource$4",
        "a(Ljava/lang/String;Lcom/mojang/serialization/DataResult$PartialResult;)V": "lambda$listResources$3",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/server/packs/PackResources$ResourceOutput;Ljava/lang/String;Ljava/util/List;)V": "lambda$listResources$2",
        "b(Lnet/minecraft/resources/ResourceLocation;Lcom/mojang/serialization/DataResult$PartialResult;)V": "lambda$listRawPaths$1",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/PackType;Ljava/util/function/Consumer;Ljava/util/List;)V": "lambda$listRawPaths$0"
      }
    },
    "net/minecraft/server/packs/VanillaPackResourcesBuilder": {
      "fields": {
        "b": "LOGGER",
        "a": "developmentConfig",
        "c": "ROOT_DIR_BY_TYPE",
        "d": "rootPaths",
        "e": "pathsForType",
        "f": "metadata",
        "g": "namespaces"
      },
      "methods": {
        "a(Ljava/net/URI;)Ljava/nio/file/Path;": "safeGetPath",
        "b(Ljava/nio/file/Path;)Z": "validateDirPath",
        "c(Ljava/nio/file/Path;)V": "pushRootPath",
        "b(Lnet/minecraft/server/packs/PackType;Ljava/nio/file/Path;)V": "pushPathForType",
        "a()Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "pushJarResources",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/lang/Class;)Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "pushClasspathResources",
        "b()Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "applyDevelopmentConfig",
        "a(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "pushUniversalPath",
        "a(Lnet/minecraft/server/packs/PackType;Ljava/nio/file/Path;)Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "pushAssetPath",
        "a(Lnet/minecraft/server/packs/BuiltInMetadata;)Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "setMetadata",
        "a([Ljava/lang/String;)Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;": "exposeNamespace",
        "c()Lnet/minecraft/server/packs/VanillaPackResources;": "build",
        "a(Ljava/util/Collection;)Ljava/util/List;": "copyAndReverse",
        "c(Lnet/minecraft/server/packs/PackType;Ljava/nio/file/Path;)V": "lambda$pushJarResources$3",
        "a(Lnet/minecraft/server/packs/PackType;)Ljava/util/Set;": "lambda$pushPathForType$2",
        "d()Lcom/google/common/collect/ImmutableMap;": "lambda$static$1",
        "a(Lnet/minecraft/server/packs/VanillaPackResourcesBuilder;)V": "lambda$static$0"
      }
    },
    "net/minecraft/server/packs/linkfs/DummyFileAttributes": {
      "fields": {
        "a": "EPOCH"
      }
    },
    "net/minecraft/server/packs/linkfs/LinkFSFileStore": {
      "fields": {
        "a": "name"
      }
    },
    "net/minecraft/server/packs/linkfs/LinkFSPath": {
      "fields": {
        "a": "DIRECTORY_ATTRIBUTES",
        "b": "FILE_ATTRIBUTES",
        "c": "PATH_COMPARATOR",
        "d": "name",
        "e": "fileSystem",
        "f": "parent",
        "g": "pathToRoot",
        "h": "pathString",
        "i": "pathContents"
      },
      "methods": {
        "a(Lnet/minecraft/server/packs/linkfs/LinkFSPath;Ljava/lang/String;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "createRelativePath",
        "a()Lnet/minecraft/server/packs/linkfs/LinkFileSystem;": "getFileSystem",
        "b()Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "getRoot",
        "c()Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "getFileName",
        "d()Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "getParent",
        "l()Ljava/util/List;": "pathToRoot",
        "a(I)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "getName",
        "a(II)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "subpath",
        "e()Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "normalize",
        "a(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "resolve",
        "a(Ljava/util/List;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "resolve",
        "a(Ljava/lang/String;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "resolveName",
        "a(Lnet/minecraft/server/packs/linkfs/PathContents;)Z": "isRelativeOrMissing",
        "b(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "relativize",
        "f()Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "toAbsolutePath",
        "a([Ljava/nio/file/LinkOption;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "toRealPath",
        "m()Z": "hasRealContents",
        "n()Ljava/lang/String;": "pathToString",
        "c(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "toLinkPath",
        "g()Z": "exists",
        "h()Ljava/nio/file/Path;": "getTargetPath",
        "i()Lnet/minecraft/server/packs/linkfs/PathContents$DirectoryContents;": "getDirectoryContents",
        "j()Ljava/nio/file/attribute/BasicFileAttributeView;": "getBasicAttributeView",
        "k()Ljava/nio/file/attribute/BasicFileAttributes;": "getBasicAttributes"
      }
    },
    "net/minecraft/server/packs/linkfs/LinkFSProvider": {
      "fields": {
        "a": "SCHEME"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "toLinkPath"
      }
    },
    "net/minecraft/server/packs/linkfs/LinkFileSystem": {
      "fields": {
        "b": "VIEWS",
        "a": "PATH_SEPARATOR",
        "c": "PATH_SPLITTER",
        "d": "store",
        "e": "provider",
        "f": "root"
      },
      "methods": {
        "a(Lnet/minecraft/server/packs/linkfs/LinkFileSystem$DirectoryEntry;Lnet/minecraft/server/packs/linkfs/LinkFileSystem;Ljava/lang/String;Lnet/minecraft/server/packs/linkfs/LinkFSPath;)Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "buildPath",
        "a()Ljava/nio/file/FileStore;": "store",
        "b()Lnet/minecraft/server/packs/linkfs/LinkFSPath;": "rootPath",
        "c()Lnet/minecraft/server/packs/linkfs/LinkFileSystem$Builder;": "builder",
        "a(Lit/unimi/dsi/fastutil/objects/Object2ObjectOpenHashMap;Lnet/minecraft/server/packs/linkfs/LinkFileSystem;Lnet/minecraft/server/packs/linkfs/LinkFSPath;Ljava/lang/String;Lnet/minecraft/server/packs/linkfs/LinkFileSystem$DirectoryEntry;)V": "lambda$buildPath$1",
        "a(Lit/unimi/dsi/fastutil/objects/Object2ObjectOpenHashMap;Lnet/minecraft/server/packs/linkfs/LinkFileSystem;Lnet/minecraft/server/packs/linkfs/LinkFSPath;Ljava/lang/String;Ljava/nio/file/Path;)V": "lambda$buildPath$0"
      }
    },
    "net/minecraft/server/packs/linkfs/PathContents": {
      "fields": {
        "a": "MISSING",
        "b": "RELATIVE"
      }
    },
    "net/minecraft/server/packs/metadata/ResourcePackMetaParser": {
      "methods": {
        "a()Ljava/lang/String;": "getMetadataSectionName",
        "a(Lcom/google/gson/JsonObject;)Ljava/lang/Object;": "fromJson"
      }
    },
    "net/minecraft/server/packs/metadata/MetadataSectionType": {
      "methods": {
        "a(Ljava/lang/Object;)Lcom/google/gson/JsonObject;": "toJson",
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/server/packs/metadata/MetadataSectionType;": "fromCodec"
      }
    },
    "net/minecraft/server/packs/metadata/pack/ResourcePackInfo": {
      "fields": {
        "a": "TYPE",
        "b": "description",
        "c": "packFormat"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/Component;": "getDescription",
        "b()I": "getPackFormat"
      }
    },
    "net/minecraft/server/packs/metadata/pack/ResourcePackInfoDeserializer": {
      "methods": {
        "b(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/packs/metadata/pack/PackMetadataSection;": "fromJson",
        "a(Lnet/minecraft/server/packs/metadata/pack/PackMetadataSection;)Lcom/google/gson/JsonObject;": "toJson",
        "a()Ljava/lang/String;": "getMetadataSectionName",
        "a(Ljava/lang/Object;)Lcom/google/gson/JsonObject;": "toJson",
        "a(Lcom/google/gson/JsonObject;)Ljava/lang/Object;": "fromJson"
      }
    },
    "net/minecraft/server/packs/repository/BuiltInPackSource": {
      "fields": {
        "b": "LOGGER",
        "a": "VANILLA_ID",
        "c": "packType",
        "d": "vanillaPack",
        "e": "packDir"
      },
      "methods": {
        "a(Ljava/util/function/Consumer;)V": "loadPacks",
        "a(Lnet/minecraft/server/packs/PackResources;)Lnet/minecraft/server/packs/repository/Pack;": "createVanillaPack",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "getPackTitle",
        "a()Lnet/minecraft/server/packs/VanillaPackResources;": "getVanillaPack",
        "b(Ljava/util/function/Consumer;)V": "listBundledPacks",
        "a(Ljava/util/function/BiConsumer;)V": "populatePackList",
        "a(Ljava/nio/file/Path;Ljava/util/function/BiConsumer;)V": "discoverPacksInPath",
        "a(Ljava/nio/file/Path;)Ljava/lang/String;": "pathToId",
        "a(Ljava/lang/String;Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/server/packs/repository/Pack;": "createBuiltinPack",
        "a(Ljava/util/function/BiConsumer;Ljava/nio/file/Path;Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;)V": "lambda$discoverPacksInPath$3",
        "a(Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;Ljava/lang/String;)Lnet/minecraft/server/packs/repository/Pack;": "lambda$discoverPacksInPath$2",
        "a(Ljava/util/function/BiConsumer;Ljava/nio/file/Path;)V": "lambda$populatePackList$1",
        "a(Ljava/util/function/Consumer;Ljava/lang/String;Ljava/util/function/Function;)V": "lambda$listBundledPacks$0"
      }
    },
    "net/minecraft/server/packs/repository/ResourcePackSourceFolder": {
      "fields": {
        "a": "LOGGER",
        "b": "folder",
        "c": "packType",
        "d": "packSource"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)Ljava/lang/String;": "nameFromPath",
        "a(Ljava/util/function/Consumer;)V": "loadPacks",
        "a(Ljava/nio/file/Path;ZLjava/util/function/BiConsumer;)V": "discoverPacks",
        "a(Ljava/nio/file/Path;Z)Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;": "detectPackResources",
        "a(Ljava/io/File;ZLjava/lang/String;)Lnet/minecraft/server/packs/PackResources;": "lambda$detectPackResources$2",
        "a(Ljava/nio/file/Path;ZLjava/lang/String;)Lnet/minecraft/server/packs/PackResources;": "lambda$detectPackResources$1",
        "a(Ljava/util/function/Consumer;Ljava/nio/file/Path;Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;)V": "lambda$loadPacks$0"
      }
    },
    "net/minecraft/server/packs/repository/ResourcePackLoader": {
      "fields": {
        "a": "LOGGER",
        "b": "id",
        "c": "resources",
        "d": "title",
        "e": "description",
        "f": "compatibility",
        "g": "requestedFeatures",
        "h": "defaultPosition",
        "i": "required",
        "j": "fixedPosition",
        "k": "packSource"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Component;ZLnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;Lnet/minecraft/server/packs/PackType;Lnet/minecraft/server/packs/repository/Pack$Position;Lnet/minecraft/server/packs/repository/PackSource;)Lnet/minecraft/server/packs/repository/Pack;": "readMetaAndCreate",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Component;ZLnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;Lnet/minecraft/server/packs/repository/Pack$Info;Lnet/minecraft/server/packs/PackType;Lnet/minecraft/server/packs/repository/Pack$Position;ZLnet/minecraft/server/packs/repository/PackSource;)Lnet/minecraft/server/packs/repository/Pack;": "create",
        "a(Ljava/lang/String;Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;)Lnet/minecraft/server/packs/repository/Pack$Info;": "readPackInfo",
        "a()Lnet/minecraft/network/chat/Component;": "getTitle",
        "b()Lnet/minecraft/network/chat/Component;": "getDescription",
        "a(Z)Lnet/minecraft/network/chat/Component;": "getChatLink",
        "c()Lnet/minecraft/server/packs/repository/PackCompatibility;": "getCompatibility",
        "d()Lnet/minecraft/world/flag/FeatureFlagSet;": "getRequestedFeatures",
        "e()Lnet/minecraft/server/packs/PackResources;": "open",
        "f()Ljava/lang/String;": "getId",
        "g()Z": "isRequired",
        "h()Z": "isFixedPosition",
        "i()Lnet/minecraft/server/packs/repository/Pack$Position;": "getDefaultPosition",
        "j()Lnet/minecraft/server/packs/repository/PackSource;": "getPackSource",
        "a(ZLnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$getChatLink$0"
      }
    },
    "net/minecraft/server/packs/repository/ResourcePackLoader$Position": {
      "fields": {
        "a": "TOP",
        "b": "BOTTOM",
        "c": "$VALUES"
      },
      "methods": {
        "a(Ljava/util/List;Ljava/lang/Object;Ljava/util/function/Function;Z)I": "insert",
        "a()Lnet/minecraft/server/packs/repository/Pack$Position;": "opposite",
        "b()[Lnet/minecraft/server/packs/repository/Pack$Position;": "$values"
      }
    },
    "net/minecraft/server/packs/repository/EnumResourcePackVersion": {
      "fields": {
        "a": "TOO_OLD",
        "b": "TOO_NEW",
        "c": "COMPATIBLE",
        "d": "description",
        "e": "confirmation",
        "f": "$VALUES"
      },
      "methods": {
        "a()Z": "isCompatible",
        "a(ILnet/minecraft/server/packs/PackType;)Lnet/minecraft/server/packs/repository/PackCompatibility;": "forFormat",
        "b()Lnet/minecraft/network/chat/Component;": "getDescription",
        "c()Lnet/minecraft/network/chat/Component;": "getConfirmation",
        "d()[Lnet/minecraft/server/packs/repository/PackCompatibility;": "$values"
      }
    },
    "net/minecraft/server/packs/repository/ResourcePackRepository": {
      "fields": {
        "a": "sources",
        "b": "available",
        "c": "selected"
      },
      "methods": {
        "a()V": "reload",
        "h()Ljava/util/Map;": "discoverAvailable",
        "a(Ljava/util/Collection;)V": "setSelected",
        "a(Ljava/lang/String;)Z": "addPack",
        "b(Ljava/lang/String;)Z": "removePack",
        "b(Ljava/util/Collection;)Ljava/util/List;": "rebuildSelected",
        "c(Ljava/util/Collection;)Ljava/util/stream/Stream;": "getAvailablePacks",
        "b()Ljava/util/Collection;": "getAvailableIds",
        "c()Ljava/util/Collection;": "getAvailablePacks",
        "d()Ljava/util/Collection;": "getSelectedIds",
        "e()Lnet/minecraft/world/flag/FeatureFlagSet;": "getRequestedFeatureFlags",
        "f()Ljava/util/Collection;": "getSelectedPacks",
        "c(Ljava/lang/String;)Lnet/minecraft/server/packs/repository/Pack;": "getPack",
        "d(Ljava/lang/String;)Z": "isAvailable",
        "g()Ljava/util/List;": "openAllSelected",
        "a(Ljava/util/Map;Lnet/minecraft/server/packs/repository/Pack;)V": "lambda$discoverAvailable$0"
      }
    },
    "net/minecraft/server/packs/repository/PackSource": {
      "fields": {
        "a": "NO_DECORATION",
        "b": "DEFAULT",
        "c": "BUILT_IN",
        "d": "FEATURE",
        "e": "WORLD",
        "f": "SERVER"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "decorate",
        "a()Z": "shouldAddAutomatically",
        "a(Ljava/util/function/UnaryOperator;Z)Lnet/minecraft/server/packs/repository/PackSource;": "create",
        "a(Ljava/lang/String;)Ljava/util/function/UnaryOperator;": "decorateWithSource",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$decorateWithSource$0"
      }
    },
    "net/minecraft/server/packs/repository/ResourcePackSource": {
      "methods": {
        "a(Ljava/util/function/Consumer;)V": "loadPacks"
      }
    },
    "net/minecraft/server/packs/repository/ResourcePackSourceVanilla": {
      "fields": {
        "b": "VERSION_METADATA_SECTION",
        "c": "FEATURE_FLAGS_METADATA_SECTION",
        "d": "BUILT_IN_METADATA",
        "e": "VANILLA_NAME",
        "f": "PACKS_DIR"
      },
      "methods": {
        "b()Lnet/minecraft/server/packs/VanillaPackResources;": "createVanillaPackSource",
        "a(Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "getPackTitle",
        "a(Lnet/minecraft/server/packs/PackResources;)Lnet/minecraft/server/packs/repository/Pack;": "createVanillaPack",
        "a(Ljava/lang/String;Lnet/minecraft/server/packs/repository/Pack$ResourcesSupplier;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/server/packs/repository/Pack;": "createBuiltinPack",
        "a(Ljava/nio/file/Path;)Lnet/minecraft/server/packs/repository/PackRepository;": "createPackRepository",
        "a(Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;)Lnet/minecraft/server/packs/repository/PackRepository;": "createPackRepository",
        "a(Lnet/minecraft/server/packs/PackResources;Ljava/lang/String;)Lnet/minecraft/server/packs/PackResources;": "lambda$createVanillaPack$0"
      }
    },
    "net/minecraft/server/packs/resources/IReloadableResourceManager": {},
    "net/minecraft/server/packs/resources/ResourceManagerFallback": {
      "fields": {
        "b": "LOGGER",
        "a": "fallbacks",
        "c": "type",
        "d": "namespace"
      },
      "methods": {
        "a(Lnet/minecraft/server/packs/PackResources;)V": "push",
        "a(Lnet/minecraft/server/packs/PackResources;Ljava/util/function/Predicate;)V": "push",
        "a(Ljava/lang/String;Ljava/util/function/Predicate;)V": "pushFilterOnly",
        "a(Ljava/lang/String;Lnet/minecraft/server/packs/PackResources;Ljava/util/function/Predicate;)V": "pushInternal",
        "a()Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/server/packs/PackResources;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/resources/IoSupplier;Lnet/minecraft/server/packs/resources/IoSupplier;)Lnet/minecraft/server/packs/resources/Resource;": "createResource",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/PackResources;Lnet/minecraft/server/packs/resources/IoSupplier;)Lnet/minecraft/server/packs/resources/IoSupplier;": "wrapForDebug",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/List;": "getResourceStack",
        "b(Lnet/minecraft/resources/ResourceLocation;)Z": "isMetadata",
        "c(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "getResourceLocationFromMetadata",
        "d(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "getMetadataLocation",
        "b(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResources",
        "a(Lnet/minecraft/resources/ResourceLocation;I)Lnet/minecraft/server/packs/resources/IoSupplier;": "createStackMetadataFinder",
        "a(Lnet/minecraft/server/packs/resources/IoSupplier;)Lnet/minecraft/server/packs/resources/IoSupplier;": "convertToMetadata",
        "b(Lnet/minecraft/server/packs/resources/IoSupplier;)Lnet/minecraft/server/packs/resources/ResourceMetadata;": "parseMetadata",
        "a(Lnet/minecraft/server/packs/resources/FallbackResourceManager$PackEntry;Ljava/util/Map;)V": "applyPackFiltersToExistingResources",
        "a(Lnet/minecraft/server/packs/resources/FallbackResourceManager$PackEntry;Ljava/lang/String;Ljava/util/function/Predicate;Ljava/util/Map;)V": "listPackResources",
        "c(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResourceStacks",
        "b()Ljava/util/stream/Stream;": "listPacks",
        "a(Lnet/minecraft/server/packs/resources/FallbackResourceManager$PackEntry;)Lnet/minecraft/server/packs/PackResources;": "lambda$listPacks$7",
        "a(Ljava/util/function/Predicate;Ljava/util/Map;Lnet/minecraft/server/packs/PackResources;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/resources/IoSupplier;)V": "lambda$listPackResources$6",
        "c(Lnet/minecraft/server/packs/resources/IoSupplier;)Lnet/minecraft/server/packs/resources/ResourceMetadata;": "lambda$convertToMetadata$5",
        "b(Lnet/minecraft/resources/ResourceLocation;I)Lnet/minecraft/server/packs/resources/ResourceMetadata;": "lambda$createStackMetadataFinder$4",
        "a(Ljava/util/Map;Ljava/util/Map;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/resources/FallbackResourceManager$1ResourceWithSourceAndIndex;)V": "lambda$listResources$3",
        "a(Ljava/util/function/Predicate;Ljava/util/Map;Lnet/minecraft/server/packs/PackResources;ILjava/util/Map;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/resources/IoSupplier;)V": "lambda$listResources$2",
        "a(Lnet/minecraft/server/packs/PackResources;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/server/packs/resources/ResourceMetadata;": "lambda$getResourceStack$1",
        "a(Lnet/minecraft/server/packs/resources/IoSupplier;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/server/packs/PackResources;)Ljava/io/InputStream;": "lambda$wrapForDebug$0"
      }
    },
    "net/minecraft/server/packs/resources/IoSupplier": {
      "methods": {
        "a(Ljava/util/zip/ZipFile;Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;": "lambda$create$1",
        "a(Ljava/nio/file/Path;)Ljava/io/InputStream;": "lambda$create$0"
      }
    },
    "net/minecraft/server/packs/resources/ResourceManager": {
      "fields": {
        "a": "LOGGER",
        "b": "namespacedManagers",
        "c": "packs"
      },
      "methods": {
        "a(Lnet/minecraft/server/packs/PackResources;)Lnet/minecraft/server/packs/resources/ResourceFilterSection;": "getPackFilterSection",
        "a()Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/List;": "getResourceStack",
        "b(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResources",
        "c(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResourceStacks",
        "a(Ljava/lang/String;)V": "checkTrailingDirectoryPath",
        "b()Ljava/util/stream/Stream;": "listPacks",
        "a(Lnet/minecraft/server/packs/resources/ResourceFilterSection;Lnet/minecraft/resources/ResourceLocation;)Z": "lambda$new$1",
        "a(Lnet/minecraft/server/packs/PackType;Lnet/minecraft/server/packs/PackResources;)Ljava/util/stream/Stream;": "lambda$new$0"
      }
    },
    "net/minecraft/server/packs/resources/IReloadListener": {
      "methods": {
        "c()Ljava/lang/String;": "getName"
      }
    },
    "net/minecraft/server/packs/resources/ReloadableProfiled": {
      "fields": {
        "c": "LOGGER",
        "d": "total"
      },
      "methods": {
        "a(Ljava/util/List;)Ljava/util/List;": "finish",
        "a(Lnet/minecraft/server/packs/resources/PreparableReloadListener;Lnet/minecraft/util/profiling/ActiveProfiler;Lnet/minecraft/util/profiling/ActiveProfiler;Ljava/util/concurrent/atomic/AtomicLong;Ljava/util/concurrent/atomic/AtomicLong;Ljava/lang/Void;)Lnet/minecraft/server/packs/resources/ProfiledReloadInstance$State;": "lambda$new$6",
        "a(Ljava/util/concurrent/Executor;Ljava/util/concurrent/atomic/AtomicLong;Ljava/lang/Runnable;)V": "lambda$new$5",
        "a(Ljava/lang/Runnable;Ljava/util/concurrent/atomic/AtomicLong;)V": "lambda$new$4",
        "b(Ljava/util/concurrent/Executor;Ljava/util/concurrent/atomic/AtomicLong;Ljava/lang/Runnable;)V": "lambda$new$3",
        "b(Ljava/lang/Runnable;Ljava/util/concurrent/atomic/AtomicLong;)V": "lambda$new$2",
        "e()I": "lambda$new$1",
        "f()I": "lambda$new$0"
      }
    },
    "net/minecraft/server/packs/resources/IReloadable": {
      "methods": {
        "a()Ljava/util/concurrent/CompletableFuture;": "done",
        "b()F": "getActualProgress",
        "c()Z": "isDone",
        "d()V": "checkExceptions"
      }
    },
    "net/minecraft/server/packs/resources/IResource": {
      "fields": {
        "a": "source",
        "b": "streamSupplier",
        "c": "metadataSupplier",
        "d": "cachedMetadata"
      },
      "methods": {
        "a()Lnet/minecraft/server/packs/PackResources;": "source",
        "b()Ljava/lang/String;": "sourcePackId",
        "c()Z": "isBuiltin",
        "d()Ljava/io/InputStream;": "open",
        "e()Ljava/io/BufferedReader;": "openAsReader",
        "f()Lnet/minecraft/server/packs/resources/ResourceMetadata;": "metadata"
      }
    },
    "net/minecraft/server/packs/resources/ResourceFilterSection": {
      "fields": {
        "b": "CODEC",
        "a": "TYPE",
        "c": "blockList"
      },
      "methods": {
        "a(Ljava/lang/String;)Z": "isNamespaceFiltered",
        "b(Ljava/lang/String;)Z": "isPathFiltered",
        "a(Ljava/lang/String;Lnet/minecraft/util/ResourceLocationPattern;)Z": "lambda$isPathFiltered$3",
        "b(Ljava/lang/String;Lnet/minecraft/util/ResourceLocationPattern;)Z": "lambda$isNamespaceFiltered$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/server/packs/resources/ResourceFilterSection;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/server/packs/resources/IResourceManager": {
      "methods": {
        "a()Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/List;": "getResourceStack",
        "b(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResources",
        "c(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResourceStacks",
        "b()Ljava/util/stream/Stream;": "listPacks"
      }
    },
    "net/minecraft/server/packs/resources/IResourceManager$Empty": {
      "fields": {
        "a": "INSTANCE",
        "b": "$VALUES"
      },
      "methods": {
        "a()Ljava/util/Set;": "getNamespaces",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/List;": "getResourceStack",
        "b(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResources",
        "c(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;": "listResourceStacks",
        "b()Ljava/util/stream/Stream;": "listPacks",
        "c()[Lnet/minecraft/server/packs/resources/ResourceManager$Empty;": "$values"
      }
    },
    "net/minecraft/server/packs/resources/ResourceMetadata": {
      "fields": {
        "a": "EMPTY",
        "b": "EMPTY_SUPPLIER"
      },
      "methods": {
        "a(Ljava/io/InputStream;)Lnet/minecraft/server/packs/resources/ResourceMetadata;": "fromJsonStream",
        "a(Lnet/minecraft/server/packs/metadata/MetadataSectionSerializer;)Ljava/util/Optional;": "getSection",
        "a()Lnet/minecraft/server/packs/resources/ResourceMetadata;": "lambda$static$0"
      }
    },
    "net/minecraft/server/packs/resources/ResourceProvider": {
      "methods": {
        "a(Ljava/util/Map;Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "lambda$fromMap$1",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/io/FileNotFoundException;": "lambda$getResourceOrThrow$0"
      }
    },
    "net/minecraft/server/packs/resources/ResourceDataJson": {
      "fields": {
        "a": "LOGGER",
        "b": "gson",
        "c": "directory"
      }
    },
    "net/minecraft/server/packs/resources/ResourceDataAbstract": {},
    "net/minecraft/server/packs/resources/Reloadable": {
      "fields": {
        "c": "PREPARATION_PROGRESS_WEIGHT",
        "d": "EXTRA_RELOAD_PROGRESS_WEIGHT",
        "e": "LISTENER_PROGRESS_WEIGHT",
        "a": "allPreparations",
        "b": "allDone",
        "f": "preparingListeners",
        "g": "listenerCount",
        "h": "startedReloads",
        "i": "finishedReloads",
        "j": "startedTaskCounter",
        "k": "doneTaskCounter"
      },
      "methods": {
        "a()Ljava/util/concurrent/CompletableFuture;": "done",
        "b()F": "getActualProgress",
        "a(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V": "lambda$new$4",
        "a(Ljava/lang/Runnable;)V": "lambda$new$3",
        "b(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V": "lambda$new$2",
        "b(Ljava/lang/Runnable;)V": "lambda$new$1"
      }
    },
    "net/minecraft/server/players/ExpirableListEntry": {
      "fields": {
        "a": "DATE_FORMAT",
        "b": "EXPIRES_NEVER",
        "c": "created",
        "d": "source",
        "e": "expires",
        "f": "reason"
      },
      "methods": {
        "a()Ljava/util/Date;": "getCreated",
        "b()Ljava/lang/String;": "getSource",
        "c()Ljava/util/Date;": "getExpires",
        "d()Ljava/lang/String;": "getReason",
        "e()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "f()Z": "hasExpired",
        "a(Lcom/google/gson/JsonObject;)V": "serialize"
      }
    },
    "net/minecraft/server/players/UserCache": {
      "fields": {
        "a": "LOGGER",
        "b": "GAMEPROFILES_MRU_LIMIT",
        "c": "GAMEPROFILES_EXPIRATION_MONTHS",
        "d": "usesAuthentication",
        "e": "profilesByName",
        "f": "profilesByUUID",
        "g": "requests",
        "h": "profileRepository",
        "i": "gson",
        "j": "file",
        "k": "operationCount",
        "l": "executor"
      },
      "methods": {
        "a(Lnet/minecraft/server/players/GameProfileCache$GameProfileInfo;)V": "safeAdd",
        "a(Lcom/mojang/authlib/GameProfileRepository;Ljava/lang/String;)Ljava/util/Optional;": "lookupGameProfile",
        "a(Z)V": "setUsesAuthentication",
        "d()Z": "usesAuthentication",
        "a(Lcom/mojang/authlib/GameProfile;)V": "add",
        "e()J": "getNextOperation",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "get",
        "a(Ljava/lang/String;Ljava/util/function/Consumer;)V": "getAsync",
        "a(Ljava/util/UUID;)Ljava/util/Optional;": "get",
        "a(Ljava/util/concurrent/Executor;)V": "setExecutor",
        "a()V": "clearExecutor",
        "f()Ljava/text/DateFormat;": "createDateFormat",
        "b()Ljava/util/List;": "load",
        "c()V": "save",
        "a(I)Ljava/util/stream/Stream;": "getTopMRUProfiles",
        "a(Lnet/minecraft/server/players/GameProfileCache$GameProfileInfo;Ljava/text/DateFormat;)Lcom/google/gson/JsonElement;": "writeGameProfile",
        "a(Lcom/google/gson/JsonElement;Ljava/text/DateFormat;)Ljava/util/Optional;": "readGameProfile",
        "a(Ljava/text/DateFormat;Ljava/util/List;Lcom/google/gson/JsonElement;)V": "lambda$load$4"
      }
    },
    "net/minecraft/server/players/UserCache$UserCacheEntry": {
      "fields": {
        "a": "profile",
        "b": "expirationDate",
        "c": "lastAccess"
      },
      "methods": {
        "a()Lcom/mojang/authlib/GameProfile;": "getProfile",
        "b()Ljava/util/Date;": "getExpirationDate",
        "a(J)V": "setLastAccess",
        "c()J": "getLastAccess"
      }
    },
    "net/minecraft/server/players/IpBanList": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/players/StoredUserEntry;": "createEntry",
        "a(Ljava/net/SocketAddress;)Z": "isBanned",
        "a(Ljava/lang/String;)Z": "isBanned",
        "b(Ljava/net/SocketAddress;)Lnet/minecraft/server/players/IpBanListEntry;": "get",
        "c(Ljava/net/SocketAddress;)Ljava/lang/String;": "getIpFromAddress"
      }
    },
    "net/minecraft/server/players/IpBanEntry": {
      "methods": {
        "e()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "b(Lcom/google/gson/JsonObject;)Ljava/lang/String;": "createIpInfo",
        "a(Lcom/google/gson/JsonObject;)V": "serialize"
      }
    },
    "net/minecraft/server/players/NameReferencingFileConverter": {
      "fields": {
        "e": "LOGGER",
        "a": "OLD_IPBANLIST",
        "b": "OLD_USERBANLIST",
        "c": "OLD_OPLIST",
        "d": "OLD_WHITELIST"
      },
      "methods": {
        "a(Ljava/io/File;Ljava/util/Map;)Ljava/util/List;": "readOldListFormat",
        "a(Lnet/minecraft/server/MinecraftServer;Ljava/util/Collection;Lcom/mojang/authlib/ProfileLookupCallback;)V": "lookupPlayers",
        "a(Lnet/minecraft/server/MinecraftServer;)Z": "convertUserBanlist",
        "b(Lnet/minecraft/server/MinecraftServer;)Z": "convertIpBanlist",
        "c(Lnet/minecraft/server/MinecraftServer;)Z": "convertOpsList",
        "d(Lnet/minecraft/server/MinecraftServer;)Z": "convertWhiteList",
        "a(Lnet/minecraft/server/MinecraftServer;Ljava/lang/String;)Ljava/util/UUID;": "convertMobOwnerIfNecessary",
        "a(Lnet/minecraft/server/dedicated/DedicatedServer;)Z": "convertPlayers",
        "a(Ljava/io/File;)V": "ensureDirectoryExists",
        "e(Lnet/minecraft/server/MinecraftServer;)Z": "serverReadyAfterUserconversion",
        "a()Z": "areOldUserlistsRemoved",
        "f(Lnet/minecraft/server/MinecraftServer;)Z": "areOldPlayersConverted",
        "g(Lnet/minecraft/server/MinecraftServer;)Ljava/io/File;": "getWorldPlayersDirectory",
        "b(Ljava/io/File;)V": "renameOldFile",
        "a(Ljava/lang/String;Ljava/util/Date;)Ljava/util/Date;": "parseDate"
      }
    },
    "net/minecraft/server/players/NameReferencingFileConverter$FileConversionException": {},
    "net/minecraft/server/players/PlayerList": {
      "fields": {
        "b": "USERBANLIST_FILE",
        "c": "IPBANLIST_FILE",
        "d": "OPLIST_FILE",
        "e": "WHITELIST_FILE",
        "f": "CHAT_FILTERED_FULL",
        "a": "LOGGER",
        "h": "SEND_PLAYER_INFO_INTERVAL",
        "i": "BAN_DATE_FORMAT",
        "j": "server",
        "k": "players",
        "l": "playersByUUID",
        "m": "bans",
        "n": "ipBans",
        "o": "ops",
        "p": "whitelist",
        "q": "stats",
        "r": "advancements",
        "s": "playerIo",
        "t": "doWhiteList",
        "u": "registries",
        "v": "synchronizedRegistries",
        "g": "maxPlayers",
        "w": "viewDistance",
        "x": "simulationDistance",
        "y": "allowCheatsForAllPlayers",
        "z": "ALLOW_LOGOUTIVATOR",
        "A": "sendAllPlayerInfoIn"
      },
      "methods": {
        "a(Lnet/minecraft/network/Connection;Lnet/minecraft/server/level/ServerPlayer;)V": "placeNewPlayer",
        "a(Lnet/minecraft/server/ServerScoreboard;Lnet/minecraft/server/level/ServerPlayer;)V": "updateEntireScoreboard",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "addWorldborderListener",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/nbt/CompoundTag;": "load",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "save",
        "c(Lnet/minecraft/server/level/ServerPlayer;)V": "remove",
        "a(Ljava/net/SocketAddress;Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/network/chat/Component;": "canPlayerLogin",
        "e(Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/server/level/ServerPlayer;": "getPlayerForLogin",
        "a(Lnet/minecraft/server/level/ServerPlayer;Z)Lnet/minecraft/server/level/ServerPlayer;": "respawn",
        "d(Lnet/minecraft/server/level/ServerPlayer;)V": "sendPlayerPermissionLevel",
        "d()V": "tick",
        "a(Lnet/minecraft/network/protocol/Packet;)V": "broadcastAll",
        "a(Lnet/minecraft/network/protocol/Packet;Lnet/minecraft/resources/ResourceKey;)V": "broadcastAll",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/network/chat/Component;)V": "broadcastSystemToTeam",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/network/chat/Component;)V": "broadcastSystemToAllExceptTeam",
        "e()[Ljava/lang/String;": "getPlayerNamesArray",
        "f()Lnet/minecraft/server/players/UserBanList;": "getBans",
        "g()Lnet/minecraft/server/players/IpBanList;": "getIpBans",
        "a(Lcom/mojang/authlib/GameProfile;)V": "op",
        "b(Lcom/mojang/authlib/GameProfile;)V": "deop",
        "a(Lnet/minecraft/server/level/ServerPlayer;I)V": "sendPlayerPermissionLevel",
        "c(Lcom/mojang/authlib/GameProfile;)Z": "isWhiteListed",
        "f(Lcom/mojang/authlib/GameProfile;)Z": "isOp",
        "a(Ljava/lang/String;)Lnet/minecraft/server/level/ServerPlayer;": "getPlayerByName",
        "a(Lnet/minecraft/world/entity/player/Player;DDDDLnet/minecraft/resources/ResourceKey;Lnet/minecraft/network/protocol/Packet;)V": "broadcast",
        "h()V": "saveAll",
        "i()Lnet/minecraft/server/players/UserWhiteList;": "getWhiteList",
        "j()[Ljava/lang/String;": "getWhiteListNames",
        "k()Lnet/minecraft/server/players/ServerOpList;": "getOps",
        "l()[Ljava/lang/String;": "getOpNames",
        "a()V": "reloadWhiteList",
        "a(Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/server/level/ServerLevel;)V": "sendLevelInfo",
        "e(Lnet/minecraft/server/level/ServerPlayer;)V": "sendAllPlayerInfo",
        "m()I": "getPlayerCount",
        "n()I": "getMaxPlayers",
        "o()Z": "isUsingWhitelist",
        "a(Z)V": "setUsingWhiteList",
        "b(Ljava/lang/String;)Ljava/util/List;": "getPlayersWithAddress",
        "p()I": "getViewDistance",
        "q()I": "getSimulationDistance",
        "c()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "r()Lnet/minecraft/nbt/CompoundTag;": "getSingleplayerData",
        "b(Z)V": "setAllowCheatsForAllPlayers",
        "s()V": "removeAll",
        "a(Lnet/minecraft/network/chat/Component;Z)V": "broadcastSystemMessage",
        "a(Lnet/minecraft/network/chat/Component;Ljava/util/function/Function;Z)V": "broadcastSystemMessage",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/network/chat/ChatType$Bound;)V": "broadcastChatMessage",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/network/chat/ChatType$Bound;)V": "broadcastChatMessage",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;Ljava/util/function/Predicate;Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/network/chat/ChatType$Bound;)V": "broadcastChatMessage",
        "a(Lnet/minecraft/network/chat/PlayerChatMessage;)Z": "verifyChatTrusted",
        "a(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/stats/ServerStatsCounter;": "getPlayerStats",
        "f(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/server/PlayerAdvancements;": "getPlayerAdvancements",
        "a(I)V": "setViewDistance",
        "b(I)V": "setSimulationDistance",
        "t()Ljava/util/List;": "getPlayers",
        "a(Ljava/util/UUID;)Lnet/minecraft/server/level/ServerPlayer;": "getPlayer",
        "d(Lcom/mojang/authlib/GameProfile;)Z": "canBypassPlayerLimit",
        "u()V": "reloadResources",
        "v()Z": "isAllowCheatsForAllPlayers",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/network/chat/Component;": "lambda$broadcastSystemMessage$3",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/Entity;": "lambda$placeNewPlayer$1"
      }
    },
    "net/minecraft/server/players/OpList": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/players/StoredUserEntry;": "createEntry",
        "a()[Ljava/lang/String;": "getUserList",
        "a(Lcom/mojang/authlib/GameProfile;)Z": "canBypassPlayerLimit",
        "b(Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;": "getKeyForUser",
        "a(Ljava/lang/Object;)Ljava/lang/String;": "getKeyForUser",
        "a(I)[Ljava/lang/String;": "lambda$getUserList$0"
      }
    },
    "net/minecraft/server/players/OpListEntry": {
      "fields": {
        "a": "level",
        "b": "bypassesPlayerLimit"
      },
      "methods": {
        "a()I": "getLevel",
        "b()Z": "getBypassesPlayerLimit",
        "a(Lcom/google/gson/JsonObject;)V": "serialize",
        "b(Lcom/google/gson/JsonObject;)Lcom/mojang/authlib/GameProfile;": "createGameProfile"
      }
    },
    "net/minecraft/server/players/SleepStatus": {
      "fields": {
        "a": "activePlayers",
        "b": "sleepingPlayers"
      },
      "methods": {
        "a(I)Z": "areEnoughSleeping",
        "a(ILjava/util/List;)Z": "areEnoughDeepSleeping",
        "b(I)I": "sleepersNeeded",
        "a()V": "removeAllSleepers",
        "b()I": "amountSleeping",
        "a(Ljava/util/List;)Z": "update"
      }
    },
    "net/minecraft/server/players/JsonListEntry": {
      "fields": {
        "a": "user"
      },
      "methods": {
        "g()Ljava/lang/Object;": "getUser",
        "f()Z": "hasExpired",
        "a(Lcom/google/gson/JsonObject;)V": "serialize"
      }
    },
    "net/minecraft/server/players/JsonList": {
      "fields": {
        "a": "LOGGER",
        "b": "GSON",
        "c": "file",
        "d": "map"
      },
      "methods": {
        "b()Ljava/io/File;": "getFile",
        "a(Lnet/minecraft/server/players/StoredUserEntry;)V": "add",
        "b(Ljava/lang/Object;)Lnet/minecraft/server/players/StoredUserEntry;": "get",
        "c(Ljava/lang/Object;)V": "remove",
        "b(Lnet/minecraft/server/players/StoredUserEntry;)V": "remove",
        "a()[Ljava/lang/String;": "getUserList",
        "c()Z": "isEmpty",
        "a(Ljava/lang/Object;)Ljava/lang/String;": "getKeyForUser",
        "d(Ljava/lang/Object;)Z": "contains",
        "g()V": "removeExpired",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/players/StoredUserEntry;": "createEntry",
        "d()Ljava/util/Collection;": "getEntries",
        "e()V": "save",
        "f()V": "load",
        "c(Lnet/minecraft/server/players/StoredUserEntry;)Lcom/google/gson/JsonObject;": "lambda$save$0"
      }
    },
    "net/minecraft/server/players/GameProfileBanList": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/players/StoredUserEntry;": "createEntry",
        "a(Lcom/mojang/authlib/GameProfile;)Z": "isBanned",
        "a()[Ljava/lang/String;": "getUserList",
        "b(Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;": "getKeyForUser",
        "a(Ljava/lang/Object;)Ljava/lang/String;": "getKeyForUser",
        "a(I)[Ljava/lang/String;": "lambda$getUserList$0"
      }
    },
    "net/minecraft/server/players/GameProfileBanEntry": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;)V": "serialize",
        "e()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "b(Lcom/google/gson/JsonObject;)Lcom/mojang/authlib/GameProfile;": "createGameProfile"
      }
    },
    "net/minecraft/server/players/WhiteList": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/players/StoredUserEntry;": "createEntry",
        "a(Lcom/mojang/authlib/GameProfile;)Z": "isWhiteListed",
        "a()[Ljava/lang/String;": "getUserList",
        "b(Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;": "getKeyForUser",
        "a(Ljava/lang/Object;)Ljava/lang/String;": "getKeyForUser",
        "a(I)[Ljava/lang/String;": "lambda$getUserList$0"
      }
    },
    "net/minecraft/server/players/WhiteListEntry": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;)V": "serialize",
        "b(Lcom/google/gson/JsonObject;)Lcom/mojang/authlib/GameProfile;": "createGameProfile"
      }
    },
    "net/minecraft/server/rcon/RemoteStatusReply": {
      "fields": {
        "a": "outputStream",
        "b": "dataOutputStream"
      },
      "methods": {
        "a([B)V": "writeBytes",
        "a(Ljava/lang/String;)V": "writeString",
        "a(I)V": "write",
        "a(S)V": "writeShort",
        "b(I)V": "writeInt",
        "a(F)V": "writeFloat",
        "a()[B": "toByteArray",
        "b()V": "reset"
      }
    },
    "net/minecraft/server/rcon/StatusChallengeUtils": {
      "fields": {
        "a": "MAX_PACKET_SIZE",
        "b": "HEX_CHAR"
      },
      "methods": {
        "a([BII)Ljava/lang/String;": "stringFromByteArray",
        "a([BI)I": "intFromByteArray",
        "b([BII)I": "intFromByteArray",
        "c([BII)I": "intFromNetworkByteArray",
        "a(B)Ljava/lang/String;": "toHexString"
      }
    },
    "net/minecraft/server/rcon/RemoteControlCommandListener": {
      "fields": {
        "b": "RCON",
        "c": "RCON_COMPONENT",
        "d": "buffer",
        "e": "server"
      },
      "methods": {
        "e()V": "prepareForCommand",
        "f()Ljava/lang/String;": "getCommandResponse",
        "g()Lnet/minecraft/commands/CommandSourceStack;": "createCommandSourceStack",
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "e_()Z": "acceptsSuccess",
        "q_()Z": "acceptsFailure",
        "N_()Z": "shouldInformAdmins"
      }
    },
    "net/minecraft/server/rcon/thread/RemoteConnectionThread": {
      "fields": {
        "d": "LOGGER",
        "e": "UNIQUE_THREAD_ID",
        "f": "MAX_STOP_WAIT",
        "a": "running",
        "b": "name",
        "c": "thread"
      },
      "methods": {
        "a()Z": "start",
        "b()V": "stop",
        "c()Z": "isRunning"
      }
    },
    "net/minecraft/server/rcon/thread/RemoteStatusListener": {
      "fields": {
        "d": "LOGGER",
        "e": "GAME_TYPE",
        "f": "GAME_ID",
        "g": "CHALLENGE_CHECK_INTERVAL",
        "h": "RESPONSE_CACHE_TIME",
        "i": "lastChallengeCheck",
        "j": "port",
        "k": "serverPort",
        "l": "maxPlayers",
        "m": "serverName",
        "n": "worldName",
        "o": "socket",
        "p": "buffer",
        "q": "hostIp",
        "r": "serverIp",
        "s": "validChallenges",
        "t": "rulesResponse",
        "u": "lastRulesResponse",
        "v": "serverInterface"
      },
      "methods": {
        "a(Lnet/minecraft/server/ServerInterface;)Lnet/minecraft/server/rcon/thread/QueryThreadGs4;": "create",
        "a([BLjava/net/DatagramPacket;)V": "sendTo",
        "a(Ljava/net/DatagramPacket;)Z": "processPacket",
        "b(Ljava/net/DatagramPacket;)[B": "buildRuleResponse",
        "a(Ljava/net/SocketAddress;)[B": "getIdentBytes",
        "c(Ljava/net/DatagramPacket;)Ljava/lang/Boolean;": "validChallenge",
        "d(Ljava/net/DatagramPacket;)V": "sendChallenge",
        "d()V": "pruneChallenges",
        "a()Z": "start",
        "a(Ljava/lang/Exception;)V": "recoverSocketError",
        "e()Z": "initSocket",
        "a(JLnet/minecraft/server/rcon/thread/QueryThreadGs4$RequestChallenge;)Z": "lambda$pruneChallenges$0"
      }
    },
    "net/minecraft/server/rcon/thread/RemoteStatusListener$RemoteStatusChallenge": {
      "fields": {
        "a": "time",
        "b": "challenge",
        "c": "identBytes",
        "d": "challengeBytes",
        "e": "ident"
      },
      "methods": {
        "a(J)Ljava/lang/Boolean;": "before",
        "a()I": "getChallenge",
        "b()[B": "getChallengeBytes",
        "c()[B": "getIdentBytes",
        "d()Ljava/lang/String;": "getIdent"
      }
    },
    "net/minecraft/server/rcon/thread/RemoteControlSession": {
      "fields": {
        "d": "LOGGER",
        "e": "SERVERDATA_AUTH",
        "f": "SERVERDATA_EXECCOMMAND",
        "g": "SERVERDATA_RESPONSE_VALUE",
        "h": "SERVERDATA_AUTH_RESPONSE",
        "i": "SERVERDATA_AUTH_FAILURE",
        "j": "authed",
        "k": "client",
        "l": "buf",
        "m": "rconPassword",
        "n": "serverInterface"
      },
      "methods": {
        "a(IILjava/lang/String;)V": "send",
        "d()V": "sendAuthFailure",
        "a(ILjava/lang/String;)V": "sendCmdResponse",
        "b()V": "stop",
        "e()V": "closeSocket"
      }
    },
    "net/minecraft/server/rcon/thread/RemoteControlListener": {
      "fields": {
        "d": "LOGGER",
        "e": "socket",
        "f": "rconPassword",
        "g": "clients",
        "h": "serverInterface"
      },
      "methods": {
        "d()V": "clearClients",
        "a(Lnet/minecraft/server/ServerInterface;)Lnet/minecraft/server/rcon/thread/RconThread;": "create",
        "b()V": "stop",
        "a(Ljava/net/ServerSocket;)V": "closeSocket",
        "a(Lnet/minecraft/server/rcon/thread/RconClient;)Z": "lambda$clearClients$0"
      }
    },
    "net/minecraft/sounds/Music": {
      "fields": {
        "a": "CODEC",
        "b": "event",
        "c": "minDelay",
        "d": "maxDelay",
        "e": "replaceCurrentMusic"
      },
      "methods": {
        "a()Lnet/minecraft/core/Holder;": "getEvent",
        "b()I": "getMinDelay",
        "c()I": "getMaxDelay",
        "d()Z": "replaceCurrentMusic",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/sounds/Music;)Ljava/lang/Boolean;": "lambda$static$3",
        "b(Lnet/minecraft/sounds/Music;)Ljava/lang/Integer;": "lambda$static$2",
        "c(Lnet/minecraft/sounds/Music;)Ljava/lang/Integer;": "lambda$static$1",
        "d(Lnet/minecraft/sounds/Music;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/sounds/Musics": {
      "fields": {
        "h": "ONE_SECOND",
        "i": "THIRTY_SECONDS",
        "j": "TEN_MINUTES",
        "k": "TWENTY_MINUTES",
        "l": "FIVE_MINUTES",
        "a": "MENU",
        "b": "CREATIVE",
        "c": "CREDITS",
        "d": "END_BOSS",
        "e": "END",
        "f": "UNDER_WATER",
        "g": "GAME"
      },
      "methods": {
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/sounds/Music;": "createGameMusic"
      }
    },
    "net/minecraft/sounds/SoundEffect": {
      "fields": {
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "DEFAULT_RANGE",
        "d": "location",
        "e": "range",
        "f": "newSystem"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/Optional;)Lnet/minecraft/sounds/SoundEvent;": "create",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/sounds/SoundEvent;": "createVariableRangeEvent",
        "a(Lnet/minecraft/resources/ResourceLocation;F)Lnet/minecraft/sounds/SoundEvent;": "createFixedRangeEvent",
        "a()Lnet/minecraft/resources/ResourceLocation;": "getLocation",
        "a(F)F": "getRange",
        "b()Ljava/util/Optional;": "fixedRange",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToNetwork",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/sounds/SoundEvent;": "readFromNetwork",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/sounds/SoundEvent;": "lambda$create$2",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/lang/Float;)Lnet/minecraft/sounds/SoundEvent;": "lambda$create$1",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/sounds/SoundEffects": {
      "fields": {
        "a": "ALLAY_AMBIENT_WITH_ITEM",
        "b": "ALLAY_AMBIENT_WITHOUT_ITEM",
        "c": "ALLAY_DEATH",
        "d": "ALLAY_HURT",
        "e": "ALLAY_ITEM_GIVEN",
        "f": "ALLAY_ITEM_TAKEN",
        "g": "ALLAY_THROW",
        "h": "AMBIENT_CAVE",
        "i": "AMBIENT_BASALT_DELTAS_ADDITIONS",
        "j": "AMBIENT_BASALT_DELTAS_LOOP",
        "k": "AMBIENT_BASALT_DELTAS_MOOD",
        "l": "AMBIENT_CRIMSON_FOREST_ADDITIONS",
        "m": "AMBIENT_CRIMSON_FOREST_LOOP",
        "n": "AMBIENT_CRIMSON_FOREST_MOOD",
        "o": "AMBIENT_NETHER_WASTES_ADDITIONS",
        "p": "AMBIENT_NETHER_WASTES_LOOP",
        "q": "AMBIENT_NETHER_WASTES_MOOD",
        "r": "AMBIENT_SOUL_SAND_VALLEY_ADDITIONS",
        "s": "AMBIENT_SOUL_SAND_VALLEY_LOOP",
        "t": "AMBIENT_SOUL_SAND_VALLEY_MOOD",
        "u": "AMBIENT_WARPED_FOREST_ADDITIONS",
        "v": "AMBIENT_WARPED_FOREST_LOOP",
        "w": "AMBIENT_WARPED_FOREST_MOOD",
        "x": "AMBIENT_UNDERWATER_ENTER",
        "y": "AMBIENT_UNDERWATER_EXIT",
        "z": "AMBIENT_UNDERWATER_LOOP",
        "A": "AMBIENT_UNDERWATER_LOOP_ADDITIONS",
        "B": "AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE",
        "C": "AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE",
        "D": "AMETHYST_BLOCK_BREAK",
        "E": "AMETHYST_BLOCK_CHIME",
        "F": "AMETHYST_BLOCK_FALL",
        "G": "AMETHYST_BLOCK_HIT",
        "H": "AMETHYST_BLOCK_PLACE",
        "I": "AMETHYST_BLOCK_RESONATE",
        "J": "AMETHYST_BLOCK_STEP",
        "K": "AMETHYST_CLUSTER_BREAK",
        "L": "AMETHYST_CLUSTER_FALL",
        "M": "AMETHYST_CLUSTER_HIT",
        "N": "AMETHYST_CLUSTER_PLACE",
        "O": "AMETHYST_CLUSTER_STEP",
        "P": "ANCIENT_DEBRIS_BREAK",
        "Q": "ANCIENT_DEBRIS_STEP",
        "R": "ANCIENT_DEBRIS_PLACE",
        "S": "ANCIENT_DEBRIS_HIT",
        "T": "ANCIENT_DEBRIS_FALL",
        "U": "ANVIL_BREAK",
        "V": "ANVIL_DESTROY",
        "W": "ANVIL_FALL",
        "X": "ANVIL_HIT",
        "Y": "ANVIL_LAND",
        "Z": "ANVIL_PLACE",
        "aa": "ANVIL_STEP",
        "ab": "ANVIL_USE",
        "ac": "ARMOR_EQUIP_CHAIN",
        "ad": "ARMOR_EQUIP_DIAMOND",
        "ae": "ARMOR_EQUIP_ELYTRA",
        "af": "ARMOR_EQUIP_GENERIC",
        "ag": "ARMOR_EQUIP_GOLD",
        "ah": "ARMOR_EQUIP_IRON",
        "ai": "ARMOR_EQUIP_LEATHER",
        "aj": "ARMOR_EQUIP_NETHERITE",
        "ak": "ARMOR_EQUIP_TURTLE",
        "al": "ARMOR_STAND_BREAK",
        "am": "ARMOR_STAND_FALL",
        "an": "ARMOR_STAND_HIT",
        "ao": "ARMOR_STAND_PLACE",
        "ap": "ARROW_HIT",
        "aq": "ARROW_HIT_PLAYER",
        "ar": "ARROW_SHOOT",
        "as": "AXE_STRIP",
        "at": "AXE_SCRAPE",
        "au": "AXE_WAX_OFF",
        "av": "AXOLOTL_ATTACK",
        "aw": "AXOLOTL_DEATH",
        "ax": "AXOLOTL_HURT",
        "ay": "AXOLOTL_IDLE_AIR",
        "az": "AXOLOTL_IDLE_WATER",
        "aA": "AXOLOTL_SPLASH",
        "aB": "AXOLOTL_SWIM",
        "aC": "AZALEA_BREAK",
        "aD": "AZALEA_FALL",
        "aE": "AZALEA_HIT",
        "aF": "AZALEA_PLACE",
        "aG": "AZALEA_STEP",
        "aH": "AZALEA_LEAVES_BREAK",
        "aI": "AZALEA_LEAVES_FALL",
        "aJ": "AZALEA_LEAVES_HIT",
        "aK": "AZALEA_LEAVES_PLACE",
        "aL": "AZALEA_LEAVES_STEP",
        "aM": "BAMBOO_BREAK",
        "aN": "BAMBOO_FALL",
        "aO": "BAMBOO_HIT",
        "aP": "BAMBOO_PLACE",
        "aQ": "BAMBOO_STEP",
        "aR": "BAMBOO_SAPLING_BREAK",
        "aS": "BAMBOO_SAPLING_HIT",
        "aT": "BAMBOO_SAPLING_PLACE",
        "aU": "BAMBOO_WOOD_BREAK",
        "aV": "BAMBOO_WOOD_FALL",
        "aW": "BAMBOO_WOOD_HIT",
        "aX": "BAMBOO_WOOD_PLACE",
        "aY": "BAMBOO_WOOD_STEP",
        "aZ": "BAMBOO_WOOD_DOOR_CLOSE",
        "ba": "BAMBOO_WOOD_DOOR_OPEN",
        "bb": "BAMBOO_WOOD_TRAPDOOR_CLOSE",
        "bc": "BAMBOO_WOOD_TRAPDOOR_OPEN",
        "bd": "BAMBOO_WOOD_BUTTON_CLICK_OFF",
        "be": "BAMBOO_WOOD_BUTTON_CLICK_ON",
        "bf": "BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF",
        "bg": "BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON",
        "bh": "BAMBOO_WOOD_FENCE_GATE_CLOSE",
        "bi": "BAMBOO_WOOD_FENCE_GATE_OPEN",
        "bj": "BARREL_CLOSE",
        "bk": "BARREL_OPEN",
        "bl": "BASALT_BREAK",
        "bm": "BASALT_STEP",
        "bn": "BASALT_PLACE",
        "bo": "BASALT_HIT",
        "bp": "BASALT_FALL",
        "bq": "BAT_AMBIENT",
        "br": "BAT_DEATH",
        "bs": "BAT_HURT",
        "bt": "BAT_LOOP",
        "bu": "BAT_TAKEOFF",
        "bv": "BEACON_ACTIVATE",
        "bw": "BEACON_AMBIENT",
        "bx": "BEACON_DEACTIVATE",
        "by": "BEACON_POWER_SELECT",
        "bz": "BEE_DEATH",
        "bA": "BEE_HURT",
        "bB": "BEE_LOOP_AGGRESSIVE",
        "bC": "BEE_LOOP",
        "bD": "BEE_STING",
        "bE": "BEE_POLLINATE",
        "bF": "BEEHIVE_DRIP",
        "bG": "BEEHIVE_ENTER",
        "bH": "BEEHIVE_EXIT",
        "bI": "BEEHIVE_SHEAR",
        "bJ": "BEEHIVE_WORK",
        "bK": "BELL_BLOCK",
        "bL": "BELL_RESONATE",
        "bM": "BIG_DRIPLEAF_BREAK",
        "bN": "BIG_DRIPLEAF_FALL",
        "bO": "BIG_DRIPLEAF_HIT",
        "bP": "BIG_DRIPLEAF_PLACE",
        "bQ": "BIG_DRIPLEAF_STEP",
        "bR": "BLAZE_AMBIENT",
        "bS": "BLAZE_BURN",
        "bT": "BLAZE_DEATH",
        "bU": "BLAZE_HURT",
        "bV": "BLAZE_SHOOT",
        "bW": "BOAT_PADDLE_LAND",
        "bX": "BOAT_PADDLE_WATER",
        "bY": "BONE_BLOCK_BREAK",
        "bZ": "BONE_BLOCK_FALL",
        "ca": "BONE_BLOCK_HIT",
        "cb": "BONE_BLOCK_PLACE",
        "cc": "BONE_BLOCK_STEP",
        "cd": "BONE_MEAL_USE",
        "ce": "BOOK_PAGE_TURN",
        "cf": "BOOK_PUT",
        "cg": "BLASTFURNACE_FIRE_CRACKLE",
        "ch": "BOTTLE_EMPTY",
        "ci": "BOTTLE_FILL",
        "cj": "BOTTLE_FILL_DRAGONBREATH",
        "ck": "BREWING_STAND_BREW",
        "cl": "BRUSH_GENERIC",
        "cm": "BRUSH_SAND",
        "cn": "BRUSH_GRAVEL",
        "co": "BRUSH_SAND_COMPLETED",
        "cp": "BRUSH_GRAVEL_COMPLETED",
        "cq": "BUBBLE_COLUMN_BUBBLE_POP",
        "cr": "BUBBLE_COLUMN_UPWARDS_AMBIENT",
        "cs": "BUBBLE_COLUMN_UPWARDS_INSIDE",
        "ct": "BUBBLE_COLUMN_WHIRLPOOL_AMBIENT",
        "cu": "BUBBLE_COLUMN_WHIRLPOOL_INSIDE",
        "cv": "BUCKET_EMPTY",
        "cw": "BUCKET_EMPTY_AXOLOTL",
        "cx": "BUCKET_EMPTY_FISH",
        "cy": "BUCKET_EMPTY_LAVA",
        "cz": "BUCKET_EMPTY_POWDER_SNOW",
        "cA": "BUCKET_EMPTY_TADPOLE",
        "cB": "BUCKET_FILL",
        "cC": "BUCKET_FILL_AXOLOTL",
        "cD": "BUCKET_FILL_FISH",
        "cE": "BUCKET_FILL_LAVA",
        "cF": "BUCKET_FILL_POWDER_SNOW",
        "cG": "BUCKET_FILL_TADPOLE",
        "cH": "BUNDLE_DROP_CONTENTS",
        "cI": "BUNDLE_INSERT",
        "cJ": "BUNDLE_REMOVE_ONE",
        "cK": "CAKE_ADD_CANDLE",
        "cL": "CALCITE_BREAK",
        "cM": "CALCITE_STEP",
        "cN": "CALCITE_PLACE",
        "cO": "CALCITE_HIT",
        "cP": "CALCITE_FALL",
        "cQ": "CAMEL_AMBIENT",
        "cR": "CAMEL_DASH",
        "cS": "CAMEL_DASH_READY",
        "cT": "CAMEL_DEATH",
        "cU": "CAMEL_EAT",
        "cV": "CAMEL_HURT",
        "cW": "CAMEL_SADDLE",
        "cX": "CAMEL_SIT",
        "cY": "CAMEL_STAND",
        "cZ": "CAMEL_STEP",
        "da": "CAMEL_STEP_SAND",
        "db": "CAMPFIRE_CRACKLE",
        "dc": "CANDLE_AMBIENT",
        "dd": "CANDLE_BREAK",
        "de": "CANDLE_EXTINGUISH",
        "df": "CANDLE_FALL",
        "dg": "CANDLE_HIT",
        "dh": "CANDLE_PLACE",
        "di": "CANDLE_STEP",
        "dj": "CAT_AMBIENT",
        "dk": "CAT_STRAY_AMBIENT",
        "dl": "CAT_DEATH",
        "dm": "CAT_EAT",
        "dn": "CAT_HISS",
        "do": "CAT_BEG_FOR_FOOD",
        "dp": "CAT_HURT",
        "dq": "CAT_PURR",
        "dr": "CAT_PURREOW",
        "ds": "CAVE_VINES_BREAK",
        "dt": "CAVE_VINES_FALL",
        "du": "CAVE_VINES_HIT",
        "dv": "CAVE_VINES_PLACE",
        "dw": "CAVE_VINES_STEP",
        "dx": "CAVE_VINES_PICK_BERRIES",
        "dy": "CHAIN_BREAK",
        "dz": "CHAIN_FALL",
        "dA": "CHAIN_HIT",
        "dB": "CHAIN_PLACE",
        "dC": "CHAIN_STEP",
        "dD": "CHERRY_WOOD_BREAK",
        "dE": "CHERRY_WOOD_FALL",
        "dF": "CHERRY_WOOD_HIT",
        "dG": "CHERRY_WOOD_PLACE",
        "dH": "CHERRY_WOOD_STEP",
        "dI": "CHERRY_SAPLING_BREAK",
        "dJ": "CHERRY_SAPLING_FALL",
        "dK": "CHERRY_SAPLING_HIT",
        "dL": "CHERRY_SAPLING_PLACE",
        "dM": "CHERRY_SAPLING_STEP",
        "dN": "CHERRY_LEAVES_BREAK",
        "dO": "CHERRY_LEAVES_FALL",
        "dP": "CHERRY_LEAVES_HIT",
        "dQ": "CHERRY_LEAVES_PLACE",
        "dR": "CHERRY_LEAVES_STEP",
        "dS": "CHERRY_WOOD_HANGING_SIGN_STEP",
        "dT": "CHERRY_WOOD_HANGING_SIGN_BREAK",
        "dU": "CHERRY_WOOD_HANGING_SIGN_FALL",
        "dV": "CHERRY_WOOD_HANGING_SIGN_HIT",
        "dW": "CHERRY_WOOD_HANGING_SIGN_PLACE",
        "dX": "CHERRY_WOOD_DOOR_CLOSE",
        "dY": "CHERRY_WOOD_DOOR_OPEN",
        "dZ": "CHERRY_WOOD_TRAPDOOR_CLOSE",
        "ea": "CHERRY_WOOD_TRAPDOOR_OPEN",
        "eb": "CHERRY_WOOD_BUTTON_CLICK_OFF",
        "ec": "CHERRY_WOOD_BUTTON_CLICK_ON",
        "ed": "CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF",
        "ee": "CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON",
        "ef": "CHERRY_WOOD_FENCE_GATE_CLOSE",
        "eg": "CHERRY_WOOD_FENCE_GATE_OPEN",
        "eh": "CHEST_CLOSE",
        "ei": "CHEST_LOCKED",
        "ej": "CHEST_OPEN",
        "ek": "CHICKEN_AMBIENT",
        "el": "CHICKEN_DEATH",
        "em": "CHICKEN_EGG",
        "en": "CHICKEN_HURT",
        "eo": "CHICKEN_STEP",
        "ep": "CHISELED_BOOKSHELF_BREAK",
        "eq": "CHISELED_BOOKSHELF_FALL",
        "er": "CHISELED_BOOKSHELF_HIT",
        "es": "CHISELED_BOOKSHELF_INSERT",
        "et": "CHISELED_BOOKSHELF_INSERT_ENCHANTED",
        "eu": "CHISELED_BOOKSHELF_STEP",
        "ev": "CHISELED_BOOKSHELF_PICKUP",
        "ew": "CHISELED_BOOKSHELF_PICKUP_ENCHANTED",
        "ex": "CHISELED_BOOKSHELF_PLACE",
        "ey": "CHORUS_FLOWER_DEATH",
        "ez": "CHORUS_FLOWER_GROW",
        "eA": "CHORUS_FRUIT_TELEPORT",
        "eB": "COD_AMBIENT",
        "eC": "COD_DEATH",
        "eD": "COD_FLOP",
        "eE": "COD_HURT",
        "eF": "COMPARATOR_CLICK",
        "eG": "COMPOSTER_EMPTY",
        "eH": "COMPOSTER_FILL",
        "eI": "COMPOSTER_FILL_SUCCESS",
        "eJ": "COMPOSTER_READY",
        "eK": "CONDUIT_ACTIVATE",
        "eL": "CONDUIT_AMBIENT",
        "eM": "CONDUIT_AMBIENT_SHORT",
        "eN": "CONDUIT_ATTACK_TARGET",
        "eO": "CONDUIT_DEACTIVATE",
        "eP": "COPPER_BREAK",
        "eQ": "COPPER_STEP",
        "eR": "COPPER_PLACE",
        "eS": "COPPER_HIT",
        "eT": "COPPER_FALL",
        "eU": "CORAL_BLOCK_BREAK",
        "eV": "CORAL_BLOCK_FALL",
        "eW": "CORAL_BLOCK_HIT",
        "eX": "CORAL_BLOCK_PLACE",
        "eY": "CORAL_BLOCK_STEP",
        "eZ": "COW_AMBIENT",
        "fa": "COW_DEATH",
        "fb": "COW_HURT",
        "fc": "COW_MILK",
        "fd": "COW_STEP",
        "fe": "CREEPER_DEATH",
        "ff": "CREEPER_HURT",
        "fg": "CREEPER_PRIMED",
        "fh": "CROP_BREAK",
        "fi": "CROP_PLANTED",
        "fj": "CROSSBOW_HIT",
        "fk": "CROSSBOW_LOADING_END",
        "fl": "CROSSBOW_LOADING_MIDDLE",
        "fm": "CROSSBOW_LOADING_START",
        "fn": "CROSSBOW_QUICK_CHARGE_1",
        "fo": "CROSSBOW_QUICK_CHARGE_2",
        "fp": "CROSSBOW_QUICK_CHARGE_3",
        "fq": "CROSSBOW_SHOOT",
        "fr": "DECORATED_POT_BREAK",
        "fs": "DECORATED_POT_FALL",
        "ft": "DECORATED_POT_HIT",
        "fu": "DECORATED_POT_STEP",
        "fv": "DECORATED_POT_PLACE",
        "fw": "DECORATED_POT_SHATTER",
        "fx": "DEEPSLATE_BRICKS_BREAK",
        "fy": "DEEPSLATE_BRICKS_FALL",
        "fz": "DEEPSLATE_BRICKS_HIT",
        "fA": "DEEPSLATE_BRICKS_PLACE",
        "fB": "DEEPSLATE_BRICKS_STEP",
        "fC": "DEEPSLATE_BREAK",
        "fD": "DEEPSLATE_FALL",
        "fE": "DEEPSLATE_HIT",
        "fF": "DEEPSLATE_PLACE",
        "fG": "DEEPSLATE_STEP",
        "fH": "DEEPSLATE_TILES_BREAK",
        "fI": "DEEPSLATE_TILES_FALL",
        "fJ": "DEEPSLATE_TILES_HIT",
        "fK": "DEEPSLATE_TILES_PLACE",
        "fL": "DEEPSLATE_TILES_STEP",
        "fM": "DISPENSER_DISPENSE",
        "fN": "DISPENSER_FAIL",
        "fO": "DISPENSER_LAUNCH",
        "fP": "DOLPHIN_AMBIENT",
        "fQ": "DOLPHIN_AMBIENT_WATER",
        "fR": "DOLPHIN_ATTACK",
        "fS": "DOLPHIN_DEATH",
        "fT": "DOLPHIN_EAT",
        "fU": "DOLPHIN_HURT",
        "fV": "DOLPHIN_JUMP",
        "fW": "DOLPHIN_PLAY",
        "fX": "DOLPHIN_SPLASH",
        "fY": "DOLPHIN_SWIM",
        "fZ": "DONKEY_AMBIENT",
        "ga": "DONKEY_ANGRY",
        "gb": "DONKEY_CHEST",
        "gc": "DONKEY_DEATH",
        "gd": "DONKEY_EAT",
        "ge": "DONKEY_HURT",
        "gf": "DRIPSTONE_BLOCK_BREAK",
        "gg": "DRIPSTONE_BLOCK_STEP",
        "gh": "DRIPSTONE_BLOCK_PLACE",
        "gi": "DRIPSTONE_BLOCK_HIT",
        "gj": "DRIPSTONE_BLOCK_FALL",
        "gk": "POINTED_DRIPSTONE_BREAK",
        "gl": "POINTED_DRIPSTONE_STEP",
        "gm": "POINTED_DRIPSTONE_PLACE",
        "gn": "POINTED_DRIPSTONE_HIT",
        "go": "POINTED_DRIPSTONE_FALL",
        "gp": "POINTED_DRIPSTONE_LAND",
        "gq": "POINTED_DRIPSTONE_DRIP_LAVA",
        "gr": "POINTED_DRIPSTONE_DRIP_WATER",
        "gs": "POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON",
        "gt": "POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON",
        "gu": "BIG_DRIPLEAF_TILT_DOWN",
        "gv": "BIG_DRIPLEAF_TILT_UP",
        "gw": "DROWNED_AMBIENT",
        "gx": "DROWNED_AMBIENT_WATER",
        "gy": "DROWNED_DEATH",
        "gz": "DROWNED_DEATH_WATER",
        "gA": "DROWNED_HURT",
        "gB": "DROWNED_HURT_WATER",
        "gC": "DROWNED_SHOOT",
        "gD": "DROWNED_STEP",
        "gE": "DROWNED_SWIM",
        "gF": "DYE_USE",
        "gG": "EGG_THROW",
        "gH": "ELDER_GUARDIAN_AMBIENT",
        "gI": "ELDER_GUARDIAN_AMBIENT_LAND",
        "gJ": "ELDER_GUARDIAN_CURSE",
        "gK": "ELDER_GUARDIAN_DEATH",
        "gL": "ELDER_GUARDIAN_DEATH_LAND",
        "gM": "ELDER_GUARDIAN_FLOP",
        "gN": "ELDER_GUARDIAN_HURT",
        "gO": "ELDER_GUARDIAN_HURT_LAND",
        "gP": "ELYTRA_FLYING",
        "gQ": "ENCHANTMENT_TABLE_USE",
        "gR": "ENDER_CHEST_CLOSE",
        "gS": "ENDER_CHEST_OPEN",
        "gT": "ENDER_DRAGON_AMBIENT",
        "gU": "ENDER_DRAGON_DEATH",
        "gV": "DRAGON_FIREBALL_EXPLODE",
        "gW": "ENDER_DRAGON_FLAP",
        "gX": "ENDER_DRAGON_GROWL",
        "gY": "ENDER_DRAGON_HURT",
        "gZ": "ENDER_DRAGON_SHOOT",
        "ha": "ENDER_EYE_DEATH",
        "hb": "ENDER_EYE_LAUNCH",
        "hc": "ENDERMAN_AMBIENT",
        "hd": "ENDERMAN_DEATH",
        "he": "ENDERMAN_HURT",
        "hf": "ENDERMAN_SCREAM",
        "hg": "ENDERMAN_STARE",
        "hh": "ENDERMAN_TELEPORT",
        "hi": "ENDERMITE_AMBIENT",
        "hj": "ENDERMITE_DEATH",
        "hk": "ENDERMITE_HURT",
        "hl": "ENDERMITE_STEP",
        "hm": "ENDER_PEARL_THROW",
        "hn": "END_GATEWAY_SPAWN",
        "ho": "END_PORTAL_FRAME_FILL",
        "hp": "END_PORTAL_SPAWN",
        "hq": "EVOKER_AMBIENT",
        "hr": "EVOKER_CAST_SPELL",
        "hs": "EVOKER_CELEBRATE",
        "ht": "EVOKER_DEATH",
        "hu": "EVOKER_FANGS_ATTACK",
        "hv": "EVOKER_HURT",
        "hw": "EVOKER_PREPARE_ATTACK",
        "hx": "EVOKER_PREPARE_SUMMON",
        "hy": "EVOKER_PREPARE_WOLOLO",
        "hz": "EXPERIENCE_BOTTLE_THROW",
        "hA": "EXPERIENCE_ORB_PICKUP",
        "hB": "FENCE_GATE_CLOSE",
        "hC": "FENCE_GATE_OPEN",
        "hD": "FIRECHARGE_USE",
        "hE": "FIREWORK_ROCKET_BLAST",
        "hF": "FIREWORK_ROCKET_BLAST_FAR",
        "hG": "FIREWORK_ROCKET_LARGE_BLAST",
        "hH": "FIREWORK_ROCKET_LARGE_BLAST_FAR",
        "hI": "FIREWORK_ROCKET_LAUNCH",
        "hJ": "FIREWORK_ROCKET_SHOOT",
        "hK": "FIREWORK_ROCKET_TWINKLE",
        "hL": "FIREWORK_ROCKET_TWINKLE_FAR",
        "hM": "FIRE_AMBIENT",
        "hN": "FIRE_EXTINGUISH",
        "hO": "FISH_SWIM",
        "hP": "FISHING_BOBBER_RETRIEVE",
        "hQ": "FISHING_BOBBER_SPLASH",
        "hR": "FISHING_BOBBER_THROW",
        "hS": "FLINTANDSTEEL_USE",
        "hT": "FLOWERING_AZALEA_BREAK",
        "hU": "FLOWERING_AZALEA_FALL",
        "hV": "FLOWERING_AZALEA_HIT",
        "hW": "FLOWERING_AZALEA_PLACE",
        "hX": "FLOWERING_AZALEA_STEP",
        "hY": "FOX_AGGRO",
        "hZ": "FOX_AMBIENT",
        "ia": "FOX_BITE",
        "ib": "FOX_DEATH",
        "ic": "FOX_EAT",
        "id": "FOX_HURT",
        "ie": "FOX_SCREECH",
        "if": "FOX_SLEEP",
        "ig": "FOX_SNIFF",
        "ih": "FOX_SPIT",
        "ii": "FOX_TELEPORT",
        "ij": "SUSPICIOUS_SAND_BREAK",
        "ik": "SUSPICIOUS_SAND_STEP",
        "il": "SUSPICIOUS_SAND_PLACE",
        "im": "SUSPICIOUS_SAND_HIT",
        "in": "SUSPICIOUS_SAND_FALL",
        "io": "SUSPICIOUS_GRAVEL_BREAK",
        "ip": "SUSPICIOUS_GRAVEL_STEP",
        "iq": "SUSPICIOUS_GRAVEL_PLACE",
        "ir": "SUSPICIOUS_GRAVEL_HIT",
        "is": "SUSPICIOUS_GRAVEL_FALL",
        "it": "FROGLIGHT_BREAK",
        "iu": "FROGLIGHT_FALL",
        "iv": "FROGLIGHT_HIT",
        "iw": "FROGLIGHT_PLACE",
        "ix": "FROGLIGHT_STEP",
        "iy": "FROGSPAWNSTEP",
        "iz": "FROGSPAWN_BREAK",
        "iA": "FROGSPAWN_FALL",
        "iB": "FROGSPAWN_HATCH",
        "iC": "FROGSPAWN_HIT",
        "iD": "FROGSPAWN_PLACE",
        "iE": "FROG_AMBIENT",
        "iF": "FROG_DEATH",
        "iG": "FROG_EAT",
        "iH": "FROG_HURT",
        "iI": "FROG_LAY_SPAWN",
        "iJ": "FROG_LONG_JUMP",
        "iK": "FROG_STEP",
        "iL": "FROG_TONGUE",
        "iM": "ROOTS_BREAK",
        "iN": "ROOTS_STEP",
        "iO": "ROOTS_PLACE",
        "iP": "ROOTS_HIT",
        "iQ": "ROOTS_FALL",
        "iR": "FURNACE_FIRE_CRACKLE",
        "iS": "GENERIC_BIG_FALL",
        "iT": "GENERIC_BURN",
        "iU": "GENERIC_DEATH",
        "iV": "GENERIC_DRINK",
        "iW": "GENERIC_EAT",
        "iX": "GENERIC_EXPLODE",
        "iY": "GENERIC_EXTINGUISH_FIRE",
        "iZ": "GENERIC_HURT",
        "ja": "GENERIC_SMALL_FALL",
        "jb": "GENERIC_SPLASH",
        "jc": "GENERIC_SWIM",
        "jd": "GHAST_AMBIENT",
        "je": "GHAST_DEATH",
        "jf": "GHAST_HURT",
        "jg": "GHAST_SCREAM",
        "jh": "GHAST_SHOOT",
        "ji": "GHAST_WARN",
        "jj": "GILDED_BLACKSTONE_BREAK",
        "jk": "GILDED_BLACKSTONE_FALL",
        "jl": "GILDED_BLACKSTONE_HIT",
        "jm": "GILDED_BLACKSTONE_PLACE",
        "jn": "GILDED_BLACKSTONE_STEP",
        "jo": "GLASS_BREAK",
        "jp": "GLASS_FALL",
        "jq": "GLASS_HIT",
        "jr": "GLASS_PLACE",
        "js": "GLASS_STEP",
        "jt": "GLOW_INK_SAC_USE",
        "ju": "GLOW_ITEM_FRAME_ADD_ITEM",
        "jv": "GLOW_ITEM_FRAME_BREAK",
        "jw": "GLOW_ITEM_FRAME_PLACE",
        "jx": "GLOW_ITEM_FRAME_REMOVE_ITEM",
        "jy": "GLOW_ITEM_FRAME_ROTATE_ITEM",
        "jz": "GLOW_SQUID_AMBIENT",
        "jA": "GLOW_SQUID_DEATH",
        "jB": "GLOW_SQUID_HURT",
        "jC": "GLOW_SQUID_SQUIRT",
        "jD": "GOAT_AMBIENT",
        "jE": "GOAT_DEATH",
        "jF": "GOAT_EAT",
        "jG": "GOAT_HURT",
        "jH": "GOAT_LONG_JUMP",
        "jI": "GOAT_MILK",
        "jJ": "GOAT_PREPARE_RAM",
        "jK": "GOAT_RAM_IMPACT",
        "jL": "GOAT_HORN_BREAK",
        "jM": "GOAT_HORN_PLAY",
        "jN": "GOAT_SCREAMING_AMBIENT",
        "jO": "GOAT_SCREAMING_DEATH",
        "jP": "GOAT_SCREAMING_EAT",
        "jQ": "GOAT_SCREAMING_HURT",
        "jR": "GOAT_SCREAMING_LONG_JUMP",
        "jS": "GOAT_SCREAMING_MILK",
        "jT": "GOAT_SCREAMING_PREPARE_RAM",
        "jU": "GOAT_SCREAMING_RAM_IMPACT",
        "jV": "GOAT_SCREAMING_HORN_BREAK",
        "jW": "GOAT_STEP",
        "jX": "GRASS_BREAK",
        "jY": "GRASS_FALL",
        "jZ": "GRASS_HIT",
        "ka": "GRASS_PLACE",
        "kb": "GRASS_STEP",
        "kc": "GRAVEL_BREAK",
        "kd": "GRAVEL_FALL",
        "ke": "GRAVEL_HIT",
        "kf": "GRAVEL_PLACE",
        "kg": "GRAVEL_STEP",
        "kh": "GRINDSTONE_USE",
        "ki": "GROWING_PLANT_CROP",
        "kj": "GUARDIAN_AMBIENT",
        "kk": "GUARDIAN_AMBIENT_LAND",
        "kl": "GUARDIAN_ATTACK",
        "km": "GUARDIAN_DEATH",
        "kn": "GUARDIAN_DEATH_LAND",
        "ko": "GUARDIAN_FLOP",
        "kp": "GUARDIAN_HURT",
        "kq": "GUARDIAN_HURT_LAND",
        "kr": "HANGING_ROOTS_BREAK",
        "ks": "HANGING_ROOTS_FALL",
        "kt": "HANGING_ROOTS_HIT",
        "ku": "HANGING_ROOTS_PLACE",
        "kv": "HANGING_ROOTS_STEP",
        "kw": "HANGING_SIGN_STEP",
        "kx": "HANGING_SIGN_BREAK",
        "ky": "HANGING_SIGN_FALL",
        "kz": "HANGING_SIGN_HIT",
        "kA": "HANGING_SIGN_PLACE",
        "kB": "NETHER_WOOD_HANGING_SIGN_STEP",
        "kC": "NETHER_WOOD_HANGING_SIGN_BREAK",
        "kD": "NETHER_WOOD_HANGING_SIGN_FALL",
        "kE": "NETHER_WOOD_HANGING_SIGN_HIT",
        "kF": "NETHER_WOOD_HANGING_SIGN_PLACE",
        "kG": "BAMBOO_WOOD_HANGING_SIGN_STEP",
        "kH": "BAMBOO_WOOD_HANGING_SIGN_BREAK",
        "kI": "BAMBOO_WOOD_HANGING_SIGN_FALL",
        "kJ": "BAMBOO_WOOD_HANGING_SIGN_HIT",
        "kK": "BAMBOO_WOOD_HANGING_SIGN_PLACE",
        "kL": "HOE_TILL",
        "kM": "HOGLIN_AMBIENT",
        "kN": "HOGLIN_ANGRY",
        "kO": "HOGLIN_ATTACK",
        "kP": "HOGLIN_CONVERTED_TO_ZOMBIFIED",
        "kQ": "HOGLIN_DEATH",
        "kR": "HOGLIN_HURT",
        "kS": "HOGLIN_RETREAT",
        "kT": "HOGLIN_STEP",
        "kU": "HONEY_BLOCK_BREAK",
        "kV": "HONEY_BLOCK_FALL",
        "kW": "HONEY_BLOCK_HIT",
        "kX": "HONEY_BLOCK_PLACE",
        "kY": "HONEY_BLOCK_SLIDE",
        "kZ": "HONEY_BLOCK_STEP",
        "la": "HONEYCOMB_WAX_ON",
        "lb": "HONEY_DRINK",
        "lc": "GOAT_HORN_VARIANT_COUNT",
        "ld": "GOAT_HORN_SOUND_VARIANTS",
        "le": "HORSE_AMBIENT",
        "lf": "HORSE_ANGRY",
        "lg": "HORSE_ARMOR",
        "lh": "HORSE_BREATHE",
        "li": "HORSE_DEATH",
        "lj": "HORSE_EAT",
        "lk": "HORSE_GALLOP",
        "ll": "HORSE_HURT",
        "lm": "HORSE_JUMP",
        "ln": "HORSE_LAND",
        "lo": "HORSE_SADDLE",
        "lp": "HORSE_STEP",
        "lq": "HORSE_STEP_WOOD",
        "lr": "HOSTILE_BIG_FALL",
        "ls": "HOSTILE_DEATH",
        "lt": "HOSTILE_HURT",
        "lu": "HOSTILE_SMALL_FALL",
        "lv": "HOSTILE_SPLASH",
        "lw": "HOSTILE_SWIM",
        "lx": "HUSK_AMBIENT",
        "ly": "HUSK_CONVERTED_TO_ZOMBIE",
        "lz": "HUSK_DEATH",
        "lA": "HUSK_HURT",
        "lB": "HUSK_STEP",
        "lC": "ILLUSIONER_AMBIENT",
        "lD": "ILLUSIONER_CAST_SPELL",
        "lE": "ILLUSIONER_DEATH",
        "lF": "ILLUSIONER_HURT",
        "lG": "ILLUSIONER_MIRROR_MOVE",
        "lH": "ILLUSIONER_PREPARE_BLINDNESS",
        "lI": "ILLUSIONER_PREPARE_MIRROR",
        "lJ": "INK_SAC_USE",
        "lK": "IRON_DOOR_CLOSE",
        "lL": "IRON_DOOR_OPEN",
        "lM": "IRON_GOLEM_ATTACK",
        "lN": "IRON_GOLEM_DAMAGE",
        "lO": "IRON_GOLEM_DEATH",
        "lP": "IRON_GOLEM_HURT",
        "lQ": "IRON_GOLEM_REPAIR",
        "lR": "IRON_GOLEM_STEP",
        "lS": "IRON_TRAPDOOR_CLOSE",
        "lT": "IRON_TRAPDOOR_OPEN",
        "lU": "ITEM_FRAME_ADD_ITEM",
        "lV": "ITEM_FRAME_BREAK",
        "lW": "ITEM_FRAME_PLACE",
        "lX": "ITEM_FRAME_REMOVE_ITEM",
        "lY": "ITEM_FRAME_ROTATE_ITEM",
        "lZ": "ITEM_BREAK",
        "ma": "ITEM_PICKUP",
        "mb": "LADDER_BREAK",
        "mc": "LADDER_FALL",
        "md": "LADDER_HIT",
        "me": "LADDER_PLACE",
        "mf": "LADDER_STEP",
        "mg": "LANTERN_BREAK",
        "mh": "LANTERN_FALL",
        "mi": "LANTERN_HIT",
        "mj": "LANTERN_PLACE",
        "mk": "LANTERN_STEP",
        "ml": "LARGE_AMETHYST_BUD_BREAK",
        "mm": "LARGE_AMETHYST_BUD_PLACE",
        "mn": "LAVA_AMBIENT",
        "mo": "LAVA_EXTINGUISH",
        "mp": "LAVA_POP",
        "mq": "LEASH_KNOT_BREAK",
        "mr": "LEASH_KNOT_PLACE",
        "ms": "LEVER_CLICK",
        "mt": "LIGHTNING_BOLT_IMPACT",
        "mu": "LIGHTNING_BOLT_THUNDER",
        "mv": "LINGERING_POTION_THROW",
        "mw": "LLAMA_AMBIENT",
        "mx": "LLAMA_ANGRY",
        "my": "LLAMA_CHEST",
        "mz": "LLAMA_DEATH",
        "mA": "LLAMA_EAT",
        "mB": "LLAMA_HURT",
        "mC": "LLAMA_SPIT",
        "mD": "LLAMA_STEP",
        "mE": "LLAMA_SWAG",
        "mF": "MAGMA_CUBE_DEATH_SMALL",
        "mG": "LODESTONE_BREAK",
        "mH": "LODESTONE_STEP",
        "mI": "LODESTONE_PLACE",
        "mJ": "LODESTONE_HIT",
        "mK": "LODESTONE_FALL",
        "mL": "LODESTONE_COMPASS_LOCK",
        "mM": "MAGMA_CUBE_DEATH",
        "mN": "MAGMA_CUBE_HURT",
        "mO": "MAGMA_CUBE_HURT_SMALL",
        "mP": "MAGMA_CUBE_JUMP",
        "mQ": "MAGMA_CUBE_SQUISH",
        "mR": "MAGMA_CUBE_SQUISH_SMALL",
        "mS": "MANGROVE_ROOTS_BREAK",
        "mT": "MANGROVE_ROOTS_FALL",
        "mU": "MANGROVE_ROOTS_HIT",
        "mV": "MANGROVE_ROOTS_PLACE",
        "mW": "MANGROVE_ROOTS_STEP",
        "mX": "MEDIUM_AMETHYST_BUD_BREAK",
        "mY": "MEDIUM_AMETHYST_BUD_PLACE",
        "mZ": "METAL_BREAK",
        "na": "METAL_FALL",
        "nb": "METAL_HIT",
        "nc": "METAL_PLACE",
        "nd": "METAL_PRESSURE_PLATE_CLICK_OFF",
        "ne": "METAL_PRESSURE_PLATE_CLICK_ON",
        "nf": "METAL_STEP",
        "ng": "MINECART_INSIDE_UNDERWATER",
        "nh": "MINECART_INSIDE",
        "ni": "MINECART_RIDING",
        "nj": "MOOSHROOM_CONVERT",
        "nk": "MOOSHROOM_EAT",
        "nl": "MOOSHROOM_MILK",
        "nm": "MOOSHROOM_MILK_SUSPICIOUSLY",
        "nn": "MOOSHROOM_SHEAR",
        "no": "MOSS_CARPET_BREAK",
        "np": "MOSS_CARPET_FALL",
        "nq": "MOSS_CARPET_HIT",
        "nr": "MOSS_CARPET_PLACE",
        "ns": "MOSS_CARPET_STEP",
        "nt": "PINK_PETALS_BREAK",
        "nu": "PINK_PETALS_FALL",
        "nv": "PINK_PETALS_HIT",
        "nw": "PINK_PETALS_PLACE",
        "nx": "PINK_PETALS_STEP",
        "ny": "MOSS_BREAK",
        "nz": "MOSS_FALL",
        "nA": "MOSS_HIT",
        "nB": "MOSS_PLACE",
        "nC": "MOSS_STEP",
        "nD": "MUD_BREAK",
        "nE": "MUD_FALL",
        "nF": "MUD_HIT",
        "nG": "MUD_PLACE",
        "nH": "MUD_STEP",
        "nI": "MUD_BRICKS_BREAK",
        "nJ": "MUD_BRICKS_FALL",
        "nK": "MUD_BRICKS_HIT",
        "nL": "MUD_BRICKS_PLACE",
        "nM": "MUD_BRICKS_STEP",
        "nN": "MUDDY_MANGROVE_ROOTS_BREAK",
        "nO": "MUDDY_MANGROVE_ROOTS_FALL",
        "nP": "MUDDY_MANGROVE_ROOTS_HIT",
        "nQ": "MUDDY_MANGROVE_ROOTS_PLACE",
        "nR": "MUDDY_MANGROVE_ROOTS_STEP",
        "nS": "MULE_AMBIENT",
        "nT": "MULE_ANGRY",
        "nU": "MULE_CHEST",
        "nV": "MULE_DEATH",
        "nW": "MULE_EAT",
        "nX": "MULE_HURT",
        "nY": "MUSIC_CREATIVE",
        "nZ": "MUSIC_CREDITS",
        "oa": "MUSIC_DISC_5",
        "ob": "MUSIC_DISC_11",
        "oc": "MUSIC_DISC_13",
        "od": "MUSIC_DISC_BLOCKS",
        "oe": "MUSIC_DISC_CAT",
        "of": "MUSIC_DISC_CHIRP",
        "og": "MUSIC_DISC_FAR",
        "oh": "MUSIC_DISC_MALL",
        "oi": "MUSIC_DISC_MELLOHI",
        "oj": "MUSIC_DISC_PIGSTEP",
        "ok": "MUSIC_DISC_STAL",
        "ol": "MUSIC_DISC_STRAD",
        "om": "MUSIC_DISC_WAIT",
        "on": "MUSIC_DISC_WARD",
        "oo": "MUSIC_DISC_OTHERSIDE",
        "op": "MUSIC_DISC_RELIC",
        "oq": "MUSIC_DRAGON",
        "or": "MUSIC_END",
        "os": "MUSIC_GAME",
        "ot": "MUSIC_MENU",
        "ou": "MUSIC_BIOME_BASALT_DELTAS",
        "ov": "MUSIC_BIOME_CRIMSON_FOREST",
        "ow": "MUSIC_BIOME_DEEP_DARK",
        "ox": "MUSIC_BIOME_DRIPSTONE_CAVES",
        "oy": "MUSIC_BIOME_GROVE",
        "oz": "MUSIC_BIOME_JAGGED_PEAKS",
        "oA": "MUSIC_BIOME_LUSH_CAVES",
        "oB": "MUSIC_BIOME_SWAMP",
        "oC": "MUSIC_BIOME_FOREST",
        "oD": "MUSIC_BIOME_OLD_GROWTH_TAIGA",
        "oE": "MUSIC_BIOME_MEADOW",
        "oF": "MUSIC_BIOME_CHERRY_GROVE",
        "oG": "MUSIC_BIOME_NETHER_WASTES",
        "oH": "MUSIC_BIOME_FROZEN_PEAKS",
        "oI": "MUSIC_BIOME_SNOWY_SLOPES",
        "oJ": "MUSIC_BIOME_SOUL_SAND_VALLEY",
        "oK": "MUSIC_BIOME_STONY_PEAKS",
        "oL": "MUSIC_BIOME_WARPED_FOREST",
        "oM": "MUSIC_BIOME_FLOWER_FOREST",
        "oN": "MUSIC_BIOME_DESERT",
        "oO": "MUSIC_BIOME_BADLANDS",
        "oP": "MUSIC_BIOME_JUNGLE",
        "oQ": "MUSIC_BIOME_SPARSE_JUNGLE",
        "oR": "MUSIC_BIOME_BAMBOO_JUNGLE",
        "oS": "MUSIC_UNDER_WATER",
        "oT": "NETHER_BRICKS_BREAK",
        "oU": "NETHER_BRICKS_STEP",
        "oV": "NETHER_BRICKS_PLACE",
        "oW": "NETHER_BRICKS_HIT",
        "oX": "NETHER_BRICKS_FALL",
        "oY": "NETHER_WART_BREAK",
        "oZ": "NETHER_WART_PLANTED",
        "pa": "NETHER_WOOD_BREAK",
        "pb": "NETHER_WOOD_FALL",
        "pc": "NETHER_WOOD_HIT",
        "pd": "NETHER_WOOD_PLACE",
        "pe": "NETHER_WOOD_STEP",
        "pf": "NETHER_WOOD_DOOR_CLOSE",
        "pg": "NETHER_WOOD_DOOR_OPEN",
        "ph": "NETHER_WOOD_TRAPDOOR_CLOSE",
        "pi": "NETHER_WOOD_TRAPDOOR_OPEN",
        "pj": "NETHER_WOOD_BUTTON_CLICK_OFF",
        "pk": "NETHER_WOOD_BUTTON_CLICK_ON",
        "pl": "NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF",
        "pm": "NETHER_WOOD_PRESSURE_PLATE_CLICK_ON",
        "pn": "NETHER_WOOD_FENCE_GATE_CLOSE",
        "po": "NETHER_WOOD_FENCE_GATE_OPEN",
        "pp": "EMPTY",
        "pq": "PACKED_MUD_BREAK",
        "pr": "PACKED_MUD_FALL",
        "ps": "PACKED_MUD_HIT",
        "pt": "PACKED_MUD_PLACE",
        "pu": "PACKED_MUD_STEP",
        "pv": "STEM_BREAK",
        "pw": "STEM_STEP",
        "px": "STEM_PLACE",
        "py": "STEM_HIT",
        "pz": "STEM_FALL",
        "pA": "NYLIUM_BREAK",
        "pB": "NYLIUM_STEP",
        "pC": "NYLIUM_PLACE",
        "pD": "NYLIUM_HIT",
        "pE": "NYLIUM_FALL",
        "pF": "NETHER_SPROUTS_BREAK",
        "pG": "NETHER_SPROUTS_STEP",
        "pH": "NETHER_SPROUTS_PLACE",
        "pI": "NETHER_SPROUTS_HIT",
        "pJ": "NETHER_SPROUTS_FALL",
        "pK": "FUNGUS_BREAK",
        "pL": "FUNGUS_STEP",
        "pM": "FUNGUS_PLACE",
        "pN": "FUNGUS_HIT",
        "pO": "FUNGUS_FALL",
        "pP": "WEEPING_VINES_BREAK",
        "pQ": "WEEPING_VINES_STEP",
        "pR": "WEEPING_VINES_PLACE",
        "pS": "WEEPING_VINES_HIT",
        "pT": "WEEPING_VINES_FALL",
        "pU": "WART_BLOCK_BREAK",
        "pV": "WART_BLOCK_STEP",
        "pW": "WART_BLOCK_PLACE",
        "pX": "WART_BLOCK_HIT",
        "pY": "WART_BLOCK_FALL",
        "pZ": "NETHERITE_BLOCK_BREAK",
        "qa": "NETHERITE_BLOCK_STEP",
        "qb": "NETHERITE_BLOCK_PLACE",
        "qc": "NETHERITE_BLOCK_HIT",
        "qd": "NETHERITE_BLOCK_FALL",
        "qe": "NETHERRACK_BREAK",
        "qf": "NETHERRACK_STEP",
        "qg": "NETHERRACK_PLACE",
        "qh": "NETHERRACK_HIT",
        "qi": "NETHERRACK_FALL",
        "qj": "NOTE_BLOCK_BASEDRUM",
        "qk": "NOTE_BLOCK_BASS",
        "ql": "NOTE_BLOCK_BELL",
        "qm": "NOTE_BLOCK_CHIME",
        "qn": "NOTE_BLOCK_FLUTE",
        "qo": "NOTE_BLOCK_GUITAR",
        "qp": "NOTE_BLOCK_HARP",
        "qq": "NOTE_BLOCK_HAT",
        "qr": "NOTE_BLOCK_PLING",
        "qs": "NOTE_BLOCK_SNARE",
        "qt": "NOTE_BLOCK_XYLOPHONE",
        "qu": "NOTE_BLOCK_IRON_XYLOPHONE",
        "qv": "NOTE_BLOCK_COW_BELL",
        "qw": "NOTE_BLOCK_DIDGERIDOO",
        "qx": "NOTE_BLOCK_BIT",
        "qy": "NOTE_BLOCK_BANJO",
        "qz": "NOTE_BLOCK_IMITATE_ZOMBIE",
        "qA": "NOTE_BLOCK_IMITATE_SKELETON",
        "qB": "NOTE_BLOCK_IMITATE_CREEPER",
        "qC": "NOTE_BLOCK_IMITATE_ENDER_DRAGON",
        "qD": "NOTE_BLOCK_IMITATE_WITHER_SKELETON",
        "qE": "NOTE_BLOCK_IMITATE_PIGLIN",
        "qF": "OCELOT_HURT",
        "qG": "OCELOT_AMBIENT",
        "qH": "OCELOT_DEATH",
        "qI": "PAINTING_BREAK",
        "qJ": "PAINTING_PLACE",
        "qK": "PANDA_PRE_SNEEZE",
        "qL": "PANDA_SNEEZE",
        "qM": "PANDA_AMBIENT",
        "qN": "PANDA_DEATH",
        "qO": "PANDA_EAT",
        "qP": "PANDA_STEP",
        "qQ": "PANDA_CANT_BREED",
        "qR": "PANDA_AGGRESSIVE_AMBIENT",
        "qS": "PANDA_WORRIED_AMBIENT",
        "qT": "PANDA_HURT",
        "qU": "PANDA_BITE",
        "qV": "PARROT_AMBIENT",
        "qW": "PARROT_DEATH",
        "qX": "PARROT_EAT",
        "qY": "PARROT_FLY",
        "qZ": "PARROT_HURT",
        "ra": "PARROT_IMITATE_BLAZE",
        "rb": "PARROT_IMITATE_CREEPER",
        "rc": "PARROT_IMITATE_DROWNED",
        "rd": "PARROT_IMITATE_ELDER_GUARDIAN",
        "re": "PARROT_IMITATE_ENDER_DRAGON",
        "rf": "PARROT_IMITATE_ENDERMITE",
        "rg": "PARROT_IMITATE_EVOKER",
        "rh": "PARROT_IMITATE_GHAST",
        "ri": "PARROT_IMITATE_GUARDIAN",
        "rj": "PARROT_IMITATE_HOGLIN",
        "rk": "PARROT_IMITATE_HUSK",
        "rl": "PARROT_IMITATE_ILLUSIONER",
        "rm": "PARROT_IMITATE_MAGMA_CUBE",
        "rn": "PARROT_IMITATE_PHANTOM",
        "ro": "PARROT_IMITATE_PIGLIN",
        "rp": "PARROT_IMITATE_PIGLIN_BRUTE",
        "rq": "PARROT_IMITATE_PILLAGER",
        "rr": "PARROT_IMITATE_RAVAGER",
        "rs": "PARROT_IMITATE_SHULKER",
        "rt": "PARROT_IMITATE_SILVERFISH",
        "ru": "PARROT_IMITATE_SKELETON",
        "rv": "PARROT_IMITATE_SLIME",
        "rw": "PARROT_IMITATE_SPIDER",
        "rx": "PARROT_IMITATE_STRAY",
        "ry": "PARROT_IMITATE_VEX",
        "rz": "PARROT_IMITATE_VINDICATOR",
        "rA": "PARROT_IMITATE_WARDEN",
        "rB": "PARROT_IMITATE_WITCH",
        "rC": "PARROT_IMITATE_WITHER",
        "rD": "PARROT_IMITATE_WITHER_SKELETON",
        "rE": "PARROT_IMITATE_ZOGLIN",
        "rF": "PARROT_IMITATE_ZOMBIE",
        "rG": "PARROT_IMITATE_ZOMBIE_VILLAGER",
        "rH": "PARROT_STEP",
        "rI": "PHANTOM_AMBIENT",
        "rJ": "PHANTOM_BITE",
        "rK": "PHANTOM_DEATH",
        "rL": "PHANTOM_FLAP",
        "rM": "PHANTOM_HURT",
        "rN": "PHANTOM_SWOOP",
        "rO": "PIG_AMBIENT",
        "rP": "PIG_DEATH",
        "rQ": "PIG_HURT",
        "rR": "PIG_SADDLE",
        "rS": "PIG_STEP",
        "rT": "PIGLIN_ADMIRING_ITEM",
        "rU": "PIGLIN_AMBIENT",
        "rV": "PIGLIN_ANGRY",
        "rW": "PIGLIN_CELEBRATE",
        "rX": "PIGLIN_DEATH",
        "rY": "PIGLIN_JEALOUS",
        "rZ": "PIGLIN_HURT",
        "sa": "PIGLIN_RETREAT",
        "sb": "PIGLIN_STEP",
        "sc": "PIGLIN_CONVERTED_TO_ZOMBIFIED",
        "sd": "PIGLIN_BRUTE_AMBIENT",
        "se": "PIGLIN_BRUTE_ANGRY",
        "sf": "PIGLIN_BRUTE_DEATH",
        "sg": "PIGLIN_BRUTE_HURT",
        "sh": "PIGLIN_BRUTE_STEP",
        "si": "PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED",
        "sj": "PILLAGER_AMBIENT",
        "sk": "PILLAGER_CELEBRATE",
        "sl": "PILLAGER_DEATH",
        "sm": "PILLAGER_HURT",
        "sn": "PISTON_CONTRACT",
        "so": "PISTON_EXTEND",
        "sp": "PLAYER_ATTACK_CRIT",
        "sq": "PLAYER_ATTACK_KNOCKBACK",
        "sr": "PLAYER_ATTACK_NODAMAGE",
        "ss": "PLAYER_ATTACK_STRONG",
        "st": "PLAYER_ATTACK_SWEEP",
        "su": "PLAYER_ATTACK_WEAK",
        "sv": "PLAYER_BIG_FALL",
        "sw": "PLAYER_BREATH",
        "sx": "PLAYER_BURP",
        "sy": "PLAYER_DEATH",
        "sz": "PLAYER_HURT",
        "sA": "PLAYER_HURT_DROWN",
        "sB": "PLAYER_HURT_FREEZE",
        "sC": "PLAYER_HURT_ON_FIRE",
        "sD": "PLAYER_HURT_SWEET_BERRY_BUSH",
        "sE": "PLAYER_LEVELUP",
        "sF": "PLAYER_SMALL_FALL",
        "sG": "PLAYER_SPLASH",
        "sH": "PLAYER_SPLASH_HIGH_SPEED",
        "sI": "PLAYER_SWIM",
        "sJ": "POLAR_BEAR_AMBIENT",
        "sK": "POLAR_BEAR_AMBIENT_BABY",
        "sL": "POLAR_BEAR_DEATH",
        "sM": "POLAR_BEAR_HURT",
        "sN": "POLAR_BEAR_STEP",
        "sO": "POLAR_BEAR_WARNING",
        "sP": "POLISHED_DEEPSLATE_BREAK",
        "sQ": "POLISHED_DEEPSLATE_FALL",
        "sR": "POLISHED_DEEPSLATE_HIT",
        "sS": "POLISHED_DEEPSLATE_PLACE",
        "sT": "POLISHED_DEEPSLATE_STEP",
        "sU": "PORTAL_AMBIENT",
        "sV": "PORTAL_TRAVEL",
        "sW": "PORTAL_TRIGGER",
        "sX": "POWDER_SNOW_BREAK",
        "sY": "POWDER_SNOW_FALL",
        "sZ": "POWDER_SNOW_HIT",
        "ta": "POWDER_SNOW_PLACE",
        "tb": "POWDER_SNOW_STEP",
        "tc": "PUFFER_FISH_AMBIENT",
        "td": "PUFFER_FISH_BLOW_OUT",
        "te": "PUFFER_FISH_BLOW_UP",
        "tf": "PUFFER_FISH_DEATH",
        "tg": "PUFFER_FISH_FLOP",
        "th": "PUFFER_FISH_HURT",
        "ti": "PUFFER_FISH_STING",
        "tj": "PUMPKIN_CARVE",
        "tk": "RABBIT_AMBIENT",
        "tl": "RABBIT_ATTACK",
        "tm": "RABBIT_DEATH",
        "tn": "RABBIT_HURT",
        "to": "RABBIT_JUMP",
        "tp": "RAID_HORN",
        "tq": "RAVAGER_AMBIENT",
        "tr": "RAVAGER_ATTACK",
        "ts": "RAVAGER_CELEBRATE",
        "tt": "RAVAGER_DEATH",
        "tu": "RAVAGER_HURT",
        "tv": "RAVAGER_STEP",
        "tw": "RAVAGER_STUNNED",
        "tx": "RAVAGER_ROAR",
        "ty": "NETHER_GOLD_ORE_BREAK",
        "tz": "NETHER_GOLD_ORE_FALL",
        "tA": "NETHER_GOLD_ORE_HIT",
        "tB": "NETHER_GOLD_ORE_PLACE",
        "tC": "NETHER_GOLD_ORE_STEP",
        "tD": "NETHER_ORE_BREAK",
        "tE": "NETHER_ORE_FALL",
        "tF": "NETHER_ORE_HIT",
        "tG": "NETHER_ORE_PLACE",
        "tH": "NETHER_ORE_STEP",
        "tI": "REDSTONE_TORCH_BURNOUT",
        "tJ": "RESPAWN_ANCHOR_AMBIENT",
        "tK": "RESPAWN_ANCHOR_CHARGE",
        "tL": "RESPAWN_ANCHOR_DEPLETE",
        "tM": "RESPAWN_ANCHOR_SET_SPAWN",
        "tN": "ROOTED_DIRT_BREAK",
        "tO": "ROOTED_DIRT_FALL",
        "tP": "ROOTED_DIRT_HIT",
        "tQ": "ROOTED_DIRT_PLACE",
        "tR": "ROOTED_DIRT_STEP",
        "tS": "SALMON_AMBIENT",
        "tT": "SALMON_DEATH",
        "tU": "SALMON_FLOP",
        "tV": "SALMON_HURT",
        "tW": "SAND_BREAK",
        "tX": "SAND_FALL",
        "tY": "SAND_HIT",
        "tZ": "SAND_PLACE",
        "ua": "SAND_STEP",
        "ub": "SCAFFOLDING_BREAK",
        "uc": "SCAFFOLDING_FALL",
        "ud": "SCAFFOLDING_HIT",
        "ue": "SCAFFOLDING_PLACE",
        "uf": "SCAFFOLDING_STEP",
        "ug": "SCULK_BLOCK_SPREAD",
        "uh": "SCULK_BLOCK_CHARGE",
        "ui": "SCULK_BLOCK_BREAK",
        "uj": "SCULK_BLOCK_FALL",
        "uk": "SCULK_BLOCK_HIT",
        "ul": "SCULK_BLOCK_PLACE",
        "um": "SCULK_BLOCK_STEP",
        "un": "SCULK_CATALYST_BLOOM",
        "uo": "SCULK_CATALYST_BREAK",
        "up": "SCULK_CATALYST_FALL",
        "uq": "SCULK_CATALYST_HIT",
        "ur": "SCULK_CATALYST_PLACE",
        "us": "SCULK_CATALYST_STEP",
        "ut": "SCULK_CLICKING",
        "uu": "SCULK_CLICKING_STOP",
        "uv": "SCULK_SENSOR_BREAK",
        "uw": "SCULK_SENSOR_FALL",
        "ux": "SCULK_SENSOR_HIT",
        "uy": "SCULK_SENSOR_PLACE",
        "uz": "SCULK_SENSOR_STEP",
        "uA": "SCULK_SHRIEKER_BREAK",
        "uB": "SCULK_SHRIEKER_FALL",
        "uC": "SCULK_SHRIEKER_HIT",
        "uD": "SCULK_SHRIEKER_PLACE",
        "uE": "SCULK_SHRIEKER_SHRIEK",
        "uF": "SCULK_SHRIEKER_STEP",
        "uG": "SCULK_VEIN_BREAK",
        "uH": "SCULK_VEIN_FALL",
        "uI": "SCULK_VEIN_HIT",
        "uJ": "SCULK_VEIN_PLACE",
        "uK": "SCULK_VEIN_STEP",
        "uL": "SHEEP_AMBIENT",
        "uM": "SHEEP_DEATH",
        "uN": "SHEEP_HURT",
        "uO": "SHEEP_SHEAR",
        "uP": "SHEEP_STEP",
        "uQ": "SHIELD_BLOCK",
        "uR": "SHIELD_BREAK",
        "uS": "SHROOMLIGHT_BREAK",
        "uT": "SHROOMLIGHT_STEP",
        "uU": "SHROOMLIGHT_PLACE",
        "uV": "SHROOMLIGHT_HIT",
        "uW": "SHROOMLIGHT_FALL",
        "uX": "SHOVEL_FLATTEN",
        "uY": "SHULKER_AMBIENT",
        "uZ": "SHULKER_BOX_CLOSE",
        "va": "SHULKER_BOX_OPEN",
        "vb": "SHULKER_BULLET_HIT",
        "vc": "SHULKER_BULLET_HURT",
        "vd": "SHULKER_CLOSE",
        "ve": "SHULKER_DEATH",
        "vf": "SHULKER_HURT",
        "vg": "SHULKER_HURT_CLOSED",
        "vh": "SHULKER_OPEN",
        "vi": "SHULKER_SHOOT",
        "vj": "SHULKER_TELEPORT",
        "vk": "SILVERFISH_AMBIENT",
        "vl": "SILVERFISH_DEATH",
        "vm": "SILVERFISH_HURT",
        "vn": "SILVERFISH_STEP",
        "vo": "SKELETON_AMBIENT",
        "vp": "SKELETON_CONVERTED_TO_STRAY",
        "vq": "SKELETON_DEATH",
        "vr": "SKELETON_HORSE_AMBIENT",
        "vs": "SKELETON_HORSE_DEATH",
        "vt": "SKELETON_HORSE_HURT",
        "vu": "SKELETON_HORSE_SWIM",
        "vv": "SKELETON_HORSE_AMBIENT_WATER",
        "vw": "SKELETON_HORSE_GALLOP_WATER",
        "vx": "SKELETON_HORSE_JUMP_WATER",
        "vy": "SKELETON_HORSE_STEP_WATER",
        "vz": "SKELETON_HURT",
        "vA": "SKELETON_SHOOT",
        "vB": "SKELETON_STEP",
        "vC": "SLIME_ATTACK",
        "vD": "SLIME_DEATH",
        "vE": "SLIME_HURT",
        "vF": "SLIME_JUMP",
        "vG": "SLIME_SQUISH",
        "vH": "SLIME_BLOCK_BREAK",
        "vI": "SLIME_BLOCK_FALL",
        "vJ": "SLIME_BLOCK_HIT",
        "vK": "SLIME_BLOCK_PLACE",
        "vL": "SLIME_BLOCK_STEP",
        "vM": "SMALL_AMETHYST_BUD_BREAK",
        "vN": "SMALL_AMETHYST_BUD_PLACE",
        "vO": "SMALL_DRIPLEAF_BREAK",
        "vP": "SMALL_DRIPLEAF_FALL",
        "vQ": "SMALL_DRIPLEAF_HIT",
        "vR": "SMALL_DRIPLEAF_PLACE",
        "vS": "SMALL_DRIPLEAF_STEP",
        "vT": "SOUL_SAND_BREAK",
        "vU": "SOUL_SAND_STEP",
        "vV": "SOUL_SAND_PLACE",
        "vW": "SOUL_SAND_HIT",
        "vX": "SOUL_SAND_FALL",
        "vY": "SOUL_SOIL_BREAK",
        "vZ": "SOUL_SOIL_STEP",
        "wa": "SOUL_SOIL_PLACE",
        "wb": "SOUL_SOIL_HIT",
        "wc": "SOUL_SOIL_FALL",
        "wd": "SOUL_ESCAPE",
        "we": "SPORE_BLOSSOM_BREAK",
        "wf": "SPORE_BLOSSOM_FALL",
        "wg": "SPORE_BLOSSOM_HIT",
        "wh": "SPORE_BLOSSOM_PLACE",
        "wi": "SPORE_BLOSSOM_STEP",
        "wj": "STRIDER_AMBIENT",
        "wk": "STRIDER_HAPPY",
        "wl": "STRIDER_RETREAT",
        "wm": "STRIDER_DEATH",
        "wn": "STRIDER_HURT",
        "wo": "STRIDER_STEP",
        "wp": "STRIDER_STEP_LAVA",
        "wq": "STRIDER_EAT",
        "wr": "STRIDER_SADDLE",
        "ws": "SLIME_DEATH_SMALL",
        "wt": "SLIME_HURT_SMALL",
        "wu": "SLIME_JUMP_SMALL",
        "wv": "SLIME_SQUISH_SMALL",
        "ww": "SMITHING_TABLE_USE",
        "wx": "SMOKER_SMOKE",
        "wy": "SNIFFER_STEP",
        "wz": "SNIFFER_EAT",
        "wA": "SNIFFER_IDLE",
        "wB": "SNIFFER_HURT",
        "wC": "SNIFFER_DEATH",
        "wD": "SNIFFER_DROP_SEED",
        "wE": "SNIFFER_SCENTING",
        "wF": "SNIFFER_SNIFFING",
        "wG": "SNIFFER_SEARCHING",
        "wH": "SNIFFER_DIGGING",
        "wI": "SNIFFER_DIGGING_STOP",
        "wJ": "SNIFFER_HAPPY",
        "wK": "SNIFFER_EGG_PLOP",
        "wL": "SNIFFER_EGG_CRACK",
        "wM": "SNIFFER_EGG_HATCH",
        "wN": "SNOWBALL_THROW",
        "wO": "SNOW_BREAK",
        "wP": "SNOW_FALL",
        "wQ": "SNOW_GOLEM_AMBIENT",
        "wR": "SNOW_GOLEM_DEATH",
        "wS": "SNOW_GOLEM_HURT",
        "wT": "SNOW_GOLEM_SHOOT",
        "wU": "SNOW_GOLEM_SHEAR",
        "wV": "SNOW_HIT",
        "wW": "SNOW_PLACE",
        "wX": "SNOW_STEP",
        "wY": "SPIDER_AMBIENT",
        "wZ": "SPIDER_DEATH",
        "xa": "SPIDER_HURT",
        "xb": "SPIDER_STEP",
        "xc": "SPLASH_POTION_BREAK",
        "xd": "SPLASH_POTION_THROW",
        "xe": "SPYGLASS_USE",
        "xf": "SPYGLASS_STOP_USING",
        "xg": "SQUID_AMBIENT",
        "xh": "SQUID_DEATH",
        "xi": "SQUID_HURT",
        "xj": "SQUID_SQUIRT",
        "xk": "STONE_BREAK",
        "xl": "STONE_BUTTON_CLICK_OFF",
        "xm": "STONE_BUTTON_CLICK_ON",
        "xn": "STONE_FALL",
        "xo": "STONE_HIT",
        "xp": "STONE_PLACE",
        "xq": "STONE_PRESSURE_PLATE_CLICK_OFF",
        "xr": "STONE_PRESSURE_PLATE_CLICK_ON",
        "xs": "STONE_STEP",
        "xt": "STRAY_AMBIENT",
        "xu": "STRAY_DEATH",
        "xv": "STRAY_HURT",
        "xw": "STRAY_STEP",
        "xx": "SWEET_BERRY_BUSH_BREAK",
        "xy": "SWEET_BERRY_BUSH_PLACE",
        "xz": "SWEET_BERRY_BUSH_PICK_BERRIES",
        "xA": "TADPOLE_DEATH",
        "xB": "TADPOLE_FLOP",
        "xC": "TADPOLE_GROW_UP",
        "xD": "TADPOLE_HURT",
        "xE": "THORNS_HIT",
        "xF": "TNT_PRIMED",
        "xG": "TOTEM_USE",
        "xH": "TRIDENT_HIT",
        "xI": "TRIDENT_HIT_GROUND",
        "xJ": "TRIDENT_RETURN",
        "xK": "TRIDENT_RIPTIDE_1",
        "xL": "TRIDENT_RIPTIDE_2",
        "xM": "TRIDENT_RIPTIDE_3",
        "xN": "TRIDENT_THROW",
        "xO": "TRIDENT_THUNDER",
        "xP": "TRIPWIRE_ATTACH",
        "xQ": "TRIPWIRE_CLICK_OFF",
        "xR": "TRIPWIRE_CLICK_ON",
        "xS": "TRIPWIRE_DETACH",
        "xT": "TROPICAL_FISH_AMBIENT",
        "xU": "TROPICAL_FISH_DEATH",
        "xV": "TROPICAL_FISH_FLOP",
        "xW": "TROPICAL_FISH_HURT",
        "xX": "TUFF_BREAK",
        "xY": "TUFF_STEP",
        "xZ": "TUFF_PLACE",
        "ya": "TUFF_HIT",
        "yb": "TUFF_FALL",
        "yc": "TURTLE_AMBIENT_LAND",
        "yd": "TURTLE_DEATH",
        "ye": "TURTLE_DEATH_BABY",
        "yf": "TURTLE_EGG_BREAK",
        "yg": "TURTLE_EGG_CRACK",
        "yh": "TURTLE_EGG_HATCH",
        "yi": "TURTLE_HURT",
        "yj": "TURTLE_HURT_BABY",
        "yk": "TURTLE_LAY_EGG",
        "yl": "TURTLE_SHAMBLE",
        "ym": "TURTLE_SHAMBLE_BABY",
        "yn": "TURTLE_SWIM",
        "yo": "UI_BUTTON_CLICK",
        "yp": "UI_LOOM_SELECT_PATTERN",
        "yq": "UI_LOOM_TAKE_RESULT",
        "yr": "UI_CARTOGRAPHY_TABLE_TAKE_RESULT",
        "ys": "UI_STONECUTTER_TAKE_RESULT",
        "yt": "UI_STONECUTTER_SELECT_RECIPE",
        "yu": "UI_TOAST_CHALLENGE_COMPLETE",
        "yv": "UI_TOAST_IN",
        "yw": "UI_TOAST_OUT",
        "yx": "VEX_AMBIENT",
        "yy": "VEX_CHARGE",
        "yz": "VEX_DEATH",
        "yA": "VEX_HURT",
        "yB": "VILLAGER_AMBIENT",
        "yC": "VILLAGER_CELEBRATE",
        "yD": "VILLAGER_DEATH",
        "yE": "VILLAGER_HURT",
        "yF": "VILLAGER_NO",
        "yG": "VILLAGER_TRADE",
        "yH": "VILLAGER_YES",
        "yI": "VILLAGER_WORK_ARMORER",
        "yJ": "VILLAGER_WORK_BUTCHER",
        "yK": "VILLAGER_WORK_CARTOGRAPHER",
        "yL": "VILLAGER_WORK_CLERIC",
        "yM": "VILLAGER_WORK_FARMER",
        "yN": "VILLAGER_WORK_FISHERMAN",
        "yO": "VILLAGER_WORK_FLETCHER",
        "yP": "VILLAGER_WORK_LEATHERWORKER",
        "yQ": "VILLAGER_WORK_LIBRARIAN",
        "yR": "VILLAGER_WORK_MASON",
        "yS": "VILLAGER_WORK_SHEPHERD",
        "yT": "VILLAGER_WORK_TOOLSMITH",
        "yU": "VILLAGER_WORK_WEAPONSMITH",
        "yV": "VINDICATOR_AMBIENT",
        "yW": "VINDICATOR_CELEBRATE",
        "yX": "VINDICATOR_DEATH",
        "yY": "VINDICATOR_HURT",
        "yZ": "VINE_BREAK",
        "za": "VINE_FALL",
        "zb": "VINE_HIT",
        "zc": "VINE_PLACE",
        "zd": "VINE_STEP",
        "ze": "LILY_PAD_PLACE",
        "zf": "WANDERING_TRADER_AMBIENT",
        "zg": "WANDERING_TRADER_DEATH",
        "zh": "WANDERING_TRADER_DISAPPEARED",
        "zi": "WANDERING_TRADER_DRINK_MILK",
        "zj": "WANDERING_TRADER_DRINK_POTION",
        "zk": "WANDERING_TRADER_HURT",
        "zl": "WANDERING_TRADER_NO",
        "zm": "WANDERING_TRADER_REAPPEARED",
        "zn": "WANDERING_TRADER_TRADE",
        "zo": "WANDERING_TRADER_YES",
        "zp": "WARDEN_AGITATED",
        "zq": "WARDEN_AMBIENT",
        "zr": "WARDEN_ANGRY",
        "zs": "WARDEN_ATTACK_IMPACT",
        "zt": "WARDEN_DEATH",
        "zu": "WARDEN_DIG",
        "zv": "WARDEN_EMERGE",
        "zw": "WARDEN_HEARTBEAT",
        "zx": "WARDEN_HURT",
        "zy": "WARDEN_LISTENING",
        "zz": "WARDEN_LISTENING_ANGRY",
        "zA": "WARDEN_NEARBY_CLOSE",
        "zB": "WARDEN_NEARBY_CLOSER",
        "zC": "WARDEN_NEARBY_CLOSEST",
        "zD": "WARDEN_ROAR",
        "zE": "WARDEN_SNIFF",
        "zF": "WARDEN_SONIC_BOOM",
        "zG": "WARDEN_SONIC_CHARGE",
        "zH": "WARDEN_STEP",
        "zI": "WARDEN_TENDRIL_CLICKS",
        "zJ": "WAXED_SIGN_INTERACT_FAIL",
        "zK": "WATER_AMBIENT",
        "zL": "WEATHER_RAIN",
        "zM": "WEATHER_RAIN_ABOVE",
        "zN": "WET_GRASS_BREAK",
        "zO": "WET_GRASS_FALL",
        "zP": "WET_GRASS_HIT",
        "zQ": "WET_GRASS_PLACE",
        "zR": "WET_GRASS_STEP",
        "zS": "WITCH_AMBIENT",
        "zT": "WITCH_CELEBRATE",
        "zU": "WITCH_DEATH",
        "zV": "WITCH_DRINK",
        "zW": "WITCH_HURT",
        "zX": "WITCH_THROW",
        "zY": "WITHER_AMBIENT",
        "zZ": "WITHER_BREAK_BLOCK",
        "Aa": "WITHER_DEATH",
        "Ab": "WITHER_HURT",
        "Ac": "WITHER_SHOOT",
        "Ad": "WITHER_SKELETON_AMBIENT",
        "Ae": "WITHER_SKELETON_DEATH",
        "Af": "WITHER_SKELETON_HURT",
        "Ag": "WITHER_SKELETON_STEP",
        "Ah": "WITHER_SPAWN",
        "Ai": "WOLF_AMBIENT",
        "Aj": "WOLF_DEATH",
        "Ak": "WOLF_GROWL",
        "Al": "WOLF_HOWL",
        "Am": "WOLF_HURT",
        "An": "WOLF_PANT",
        "Ao": "WOLF_SHAKE",
        "Ap": "WOLF_STEP",
        "Aq": "WOLF_WHINE",
        "Ar": "WOODEN_DOOR_CLOSE",
        "As": "WOODEN_DOOR_OPEN",
        "At": "WOODEN_TRAPDOOR_CLOSE",
        "Au": "WOODEN_TRAPDOOR_OPEN",
        "Av": "WOODEN_BUTTON_CLICK_OFF",
        "Aw": "WOODEN_BUTTON_CLICK_ON",
        "Ax": "WOODEN_PRESSURE_PLATE_CLICK_OFF",
        "Ay": "WOODEN_PRESSURE_PLATE_CLICK_ON",
        "Az": "WOOD_BREAK",
        "AA": "WOOD_FALL",
        "AB": "WOOD_HIT",
        "AC": "WOOD_PLACE",
        "AD": "WOOD_STEP",
        "AE": "WOOL_BREAK",
        "AF": "WOOL_FALL",
        "AG": "WOOL_HIT",
        "AH": "WOOL_PLACE",
        "AI": "WOOL_STEP",
        "AJ": "ZOGLIN_AMBIENT",
        "AK": "ZOGLIN_ANGRY",
        "AL": "ZOGLIN_ATTACK",
        "AM": "ZOGLIN_DEATH",
        "AN": "ZOGLIN_HURT",
        "AO": "ZOGLIN_STEP",
        "AP": "ZOMBIE_AMBIENT",
        "AQ": "ZOMBIE_ATTACK_WOODEN_DOOR",
        "AR": "ZOMBIE_ATTACK_IRON_DOOR",
        "AS": "ZOMBIE_BREAK_WOODEN_DOOR",
        "AT": "ZOMBIE_CONVERTED_TO_DROWNED",
        "AU": "ZOMBIE_DEATH",
        "AV": "ZOMBIE_DESTROY_EGG",
        "AW": "ZOMBIE_HORSE_AMBIENT",
        "AX": "ZOMBIE_HORSE_DEATH",
        "AY": "ZOMBIE_HORSE_HURT",
        "AZ": "ZOMBIE_HURT",
        "Ba": "ZOMBIE_INFECT",
        "Bb": "ZOMBIFIED_PIGLIN_AMBIENT",
        "Bc": "ZOMBIFIED_PIGLIN_ANGRY",
        "Bd": "ZOMBIFIED_PIGLIN_DEATH",
        "Be": "ZOMBIFIED_PIGLIN_HURT",
        "Bf": "ZOMBIE_STEP",
        "Bg": "ZOMBIE_VILLAGER_AMBIENT",
        "Bh": "ZOMBIE_VILLAGER_CONVERTED",
        "Bi": "ZOMBIE_VILLAGER_CURE",
        "Bj": "ZOMBIE_VILLAGER_DEATH",
        "Bk": "ZOMBIE_VILLAGER_HURT",
        "Bl": "ZOMBIE_VILLAGER_STEP"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/resources/ResourceLocation;F)Lnet/minecraft/core/Holder;": "register",
        "a(Ljava/lang/String;)Lnet/minecraft/sounds/SoundEvent;": "register",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/sounds/SoundEvent;": "register",
        "b(Ljava/lang/String;)Lnet/minecraft/core/Holder$Reference;": "registerForHolder",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/core/Holder$Reference;": "registerForHolder",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/sounds/SoundEvent;": "register",
        "b(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/core/Holder$Reference;": "registerForHolder",
        "a()Lcom/google/common/collect/ImmutableList;": "registerGoatHornSoundVariants",
        "a(I)Lnet/minecraft/core/Holder$Reference;": "lambda$registerGoatHornSoundVariants$0"
      }
    },
    "net/minecraft/sounds/SoundCategory": {
      "fields": {
        "a": "MASTER",
        "b": "MUSIC",
        "c": "RECORDS",
        "d": "WEATHER",
        "e": "BLOCKS",
        "f": "HOSTILE",
        "g": "NEUTRAL",
        "h": "PLAYERS",
        "i": "AMBIENT",
        "j": "VOICE",
        "k": "name",
        "l": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "b()[Lnet/minecraft/sounds/SoundSource;": "$values"
      }
    },
    "net/minecraft/stats/RecipeBook": {
      "fields": {
        "a": "known",
        "b": "highlight",
        "c": "bookSettings"
      },
      "methods": {
        "a(Lnet/minecraft/stats/RecipeBook;)V": "copyOverData",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)V": "add",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "add",
        "b(Lnet/minecraft/world/item/crafting/Recipe;)Z": "contains",
        "b(Lnet/minecraft/resources/ResourceLocation;)Z": "contains",
        "c(Lnet/minecraft/world/item/crafting/Recipe;)V": "remove",
        "c(Lnet/minecraft/resources/ResourceLocation;)V": "remove",
        "d(Lnet/minecraft/world/item/crafting/Recipe;)Z": "willHighlight",
        "e(Lnet/minecraft/world/item/crafting/Recipe;)V": "removeHighlight",
        "f(Lnet/minecraft/world/item/crafting/Recipe;)V": "addHighlight",
        "d(Lnet/minecraft/resources/ResourceLocation;)V": "addHighlight",
        "a(Lnet/minecraft/world/inventory/RecipeBookType;)Z": "isOpen",
        "a(Lnet/minecraft/world/inventory/RecipeBookType;Z)V": "setOpen",
        "a(Lnet/minecraft/world/inventory/RecipeBookMenu;)Z": "isFiltering",
        "b(Lnet/minecraft/world/inventory/RecipeBookType;)Z": "isFiltering",
        "b(Lnet/minecraft/world/inventory/RecipeBookType;Z)V": "setFiltering",
        "a(Lnet/minecraft/stats/RecipeBookSettings;)V": "setBookSettings",
        "a()Lnet/minecraft/stats/RecipeBookSettings;": "getBookSettings",
        "a(Lnet/minecraft/world/inventory/RecipeBookType;ZZ)V": "setBookSetting"
      }
    },
    "net/minecraft/stats/RecipeBookSettings": {
      "fields": {
        "a": "TAG_FIELDS",
        "b": "states"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/RecipeBookType;)Z": "isOpen",
        "a(Lnet/minecraft/world/inventory/RecipeBookType;Z)V": "setOpen",
        "b(Lnet/minecraft/world/inventory/RecipeBookType;)Z": "isFiltering",
        "b(Lnet/minecraft/world/inventory/RecipeBookType;Z)V": "setFiltering",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/stats/RecipeBookSettings;": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/stats/RecipeBookSettings;": "read",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "write",
        "a()Lnet/minecraft/stats/RecipeBookSettings;": "copy",
        "a(Lnet/minecraft/stats/RecipeBookSettings;)V": "replaceFrom",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/inventory/RecipeBookType;Lcom/mojang/datafixers/util/Pair;)V": "lambda$write$2",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/util/Map;Lnet/minecraft/world/inventory/RecipeBookType;Lcom/mojang/datafixers/util/Pair;)V": "lambda$read$1",
        "a(Ljava/util/EnumMap;)V": "lambda$new$0"
      }
    },
    "net/minecraft/stats/RecipeBookServer": {
      "fields": {
        "c": "RECIPE_BOOK_TAG",
        "d": "LOGGER"
      },
      "methods": {
        "a(Ljava/util/Collection;Lnet/minecraft/server/level/ServerPlayer;)I": "addRecipes",
        "b(Ljava/util/Collection;Lnet/minecraft/server/level/ServerPlayer;)I": "removeRecipes",
        "a(Lnet/minecraft/network/protocol/game/ClientboundRecipePacket$State;Lnet/minecraft/server/level/ServerPlayer;Ljava/util/List;)V": "sendRecipes",
        "b()Lnet/minecraft/nbt/CompoundTag;": "toNbt",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/item/crafting/RecipeManager;)V": "fromNbt",
        "a(Lnet/minecraft/nbt/ListTag;Ljava/util/function/Consumer;Lnet/minecraft/world/item/crafting/RecipeManager;)V": "loadRecipes",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "sendInitialRecipeBook"
      }
    },
    "net/minecraft/stats/ServerStatisticManager": {
      "fields": {
        "b": "LOGGER",
        "c": "server",
        "d": "file",
        "e": "dirty"
      },
      "methods": {
        "a()V": "save",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/stats/Stat;I)V": "setValue",
        "d()Ljava/util/Set;": "getDirty",
        "a(Lcom/mojang/datafixers/DataFixer;Ljava/lang/String;)V": "parseLocal",
        "a(Lnet/minecraft/stats/StatType;Ljava/lang/String;)Ljava/util/Optional;": "getStat",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/nbt/CompoundTag;": "fromJson",
        "b()Ljava/lang/String;": "toJson",
        "b(Lnet/minecraft/stats/Stat;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "c()V": "markAllDirty",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "sendStats"
      }
    },
    "net/minecraft/stats/Statistic": {
      "fields": {
        "n": "formatter",
        "o": "value",
        "p": "type"
      },
      "methods": {
        "a(Lnet/minecraft/stats/StatType;Ljava/lang/Object;)Ljava/lang/String;": "buildName",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/String;": "locationToKey",
        "a()Lnet/minecraft/stats/StatType;": "getType",
        "b()Ljava/lang/Object;": "getValue",
        "a(I)Ljava/lang/String;": "format"
      }
    },
    "net/minecraft/stats/Counter": {
      "fields": {
        "a": "DECIMAL_FORMAT",
        "b": "DEFAULT",
        "c": "DIVIDE_BY_TEN",
        "d": "DISTANCE",
        "e": "TIME"
      },
      "methods": {
        "a(I)Ljava/lang/String;": "lambda$static$3",
        "b(I)Ljava/lang/String;": "lambda$static$2",
        "c(I)Ljava/lang/String;": "lambda$static$1",
        "a(Ljava/text/DecimalFormat;)V": "lambda$static$0"
      }
    },
    "net/minecraft/stats/StatisticWrapper": {
      "fields": {
        "b": "map",
        "c": "displayName"
      },
      "methods": {
        "a(Ljava/lang/Object;)Z": "contains",
        "a(Ljava/lang/Object;Lnet/minecraft/stats/StatFormatter;)Lnet/minecraft/stats/Stat;": "get",
        "b(Ljava/lang/Object;)Lnet/minecraft/stats/Stat;": "get",
        "b()Ljava/lang/String;": "getTranslationKey",
        "c()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a(Lnet/minecraft/stats/StatFormatter;Ljava/lang/Object;)Lnet/minecraft/stats/Stat;": "lambda$get$0"
      }
    },
    "net/minecraft/stats/StatisticList": {
      "fields": {
        "a": "BLOCK_MINED",
        "b": "ITEM_CRAFTED",
        "c": "ITEM_USED",
        "d": "ITEM_BROKEN",
        "e": "ITEM_PICKED_UP",
        "f": "ITEM_DROPPED",
        "g": "ENTITY_KILLED",
        "h": "ENTITY_KILLED_BY",
        "i": "CUSTOM",
        "j": "LEAVE_GAME",
        "k": "PLAY_TIME",
        "l": "TOTAL_WORLD_TIME",
        "m": "TIME_SINCE_DEATH",
        "n": "TIME_SINCE_REST",
        "o": "CROUCH_TIME",
        "p": "WALK_ONE_CM",
        "q": "CROUCH_ONE_CM",
        "r": "SPRINT_ONE_CM",
        "s": "WALK_ON_WATER_ONE_CM",
        "t": "FALL_ONE_CM",
        "u": "CLIMB_ONE_CM",
        "v": "FLY_ONE_CM",
        "w": "WALK_UNDER_WATER_ONE_CM",
        "x": "MINECART_ONE_CM",
        "y": "BOAT_ONE_CM",
        "z": "PIG_ONE_CM",
        "A": "HORSE_ONE_CM",
        "B": "AVIATE_ONE_CM",
        "C": "SWIM_ONE_CM",
        "D": "STRIDER_ONE_CM",
        "E": "JUMP",
        "F": "DROP",
        "G": "DAMAGE_DEALT",
        "H": "DAMAGE_DEALT_ABSORBED",
        "I": "DAMAGE_DEALT_RESISTED",
        "J": "DAMAGE_TAKEN",
        "K": "DAMAGE_BLOCKED_BY_SHIELD",
        "L": "DAMAGE_ABSORBED",
        "M": "DAMAGE_RESISTED",
        "N": "DEATHS",
        "O": "MOB_KILLS",
        "P": "ANIMALS_BRED",
        "Q": "PLAYER_KILLS",
        "R": "FISH_CAUGHT",
        "S": "TALKED_TO_VILLAGER",
        "T": "TRADED_WITH_VILLAGER",
        "U": "EAT_CAKE_SLICE",
        "V": "FILL_CAULDRON",
        "W": "USE_CAULDRON",
        "X": "CLEAN_ARMOR",
        "Y": "CLEAN_BANNER",
        "Z": "CLEAN_SHULKER_BOX",
        "aa": "INTERACT_WITH_BREWINGSTAND",
        "ab": "INTERACT_WITH_BEACON",
        "ac": "INSPECT_DROPPER",
        "ad": "INSPECT_HOPPER",
        "ae": "INSPECT_DISPENSER",
        "af": "PLAY_NOTEBLOCK",
        "ag": "TUNE_NOTEBLOCK",
        "ah": "POT_FLOWER",
        "ai": "TRIGGER_TRAPPED_CHEST",
        "aj": "OPEN_ENDERCHEST",
        "ak": "ENCHANT_ITEM",
        "al": "PLAY_RECORD",
        "am": "INTERACT_WITH_FURNACE",
        "an": "INTERACT_WITH_CRAFTING_TABLE",
        "ao": "OPEN_CHEST",
        "ap": "SLEEP_IN_BED",
        "aq": "OPEN_SHULKER_BOX",
        "ar": "OPEN_BARREL",
        "as": "INTERACT_WITH_BLAST_FURNACE",
        "at": "INTERACT_WITH_SMOKER",
        "au": "INTERACT_WITH_LECTERN",
        "av": "INTERACT_WITH_CAMPFIRE",
        "aw": "INTERACT_WITH_CARTOGRAPHY_TABLE",
        "ax": "INTERACT_WITH_LOOM",
        "ay": "INTERACT_WITH_STONECUTTER",
        "az": "BELL_RING",
        "aA": "RAID_TRIGGER",
        "aB": "RAID_WIN",
        "aC": "INTERACT_WITH_ANVIL",
        "aD": "INTERACT_WITH_GRINDSTONE",
        "aE": "TARGET_HIT",
        "aF": "INTERACT_WITH_SMITHING_TABLE"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/stats/StatFormatter;)Lnet/minecraft/resources/ResourceLocation;": "makeCustomStat"
      }
    },
    "net/minecraft/stats/StatisticManager": {
      "fields": {
        "a": "stats"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/stats/Stat;I)V": "increment",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/stats/Stat;I)V": "setValue",
        "a(Lnet/minecraft/stats/StatType;Ljava/lang/Object;)I": "getValue",
        "a(Lnet/minecraft/stats/Stat;)I": "getValue"
      }
    },
    "net/minecraft/tags/BannerPatternTags": {
      "fields": {
        "a": "NO_ITEM_REQUIRED",
        "b": "PATTERN_ITEM_FLOWER",
        "c": "PATTERN_ITEM_CREEPER",
        "d": "PATTERN_ITEM_SKULL",
        "e": "PATTERN_ITEM_MOJANG",
        "f": "PATTERN_ITEM_GLOBE",
        "g": "PATTERN_ITEM_PIGLIN"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/BiomeTags": {
      "fields": {
        "a": "IS_DEEP_OCEAN",
        "b": "IS_OCEAN",
        "c": "IS_BEACH",
        "d": "IS_RIVER",
        "e": "IS_MOUNTAIN",
        "f": "IS_BADLANDS",
        "g": "IS_HILL",
        "h": "IS_TAIGA",
        "i": "IS_JUNGLE",
        "j": "IS_FOREST",
        "k": "IS_SAVANNA",
        "l": "IS_OVERWORLD",
        "m": "IS_NETHER",
        "n": "IS_END",
        "o": "STRONGHOLD_BIASED_TO",
        "p": "HAS_BURIED_TREASURE",
        "q": "HAS_DESERT_PYRAMID",
        "r": "HAS_IGLOO",
        "s": "HAS_JUNGLE_TEMPLE",
        "t": "HAS_MINESHAFT",
        "u": "HAS_MINESHAFT_MESA",
        "v": "HAS_OCEAN_MONUMENT",
        "w": "HAS_OCEAN_RUIN_COLD",
        "x": "HAS_OCEAN_RUIN_WARM",
        "y": "HAS_PILLAGER_OUTPOST",
        "z": "HAS_RUINED_PORTAL_DESERT",
        "A": "HAS_RUINED_PORTAL_JUNGLE",
        "B": "HAS_RUINED_PORTAL_OCEAN",
        "C": "HAS_RUINED_PORTAL_SWAMP",
        "D": "HAS_RUINED_PORTAL_MOUNTAIN",
        "E": "HAS_RUINED_PORTAL_STANDARD",
        "F": "HAS_SHIPWRECK_BEACHED",
        "G": "HAS_SHIPWRECK",
        "H": "HAS_STRONGHOLD",
        "I": "HAS_SWAMP_HUT",
        "J": "HAS_VILLAGE_DESERT",
        "K": "HAS_VILLAGE_PLAINS",
        "L": "HAS_VILLAGE_SAVANNA",
        "M": "HAS_VILLAGE_SNOWY",
        "N": "HAS_VILLAGE_TAIGA",
        "O": "HAS_TRAIL_RUINS",
        "P": "HAS_WOODLAND_MANSION",
        "Q": "HAS_NETHER_FORTRESS",
        "R": "HAS_NETHER_FOSSIL",
        "S": "HAS_BASTION_REMNANT",
        "T": "HAS_ANCIENT_CITY",
        "U": "HAS_RUINED_PORTAL_NETHER",
        "V": "HAS_END_CITY",
        "W": "REQUIRED_OCEAN_MONUMENT_SURROUNDING",
        "X": "MINESHAFT_BLOCKING",
        "Y": "PLAYS_UNDERWATER_MUSIC",
        "Z": "HAS_CLOSER_WATER_FOG",
        "aa": "WATER_ON_MAP_OUTLINES",
        "ab": "PRODUCES_CORALS_FROM_BONEMEAL",
        "ac": "INCREASED_FIRE_BURNOUT",
        "ad": "SNOW_GOLEM_MELTS",
        "ae": "WITHOUT_ZOMBIE_SIEGES",
        "af": "WITHOUT_PATROL_SPAWNS",
        "ag": "WITHOUT_WANDERING_TRADER_SPAWNS",
        "ah": "SPAWNS_COLD_VARIANT_FROGS",
        "ai": "SPAWNS_WARM_VARIANT_FROGS",
        "aj": "SPAWNS_GOLD_RABBITS",
        "ak": "SPAWNS_WHITE_RABBITS",
        "al": "REDUCED_WATER_AMBIENT_SPAWNS",
        "am": "ALLOWS_TROPICAL_FISH_SPAWNS_AT_ANY_HEIGHT",
        "an": "POLAR_BEARS_SPAWN_ON_ALTERNATE_BLOCKS",
        "ao": "MORE_FREQUENT_DROWNED_SPAWNS",
        "ap": "ALLOWS_SURFACE_SLIME_SPAWNS",
        "aq": "SPAWNS_SNOW_FOXES"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/TagsBlock": {
      "fields": {
        "a": "WOOL",
        "b": "PLANKS",
        "c": "STONE_BRICKS",
        "d": "WOODEN_BUTTONS",
        "e": "STONE_BUTTONS",
        "f": "BUTTONS",
        "g": "WOOL_CARPETS",
        "h": "WOODEN_DOORS",
        "i": "WOODEN_STAIRS",
        "j": "WOODEN_SLABS",
        "k": "WOODEN_FENCES",
        "l": "PRESSURE_PLATES",
        "m": "WOODEN_PRESSURE_PLATES",
        "n": "STONE_PRESSURE_PLATES",
        "o": "WOODEN_TRAPDOORS",
        "p": "DOORS",
        "q": "SAPLINGS",
        "r": "LOGS_THAT_BURN",
        "s": "OVERWORLD_NATURAL_LOGS",
        "t": "LOGS",
        "u": "DARK_OAK_LOGS",
        "v": "OAK_LOGS",
        "w": "BIRCH_LOGS",
        "x": "ACACIA_LOGS",
        "y": "CHERRY_LOGS",
        "z": "JUNGLE_LOGS",
        "A": "SPRUCE_LOGS",
        "B": "MANGROVE_LOGS",
        "C": "CRIMSON_STEMS",
        "D": "WARPED_STEMS",
        "E": "BAMBOO_BLOCKS",
        "F": "WART_BLOCKS",
        "G": "BANNERS",
        "H": "SAND",
        "I": "SMELTS_TO_GLASS",
        "J": "STAIRS",
        "K": "SLABS",
        "L": "WALLS",
        "M": "ANVIL",
        "N": "RAILS",
        "O": "LEAVES",
        "P": "TRAPDOORS",
        "Q": "SMALL_FLOWERS",
        "R": "BEDS",
        "S": "FENCES",
        "T": "TALL_FLOWERS",
        "U": "FLOWERS",
        "V": "PIGLIN_REPELLENTS",
        "W": "GOLD_ORES",
        "X": "IRON_ORES",
        "Y": "DIAMOND_ORES",
        "Z": "REDSTONE_ORES",
        "aa": "LAPIS_ORES",
        "ab": "COAL_ORES",
        "ac": "EMERALD_ORES",
        "ad": "COPPER_ORES",
        "ae": "CANDLES",
        "af": "DIRT",
        "ag": "TERRACOTTA",
        "ah": "COMPLETES_FIND_TREE_TUTORIAL",
        "ai": "FLOWER_POTS",
        "aj": "ENDERMAN_HOLDABLE",
        "ak": "ICE",
        "al": "VALID_SPAWN",
        "am": "IMPERMEABLE",
        "an": "UNDERWATER_BONEMEALS",
        "ao": "CORAL_BLOCKS",
        "ap": "WALL_CORALS",
        "aq": "CORAL_PLANTS",
        "ar": "CORALS",
        "as": "BAMBOO_PLANTABLE_ON",
        "at": "STANDING_SIGNS",
        "au": "WALL_SIGNS",
        "av": "SIGNS",
        "aw": "CEILING_HANGING_SIGNS",
        "ax": "WALL_HANGING_SIGNS",
        "ay": "ALL_HANGING_SIGNS",
        "az": "ALL_SIGNS",
        "aA": "DRAGON_IMMUNE",
        "aB": "DRAGON_TRANSPARENT",
        "aC": "WITHER_IMMUNE",
        "aD": "WITHER_SUMMON_BASE_BLOCKS",
        "aE": "BEEHIVES",
        "aF": "CROPS",
        "aG": "BEE_GROWABLES",
        "aH": "PORTALS",
        "aI": "FIRE",
        "aJ": "NYLIUM",
        "aK": "BEACON_BASE_BLOCKS",
        "aL": "SOUL_SPEED_BLOCKS",
        "aM": "WALL_POST_OVERRIDE",
        "aN": "CLIMBABLE",
        "aO": "FALL_DAMAGE_RESETTING",
        "aP": "SHULKER_BOXES",
        "aQ": "HOGLIN_REPELLENTS",
        "aR": "SOUL_FIRE_BASE_BLOCKS",
        "aS": "STRIDER_WARM_BLOCKS",
        "aT": "CAMPFIRES",
        "aU": "GUARDED_BY_PIGLINS",
        "aV": "PREVENT_MOB_SPAWNING_INSIDE",
        "aW": "FENCE_GATES",
        "aX": "UNSTABLE_BOTTOM_CENTER",
        "aY": "MUSHROOM_GROW_BLOCK",
        "aZ": "INFINIBURN_OVERWORLD",
        "ba": "INFINIBURN_NETHER",
        "bb": "INFINIBURN_END",
        "bc": "BASE_STONE_OVERWORLD",
        "bd": "STONE_ORE_REPLACEABLES",
        "be": "DEEPSLATE_ORE_REPLACEABLES",
        "bf": "BASE_STONE_NETHER",
        "bg": "OVERWORLD_CARVER_REPLACEABLES",
        "bh": "NETHER_CARVER_REPLACEABLES",
        "bi": "CANDLE_CAKES",
        "bj": "CAULDRONS",
        "bk": "CRYSTAL_SOUND_BLOCKS",
        "bl": "INSIDE_STEP_SOUND_BLOCKS",
        "bm": "COMBINATION_STEP_SOUND_BLOCKS",
        "bn": "OCCLUDES_VIBRATION_SIGNALS",
        "bo": "DAMPENS_VIBRATIONS",
        "bp": "DRIPSTONE_REPLACEABLE",
        "bq": "CAVE_VINES",
        "br": "MOSS_REPLACEABLE",
        "bs": "LUSH_GROUND_REPLACEABLE",
        "bt": "AZALEA_ROOT_REPLACEABLE",
        "bu": "SMALL_DRIPLEAF_PLACEABLE",
        "bv": "BIG_DRIPLEAF_PLACEABLE",
        "bw": "SNOW",
        "bx": "MINEABLE_WITH_AXE",
        "by": "MINEABLE_WITH_HOE",
        "bz": "MINEABLE_WITH_PICKAXE",
        "bA": "MINEABLE_WITH_SHOVEL",
        "bB": "SWORD_EFFICIENT",
        "bC": "NEEDS_DIAMOND_TOOL",
        "bD": "NEEDS_IRON_TOOL",
        "bE": "NEEDS_STONE_TOOL",
        "bF": "FEATURES_CANNOT_REPLACE",
        "bG": "LAVA_POOL_STONE_CANNOT_REPLACE",
        "bH": "GEODE_INVALID_BLOCKS",
        "bI": "FROG_PREFER_JUMP_TO",
        "bJ": "SCULK_REPLACEABLE",
        "bK": "SCULK_REPLACEABLE_WORLD_GEN",
        "bL": "ANCIENT_CITY_REPLACEABLE",
        "bM": "VIBRATION_RESONATORS",
        "bN": "ANIMALS_SPAWNABLE_ON",
        "bO": "AXOLOTLS_SPAWNABLE_ON",
        "bP": "GOATS_SPAWNABLE_ON",
        "bQ": "MOOSHROOMS_SPAWNABLE_ON",
        "bR": "PARROTS_SPAWNABLE_ON",
        "bS": "POLAR_BEARS_SPAWNABLE_ON_ALTERNATE",
        "bT": "RABBITS_SPAWNABLE_ON",
        "bU": "FOXES_SPAWNABLE_ON",
        "bV": "WOLVES_SPAWNABLE_ON",
        "bW": "FROGS_SPAWNABLE_ON",
        "bX": "AZALEA_GROWS_ON",
        "bY": "CONVERTABLE_TO_MUD",
        "bZ": "MANGROVE_LOGS_CAN_GROW_THROUGH",
        "ca": "MANGROVE_ROOTS_CAN_GROW_THROUGH",
        "cb": "DEAD_BUSH_MAY_PLACE_ON",
        "cc": "SNAPS_GOAT_HORN",
        "cd": "REPLACEABLE_BY_TREES",
        "ce": "SNOW_LAYER_CANNOT_SURVIVE_ON",
        "cf": "SNOW_LAYER_CAN_SURVIVE_ON",
        "cg": "INVALID_SPAWN_INSIDE",
        "ch": "SNIFFER_DIGGABLE_BLOCK",
        "ci": "SNIFFER_EGG_HATCH_BOOST",
        "cj": "TRAIL_RUINS_REPLACEABLE",
        "ck": "REPLACEABLE",
        "cl": "ENCHANTMENT_POWER_PROVIDER",
        "cm": "ENCHANTMENT_POWER_TRANSMITTER",
        "cn": "MAINTAINS_FARMLAND"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/CatVariantTags": {
      "fields": {
        "a": "DEFAULT_SPAWNS",
        "b": "FULL_MOON_SPAWNS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/DamageTypeTags": {
      "fields": {
        "a": "DAMAGES_HELMET",
        "b": "BYPASSES_ARMOR",
        "c": "BYPASSES_SHIELD",
        "d": "BYPASSES_INVULNERABILITY",
        "e": "BYPASSES_COOLDOWN",
        "f": "BYPASSES_EFFECTS",
        "g": "BYPASSES_RESISTANCE",
        "h": "BYPASSES_ENCHANTMENTS",
        "i": "IS_FIRE",
        "j": "IS_PROJECTILE",
        "k": "WITCH_RESISTANT_TO",
        "l": "IS_EXPLOSION",
        "m": "IS_FALL",
        "n": "IS_DROWNING",
        "o": "IS_FREEZING",
        "p": "IS_LIGHTNING",
        "q": "NO_ANGER",
        "r": "NO_IMPACT",
        "s": "ALWAYS_MOST_SIGNIFICANT_FALL",
        "t": "WITHER_IMMUNE_TO",
        "u": "IGNITES_ARMOR_STANDS",
        "v": "BURNS_ARMOR_STANDS",
        "w": "AVOIDS_GUARDIAN_THORNS",
        "x": "ALWAYS_TRIGGERS_SILVERFISH",
        "y": "ALWAYS_HURTS_ENDER_DRAGONS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/TagsEntity": {
      "fields": {
        "a": "SKELETONS",
        "b": "RAIDERS",
        "c": "BEEHIVE_INHABITORS",
        "d": "ARROWS",
        "e": "IMPACT_PROJECTILES",
        "f": "POWDER_SNOW_WALKABLE_MOBS",
        "g": "AXOLOTL_ALWAYS_HOSTILES",
        "h": "AXOLOTL_HUNT_TARGETS",
        "i": "FREEZE_IMMUNE_ENTITY_TYPES",
        "j": "FREEZE_HURTS_EXTRA_TYPES",
        "k": "FROG_FOOD",
        "l": "FALL_DAMAGE_IMMUNE",
        "m": "DISMOUNTS_UNDERWATER"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/TagsFluid": {
      "fields": {
        "a": "WATER",
        "b": "LAVA"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/GameEventTags": {
      "fields": {
        "a": "VIBRATIONS",
        "b": "WARDEN_CAN_LISTEN",
        "c": "SHRIEKER_CAN_LISTEN",
        "d": "IGNORE_VIBRATIONS_SNEAKING",
        "e": "ALLAY_CAN_LISTEN"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/InstrumentTags": {
      "fields": {
        "a": "REGULAR_GOAT_HORNS",
        "b": "SCREAMING_GOAT_HORNS",
        "c": "GOAT_HORNS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/TagsItem": {
      "fields": {
        "a": "WOOL",
        "b": "PLANKS",
        "c": "STONE_BRICKS",
        "d": "WOODEN_BUTTONS",
        "e": "STONE_BUTTONS",
        "f": "BUTTONS",
        "g": "WOOL_CARPETS",
        "h": "WOODEN_DOORS",
        "i": "WOODEN_STAIRS",
        "j": "WOODEN_SLABS",
        "k": "WOODEN_FENCES",
        "l": "FENCE_GATES",
        "m": "WOODEN_PRESSURE_PLATES",
        "n": "WOODEN_TRAPDOORS",
        "o": "DOORS",
        "p": "SAPLINGS",
        "q": "LOGS_THAT_BURN",
        "r": "LOGS",
        "s": "DARK_OAK_LOGS",
        "t": "OAK_LOGS",
        "u": "BIRCH_LOGS",
        "v": "ACACIA_LOGS",
        "w": "CHERRY_LOGS",
        "x": "JUNGLE_LOGS",
        "y": "SPRUCE_LOGS",
        "z": "MANGROVE_LOGS",
        "A": "CRIMSON_STEMS",
        "B": "WARPED_STEMS",
        "C": "BAMBOO_BLOCKS",
        "D": "WART_BLOCKS",
        "E": "BANNERS",
        "F": "SAND",
        "G": "SMELTS_TO_GLASS",
        "H": "STAIRS",
        "I": "SLABS",
        "J": "WALLS",
        "K": "ANVIL",
        "L": "RAILS",
        "M": "LEAVES",
        "N": "TRAPDOORS",
        "O": "SMALL_FLOWERS",
        "P": "BEDS",
        "Q": "FENCES",
        "R": "TALL_FLOWERS",
        "S": "FLOWERS",
        "T": "PIGLIN_REPELLENTS",
        "U": "PIGLIN_LOVED",
        "V": "IGNORED_BY_PIGLIN_BABIES",
        "W": "PIGLIN_FOOD",
        "X": "FOX_FOOD",
        "Y": "GOLD_ORES",
        "Z": "IRON_ORES",
        "aa": "DIAMOND_ORES",
        "ab": "REDSTONE_ORES",
        "ac": "LAPIS_ORES",
        "ad": "COAL_ORES",
        "ae": "EMERALD_ORES",
        "af": "COPPER_ORES",
        "ag": "NON_FLAMMABLE_WOOD",
        "ah": "SOUL_FIRE_BASE_BLOCKS",
        "ai": "CANDLES",
        "aj": "DIRT",
        "ak": "TERRACOTTA",
        "al": "COMPLETES_FIND_TREE_TUTORIAL",
        "am": "BOATS",
        "an": "CHEST_BOATS",
        "ao": "FISHES",
        "ap": "SIGNS",
        "aq": "MUSIC_DISCS",
        "ar": "CREEPER_DROP_MUSIC_DISCS",
        "as": "COALS",
        "at": "ARROWS",
        "au": "LECTERN_BOOKS",
        "av": "BOOKSHELF_BOOKS",
        "aw": "BEACON_PAYMENT_ITEMS",
        "ax": "STONE_TOOL_MATERIALS",
        "ay": "STONE_CRAFTING_MATERIALS",
        "az": "FREEZE_IMMUNE_WEARABLES",
        "aA": "AXOLOTL_TEMPT_ITEMS",
        "aB": "DAMPENS_VIBRATIONS",
        "aC": "CLUSTER_MAX_HARVESTABLES",
        "aD": "COMPASSES",
        "aE": "HANGING_SIGNS",
        "aF": "CREEPER_IGNITERS",
        "aG": "NOTE_BLOCK_TOP_INSTRUMENTS",
        "aH": "TRIMMABLE_ARMOR",
        "aI": "TRIM_MATERIALS",
        "aJ": "TRIM_TEMPLATES",
        "aK": "SNIFFER_FOOD",
        "aL": "DECORATED_POT_SHERDS",
        "aM": "DECORATED_POT_INGREDIENTS",
        "aN": "SWORDS",
        "aO": "AXES",
        "aP": "HOES",
        "aQ": "PICKAXES",
        "aR": "SHOVELS",
        "aS": "TOOLS",
        "aT": "BREAKS_DECORATED_POTS",
        "aU": "VILLAGER_PLANTABLE_SEEDS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "bind"
      }
    },
    "net/minecraft/tags/PaintingVariantTags": {
      "fields": {
        "a": "PLACEABLE"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/PoiTypeTags": {
      "fields": {
        "a": "ACQUIRABLE_JOB_SITE",
        "b": "VILLAGE",
        "c": "BEE_HOME"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/StructureTags": {
      "fields": {
        "a": "EYE_OF_ENDER_LOCATED",
        "b": "DOLPHIN_LOCATED",
        "c": "ON_WOODLAND_EXPLORER_MAPS",
        "d": "ON_OCEAN_EXPLORER_MAPS",
        "e": "ON_TREASURE_MAPS",
        "f": "CATS_SPAWN_IN",
        "g": "CATS_SPAWN_AS_BLACK",
        "h": "VILLAGE",
        "i": "MINESHAFT",
        "j": "SHIPWRECK",
        "k": "RUINED_PORTAL",
        "l": "OCEAN_RUIN"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/tags/TagKey;": "create"
      }
    },
    "net/minecraft/tags/TagEntry": {
      "fields": {
        "b": "FULL_CODEC",
        "a": "CODEC",
        "c": "id",
        "d": "tag",
        "e": "required"
      },
      "methods": {
        "a()Lnet/minecraft/util/ExtraCodecs$TagOrElementLocation;": "elementOrTag",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagEntry;": "element",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagEntry;": "optionalElement",
        "c(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagEntry;": "tag",
        "d(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagEntry;": "optionalTag",
        "a(Lnet/minecraft/tags/TagEntry$Lookup;Ljava/util/function/Consumer;)Z": "build",
        "a(Ljava/util/function/Consumer;)V": "visitRequiredDependencies",
        "b(Ljava/util/function/Consumer;)V": "visitOptionalDependencies",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Predicate;)Z": "verifyIfPresent",
        "a(Lnet/minecraft/tags/TagEntry;)Lcom/mojang/datafixers/util/Either;": "lambda$static$5",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/tags/TagEntry;": "lambda$static$4",
        "b(Lnet/minecraft/tags/TagEntry;)Lnet/minecraft/tags/TagEntry;": "lambda$static$3",
        "a(Lnet/minecraft/util/ExtraCodecs$TagOrElementLocation;)Lnet/minecraft/tags/TagEntry;": "lambda$static$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "c(Lnet/minecraft/tags/TagEntry;)Ljava/lang/Boolean;": "lambda$static$0"
      }
    },
    "net/minecraft/tags/TagFile": {
      "fields": {
        "b": "entries",
        "c": "replace",
        "a": "CODEC"
      },
      "methods": {
        "a()Ljava/util/List;": "entries",
        "b()Z": "replace",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/tags/TagKey": {
      "fields": {
        "a": "registry",
        "b": "location",
        "c": "VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/Codec;": "codec",
        "b(Lnet/minecraft/resources/ResourceKey;)Lcom/mojang/serialization/Codec;": "hashedCodec",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagKey;": "create",
        "c(Lnet/minecraft/resources/ResourceKey;)Z": "isFor",
        "d(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "cast",
        "a()Lnet/minecraft/resources/ResourceKey;": "registry",
        "b()Lnet/minecraft/resources/ResourceLocation;": "location",
        "a(Lnet/minecraft/tags/TagKey;)Ljava/lang/String;": "lambda$hashedCodec$4",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$hashedCodec$3",
        "c()Ljava/lang/String;": "lambda$hashedCodec$2",
        "b(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagKey;": "lambda$hashedCodec$1",
        "c(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/tags/TagKey;": "lambda$codec$0"
      }
    },
    "net/minecraft/tags/TagDataPack": {
      "fields": {
        "a": "LOGGER",
        "b": "idToValue",
        "c": "directory"
      },
      "methods": {
        "a(Lnet/minecraft/tags/TagEntry$Lookup;Ljava/util/List;)Lcom/mojang/datafixers/util/Either;": "build",
        "a(Ljava/util/Map;)Ljava/util/Map;": "build",
        "a(Lnet/minecraft/tags/TagEntry$Lookup;Ljava/util/Map;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/tags/TagLoader$SortingEntry;)V": "lambda$build$5",
        "a(Ljava/util/Map;Lnet/minecraft/resources/ResourceLocation;Ljava/util/Collection;)V": "lambda$build$4",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/Collection;)V": "lambda$build$3",
        "a(Lnet/minecraft/util/DependencySorter;Lnet/minecraft/resources/ResourceLocation;Ljava/util/List;)V": "lambda$build$2",
        "a(Ljava/util/List;Ljava/lang/String;Lnet/minecraft/tags/TagEntry;)V": "lambda$load$1",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/List;": "lambda$load$0"
      }
    },
    "net/minecraft/tags/TagRegistry": {
      "fields": {
        "a": "CUSTOM_REGISTRY_DIRECTORIES",
        "b": "registryAccess",
        "c": "results"
      },
      "methods": {
        "a()Ljava/util/List;": "getResult",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "getTagDir",
        "a(Ljava/util/List;Ljava/lang/Void;)V": "lambda$reload$2",
        "a(I)[Ljava/util/concurrent/CompletableFuture;": "lambda$reload$1"
      }
    },
    "net/minecraft/tags/TagNetworkSerialization": {
      "methods": {
        "a(Lnet/minecraft/core/LayeredRegistryAccess;)Ljava/util/Map;": "serializeTagsToNetwork",
        "a(Lcom/mojang/datafixers/util/Pair;)Z": "lambda$serializeTagsToNetwork$1",
        "a(Lnet/minecraft/core/RegistryAccess$RegistryEntry;)Lcom/mojang/datafixers/util/Pair;": "lambda$serializeTagsToNetwork$0"
      }
    },
    "net/minecraft/util/AbortableIterationConsumer": {
      "methods": {
        "a(Ljava/util/function/Consumer;Ljava/lang/Object;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "lambda$forConsumer$0"
      }
    },
    "net/minecraft/util/DataBits": {
      "methods": {
        "a(II)I": "getAndSet",
        "b(II)V": "set",
        "a(I)I": "get",
        "a()[J": "getRaw",
        "b()I": "getSize",
        "c()I": "getBits",
        "a(Ljava/util/function/IntConsumer;)V": "getAll",
        "a([I)V": "unpack",
        "d()Lnet/minecraft/util/BitStorage;": "copy"
      }
    },
    "net/minecraft/util/Brightness": {
      "fields": {
        "d": "block",
        "e": "sky",
        "a": "LIGHT_VALUE_CODEC",
        "b": "CODEC",
        "c": "FULL_BRIGHT"
      },
      "methods": {
        "a()I": "pack",
        "a(I)Lnet/minecraft/util/Brightness;": "unpack",
        "b()I": "block",
        "c()I": "sky",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/util/ByIdMap": {
      "methods": {
        "a(Ljava/util/function/ToIntFunction;[Ljava/lang/Object;)Ljava/util/function/IntFunction;": "createMap",
        "a(Ljava/util/function/ToIntFunction;[Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/function/IntFunction;": "sparse",
        "b(Ljava/util/function/ToIntFunction;[Ljava/lang/Object;)[Ljava/lang/Object;": "createSortedArray",
        "a(Ljava/util/function/ToIntFunction;[Ljava/lang/Object;Lnet/minecraft/util/ByIdMap$OutOfBoundsStrategy;)Ljava/util/function/IntFunction;": "continuous",
        "a([Ljava/lang/Object;II)Ljava/lang/Object;": "lambda$continuous$3",
        "b([Ljava/lang/Object;II)Ljava/lang/Object;": "lambda$continuous$2",
        "a(I[Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;": "lambda$continuous$1",
        "a(Ljava/util/function/IntFunction;Ljava/lang/Object;I)Ljava/lang/Object;": "lambda$sparse$0"
      }
    },
    "net/minecraft/util/EntitySlice": {
      "fields": {
        "a": "byClass",
        "b": "baseClass",
        "c": "allInstances"
      },
      "methods": {
        "a(Ljava/lang/Class;)Ljava/util/Collection;": "find",
        "a()Ljava/util/List;": "getAllInstances",
        "b(Ljava/lang/Class;)Ljava/util/List;": "lambda$find$0"
      }
    },
    "net/minecraft/util/RegistryID": {
      "fields": {
        "b": "NOT_FOUND",
        "c": "EMPTY_SLOT",
        "d": "LOADFACTOR",
        "e": "keys",
        "f": "values",
        "g": "byId",
        "h": "nextId",
        "i": "size"
      },
      "methods": {
        "c(I)Lnet/minecraft/util/CrudeIncrementalIntIdentityHashBiMap;": "create",
        "a(Ljava/lang/Object;)I": "getId",
        "a(I)Ljava/lang/Object;": "byId",
        "e(I)I": "getValue",
        "b(Ljava/lang/Object;)Z": "contains",
        "d(I)Z": "contains",
        "c(Ljava/lang/Object;)I": "add",
        "d()I": "nextId",
        "f(I)V": "grow",
        "a(Ljava/lang/Object;I)V": "addMapping",
        "d(Ljava/lang/Object;)I": "hash",
        "b(Ljava/lang/Object;I)I": "indexOf",
        "g(I)I": "findEmpty",
        "a()V": "clear",
        "b()I": "size",
        "c()Lnet/minecraft/util/CrudeIncrementalIntIdentityHashBiMap;": "copy"
      }
    },
    "net/minecraft/util/MinecraftEncryption": {
      "fields": {
        "h": "SYMMETRIC_ALGORITHM",
        "i": "SYMMETRIC_BITS",
        "j": "ASYMMETRIC_ALGORITHM",
        "k": "ASYMMETRIC_BITS",
        "l": "BYTE_ENCODING",
        "m": "HASH_ALGORITHM",
        "a": "SIGNING_ALGORITHM",
        "b": "SIGNATURE_BYTES",
        "n": "PEM_RSA_PRIVATE_KEY_HEADER",
        "o": "PEM_RSA_PRIVATE_KEY_FOOTER",
        "c": "RSA_PUBLIC_KEY_HEADER",
        "p": "RSA_PUBLIC_KEY_FOOTER",
        "d": "MIME_LINE_SEPARATOR",
        "e": "MIME_ENCODER",
        "f": "PUBLIC_KEY_CODEC",
        "g": "PRIVATE_KEY_CODEC"
      },
      "methods": {
        "a()Ljavax/crypto/SecretKey;": "generateSecretKey",
        "b()Ljava/security/KeyPair;": "generateKeyPair",
        "a(Ljava/lang/String;Ljava/security/PublicKey;Ljavax/crypto/SecretKey;)[B": "digestData",
        "a([[B)[B": "digestData",
        "a(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/util/Crypt$ByteArrayToKeyFunction;)Ljava/security/Key;": "rsaStringToKey",
        "a(Ljava/lang/String;)Ljava/security/PrivateKey;": "stringToPemRsaPrivateKey",
        "b(Ljava/lang/String;)Ljava/security/PublicKey;": "stringToRsaPublicKey",
        "a(Ljava/security/PublicKey;)Ljava/lang/String;": "rsaPublicKeyToString",
        "a(Ljava/security/PrivateKey;)Ljava/lang/String;": "pemRsaPrivateKeyToString",
        "b([B)Ljava/security/PrivateKey;": "byteToPrivateKey",
        "a([B)Ljava/security/PublicKey;": "byteToPublicKey",
        "a(Ljava/security/PrivateKey;[B)Ljavax/crypto/SecretKey;": "decryptByteToSecretKey",
        "a(Ljava/security/Key;[B)[B": "encryptUsingKey",
        "b(Ljava/security/Key;[B)[B": "decryptUsingKey",
        "a(ILjava/security/Key;[B)[B": "cipherData",
        "a(ILjava/lang/String;Ljava/security/Key;)Ljavax/crypto/Cipher;": "setupCipher",
        "a(ILjava/security/Key;)Ljavax/crypto/Cipher;": "getCipher",
        "c(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "d(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$0"
      }
    },
    "net/minecraft/util/CryptographyException": {},
    "net/minecraft/util/CSVWriter": {
      "fields": {
        "a": "LINE_SEPARATOR",
        "b": "FIELD_SEPARATOR",
        "c": "output",
        "d": "columnCount"
      },
      "methods": {
        "a()Lnet/minecraft/util/CsvOutput$Builder;": "builder",
        "a([Ljava/lang/Object;)V": "writeRow",
        "a(Ljava/util/stream/Stream;)V": "writeLine",
        "a(Ljava/lang/Object;)Ljava/lang/String;": "getStringValue"
      }
    },
    "net/minecraft/util/CubicSpline": {
      "methods": {
        "a()Ljava/lang/String;": "parityString",
        "a(Lnet/minecraft/util/CubicSpline$CoordinateVisitor;)Lnet/minecraft/util/CubicSpline;": "mapAll",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "codec",
        "a(F)Lnet/minecraft/util/CubicSpline;": "constant",
        "a(Lnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline$Builder;": "builder",
        "a(Lnet/minecraft/util/ToFloatFunction;Lnet/minecraft/util/ToFloatFunction;)Lnet/minecraft/util/CubicSpline$Builder;": "builder",
        "a(Lnet/minecraft/util/CubicSpline;)Lcom/mojang/datafixers/util/Either;": "lambda$codec$8",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/util/CubicSpline;": "lambda$codec$7",
        "a(Lnet/minecraft/util/CubicSpline$Multipoint;)Ljava/lang/Record;": "lambda$codec$6",
        "a(Lcom/mojang/serialization/Codec;Lcom/mojang/serialization/Codec;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$5",
        "a(Lnet/minecraft/util/ToFloatFunction;Ljava/util/List;)Lnet/minecraft/util/CubicSpline$Multipoint;": "lambda$codec$4",
        "b(Lnet/minecraft/util/CubicSpline$Multipoint;)Ljava/util/List;": "lambda$codec$3",
        "a(Lnet/minecraft/util/CubicSpline$Multipoint;I)Lnet/minecraft/util/CubicSpline$1Point;": "lambda$codec$2",
        "a(Lorg/apache/commons/lang3/mutable/MutableObject;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$1",
        "a(FLnet/minecraft/util/CubicSpline;F)Lnet/minecraft/util/CubicSpline$1Point;": "lambda$codec$0"
      }
    },
    "net/minecraft/util/DebugBuffer": {
      "fields": {
        "a": "data",
        "b": "index"
      },
      "methods": {
        "a(Ljava/lang/Object;)V": "push",
        "a()Ljava/util/List;": "dump"
      }
    },
    "net/minecraft/util/DependencySorter": {
      "fields": {
        "a": "contents"
      },
      "methods": {
        "a(Ljava/lang/Object;Lnet/minecraft/util/DependencySorter$Entry;)Lnet/minecraft/util/DependencySorter;": "addEntry",
        "a(Lcom/google/common/collect/Multimap;Ljava/util/Set;Ljava/lang/Object;Ljava/util/function/BiConsumer;)V": "visitDependenciesAndElement",
        "a(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Ljava/lang/Object;)Z": "isCyclic",
        "b(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Ljava/lang/Object;)V": "addDependencyIfNotCyclic",
        "a(Ljava/util/function/BiConsumer;)V": "orderByDependencies",
        "a(Lcom/google/common/collect/Multimap;Ljava/util/Set;Ljava/util/function/BiConsumer;Ljava/lang/Object;)V": "lambda$orderByDependencies$6",
        "a(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Lnet/minecraft/util/DependencySorter$Entry;)V": "lambda$orderByDependencies$5",
        "c(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Ljava/lang/Object;)V": "lambda$orderByDependencies$4",
        "b(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Lnet/minecraft/util/DependencySorter$Entry;)V": "lambda$orderByDependencies$3",
        "d(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Ljava/lang/Object;)V": "lambda$orderByDependencies$2",
        "e(Lcom/google/common/collect/Multimap;Ljava/lang/Object;Ljava/lang/Object;)Z": "lambda$isCyclic$1",
        "b(Lcom/google/common/collect/Multimap;Ljava/util/Set;Ljava/util/function/BiConsumer;Ljava/lang/Object;)V": "lambda$visitDependenciesAndElement$0"
      }
    },
    "net/minecraft/util/SessionLock": {
      "fields": {
        "a": "LOCK_FILE",
        "b": "lockFile",
        "c": "lock",
        "d": "DUMMY"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)Lnet/minecraft/util/DirectoryLock;": "create",
        "a()Z": "isValid",
        "b(Ljava/nio/file/Path;)Z": "isLocked"
      }
    },
    "net/minecraft/util/SessionLock$ExceptionWorldConflict": {
      "methods": {
        "a(Ljava/nio/file/Path;)Lnet/minecraft/util/DirectoryLock$LockException;": "alreadyLocked"
      }
    },
    "net/minecraft/util/ExceptionSuppressor": {
      "fields": {
        "a": "result"
      },
      "methods": {
        "a(Ljava/lang/Throwable;)V": "add",
        "a()V": "throwIfPresent"
      }
    },
    "net/minecraft/util/ExtraCodecs": {
      "fields": {
        "a": "JSON",
        "b": "COMPONENT",
        "c": "FLAT_COMPONENT",
        "d": "VECTOR3F",
        "e": "QUATERNIONF_COMPONENTS",
        "f": "AXISANGLE4F",
        "g": "QUATERNIONF",
        "h": "MATRIX4F",
        "i": "NON_NEGATIVE_INT",
        "j": "POSITIVE_INT",
        "k": "POSITIVE_FLOAT",
        "l": "PATTERN",
        "m": "INSTANT_ISO8601",
        "n": "BASE64_STRING",
        "o": "TAG_OR_ELEMENT_ID",
        "p": "toOptionalLong",
        "q": "fromOptionalLong",
        "r": "BIT_SET",
        "w": "PROPERTY",
        "s": "PROPERTY_MAP",
        "t": "GAME_PROFILE",
        "u": "NON_EMPTY_STRING",
        "v": "CODEPOINT"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "xor",
        "a(Lcom/mojang/serialization/Codec;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/BiFunction;Ljava/util/function/Function;Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "intervalCodec",
        "a(Ljava/lang/Object;)Lcom/mojang/serialization/Codec$ResultFunction;": "orElsePartial",
        "a(Ljava/util/function/ToIntFunction;Ljava/util/function/IntFunction;I)Lcom/mojang/serialization/Codec;": "idResolverCodec",
        "a(Ljava/util/function/Function;Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "stringResolverCodec",
        "b(Lcom/mojang/serialization/Codec;Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "orCompressed",
        "a(Lcom/mojang/serialization/Codec;Ljava/util/function/Function;Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "overrideLifecycle",
        "a(Lcom/mojang/serialization/Codec;Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "validate",
        "a(Lcom/mojang/serialization/MapCodec;Ljava/util/function/Function;)Lcom/mojang/serialization/MapCodec;": "validate",
        "a(IILjava/util/function/Function;)Lcom/mojang/serialization/Codec;": "intRangeWithMessage",
        "a(II)Lcom/mojang/serialization/Codec;": "intRange",
        "a(FFLjava/util/function/Function;)Lcom/mojang/serialization/Codec;": "floatRangeMinExclusiveWithMessage",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "nonEmptyList",
        "b(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "nonEmptyHolderSet",
        "a(Ljava/util/function/Supplier;)Lcom/mojang/serialization/Codec;": "lazyInitializedCodec",
        "a(Ljava/util/function/Function;)Lcom/mojang/serialization/MapCodec;": "retrieveContext",
        "b(Ljava/util/function/Function;)Ljava/util/function/Function;": "ensureHomogenous",
        "c(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "catchDecoderException",
        "a(Ljava/time/format/DateTimeFormatter;)Lcom/mojang/serialization/Codec;": "instantCodec",
        "a(Lcom/mojang/serialization/MapCodec;)Lcom/mojang/serialization/MapCodec;": "asOptionalLong",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/serialization/DataResult;": "mapIdNameToGameProfile",
        "a(Lcom/mojang/authlib/GameProfile;)Lcom/mojang/serialization/DataResult;": "mapGameProfileToIdName",
        "b(II)Lcom/mojang/serialization/Codec;": "sizeLimitedString",
        "a(IILjava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$sizeLimitedString$90",
        "a(Ljava/lang/String;III)Ljava/lang/String;": "lambda$sizeLimitedString$89",
        "b(Ljava/lang/String;III)Ljava/lang/String;": "lambda$sizeLimitedString$88",
        "a(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$87",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$static$86",
        "c(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$85",
        "a()Ljava/lang/String;": "lambda$static$84",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$83",
        "a(Lcom/mojang/authlib/GameProfile;Lcom/mojang/authlib/properties/PropertyMap;)Lcom/mojang/authlib/GameProfile;": "lambda$static$82",
        "a(Lcom/mojang/authlib/GameProfile;Ljava/lang/String;Lcom/mojang/authlib/properties/Property;)V": "lambda$static$81",
        "a(Ljava/util/Optional;)Ljava/lang/String;": "lambda$static$80",
        "b(Ljava/util/Optional;)Ljava/util/UUID;": "lambda$static$79",
        "a(Lcom/mojang/authlib/properties/PropertyMap;)Lcom/mojang/datafixers/util/Either;": "lambda$static$78",
        "a(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/authlib/properties/PropertyMap;": "lambda$static$77",
        "a(Lcom/mojang/authlib/properties/PropertyMap;Ljava/util/List;)V": "lambda$static$76",
        "a(Lcom/mojang/authlib/properties/PropertyMap;Ljava/util/Map;)V": "lambda$static$75",
        "a(Lcom/mojang/authlib/properties/PropertyMap;Ljava/lang/String;Ljava/util/List;)V": "lambda$static$74",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$73",
        "a(Ljava/lang/String;Ljava/lang/String;Ljava/util/Optional;)Lcom/mojang/authlib/properties/Property;": "lambda$static$72",
        "a(Lcom/mojang/authlib/properties/Property;)Ljava/util/Optional;": "lambda$static$71",
        "a(Ljava/util/BitSet;)Ljava/util/stream/LongStream;": "lambda$static$70",
        "a(Ljava/util/stream/LongStream;)Ljava/util/BitSet;": "lambda$static$69",
        "a(Ljava/util/OptionalLong;)Ljava/util/Optional;": "lambda$static$68",
        "c(Ljava/util/Optional;)Ljava/util/OptionalLong;": "lambda$static$67",
        "d(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$66",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/util/ExtraCodecs$TagOrElementLocation;": "lambda$static$65",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/util/ExtraCodecs$TagOrElementLocation;": "lambda$static$64",
        "a([B)Ljava/lang/String;": "lambda$static$63",
        "e(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$62",
        "b()Ljava/lang/String;": "lambda$static$61",
        "a(Ljava/time/format/DateTimeFormatter;Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$instantCodec$60",
        "f(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$59",
        "a(Ljava/lang/String;Ljava/util/regex/PatternSyntaxException;)Ljava/lang/String;": "lambda$static$58",
        "a(Ljava/util/function/Function;Ljava/util/Collection;)Lcom/mojang/serialization/DataResult;": "lambda$ensureHomogenous$57",
        "a(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;": "lambda$ensureHomogenous$56",
        "a(Lnet/minecraft/core/HolderSet;)Lcom/mojang/serialization/DataResult;": "lambda$nonEmptyHolderSet$55",
        "c()Ljava/lang/String;": "lambda$nonEmptyHolderSet$54",
        "a(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$nonEmptyList$53",
        "d()Ljava/lang/String;": "lambda$nonEmptyList$52",
        "a(Ljava/lang/Float;)Ljava/lang/String;": "lambda$static$51",
        "a(FFLjava/util/function/Function;Ljava/lang/Float;)Lcom/mojang/serialization/DataResult;": "lambda$floatRangeMinExclusiveWithMessage$50",
        "a(Ljava/util/function/Function;Ljava/lang/Float;)Ljava/lang/String;": "lambda$floatRangeMinExclusiveWithMessage$49",
        "a(IILjava/lang/Integer;)Ljava/lang/String;": "lambda$intRange$48",
        "a(Ljava/lang/Integer;)Ljava/lang/String;": "lambda$static$47",
        "b(Ljava/lang/Integer;)Ljava/lang/String;": "lambda$static$46",
        "a(IILjava/util/function/Function;Ljava/lang/Integer;)Lcom/mojang/serialization/DataResult;": "lambda$intRangeWithMessage$45",
        "a(Ljava/util/function/Function;Ljava/lang/Integer;)Ljava/lang/String;": "lambda$intRangeWithMessage$44",
        "a(Ljava/util/function/Function;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$stringResolverCodec$43",
        "b(Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$stringResolverCodec$42",
        "c(Ljava/lang/Object;)Ljava/lang/String;": "lambda$stringResolverCodec$41",
        "a(Ljava/util/function/Function;Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$stringResolverCodec$40",
        "g(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$stringResolverCodec$39",
        "h(Ljava/lang/String;)Ljava/lang/String;": "lambda$stringResolverCodec$38",
        "a(Ljava/util/function/ToIntFunction;ILjava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$idResolverCodec$37",
        "d(Ljava/lang/Object;)Ljava/lang/String;": "lambda$idResolverCodec$36",
        "a(Ljava/util/function/IntFunction;Ljava/lang/Integer;)Lcom/mojang/serialization/DataResult;": "lambda$idResolverCodec$35",
        "c(Ljava/lang/Integer;)Lcom/mojang/serialization/DataResult;": "lambda$idResolverCodec$34",
        "d(Ljava/lang/Integer;)Ljava/lang/String;": "lambda$idResolverCodec$33",
        "a(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Lcom/mojang/datafixers/util/Either;": "lambda$intervalCodec$32",
        "a(Ljava/util/function/BiFunction;Lcom/mojang/datafixers/util/Either;)Lcom/mojang/serialization/DataResult;": "lambda$intervalCodec$31",
        "a(Ljava/util/function/BiFunction;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "lambda$intervalCodec$30",
        "b(Lcom/mojang/datafixers/util/Either;)Ljava/lang/Object;": "lambda$intervalCodec$29",
        "e(Ljava/lang/Object;)Ljava/lang/Object;": "lambda$intervalCodec$28",
        "f(Ljava/lang/Object;)Ljava/lang/Object;": "lambda$intervalCodec$27",
        "b(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Lcom/mojang/datafixers/util/Pair;": "lambda$intervalCodec$26",
        "a(Ljava/util/function/BiFunction;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/serialization/DataResult;": "lambda$intervalCodec$25",
        "a(Lcom/mojang/serialization/Codec;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$intervalCodec$24",
        "c(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/util/List;": "lambda$intervalCodec$23",
        "a(Ljava/util/function/BiFunction;Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$intervalCodec$22",
        "b(Ljava/util/function/BiFunction;Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$intervalCodec$21",
        "a(Lorg/joml/Matrix4f;)Ljava/util/List;": "lambda$static$20",
        "b(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$static$19",
        "c(Ljava/util/List;)Lorg/joml/Matrix4f;": "lambda$static$18",
        "c(Lcom/mojang/datafixers/util/Either;)Lorg/joml/Quaternionf;": "lambda$static$17",
        "a(Lorg/joml/Quaternionf;)Lorg/joml/Quaternionf;": "lambda$static$16",
        "b(Lorg/joml/Quaternionf;)Lorg/joml/Quaternionf;": "lambda$static$15",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$14",
        "a(Lorg/joml/AxisAngle4f;)Lorg/joml/Vector3f;": "lambda$static$13",
        "b(Lorg/joml/AxisAngle4f;)Ljava/lang/Float;": "lambda$static$12",
        "c(Lorg/joml/Quaternionf;)Ljava/util/List;": "lambda$static$11",
        "d(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$static$10",
        "e(Ljava/util/List;)Lorg/joml/Quaternionf;": "lambda$static$9",
        "a(Lorg/joml/Vector3f;)Ljava/util/List;": "lambda$static$8",
        "f(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$static$7",
        "g(Ljava/util/List;)Lorg/joml/Vector3f;": "lambda$static$6",
        "a(Lnet/minecraft/network/chat/Component;)Lcom/mojang/serialization/DataResult;": "lambda$static$5",
        "i(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$static$4",
        "b(Lnet/minecraft/network/chat/Component;)Lcom/mojang/serialization/DataResult;": "lambda$static$3",
        "a(Lcom/google/gson/JsonElement;)Lcom/mojang/serialization/DataResult;": "lambda$static$2",
        "b(Lcom/google/gson/JsonElement;)Lcom/mojang/serialization/Dynamic;": "lambda$static$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/google/gson/JsonElement;": "lambda$static$0"
      }
    },
    "net/minecraft/util/FastBufferedInputStream": {
      "fields": {
        "a": "DEFAULT_BUFFER_SIZE",
        "b": "in",
        "c": "buffer",
        "d": "limit",
        "e": "position"
      },
      "methods": {
        "a()I": "bytesInBuffer",
        "b()V": "fill"
      }
    },
    "net/minecraft/util/ColorUtil": {},
    "net/minecraft/util/FileZipper": {
      "fields": {
        "a": "LOGGER",
        "b": "outputFile",
        "c": "tempFile",
        "d": "fs"
      },
      "methods": {
        "a(Ljava/nio/file/Path;Ljava/lang/String;)V": "add",
        "a(Ljava/nio/file/Path;Ljava/io/File;)V": "add",
        "a(Ljava/nio/file/Path;)V": "add",
        "a(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Z": "lambda$add$0"
      }
    },
    "net/minecraft/util/FormattedString": {
      "fields": {
        "a": "EMPTY"
      },
      "methods": {
        "a(Ljava/util/List;Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$fromList$8",
        "a(Lnet/minecraft/util/FormattedCharSequence;Lnet/minecraft/util/FormattedCharSequence;Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$fromPair$7",
        "a(Lnet/minecraft/util/FormattedCharSink;Lit/unimi/dsi/fastutil/ints/Int2IntFunction;ILnet/minecraft/network/chat/Style;I)Z": "lambda$decorateOutput$6",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lit/unimi/dsi/fastutil/ints/Int2IntFunction;Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$backward$5",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$backward$4",
        "b(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lit/unimi/dsi/fastutil/ints/Int2IntFunction;Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$forward$3",
        "b(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$forward$2",
        "a(Lnet/minecraft/network/chat/Style;ILnet/minecraft/util/FormattedCharSink;)Z": "lambda$codepoint$1",
        "a(Lnet/minecraft/util/FormattedCharSink;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/util/FormattedStringEmpty": {},
    "net/minecraft/util/CircularTimer": {
      "fields": {
        "a": "LOGGING_LENGTH",
        "b": "loggedTimes",
        "c": "logStart",
        "d": "logLength",
        "e": "logEnd"
      },
      "methods": {
        "a(J)V": "logFrameDuration",
        "a(I)J": "getAverageDuration",
        "a(II)I": "scaleAverageDurationTo",
        "a(JII)I": "scaleSampleTo",
        "a()I": "getLogStart",
        "b()I": "getLogEnd",
        "b(I)I": "wrapIndex",
        "c()[J": "getLog"
      }
    },
    "net/minecraft/util/FutureChain": {
      "fields": {
        "b": "LOGGER",
        "c": "head",
        "d": "checkedExecutor",
        "e": "closed"
      },
      "methods": {
        "a(Ljava/lang/Throwable;)Ljava/lang/Object;": "lambda$append$2",
        "a(Lnet/minecraft/util/TaskChainer$DelayedTask;Ljava/lang/Object;)Ljava/util/concurrent/CompletionStage;": "lambda$append$1",
        "a(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V": "lambda$new$0"
      }
    },
    "net/minecraft/util/Graph": {
      "methods": {
        "a(Ljava/util/Map;Ljava/util/Set;Ljava/util/Set;Ljava/util/function/Consumer;Ljava/lang/Object;)Z": "depthFirstSearch"
      }
    },
    "net/minecraft/util/ChatDeserializer": {
      "fields": {
        "a": "GSON"
      },
      "methods": {
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isStringValue",
        "a(Lcom/google/gson/JsonElement;)Z": "isStringValue",
        "b(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isNumberValue",
        "b(Lcom/google/gson/JsonElement;)Z": "isNumberValue",
        "c(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isBooleanValue",
        "c(Lcom/google/gson/JsonElement;)Z": "isBooleanValue",
        "d(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isArrayNode",
        "e(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isObjectNode",
        "f(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isValidPrimitive",
        "g(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "isValidNode",
        "h(Lcom/google/gson/JsonObject;Ljava/lang/String;)Lcom/google/gson/JsonElement;": "getNonNull",
        "a(Lcom/google/gson/JsonElement;Ljava/lang/String;)Ljava/lang/String;": "convertToString",
        "i(Lcom/google/gson/JsonObject;Ljava/lang/String;)Ljava/lang/String;": "getAsString",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "getAsString",
        "b(Lcom/google/gson/JsonElement;Ljava/lang/String;)Lnet/minecraft/world/item/Item;": "convertToItem",
        "j(Lcom/google/gson/JsonObject;Ljava/lang/String;)Lnet/minecraft/world/item/Item;": "getAsItem",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/Item;": "getAsItem",
        "c(Lcom/google/gson/JsonElement;Ljava/lang/String;)Z": "convertToBoolean",
        "k(Lcom/google/gson/JsonObject;Ljava/lang/String;)Z": "getAsBoolean",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Z)Z": "getAsBoolean",
        "d(Lcom/google/gson/JsonElement;Ljava/lang/String;)D": "convertToDouble",
        "l(Lcom/google/gson/JsonObject;Ljava/lang/String;)D": "getAsDouble",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;D)D": "getAsDouble",
        "e(Lcom/google/gson/JsonElement;Ljava/lang/String;)F": "convertToFloat",
        "m(Lcom/google/gson/JsonObject;Ljava/lang/String;)F": "getAsFloat",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;F)F": "getAsFloat",
        "f(Lcom/google/gson/JsonElement;Ljava/lang/String;)J": "convertToLong",
        "n(Lcom/google/gson/JsonObject;Ljava/lang/String;)J": "getAsLong",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;J)J": "getAsLong",
        "g(Lcom/google/gson/JsonElement;Ljava/lang/String;)I": "convertToInt",
        "o(Lcom/google/gson/JsonObject;Ljava/lang/String;)I": "getAsInt",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;I)I": "getAsInt",
        "h(Lcom/google/gson/JsonElement;Ljava/lang/String;)B": "convertToByte",
        "p(Lcom/google/gson/JsonObject;Ljava/lang/String;)B": "getAsByte",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;B)B": "getAsByte",
        "i(Lcom/google/gson/JsonElement;Ljava/lang/String;)C": "convertToCharacter",
        "q(Lcom/google/gson/JsonObject;Ljava/lang/String;)C": "getAsCharacter",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;C)C": "getAsCharacter",
        "j(Lcom/google/gson/JsonElement;Ljava/lang/String;)Ljava/math/BigDecimal;": "convertToBigDecimal",
        "r(Lcom/google/gson/JsonObject;Ljava/lang/String;)Ljava/math/BigDecimal;": "getAsBigDecimal",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;": "getAsBigDecimal",
        "k(Lcom/google/gson/JsonElement;Ljava/lang/String;)Ljava/math/BigInteger;": "convertToBigInteger",
        "s(Lcom/google/gson/JsonObject;Ljava/lang/String;)Ljava/math/BigInteger;": "getAsBigInteger",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;": "getAsBigInteger",
        "l(Lcom/google/gson/JsonElement;Ljava/lang/String;)S": "convertToShort",
        "t(Lcom/google/gson/JsonObject;Ljava/lang/String;)S": "getAsShort",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;S)S": "getAsShort",
        "m(Lcom/google/gson/JsonElement;Ljava/lang/String;)Lcom/google/gson/JsonObject;": "convertToJsonObject",
        "u(Lcom/google/gson/JsonObject;Ljava/lang/String;)Lcom/google/gson/JsonObject;": "getAsJsonObject",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Lcom/google/gson/JsonObject;)Lcom/google/gson/JsonObject;": "getAsJsonObject",
        "n(Lcom/google/gson/JsonElement;Ljava/lang/String;)Lcom/google/gson/JsonArray;": "convertToJsonArray",
        "v(Lcom/google/gson/JsonObject;Ljava/lang/String;)Lcom/google/gson/JsonArray;": "getAsJsonArray",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Lcom/google/gson/JsonArray;)Lcom/google/gson/JsonArray;": "getAsJsonArray",
        "a(Lcom/google/gson/JsonElement;Ljava/lang/String;Lcom/google/gson/JsonDeserializationContext;Ljava/lang/Class;)Ljava/lang/Object;": "convertToObject",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Lcom/google/gson/JsonDeserializationContext;Ljava/lang/Class;)Ljava/lang/Object;": "getAsObject",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/String;Ljava/lang/Object;Lcom/google/gson/JsonDeserializationContext;Ljava/lang/Class;)Ljava/lang/Object;": "getAsObject",
        "d(Lcom/google/gson/JsonElement;)Ljava/lang/String;": "getType",
        "a(Lcom/google/gson/Gson;Ljava/io/Reader;Ljava/lang/Class;Z)Ljava/lang/Object;": "fromNullableJson",
        "b(Lcom/google/gson/Gson;Ljava/io/Reader;Ljava/lang/Class;Z)Ljava/lang/Object;": "fromJson",
        "a(Lcom/google/gson/Gson;Ljava/io/Reader;Lcom/google/gson/reflect/TypeToken;Z)Ljava/lang/Object;": "fromNullableJson",
        "b(Lcom/google/gson/Gson;Ljava/io/Reader;Lcom/google/gson/reflect/TypeToken;Z)Ljava/lang/Object;": "fromJson",
        "a(Lcom/google/gson/Gson;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;Z)Ljava/lang/Object;": "fromNullableJson",
        "a(Lcom/google/gson/Gson;Ljava/lang/String;Ljava/lang/Class;Z)Ljava/lang/Object;": "fromJson",
        "b(Lcom/google/gson/Gson;Ljava/lang/String;Ljava/lang/Class;Z)Ljava/lang/Object;": "fromNullableJson",
        "a(Lcom/google/gson/Gson;Ljava/io/Reader;Lcom/google/gson/reflect/TypeToken;)Ljava/lang/Object;": "fromJson",
        "a(Lcom/google/gson/Gson;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;)Ljava/lang/Object;": "fromNullableJson",
        "a(Lcom/google/gson/Gson;Ljava/io/Reader;Ljava/lang/Class;)Ljava/lang/Object;": "fromJson",
        "a(Lcom/google/gson/Gson;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;": "fromJson",
        "a(Ljava/lang/String;Z)Lcom/google/gson/JsonObject;": "parse",
        "a(Ljava/io/Reader;Z)Lcom/google/gson/JsonObject;": "parse",
        "a(Ljava/lang/String;)Lcom/google/gson/JsonObject;": "parse",
        "a(Ljava/io/Reader;)Lcom/google/gson/JsonObject;": "parse",
        "b(Ljava/lang/String;)Lcom/google/gson/JsonArray;": "parseArray",
        "b(Ljava/io/Reader;)Lcom/google/gson/JsonArray;": "parseArray",
        "e(Lcom/google/gson/JsonElement;)Ljava/lang/String;": "toStableString",
        "a(Lcom/google/gson/stream/JsonWriter;Lcom/google/gson/JsonElement;Ljava/util/Comparator;)V": "writeValue",
        "a(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/util/Collection;": "sortByKeyIfNeeded",
        "a(Ljava/lang/String;Ljava/lang/String;)Lcom/google/gson/JsonSyntaxException;": "lambda$convertToItem$0"
      }
    },
    "net/minecraft/util/HttpUtilities": {
      "fields": {
        "b": "LOGGER",
        "a": "DOWNLOAD_EXECUTOR"
      },
      "methods": {
        "a(Ljava/io/File;Ljava/net/URL;Ljava/util/Map;ILnet/minecraft/util/ProgressListener;Ljava/net/Proxy;)Ljava/util/concurrent/CompletableFuture;": "downloadTo",
        "a()I": "getAvailablePort",
        "a(I)Z": "isPortAvailable",
        "a(Lnet/minecraft/util/ProgressListener;Ljava/net/URL;Ljava/net/Proxy;Ljava/util/Map;Ljava/io/File;I)Ljava/lang/Object;": "lambda$downloadTo$0"
      }
    },
    "net/minecraft/util/InclusiveRange": {
      "fields": {
        "b": "minInclusive",
        "c": "maxInclusive",
        "a": "INT"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Lcom/mojang/serialization/Codec;Ljava/lang/Comparable;Ljava/lang/Comparable;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Ljava/lang/Comparable;Ljava/lang/Comparable;)Lcom/mojang/serialization/DataResult;": "create",
        "a(Ljava/lang/Comparable;)Z": "isValueInRange",
        "a(Lnet/minecraft/util/InclusiveRange;)Z": "contains",
        "a()Ljava/lang/Comparable;": "minInclusive",
        "b()Ljava/lang/Comparable;": "maxInclusive",
        "c()Ljava/lang/String;": "lambda$create$3",
        "a(Ljava/lang/Comparable;Ljava/lang/Comparable;Lnet/minecraft/util/InclusiveRange;)Lcom/mojang/serialization/DataResult;": "lambda$codec$2",
        "a(Ljava/lang/Comparable;Lnet/minecraft/util/InclusiveRange;)Ljava/lang/String;": "lambda$codec$1",
        "b(Ljava/lang/Comparable;Lnet/minecraft/util/InclusiveRange;)Ljava/lang/String;": "lambda$codec$0"
      }
    },
    "net/minecraft/util/KeyDispatchDataCodec": {
      "fields": {
        "a": "codec"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;)Lnet/minecraft/util/KeyDispatchDataCodec;": "of",
        "a(Lcom/mojang/serialization/MapCodec;)Lnet/minecraft/util/KeyDispatchDataCodec;": "of",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/util/LazyInitVar": {
      "fields": {
        "a": "factory"
      },
      "methods": {
        "a()Ljava/lang/Object;": "get"
      }
    },
    "net/minecraft/util/LinearCongruentialGenerator": {
      "fields": {
        "a": "MULTIPLIER",
        "b": "INCREMENT"
      },
      "methods": {
        "a(JJ)J": "next"
      }
    },
    "net/minecraft/util/ChatTypeAdapterFactory": {
      "methods": {
        "a(Ljava/lang/Object;)Ljava/lang/String;": "toLowercase"
      }
    },
    "net/minecraft/util/MemoryReserve": {
      "fields": {
        "a": "reserve"
      },
      "methods": {
        "a()V": "allocate",
        "b()V": "release"
      }
    },
    "net/minecraft/util/ModCheck": {
      "fields": {
        "a": "confidence",
        "b": "description"
      },
      "methods": {
        "a(Ljava/lang/String;Ljava/util/function/Supplier;Ljava/lang/String;Ljava/lang/Class;)Lnet/minecraft/util/ModCheck;": "identify",
        "a()Z": "shouldReportAsModified",
        "a(Lnet/minecraft/util/ModCheck;)Lnet/minecraft/util/ModCheck;": "merge",
        "b()Ljava/lang/String;": "fullDescription",
        "c()Lnet/minecraft/util/ModCheck$Confidence;": "confidence",
        "d()Ljava/lang/String;": "description"
      }
    },
    "net/minecraft/util/MathHelper": {
      "fields": {
        "h": "UUID_VERSION",
        "i": "UUID_VERSION_TYPE_4",
        "j": "UUID_VARIANT",
        "k": "UUID_VARIANT_2",
        "a": "PI",
        "b": "HALF_PI",
        "c": "TWO_PI",
        "d": "DEG_TO_RAD",
        "e": "RAD_TO_DEG",
        "f": "EPSILON",
        "g": "SQRT_OF_TWO",
        "l": "SIN_SCALE",
        "m": "SIN",
        "n": "RANDOM",
        "o": "MULTIPLY_DE_BRUIJN_BIT_POSITION",
        "p": "ONE_SIXTH",
        "q": "FRAC_EXP",
        "r": "LUT_SIZE",
        "s": "FRAC_BIAS",
        "t": "ASIN_TAB",
        "u": "COS_TAB"
      },
      "methods": {
        "a(F)F": "sin",
        "b(F)F": "cos",
        "c(F)F": "sqrt",
        "d(F)I": "floor",
        "a(D)I": "floor",
        "b(D)J": "lfloor",
        "e(F)F": "abs",
        "a(I)I": "abs",
        "f(F)I": "ceil",
        "c(D)I": "ceil",
        "a(III)I": "clamp",
        "a(FFF)F": "clamp",
        "a(DDD)D": "clamp",
        "b(DDD)D": "clampedLerp",
        "b(FFF)F": "clampedLerp",
        "a(DD)D": "absMax",
        "a(II)I": "floorDiv",
        "a(Lnet/minecraft/util/RandomSource;II)I": "nextInt",
        "a(Lnet/minecraft/util/RandomSource;FF)F": "nextFloat",
        "a(Lnet/minecraft/util/RandomSource;DD)D": "nextDouble",
        "a(FF)Z": "equal",
        "b(DD)Z": "equal",
        "b(II)I": "positiveModulo",
        "b(FF)F": "positiveModulo",
        "c(DD)D": "positiveModulo",
        "c(II)Z": "isMultipleOf",
        "b(I)I": "wrapDegrees",
        "g(F)F": "wrapDegrees",
        "d(D)D": "wrapDegrees",
        "c(FF)F": "degreesDifference",
        "d(FF)F": "degreesDifferenceAbs",
        "c(FFF)F": "rotateIfNecessary",
        "d(FFF)F": "approach",
        "e(FFF)F": "approachDegrees",
        "a(Ljava/lang/String;I)I": "getInt",
        "c(I)I": "smallestEncompassingPowerOfTwo",
        "d(I)Z": "isPowerOfTwo",
        "e(I)I": "ceillog2",
        "f(I)I": "log2",
        "f(FFF)I": "color",
        "h(F)F": "frac",
        "e(D)D": "frac",
        "a(Lnet/minecraft/core/Vec3i;)J": "getSeed",
        "b(III)J": "getSeed",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/UUID;": "createInsecureUUID",
        "a()Ljava/util/UUID;": "createInsecureUUID",
        "c(DDD)D": "inverseLerp",
        "g(FFF)F": "inverseLerp",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;)Z": "rayIntersectsAABB",
        "d(DD)D": "atan2",
        "i(F)F": "invSqrt",
        "f(D)D": "invSqrt",
        "g(D)D": "fastInvSqrt",
        "j(F)F": "fastInvCubeRoot",
        "h(FFF)I": "hsvToRgb",
        "g(I)I": "murmurHash3Mixer",
        "a(IILjava/util/function/IntPredicate;)I": "binarySearch",
        "a(FII)I": "lerpInt",
        "i(FFF)F": "lerp",
        "d(DDD)D": "lerp",
        "a(DDDDDD)D": "lerp2",
        "a(DDDDDDDDDDD)D": "lerp3",
        "a(FFFFF)F": "catmullrom",
        "h(D)D": "smoothstep",
        "i(D)D": "smoothstepDerivative",
        "j(D)I": "sign",
        "j(FFF)F": "rotLerp",
        "e(FF)F": "triangleWave",
        "k(F)F": "square",
        "k(D)D": "square",
        "h(I)I": "square",
        "a(J)J": "square",
        "a(DDDDD)D": "clampedMap",
        "b(FFFFF)F": "clampedMap",
        "b(DDDDD)D": "map",
        "c(FFFFF)F": "map",
        "l(D)D": "wobble",
        "d(II)I": "roundToward",
        "e(II)I": "positiveCeilDiv",
        "b(Lnet/minecraft/util/RandomSource;II)I": "randomBetweenInclusive",
        "b(Lnet/minecraft/util/RandomSource;FF)F": "randomBetween",
        "c(Lnet/minecraft/util/RandomSource;FF)F": "normal",
        "e(DD)D": "lengthSquared",
        "f(DD)D": "length",
        "e(DDD)D": "lengthSquared",
        "f(DDD)D": "length",
        "a(DI)I": "quantize",
        "c(III)Ljava/util/stream/IntStream;": "outFromOrigin",
        "a(IIII)Ljava/util/stream/IntStream;": "outFromOrigin",
        "a(IIIII)I": "lambda$outFromOrigin$2",
        "b(IIII)Z": "lambda$outFromOrigin$1",
        "a([F)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/NativeModuleLister": {
      "fields": {
        "a": "LOGGER",
        "b": "LANG_MASK",
        "c": "DEFAULT_LANG",
        "d": "CODEPAGE_MASK",
        "e": "DEFAULT_CODEPAGE"
      },
      "methods": {
        "a()Ljava/util/List;": "listModules",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "tryGetVersion",
        "a(Ljava/lang/String;II)Ljava/lang/String;": "langTableKey",
        "a([I)Ljava/util/OptionalInt;": "findLangAndCodepage",
        "a(Lcom/sun/jna/Pointer;Ljava/lang/String;Lcom/sun/jna/ptr/IntByReference;)Lcom/sun/jna/Pointer;": "queryVersionValue",
        "b(Lcom/sun/jna/Pointer;Ljava/lang/String;Lcom/sun/jna/ptr/IntByReference;)Ljava/lang/String;": "queryVersionString",
        "a(Lnet/minecraft/CrashReportCategory;)V": "addCrashSection",
        "b()Ljava/lang/String;": "lambda$addCrashSection$2",
        "a(Lnet/minecraft/util/NativeModuleLister$NativeModuleInfo;)Ljava/lang/String;": "lambda$addCrashSection$1",
        "b(Lnet/minecraft/util/NativeModuleLister$NativeModuleInfo;)Ljava/lang/String;": "lambda$addCrashSection$0"
      }
    },
    "net/minecraft/util/OptionEnum": {
      "methods": {
        "a()I": "getId",
        "b()Ljava/lang/String;": "getKey",
        "c()Lnet/minecraft/network/chat/Component;": "getCaption"
      }
    },
    "net/minecraft/util/ParticleUtils": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/particles/ParticleOptions;Lnet/minecraft/util/valueproviders/IntProvider;)V": "spawnParticlesOnBlockFaces",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/particles/ParticleOptions;Lnet/minecraft/util/valueproviders/IntProvider;Lnet/minecraft/core/Direction;Ljava/util/function/Supplier;D)V": "spawnParticlesOnBlockFace",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/phys/Vec3;": "getRandomSpeedRanges",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;DLnet/minecraft/core/particles/ParticleOptions;Lnet/minecraft/util/valueproviders/UniformInt;)V": "spawnParticlesAlongAxis",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/particles/ParticleOptions;Lnet/minecraft/world/phys/Vec3;D)V": "spawnParticleOnFace",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/particles/ParticleOptions;)V": "spawnParticleBelow",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/phys/Vec3;": "lambda$spawnParticlesOnBlockFaces$0"
      }
    },
    "net/minecraft/util/IProgressUpdate": {
      "methods": {
        "a(Lnet/minecraft/network/chat/Component;)V": "progressStartNoAbort",
        "b(Lnet/minecraft/network/chat/Component;)V": "progressStart",
        "c(Lnet/minecraft/network/chat/Component;)V": "progressStage",
        "a(I)V": "progressStagePercentage",
        "a()V": "stop"
      }
    },
    "net/minecraft/util/RandomSource": {
      "fields": {
        "a": "GAUSSIAN_SPREAD_FACTOR"
      },
      "methods": {
        "a()Lnet/minecraft/util/RandomSource;": "create",
        "b()Lnet/minecraft/util/RandomSource;": "createThreadSafe",
        "a(J)Lnet/minecraft/util/RandomSource;": "create",
        "c()Lnet/minecraft/util/RandomSource;": "createNewThreadLocalInstance",
        "d()Lnet/minecraft/util/RandomSource;": "fork",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "forkPositional",
        "b(J)V": "setSeed",
        "f()I": "nextInt",
        "a(I)I": "nextInt",
        "a(II)I": "nextIntBetweenInclusive",
        "g()J": "nextLong",
        "h()Z": "nextBoolean",
        "i()F": "nextFloat",
        "j()D": "nextDouble",
        "k()D": "nextGaussian",
        "a(DD)D": "triangle",
        "b(I)V": "consumeCount",
        "b(II)I": "nextInt"
      }
    },
    "net/minecraft/util/ResourceLocationPattern": {
      "fields": {
        "a": "CODEC",
        "b": "namespacePattern",
        "c": "namespacePredicate",
        "d": "pathPattern",
        "e": "pathPredicate",
        "f": "locationPredicate"
      },
      "methods": {
        "a()Ljava/util/function/Predicate;": "namespacePredicate",
        "b()Ljava/util/function/Predicate;": "pathPredicate",
        "c()Ljava/util/function/Predicate;": "locationPredicate",
        "a(Lnet/minecraft/resources/ResourceLocation;)Z": "lambda$new$5",
        "a(Ljava/lang/String;)Z": "lambda$new$4",
        "b(Ljava/lang/String;)Z": "lambda$new$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/util/ResourceLocationPattern;)Ljava/util/Optional;": "lambda$static$1",
        "b(Lnet/minecraft/util/ResourceLocationPattern;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/util/SegmentedAnglePrecision": {
      "fields": {
        "a": "mask",
        "b": "precision",
        "c": "degreeToAngle",
        "d": "angleToDegree"
      },
      "methods": {
        "a(II)Z": "isSameAxis",
        "a(Lnet/minecraft/core/Direction;)I": "fromDirection",
        "a(F)I": "fromDegreesWithTurns",
        "b(F)I": "fromDegrees",
        "a(I)F": "toDegreesWithTurns",
        "b(I)F": "toDegrees",
        "c(I)I": "normalize",
        "a()I": "getMask"
      }
    },
    "net/minecraft/util/SignatureUpdater": {},
    "net/minecraft/util/SignatureValidator": {
      "fields": {
        "a": "NO_VALIDATION",
        "b": "LOGGER"
      },
      "methods": {
        "a([B[B)Z": "validate",
        "a(Lnet/minecraft/util/SignatureUpdater;[BLjava/security/Signature;)Z": "verifySignature",
        "a(Ljava/security/PublicKey;Ljava/lang/String;)Lnet/minecraft/util/SignatureValidator;": "from",
        "a(Lcom/mojang/authlib/yggdrasil/ServicesKeySet;Lcom/mojang/authlib/yggdrasil/ServicesKeyType;)Lnet/minecraft/util/SignatureValidator;": "from",
        "a(Ljava/util/Collection;Lnet/minecraft/util/SignatureUpdater;[B)Z": "lambda$from$4",
        "a(Lnet/minecraft/util/SignatureUpdater;[BLcom/mojang/authlib/yggdrasil/ServicesKeyInfo;)Z": "lambda$from$3",
        "a(Ljava/lang/String;Ljava/security/PublicKey;Lnet/minecraft/util/SignatureUpdater;[B)Z": "lambda$from$2",
        "a([BLnet/minecraft/util/SignatureUpdater$Output;)V": "lambda$validate$1",
        "a(Lnet/minecraft/util/SignatureUpdater;[B)Z": "lambda$static$0"
      }
    },
    "net/minecraft/util/Signer": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a([B)[B": "sign",
        "a(Ljava/security/PrivateKey;Ljava/lang/String;)Lnet/minecraft/util/Signer;": "from",
        "a(Ljava/lang/String;Ljava/security/PrivateKey;Lnet/minecraft/util/SignatureUpdater;)[B": "lambda$from$1",
        "a([BLnet/minecraft/util/SignatureUpdater$Output;)V": "lambda$sign$0"
      }
    },
    "net/minecraft/util/SimpleBitStorage": {
      "fields": {
        "a": "MAGIC",
        "b": "data",
        "c": "bits",
        "d": "mask",
        "e": "size",
        "f": "valuesPerLong",
        "g": "divideMul",
        "h": "divideAdd",
        "i": "divideShift"
      },
      "methods": {
        "b(I)I": "cellIndex",
        "a(II)I": "getAndSet",
        "b(II)V": "set",
        "a(I)I": "get",
        "a()[J": "getRaw",
        "b()I": "getSize",
        "c()I": "getBits",
        "a(Ljava/util/function/IntConsumer;)V": "getAll",
        "a([I)V": "unpack",
        "d()Lnet/minecraft/util/BitStorage;": "copy"
      }
    },
    "net/minecraft/util/SingleKeyCache": {
      "fields": {
        "a": "computeValue",
        "b": "cacheKey",
        "c": "cachedValue"
      },
      "methods": {
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "getValue"
      }
    },
    "net/minecraft/util/ArraySetSorted": {
      "fields": {
        "a": "DEFAULT_INITIAL_CAPACITY",
        "b": "comparator",
        "c": "contents",
        "d": "size"
      },
      "methods": {
        "a()Lnet/minecraft/util/SortedArraySet;": "create",
        "a(I)Lnet/minecraft/util/SortedArraySet;": "create",
        "a(Ljava/util/Comparator;)Lnet/minecraft/util/SortedArraySet;": "create",
        "a(Ljava/util/Comparator;I)Lnet/minecraft/util/SortedArraySet;": "create",
        "a([Ljava/lang/Object;)[Ljava/lang/Object;": "castRawArray",
        "c(Ljava/lang/Object;)I": "findIndex",
        "b(I)I": "getInsertionPosition",
        "c(I)V": "grow",
        "a(Ljava/lang/Object;I)V": "addInternal",
        "d(I)V": "removeInternal",
        "e(I)Ljava/lang/Object;": "getInternal",
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "addOrGet",
        "b(Ljava/lang/Object;)Ljava/lang/Object;": "get",
        "b()Ljava/lang/Object;": "first",
        "c()Ljava/lang/Object;": "last"
      }
    },
    "net/minecraft/util/SpawnUtil": {
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;IIILnet/minecraft/util/SpawnUtil$Strategy;)Ljava/util/Optional;": "trySpawnMob",
        "a(Lnet/minecraft/server/level/ServerLevel;ILnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/util/SpawnUtil$Strategy;)Z": "moveToPossibleSpawnPosition"
      }
    },
    "net/minecraft/util/StringDecomposer": {
      "fields": {
        "a": "REPLACEMENT_CHAR",
        "b": "STOP_ITERATION"
      },
      "methods": {
        "a(Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;IC)Z": "feedChar",
        "a(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "iterate",
        "b(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "iterateBackwards",
        "c(Ljava/lang/String;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "iterateFormatted",
        "a(Ljava/lang/String;ILnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "iterateFormatted",
        "a(Ljava/lang/String;ILnet/minecraft/network/chat/Style;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "iterateFormatted",
        "a(Lnet/minecraft/network/chat/FormattedText;Lnet/minecraft/network/chat/Style;Lnet/minecraft/util/FormattedCharSink;)Z": "iterateFormatted",
        "a(Ljava/lang/String;)Ljava/lang/String;": "filterBrokenSurrogates",
        "a(Lnet/minecraft/network/chat/FormattedText;)Ljava/lang/String;": "getPlainText",
        "a(Ljava/lang/StringBuilder;ILnet/minecraft/network/chat/Style;I)Z": "lambda$getPlainText$2",
        "b(Ljava/lang/StringBuilder;ILnet/minecraft/network/chat/Style;I)Z": "lambda$filterBrokenSurrogates$1",
        "a(Lnet/minecraft/util/FormattedCharSink;Lnet/minecraft/network/chat/Style;Ljava/lang/String;)Ljava/util/Optional;": "lambda$iterateFormatted$0"
      }
    },
    "net/minecraft/util/INamable": {
      "fields": {
        "W": "PRE_BUILT_MAP_THRESHOLD"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Ljava/util/function/Supplier;)Lnet/minecraft/util/StringRepresentable$EnumCodec;": "fromEnum",
        "a(Ljava/util/function/Supplier;Ljava/util/function/Function;)Lnet/minecraft/util/StringRepresentable$EnumCodec;": "fromEnumWithMapping",
        "a([Lnet/minecraft/util/StringRepresentable;)Lcom/mojang/serialization/Keyable;": "keys",
        "a([Ljava/lang/Enum;Ljava/util/function/Function;Ljava/lang/String;)Ljava/lang/Enum;": "lambda$fromEnumWithMapping$4",
        "a(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Enum;": "lambda$fromEnumWithMapping$3",
        "a(Ljava/lang/Enum;)Ljava/lang/Enum;": "lambda$fromEnumWithMapping$2",
        "a(Ljava/util/function/Function;Ljava/lang/Enum;)Ljava/lang/String;": "lambda$fromEnumWithMapping$1",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$fromEnum$0"
      }
    },
    "net/minecraft/util/UtilColor": {
      "fields": {
        "a": "STRIP_COLOR_PATTERN",
        "b": "LINE_PATTERN",
        "c": "LINE_END_PATTERN"
      },
      "methods": {
        "a(I)Ljava/lang/String;": "formatTickDuration",
        "a(Ljava/lang/String;)Ljava/lang/String;": "stripColor",
        "b(Ljava/lang/String;)Z": "isNullOrEmpty",
        "a(Ljava/lang/String;IZ)Ljava/lang/String;": "truncateStringIfNecessary",
        "c(Ljava/lang/String;)I": "lineCount",
        "d(Ljava/lang/String;)Z": "endsWithNewLine",
        "e(Ljava/lang/String;)Ljava/lang/String;": "trimChatMessage"
      }
    },
    "net/minecraft/util/TaskChainer": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/util/TaskChainer$DelayedTask;)V": "lambda$immediate$1",
        "a(Ljava/lang/Throwable;)Ljava/lang/Object;": "lambda$immediate$0"
      }
    },
    "net/minecraft/util/ThreadingDetector": {
      "fields": {
        "a": "LOGGER",
        "b": "name",
        "c": "lock",
        "d": "stackTraceLock",
        "e": "threadThatFailedToAcquire",
        "f": "fullException"
      },
      "methods": {
        "a()V": "checkAndLock",
        "b()V": "checkAndUnlock",
        "a(Ljava/lang/String;Ljava/lang/Thread;)Lnet/minecraft/ReportedException;": "makeThreadingException",
        "a(Ljava/lang/Thread;)Ljava/lang/String;": "stackTrace"
      }
    },
    "net/minecraft/util/TimeSource": {},
    "net/minecraft/util/TimeRange": {
      "fields": {
        "a": "NANOSECONDS_PER_SECOND",
        "b": "NANOSECONDS_PER_MILLISECOND"
      },
      "methods": {
        "a(II)Lnet/minecraft/util/valueproviders/UniformInt;": "rangeOfSeconds"
      }
    },
    "net/minecraft/util/ToFloatFunction": {
      "fields": {
        "a": "IDENTITY"
      },
      "methods": {
        "a(Ljava/lang/Object;)F": "apply",
        "b()F": "minValue",
        "c()F": "maxValue",
        "a(Lit/unimi/dsi/fastutil/floats/Float2FloatFunction;)Lnet/minecraft/util/ToFloatFunction;": "createUnlimited",
        "a(Ljava/util/function/Function;)Lnet/minecraft/util/ToFloatFunction;": "comap",
        "a(F)F": "lambda$static$0"
      }
    },
    "net/minecraft/util/Tuple": {
      "fields": {
        "a": "a",
        "b": "b"
      },
      "methods": {
        "a()Ljava/lang/Object;": "getA",
        "a(Ljava/lang/Object;)V": "setA",
        "b()Ljava/lang/Object;": "getB",
        "b(Ljava/lang/Object;)V": "setB"
      }
    },
    "net/minecraft/util/Unit": {
      "fields": {
        "a": "INSTANCE",
        "b": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/util/Unit;": "$values"
      }
    },
    "net/minecraft/util/VisibleForDebug": {},
    "net/minecraft/util/ZeroBitStorage": {
      "fields": {
        "a": "RAW",
        "b": "size"
      },
      "methods": {
        "a(II)I": "getAndSet",
        "b(II)V": "set",
        "a(I)I": "get",
        "a()[J": "getRaw",
        "b()I": "getSize",
        "c()I": "getBits",
        "a(Ljava/util/function/IntConsumer;)V": "getAll",
        "a([I)V": "unpack",
        "d()Lnet/minecraft/util/BitStorage;": "copy"
      }
    },
    "net/minecraft/util/datafix/DataFixTypes": {
      "fields": {
        "a": "LEVEL",
        "b": "PLAYER",
        "c": "CHUNK",
        "d": "HOTBAR",
        "e": "OPTIONS",
        "f": "STRUCTURE",
        "g": "STATS",
        "h": "SAVED_DATA",
        "i": "ADVANCEMENTS",
        "j": "POI_CHUNK",
        "k": "WORLD_GEN_SETTINGS",
        "l": "ENTITY_CHUNK",
        "m": "TYPES_FOR_LEVEL_LIST",
        "n": "type",
        "o": "$VALUES"
      },
      "methods": {
        "a()I": "currentVersion",
        "a(Lcom/mojang/datafixers/DataFixer;Lcom/mojang/serialization/Dynamic;II)Lcom/mojang/serialization/Dynamic;": "update",
        "a(Lcom/mojang/datafixers/DataFixer;Lcom/mojang/serialization/Dynamic;I)Lcom/mojang/serialization/Dynamic;": "updateToCurrentVersion",
        "a(Lcom/mojang/datafixers/DataFixer;Lnet/minecraft/nbt/CompoundTag;II)Lnet/minecraft/nbt/CompoundTag;": "update",
        "a(Lcom/mojang/datafixers/DataFixer;Lnet/minecraft/nbt/CompoundTag;I)Lnet/minecraft/nbt/CompoundTag;": "updateToCurrentVersion",
        "b()[Lnet/minecraft/util/datafix/DataFixTypes;": "$values"
      }
    },
    "net/minecraft/util/datafix/DataConverterRegistry": {
      "fields": {
        "b": "SAME",
        "c": "SAME_NAMESPACED",
        "d": "dataFixer",
        "a": "BLENDING_VERSION"
      },
      "methods": {
        "a()Lcom/mojang/datafixers/DataFixer;": "getDataFixer",
        "a(Ljava/util/Set;)Lcom/mojang/datafixers/DataFixer;": "createFixerUpper",
        "a(Lcom/mojang/datafixers/DataFixerBuilder;)V": "addFixers",
        "a(Ljava/util/Map;)Ljava/util/function/UnaryOperator;": "createRenamer",
        "a(Ljava/lang/String;Ljava/lang/String;)Ljava/util/function/UnaryOperator;": "createRenamer"
      }
    },
    "net/minecraft/util/datafix/DataBitsPacked": {
      "fields": {
        "a": "BIT_TO_LONG_SHIFT",
        "b": "data",
        "c": "bits",
        "d": "mask",
        "e": "size"
      },
      "methods": {
        "a(II)V": "set",
        "a(I)I": "get",
        "a()[J": "getRaw",
        "b()I": "getBits"
      }
    },
    "net/minecraft/util/datafix/fixes/AbstractArrowPickupFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateProjectiles",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updatePickup",
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/Typed;": "updateEntity",
        "a(Ljava/util/function/Function;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$updateEntity$0"
      }
    },
    "net/minecraft/util/datafix/fixes/AbstractPoiSectionFix": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "cap",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "processSection",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "processSectionRecords",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "processRecords",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/stream/Stream;)Lcom/mojang/serialization/Dynamic;": "lambda$processSectionRecords$4",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$cap$2",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterUUIDBase": {
      "fields": {
        "a": "typeReference"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/Typed;": "updateNamedChoice",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Optional;": "replaceUUIDString",
        "b(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Optional;": "replaceUUIDMLTag",
        "c(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Optional;": "replaceUUIDLeastMost",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Ljava/util/Optional;": "createUUIDFromString",
        "a(Lcom/mojang/serialization/Dynamic;)Ljava/util/Optional;": "createUUIDFromML",
        "d(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Optional;": "createUUIDFromLongs",
        "a(Lcom/mojang/serialization/Dynamic;JJ)Ljava/util/Optional;": "createUUIDTag",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Ljava/util/Optional;": "lambda$createUUIDFromString$4",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$replaceUUIDLeastMost$3",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$replaceUUIDMLTag$2",
        "b(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$replaceUUIDString$1",
        "a(Ljava/util/function/Function;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$updateNamedChoice$0"
      }
    },
    "net/minecraft/util/datafix/fixes/AddFlagIfNotPresentFix": {
      "fields": {
        "a": "name",
        "b": "flagValue",
        "c": "flagKey",
        "d": "typeReference"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterAddChoices": {
      "fields": {
        "a": "name",
        "b": "type"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;)Lcom/mojang/datafixers/TypeRewriteRule;": "cap",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$cap$1",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$cap$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterAdvancement": {
      "fields": {
        "a": "RENAMES"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterAdvancementBase": {
      "fields": {
        "a": "name",
        "b": "renamer"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterAttributes": {
      "fields": {
        "a": "RENAMES"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixName",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fixItemStackTag",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fixEntity",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixEntity$9",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixEntity$8",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixEntity$7",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixEntity$6",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixItemStackTag$5",
        "f(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixItemStackTag$4",
        "b(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixItemStackTag$3",
        "g(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixItemStackTag$2",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$fixName$1",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBedItem": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBiome": {
      "fields": {
        "a": "BIOMES"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBitStorageAlign": {
      "fields": {
        "a": "BIT_TO_LONG_SHIFT",
        "b": "SECTION_WIDTH",
        "c": "SECTION_HEIGHT",
        "d": "SECTION_SIZE",
        "e": "HEIGHTMAP_BITS",
        "f": "HEIGHTMAP_SIZE"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateHeightmaps",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateSections",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;II)Lcom/mojang/serialization/Dynamic;": "updateBitStorage",
        "a(II[J)[J": "addPadding",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$updateSections$10",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$updateSections$9",
        "a(ILcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateSections$8",
        "a(Lcom/mojang/serialization/Dynamic;ILcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateSections$7",
        "a(Ljava/util/List;)Ljava/lang/Integer;": "lambda$updateSections$6",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateHeightmaps$5",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateHeightmaps$4",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateHeightmaps$3",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateHeightmaps$2",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/BlendingDataFix": {
      "fields": {
        "a": "name",
        "b": "STATUSES_TO_SKIP_BLENDING"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/OptionalDynamic;)Lcom/mojang/serialization/Dynamic;": "updateChunkTag",
        "a(Lcom/mojang/serialization/Dynamic;II)Lcom/mojang/serialization/Dynamic;": "updateBlendingData",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/BlendingDataRemoveFromNetherEndFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/OptionalDynamic;)Lcom/mojang/serialization/Dynamic;": "updateChunkTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBannerColour": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$4",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixTag$3",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$2",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$1",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPiston": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a()Ljava/lang/IllegalStateException;": "lambda$fix$1",
        "b()Ljava/lang/IllegalStateException;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterCustomNameTile": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterTileEntity": {
      "fields": {
        "a": "ID_MAP"
      },
      "methods": {
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$2",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$1",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterJukeBox": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a()Ljava/lang/IllegalStateException;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBlockEntityKeepPacked": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/BlockEntityRenameFix": {
      "fields": {
        "a": "name",
        "b": "nameChangeLookup"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;Ljava/util/function/UnaryOperator;)Lcom/mojang/datafixers/DataFix;": "create",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterShulkerBoxBlock": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/BlockEntitySignDoubleSidedEditableTextFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "getTextList",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "getEmptyTextList",
        "a()Ljava/lang/String;": "getEmptyComponent",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterSignText": {
      "fields": {
        "a": "GSON"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "updateLine",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBlockEntityUUID": {
      "methods": {
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateSkull",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateConduit",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateSkull$2",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateSkull$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBlockName": {
      "methods": {
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/util/Either;)Ljava/lang/String;": "lambda$makeRule$1",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBlockRename": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "fixBlock",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/DataFix;": "create",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/BlockRenameFixWithJigsaw": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/DataFix;": "create",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/DSL$TypeReference;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterFlattenData": {
      "fields": {
        "b": "LOGGER",
        "c": "MAP",
        "d": "BLOCK_DEFAULTS",
        "e": "ID_BY_OLD",
        "f": "ID_BY_OLD_NAME",
        "a": "FILTER_ME"
      },
      "methods": {
        "a(ILjava/lang/String;[Ljava/lang/String;)V": "register",
        "q()V": "finalizeMaps",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "upgradeBlockStateTag",
        "a(Ljava/lang/String;)Ljava/lang/String;": "upgradeBlock",
        "a(I)Ljava/lang/String;": "upgradeBlock",
        "b(Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "parse",
        "b(I)Lcom/mojang/serialization/Dynamic;": "getTag",
        "a()V": "bootstrap0",
        "b()V": "bootstrap1",
        "c()V": "bootstrap2",
        "d()V": "bootstrap3",
        "e()V": "bootstrap4",
        "f()V": "bootstrap5",
        "g()V": "bootstrap6",
        "h()V": "bootstrap7",
        "i()V": "bootstrap8",
        "j()V": "bootstrap9",
        "k()V": "bootstrap10",
        "l()V": "bootstrap11",
        "m()V": "bootstrap12",
        "n()V": "bootstrap13",
        "o()V": "bootstrap14",
        "p()V": "bootstrap15",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;)V": "lambda$static$1",
        "b(Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterFlattenState": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterCatType": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/CauldronRenameFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/CavesAndCliffsRenames": {
      "fields": {
        "a": "RENAMES"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBedBlock": {
      "methods": {
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/templates/List$ListType;)Lcom/mojang/datafixers/TypeRewriteRule;": "cap",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$5",
        "a(Ljava/util/List;Lcom/mojang/datafixers/types/Type;Lcom/mojang/serialization/Dynamic;Ljava/util/Map;)V": "lambda$cap$4",
        "a()Ljava/lang/IllegalStateException;": "lambda$cap$3",
        "a(Lcom/mojang/serialization/Dynamic;IIIIJ)Ljava/util/Map;": "lambda$cap$2",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$cap$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$cap$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterLeavesBiome": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkDeleteIgnoredLightDataFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkDeleteLightFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix": {
      "fields": {
        "a": "DATAFIXER_CONTEXT_TAG",
        "d": "NAME",
        "e": "OLD_SECTION_COUNT",
        "f": "NEW_SECTION_COUNT",
        "g": "NEW_MIN_SECTION_Y",
        "b": "BLOCKS_PER_SECTION",
        "h": "LONGS_PER_SECTION",
        "i": "HEIGHTMAP_BITS",
        "j": "HEIGHTMAP_MASK",
        "k": "HEIGHTMAP_OFFSET",
        "l": "HEIGHTMAP_TYPES",
        "m": "STATUS_IS_OR_AFTER_SURFACE",
        "n": "STATUS_IS_OR_AFTER_NOISE",
        "o": "BLOCKS_BEFORE_FEATURE_STATUS",
        "p": "BIOME_CONTAINER_LAYER_SIZE",
        "q": "BIOME_CONTAINER_SIZE",
        "r": "BIOME_CONTAINER_TOP_LAYER_OFFSET",
        "c": "DEFAULT_BIOME",
        "s": "BIOMES_BY_ID"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Set;)Lcom/mojang/serialization/Dynamic;": "predictChunkStatusBeforeSurface",
        "a(Lcom/mojang/serialization/Dynamic;ZILorg/apache/commons/lang3/mutable/MutableBoolean;)[Lcom/mojang/serialization/Dynamic;": "getBiomeContainers",
        "a([II)I": "getOldBiome",
        "a(Lcom/mojang/serialization/Dynamic;ZZZLjava/util/function/Supplier;)Lcom/mojang/serialization/Dynamic;": "updateChunkTag",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "shiftUpgradeData",
        "a(Lcom/mojang/serialization/Dynamic;II)Lcom/mojang/serialization/Dynamic;": "updateCarvingMasks",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "addPaddingEntries",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateHeightmaps",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "getFixedHeightmap",
        "a(Lcom/mojang/serialization/Dynamic;Lit/unimi/dsi/fastutil/ints/Int2IntFunction;)Lcom/mojang/serialization/Dynamic;": "makeBiomeContainer",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "makePalettedContainer",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "makePalettedContainer",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "makeOptimizedPalettedContainer",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;Ljava/util/List;)Lcom/mojang/serialization/Dynamic;": "padPaletteEntries",
        "a(I)I": "ceillog2",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/Integer;)Lcom/mojang/serialization/Dynamic;": "lambda$makeBiomeContainer$24",
        "a(J)J": "lambda$getFixedHeightmap$23",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateHeightmaps$22",
        "a(IILcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateCarvingMasks$21",
        "f(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$shiftUpgradeData$20",
        "a(Ljava/util/Map;Ljava/util/Map;)V": "lambda$shiftUpgradeData$19",
        "a(Ljava/util/Map;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)V": "lambda$shiftUpgradeData$18",
        "a(Ljava/util/Map;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;Ljava/lang/Integer;)V": "lambda$shiftUpgradeData$17",
        "b([II)I": "lambda$getBiomeContainers$16",
        "c([II)I": "lambda$getBiomeContainers$15",
        "a([III)I": "lambda$getBiomeContainers$14",
        "b([III)I": "lambda$getBiomeContainers$13",
        "a(Ljava/util/Set;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$predictChunkStatusBeforeSurface$12",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$11",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$10",
        "a(ZLjava/util/Set;Lorg/apache/commons/lang3/mutable/MutableBoolean;Ljava/lang/String;Lorg/apache/commons/lang3/mutable/MutableObject;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$9",
        "a(Ljava/util/Set;Lcom/mojang/serialization/Dynamic;I[Lcom/mojang/serialization/Dynamic;Lorg/apache/commons/lang3/mutable/MutableObject;Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$8",
        "a()Ljava/lang/IllegalStateException;": "lambda$makeRule$7",
        "a(Ljava/util/Set;Lcom/mojang/serialization/Dynamic;I[Lcom/mojang/serialization/Dynamic;Lit/unimi/dsi/fastutil/ints/IntSet;Lorg/apache/commons/lang3/mutable/MutableObject;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$6",
        "g(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/util/datafix/fixes/ChunkProtoTickListFix$PoorMansPalettedContainer;": "lambda$makeRule$5",
        "a(Ljava/util/Set;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Ljava/util/Optional;": "lambda$makeRule$4",
        "c(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$3",
        "h(Lcom/mojang/serialization/Dynamic;)Ljava/lang/String;": "lambda$makeRule$2",
        "b()Ljava/lang/IllegalStateException;": "lambda$makeRule$1",
        "c()Lnet/minecraft/util/datafix/fixes/ChunkProtoTickListFix$PoorMansPalettedContainer;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterChunkLightRemove": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkConverterPalette": {
      "fields": {
        "a": "NORTH_WEST_MASK",
        "b": "WEST_MASK",
        "c": "SOUTH_WEST_MASK",
        "d": "SOUTH_MASK",
        "e": "SOUTH_EAST_MASK",
        "f": "EAST_MASK",
        "g": "NORTH_EAST_MASK",
        "h": "NORTH_MASK",
        "i": "LOGGER",
        "j": "VIRTUAL",
        "k": "FIX",
        "l": "PUMPKIN",
        "m": "SNOWY_PODZOL",
        "n": "SNOWY_GRASS",
        "o": "SNOWY_MYCELIUM",
        "p": "UPPER_SUNFLOWER",
        "q": "UPPER_LILAC",
        "r": "UPPER_TALL_GRASS",
        "s": "UPPER_LARGE_FERN",
        "t": "UPPER_ROSE_BUSH",
        "u": "UPPER_PEONY",
        "v": "FLOWER_POT_MAP",
        "w": "SKULL_MAP",
        "x": "DOOR_MAP",
        "y": "NOTE_BLOCK_MAP",
        "z": "DYE_COLOR_MAP",
        "A": "BED_BLOCK_MAP",
        "B": "BANNER_BLOCK_MAP",
        "C": "AIR",
        "D": "SIZE"
      },
      "methods": {
        "a(Ljava/util/Map;ILjava/lang/String;Ljava/lang/String;)V": "mapSkull",
        "a(Ljava/util/Map;Ljava/lang/String;I)V": "mapDoor",
        "a(Ljava/util/Map;ILjava/lang/String;)V": "addBeds",
        "b(Ljava/util/Map;ILjava/lang/String;)V": "addBanners",
        "a(Lcom/mojang/serialization/Dynamic;)Ljava/lang/String;": "getName",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Ljava/lang/String;": "getProperty",
        "a(Lnet/minecraft/util/CrudeIncrementalIntIdentityHashBiMap;Lcom/mojang/serialization/Dynamic;)I": "idFor",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(ZZZZ)I": "getSideMask",
        "a(Ljava/util/HashMap;)V": "lambda$static$6",
        "b(Ljava/util/HashMap;)V": "lambda$static$5",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap;)V": "lambda$static$4",
        "c(Ljava/util/HashMap;)V": "lambda$static$3",
        "d(Ljava/util/HashMap;)V": "lambda$static$2",
        "e(Ljava/util/HashMap;)V": "lambda$static$1",
        "f(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkConverterPalette$Direction": {
      "fields": {
        "a": "DOWN",
        "b": "UP",
        "c": "NORTH",
        "d": "SOUTH",
        "e": "WEST",
        "f": "EAST",
        "g": "axis",
        "h": "axisDirection",
        "i": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$Direction$AxisDirection;": "getAxisDirection",
        "b()Lnet/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$Direction$Axis;": "getAxis",
        "c()[Lnet/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$Direction;": "$values"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkConverterPalette$Direction$Axis": {
      "fields": {
        "a": "X",
        "b": "Y",
        "c": "Z",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$Direction$Axis;": "$values"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkConverterPalette$Direction$AxisDirection": {
      "fields": {
        "a": "POSITIVE",
        "b": "NEGATIVE",
        "c": "step",
        "d": "$VALUES"
      },
      "methods": {
        "a()I": "getStep",
        "b()[Lnet/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$Direction$AxisDirection;": "$values"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkProtoTickListFix": {
      "fields": {
        "a": "SECTION_WIDTH",
        "b": "ALWAYS_WATERLOGGED"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;BIILjava/lang/String;Ljava/util/function/Function;)Lcom/mojang/serialization/Dynamic;": "makeTickList",
        "a(Lcom/mojang/serialization/Dynamic;)Ljava/lang/String;": "getBlock",
        "b(Lcom/mojang/serialization/Dynamic;)Ljava/lang/String;": "getLiquid",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/function/Supplier;IIIILjava/util/function/Function;)Lcom/mojang/serialization/Dynamic;": "createTick",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/function/Supplier;IIILjava/util/function/Function;I)Lcom/mojang/serialization/Dynamic;": "lambda$makeTickList$15",
        "a(I)Z": "lambda$makeTickList$14",
        "c(Lcom/mojang/serialization/Dynamic;)I": "lambda$makeTickList$13",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$12",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$11",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$10",
        "a(BLcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$9",
        "b(BLcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$8",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lorg/apache/commons/lang3/mutable/MutableInt;Lcom/mojang/datafixers/OpticFinder;Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)V": "lambda$makeRule$7",
        "a(Lcom/mojang/datafixers/OpticFinder;Lorg/apache/commons/lang3/mutable/MutableInt;Lcom/mojang/datafixers/OpticFinder;Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)V": "lambda$makeRule$6",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;ILcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)V": "lambda$makeRule$5",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/OpticFinder;)Lnet/minecraft/util/datafix/fixes/ChunkProtoTickListFix$PoorMansPalettedContainer;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/Typed;)Ljava/util/List;": "lambda$makeRule$3",
        "d(Lcom/mojang/serialization/Dynamic;)Ljava/util/List;": "lambda$makeRule$2",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ChunkRenamesFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/lang/String;)Lcom/mojang/datafixers/Typed;": "renameField",
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/Typed;": "renameFieldHelper",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "appendChunkName",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "mergeRemainders",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/Dynamic;": "lambda$mergeRemainders$5",
        "a(Lcom/mojang/serialization/DynamicOps;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/MapLike;)Lcom/mojang/serialization/DataResult;": "lambda$mergeRemainders$4",
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$renameField$3",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterChunkStatus": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterChunkStatus2": {
      "fields": {
        "a": "RENAMES_AND_DOWNGRADES"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterChunkStructuresTemplateRename": {
      "fields": {
        "a": "RENAMES"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixChildren",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixChildren$2",
        "c(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixChildren$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterProtoChunk": {
      "fields": {
        "a": "NUM_SECTIONS"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixChunkData",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "repackBiomes",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "repackTicks",
        "a(III)S": "packOffsetCoordinates",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/stream/Stream;)Lcom/mojang/serialization/Dynamic;": "lambda$repackTicks$7",
        "a(Lcom/mojang/serialization/Dynamic;Lit/unimi/dsi/fastutil/shorts/ShortList;)Lcom/mojang/serialization/Dynamic;": "lambda$repackTicks$6",
        "a(Lcom/mojang/serialization/Dynamic;I)Lcom/mojang/serialization/Dynamic;": "lambda$repackTicks$5",
        "a(Ljava/util/List;Lcom/mojang/serialization/Dynamic;)V": "lambda$repackTicks$4",
        "a(I)Lit/unimi/dsi/fastutil/shorts/ShortArrayList;": "lambda$repackTicks$3",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$repackBiomes$2",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/nio/ByteBuffer;)Lcom/mojang/serialization/Dynamic;": "lambda$repackBiomes$1",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterColorlessShulkerEntity": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/CriteriaRenameFix": {
      "fields": {
        "a": "name",
        "b": "advancementId",
        "c": "conversions"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixAdvancements",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixAdvancements$5",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixAdvancements$4",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$fixAdvancements$3",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixAdvancements$2",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "lambda$fixAdvancements$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DecoratedPotFieldRenameFix": {
      "fields": {
        "a": "DECORATED_POT_ID"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterDye": {
      "fields": {
        "a": "RENAMED_IDS"
      }
    },
    "net/minecraft/util/datafix/fixes/EffectDurationFix": {
      "fields": {
        "a": "ITEM_TYPES"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixEffect",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateEntity",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixEffect$3",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterArmorStand": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityBlockState": {
      "fields": {
        "a": "MAP"
      },
      "methods": {
        "a(Ljava/lang/String;)I": "getBlockId",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateFallingBlock",
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/mojang/datafixers/Typed;": "updateBlockToBlockState",
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/Typed;": "updateEntity",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateBlockToBlockState$12",
        "a(Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$updateBlockToBlockState$11",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Either;": "lambda$updateFallingBlock$10",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Unit;)Ljava/lang/Integer;": "lambda$updateFallingBlock$9",
        "a(Lcom/mojang/serialization/Dynamic;)Ljava/lang/Integer;": "lambda$updateFallingBlock$8",
        "a(Lcom/mojang/datafixers/util/Pair;)Ljava/lang/Integer;": "lambda$updateFallingBlock$7",
        "b(Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$updateFallingBlock$6",
        "a(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$5",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "c(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "d(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/EntityBrushableBlockFieldsRenameFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "renameField",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$renameField$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityCatSplit": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "getNewNameAndTag"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityCodSalmon": {
      "fields": {
        "a": "RENAMED_IDS",
        "b": "RENAMED_EGG_IDS"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterCustomNameEntity": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTagCustomName",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterGuardian": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "getNewNameAndTag"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEquipment": {
      "methods": {
        "a(Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/TypeRewriteRule;": "cap",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$1",
        "a()Ljava/lang/IllegalStateException;": "lambda$cap$0"
      }
    },
    "net/minecraft/util/datafix/fixes/EntityGoatMissingStateFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterHealth": {
      "fields": {
        "a": "ENTITIES"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterSaddle": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterHorse": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/util/Pair;": "fix",
        "a()Ljava/lang/IllegalStateException;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntity": {
      "fields": {
        "a": "ID_MAP"
      },
      "methods": {
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$2",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$1",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterItemFrame": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(B)B": "direction2dTo3d"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMinecart": {
      "fields": {
        "a": "MINECART_BY_ID"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/serialization/DynamicOps;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$2",
        "a()Ljava/lang/IllegalStateException;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/EntityPaintingFieldsRenameFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "renameField",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$renameField$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterHanging": {
      "fields": {
        "a": "DIRECTIONS"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;ZZ)Lcom/mojang/serialization/Dynamic;": "doFix",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$5",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$3",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPainting": {
      "fields": {
        "a": "MAP"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityProjectileOwner": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateProjectiles",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateOwnerArrow",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateOwnerLlamaSpit",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateItemPotion",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateOwnerThrowable",
        "a(Lcom/mojang/serialization/Dynamic;JJ)Lcom/mojang/serialization/Dynamic;": "setUUID",
        "a(JJ)[I": "createUUIDArray",
        "a(Lcom/mojang/datafixers/Typed;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/Typed;": "updateEntity",
        "a(Ljava/util/function/Function;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$updateEntity$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityPufferfish": {
      "fields": {
        "a": "RENAMED_IDS"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityRavagerRename": {
      "fields": {
        "a": "RENAMED_IDS"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterDropChances": {
      "fields": {
        "a": "FLOAT_LIST_CODEC"
      },
      "methods": {
        "a(Lcom/mojang/serialization/OptionalDynamic;I)Z": "isZeroList",
        "a(ILjava/util/List;)Ljava/lang/Boolean;": "lambda$isZeroList$3",
        "a(Ljava/lang/Float;)Z": "lambda$isZeroList$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityName": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Ljava/lang/Object;Lcom/mojang/serialization/DynamicOps;Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/Typed;": "getEntity",
        "a(Ljava/lang/String;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/util/Pair;": "fix",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/serialization/DynamicOps;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterRiding": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Lcom/mojang/datafixers/schemas/Schema;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/TypeRewriteRule;": "cap",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$cap$6",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/serialization/DynamicOps;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$cap$5",
        "a()Ljava/lang/IllegalStateException;": "lambda$cap$4",
        "b()Ljava/lang/IllegalStateException;": "lambda$cap$3",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/serialization/DynamicOps;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Either;": "lambda$cap$2",
        "c()Ljava/lang/IllegalStateException;": "lambda$cap$1",
        "d()Ljava/lang/IllegalStateException;": "lambda$cap$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterShulker": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityShulkerRotation": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "b(Lcom/mojang/serialization/Dynamic;)Ljava/lang/Double;": "lambda$fixTag$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterSkeleton": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "getNewNameAndTag"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterUUID": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityRename": {
      "fields": {
        "a": "RENAMED_IDS",
        "b": "RENAMED_BLOCKS",
        "c": "RENAMED_ITEMS",
        "d": "MINECRAFT_BRED"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityTippedArrow": {
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityUUID": {
      "fields": {
        "b": "LOGGER",
        "c": "ABSTRACT_HORSES",
        "d": "TAMEABLE_ANIMALS",
        "e": "ANIMALS",
        "f": "MOBS",
        "g": "LIVING_ENTITIES",
        "h": "PROJECTILES"
      },
      "methods": {
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updatePiglin",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateEvokerFangs",
        "f(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateZombieVillager",
        "g(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateAreaEffectCloud",
        "h(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateShulkerBullet",
        "i(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateItem",
        "j(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateFox",
        "k(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateHurtBy",
        "l(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateAnimalOwner",
        "m(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateAnimal",
        "n(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateMob",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateLivingEntity",
        "o(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateProjectile",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateEntityUUID",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateProjectile$14",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateLivingEntity$13",
        "p(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateLivingEntity$12",
        "c(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateLivingEntity$11",
        "q(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateLivingEntity$10",
        "r(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateMob$9",
        "d(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateFox$8",
        "e(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateFox$7",
        "s(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateFox$6",
        "t(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateFox$5",
        "u(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updatePiglin$4",
        "v(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updatePiglin$3",
        "w(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updatePiglin$2",
        "x(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updatePiglin$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/EntityVariantFix": {
      "fields": {
        "a": "fieldName",
        "b": "idConversions"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/serialization/Dynamic;": "updateAndRename",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$5",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$4",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/Number;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$3",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/function/Function;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;": "lambda$updateAndRename$2",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;Ljava/lang/String;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;": "lambda$updateAndRename$1",
        "a(Ljava/util/function/Function;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Ljava/lang/Object;": "lambda$updateAndRename$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterWolf": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterZombieType": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "getNewNameAndTag"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterZombie": {
      "fields": {
        "a": "PROFESSION_MAX",
        "b": "RANDOM"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(I)I": "getVillagerProfession",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityZombifiedPiglinRename": {
      "fields": {
        "a": "RENAMED_IDS"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename"
      }
    },
    "net/minecraft/util/datafix/fixes/FeatureFlagRemoveFix": {
      "fields": {
        "a": "name",
        "b": "flagsToRemove"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Ljava/util/List;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$3",
        "a(Ljava/util/List;Lcom/mojang/serialization/Dynamic;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixTag$2",
        "b(Ljava/util/List;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Z": "lambda$fixTag$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/FilteredBooksFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixItemStackTag",
        "a(Ljava/lang/String;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/util/datafix/fixes/FilteredSignsFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPOIRebuild": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "cap",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$4",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$cap$3",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$2",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterFurnaceRecipesUsed": {
      "methods": {
        "a(Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/TypeRewriteRule;": "cap",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateFurnaceContents",
        "a(Lcom/mojang/datafixers/types/Type;Ljava/util/List;ILcom/mojang/serialization/Dynamic;)V": "lambda$updateFurnaceContents$5",
        "a(Ljava/util/List;ILcom/mojang/datafixers/util/Pair;)V": "lambda$updateFurnaceContents$4",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$3",
        "b(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$2",
        "c(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$1",
        "d(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$0"
      }
    },
    "net/minecraft/util/datafix/fixes/GoatHornIdFix": {
      "fields": {
        "a": "INSTRUMENTS"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixItemStackTag",
        "a(Ljava/lang/String;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterGossip": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$3",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$2",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fix$1",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterHeightmapRenaming": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterIglooMetadataRemoval": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "removeIglooPieces",
        "c(Lcom/mojang/serialization/Dynamic;)Z": "isIglooPiece",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$removeIglooPieces$3",
        "d(Lcom/mojang/serialization/Dynamic;)Z": "lambda$removeIglooPieces$2",
        "b(Ljava/util/stream/Stream;)Ljava/lang/Boolean;": "lambda$fixTag$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBanner": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterCustomNameItem": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMaterialId": {
      "fields": {
        "a": "ITEM_NAMES"
      },
      "methods": {
        "a(I)Ljava/lang/String;": "getItem",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/util/Either;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$2",
        "a(Ljava/lang/Integer;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$1",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterItemLoreComponentize": {
      "methods": {
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "fixLoreList",
        "a(Ljava/lang/String;)Ljava/lang/String;": "fixLoreEntry",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixLoreList$5",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPotionId": {
      "fields": {
        "b": "SPLASH",
        "c": "POTIONS",
        "a": "DEFAULT"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a([Ljava/lang/String;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ItemRemoveBlockEntityTagFix": {
      "fields": {
        "a": "items"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterItemName": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "fixItem",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/datafixers/DataFix;": "create",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterShulkerBoxItem": {
      "fields": {
        "a": "NAMES_BY_COLOR"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterSpawnEgg": {
      "fields": {
        "a": "ID_TO_ENTITY"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$6",
        "a()Ljava/lang/IllegalStateException;": "lambda$makeRule$5",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Ljava/util/Optional;": "lambda$makeRule$3",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Ljava/util/Optional;": "lambda$makeRule$2",
        "c(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Ljava/util/Optional;": "lambda$makeRule$1",
        "a([Ljava/lang/String;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterItemStackEnchantment": {
      "fields": {
        "a": "MAP"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$7",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixTag$6",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$5",
        "b(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixTag$4",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$3",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMap": {},
    "net/minecraft/util/datafix/fixes/DataConverterFlattenSpawnEgg": {
      "fields": {
        "a": "itemType",
        "b": "MAP"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/ItemStackTagFix": {
      "fields": {
        "a": "name",
        "b": "idFilter"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixItemStackTag",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterFlatten": {
      "fields": {
        "a": "MAP",
        "b": "IDS",
        "c": "DAMAGE_IDS"
      },
      "methods": {
        "a(Ljava/lang/String;I)Ljava/lang/String;": "updateItem"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterItemStackUUID": {
      "methods": {
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateAttributeModifiers",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateSkullOwner",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateSkullOwner$6",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateAttributeModifiers$5",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateAttributeModifiers$4",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Ljava/lang/Boolean;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPotionWater": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterBook": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$2",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "lambda$fixTag$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixTag$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterJigsawProperties": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterJigsawRotation": {
      "fields": {
        "a": "RENAMES"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterLeaves": {
      "fields": {
        "a": "NORTH_WEST_MASK",
        "b": "WEST_MASK",
        "c": "SOUTH_WEST_MASK",
        "d": "SOUTH_MASK",
        "e": "SOUTH_EAST_MASK",
        "f": "EAST_MASK",
        "g": "NORTH_EAST_MASK",
        "h": "NORTH_MASK",
        "i": "DIRECTIONS",
        "j": "DECAY_DISTANCE",
        "k": "SIZE_BITS",
        "l": "SIZE",
        "m": "LEAVES",
        "n": "LOGS"
      },
      "methods": {
        "a(III)I": "getIndex",
        "a(I)I": "getX",
        "b(I)I": "getY",
        "c(I)I": "getZ",
        "a(ZZZZ)I": "getSideMask",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$7",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$6",
        "a([ILcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$5",
        "a(Lcom/mojang/datafixers/OpticFinder;[ILcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lnet/minecraft/util/datafix/fixes/LeavesFix$LeavesSection;)Lnet/minecraft/util/datafix/fixes/LeavesFix$LeavesSection;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/Typed;)Lnet/minecraft/util/datafix/fixes/LeavesFix$LeavesSection;": "lambda$makeRule$1",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/LegacyDragonFightFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterLevelDataGeneratorOptions": {
      "fields": {
        "a": "MAP",
        "b": "GENERATOR_OPTIONS"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/Dynamic;": "convert",
        "a(Ljava/lang/String;)Lcom/mojang/datafixers/util/Pair;": "getLayerInfoFromString",
        "b(Ljava/lang/String;)Ljava/util/List;": "getLayersInfoFromString",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$convert$6",
        "b(Lcom/mojang/serialization/DynamicOps;Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$convert$5",
        "a(Lcom/mojang/serialization/DynamicOps;Lcom/mojang/datafixers/util/Pair;)Ljava/lang/Object;": "lambda$convert$4",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a()Ljava/lang/IllegalStateException;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;": "lambda$makeRule$1",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterWorldGenSettings": {
      "fields": {
        "b": "GENERATOR_OPTIONS",
        "a": "DEFAULT",
        "c": "SPLITTER",
        "d": "LAYER_SPLITTER",
        "e": "OLD_AMOUNT_SPLITTER",
        "f": "AMOUNT_SPLITTER",
        "g": "BLOCK_SPLITTER"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Ljava/lang/String;)Ljava/lang/String;": "fixString",
        "a(Lcom/google/common/base/Splitter;ILjava/lang/String;)Ljava/lang/String;": "lambda$fixString$2",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMiscUUID": {
      "fields": {
        "b": "LOGGER"
      },
      "methods": {
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateWanderingTrader",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateDragonFight",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateCustomBossEvents",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateCustomBossEvents$12",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateCustomBossEvents$11",
        "f(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateCustomBossEvents$10",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateCustomBossEvents$9",
        "g(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateCustomBossEvents$8",
        "h(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateCustomBossEvents$7",
        "i(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateDragonFight$6",
        "b(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateDragonFight$5",
        "j(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateDragonFight$4",
        "k(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateDragonFight$3",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "l(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMapId": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMemoryExpiry": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateBrain",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateMemories",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "updateMemoryEntry",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "wrapMemoryValue"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMissingDimension": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/types/Type;": "fields",
        "b(Ljava/lang/String;Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/types/Type;": "optionalFields",
        "a(Ljava/lang/String;Lcom/mojang/datafixers/types/Type;Ljava/lang/String;Lcom/mojang/datafixers/types/Type;)Lcom/mojang/datafixers/types/Type;": "optionalFields",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/Type;": "flatType",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "recreateSettings",
        "a(Lcom/mojang/datafixers/FieldFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/templates/CompoundList$CompoundListType;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/types/templates/CompoundList$CompoundListType;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/Typed;Lcom/mojang/datafixers/types/templates/CompoundList$CompoundListType;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterMobSpawner": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterNamedEntity": {
      "fields": {
        "a": "name",
        "b": "entityName",
        "c": "type"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/NamespacedTypeRenameFix": {
      "fields": {
        "a": "name",
        "b": "type",
        "c": "renamer"
      },
      "methods": {
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterNewVillage": {
      "methods": {
        "a(Lcom/mojang/datafixers/types/templates/CompoundList$CompoundListType;)Lcom/mojang/datafixers/TypeRewriteRule;": "cap",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$13",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$12",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$11",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$10",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$9",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$8",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$7",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$6",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$cap$5",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$cap$4",
        "a(Ljava/util/List;)Ljava/util/List;": "lambda$cap$3",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$cap$2",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$cap$1",
        "b(Lcom/mojang/datafixers/util/Pair;)Z": "lambda$cap$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterObjectiveDisplayName": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterObjectiveRenderType": {
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "getRenderType",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterOminousBannerBlockEntityRename": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterOminousBannerRename": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixItemStackTag",
        "a(Ljava/lang/String;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/util/datafix/fixes/OptionsAccessibilityOnboardFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterOptionsAddTextBackground": {
      "methods": {
        "a(Ljava/lang/String;)D": "calculateBackground",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/OptionsAmbientOcclusionFix": {
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "updateValue",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterVBO": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterKeybind": {
      "fields": {
        "a": "KEY_UNKNOWN",
        "b": "MAP"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Map;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$1",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterKeybind2": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Map;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterLang": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/OptionsProgrammerArtFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixList",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "lambda$fixList$2",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterSettingRename": {
      "fields": {
        "a": "fixName",
        "b": "fieldFrom",
        "c": "fieldTo"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/OverreachingTickFix": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;IILjava/util/Optional;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "extractOverreachingTicks",
        "a(IILcom/mojang/serialization/Dynamic;)Z": "lambda$extractOverreachingTicks$2",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "a(Ljava/util/Optional;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPlayerUUID": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/PoiTypeRemoveFix": {
      "fields": {
        "a": "typesToKeep"
      },
      "methods": {
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "processRecords",
        "a(Lcom/mojang/serialization/Dynamic;)Z": "shouldKeepRecord"
      }
    },
    "net/minecraft/util/datafix/fixes/PoiTypeRenameFix": {
      "fields": {
        "a": "renamer"
      },
      "methods": {
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "processRecords",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$processRecords$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$processRecords$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterRecipes": {
      "fields": {
        "a": "RECIPES"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterRecipeRename": {
      "fields": {
        "a": "RECIPES"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterRedstoneConnections": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateRedstoneConnections",
        "a(Ljava/lang/String;)Z": "isConnected",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateRedstoneConnections$5",
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateRedstoneConnections$4",
        "b(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateRedstoneConnections$3",
        "c(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateRedstoneConnections$2",
        "d(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateRedstoneConnections$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterTypes": {
      "fields": {
        "a": "LEVEL",
        "b": "PLAYER",
        "c": "CHUNK",
        "d": "HOTBAR",
        "e": "OPTIONS",
        "f": "STRUCTURE",
        "g": "STATS",
        "h": "SAVED_DATA",
        "i": "ADVANCEMENTS",
        "j": "POI_CHUNK",
        "k": "ENTITY_CHUNK",
        "l": "BLOCK_ENTITY",
        "m": "ITEM_STACK",
        "n": "BLOCK_STATE",
        "o": "ENTITY_NAME",
        "p": "ENTITY_TREE",
        "q": "ENTITY",
        "r": "BLOCK_NAME",
        "s": "ITEM_NAME",
        "t": "GAME_EVENT_NAME",
        "u": "UNTAGGED_SPAWNER",
        "v": "STRUCTURE_FEATURE",
        "w": "OBJECTIVE",
        "x": "TEAM",
        "y": "RECIPE",
        "z": "BIOME",
        "A": "MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST",
        "B": "WORLD_GEN_SETTINGS"
      },
      "methods": {
        "a()Ljava/lang/String;": "lambda$static$27",
        "b()Ljava/lang/String;": "lambda$static$26",
        "c()Ljava/lang/String;": "lambda$static$25",
        "d()Ljava/lang/String;": "lambda$static$24",
        "e()Ljava/lang/String;": "lambda$static$23",
        "f()Ljava/lang/String;": "lambda$static$22",
        "g()Ljava/lang/String;": "lambda$static$21",
        "h()Ljava/lang/String;": "lambda$static$20",
        "i()Ljava/lang/String;": "lambda$static$19",
        "j()Ljava/lang/String;": "lambda$static$18",
        "k()Ljava/lang/String;": "lambda$static$17",
        "l()Ljava/lang/String;": "lambda$static$16",
        "m()Ljava/lang/String;": "lambda$static$15",
        "n()Ljava/lang/String;": "lambda$static$14",
        "o()Ljava/lang/String;": "lambda$static$13",
        "p()Ljava/lang/String;": "lambda$static$12",
        "q()Ljava/lang/String;": "lambda$static$11",
        "r()Ljava/lang/String;": "lambda$static$10",
        "s()Ljava/lang/String;": "lambda$static$9",
        "t()Ljava/lang/String;": "lambda$static$8",
        "u()Ljava/lang/String;": "lambda$static$7",
        "v()Ljava/lang/String;": "lambda$static$6",
        "w()Ljava/lang/String;": "lambda$static$5",
        "x()Ljava/lang/String;": "lambda$static$4",
        "y()Ljava/lang/String;": "lambda$static$3",
        "z()Ljava/lang/String;": "lambda$static$2",
        "A()Ljava/lang/String;": "lambda$static$1",
        "B()Ljava/lang/String;": "lambda$static$0"
      }
    },
    "net/minecraft/util/datafix/fixes/RemapChunkStatusFix": {
      "fields": {
        "a": "name",
        "b": "mapper"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixStatus",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterRemoveGolemGossip": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixValue",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixValue$1",
        "b(Lcom/mojang/serialization/Dynamic;)Z": "lambda$fixValue$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterCoralFan": {
      "fields": {
        "a": "RENAMED_IDS"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterCoral": {
      "fields": {
        "a": "RENAMED_IDS"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterPOI": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "cap",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/SavedDataFeaturePoolElementFix": {
      "fields": {
        "a": "INDEX_PATTERN",
        "b": "PIECE_TYPE",
        "c": "FEATURES"
      },
      "methods": {
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateChildren",
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "updateChildren",
        "a(Lcom/mojang/serialization/Dynamic;[Ljava/lang/String;)Lcom/mojang/serialization/OptionalDynamic;": "get",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixFeature",
        "a(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Optional;": "getReplacement",
        "a(I)Ljava/lang/String;": "lambda$get$2",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateChildren$1",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateChildren$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterSavedDataUUID": {
      "fields": {
        "b": "LOGGER"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$7",
        "b(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$6",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$5",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$4",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$3",
        "e(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "f(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "g(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityNameAbstract": {
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/util/Pair;": "fix",
        "a(Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "getNewNameAndTag"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterEntityRenameAbstract": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "rename",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$1",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/SpawnerDataFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "wrapEntityToSpawnData",
        "b(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "wrapSpawnPotentialsToWeightedEntries",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/datafixers/util/Pair;": "lambda$wrapSpawnPotentialsToWeightedEntries$3",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "c(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "d(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterStatistic": {
      "fields": {
        "a": "SKIP",
        "b": "CUSTOM_MAP",
        "c": "BLOCK_KEY",
        "d": "NEW_BLOCK_KEY",
        "e": "ITEM_KEYS",
        "f": "ENTITY_KEYS",
        "g": "ENTITIES",
        "h": "NEW_CUSTOM_KEY"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "upgradeItem",
        "b(Ljava/lang/String;)Ljava/lang/String;": "upgradeBlock",
        "a(Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a()Ljava/lang/IllegalStateException;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/StatsRenameFix": {
      "fields": {
        "a": "name",
        "b": "renames"
      },
      "methods": {
        "a()Lcom/mojang/datafixers/TypeRewriteRule;": "createCriteriaRule",
        "b()Lcom/mojang/datafixers/TypeRewriteRule;": "createStatRule",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$createStatRule$8",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$createStatRule$7",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$createStatRule$6",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$createStatRule$5",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$createCriteriaRule$4",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$createCriteriaRule$3",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$createCriteriaRule$2",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$createCriteriaRule$1",
        "c()Ljava/lang/IllegalStateException;": "lambda$createCriteriaRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterStriderGravity": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixTag",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterStructureReference": {
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "setCountToAtLeastOne",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$setCountToAtLeastOne$2",
        "a(Ljava/lang/Integer;)Z": "lambda$setCountToAtLeastOne$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/StructureSettingsFlattenFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "fixDimension",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixStructures",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixStructures$6",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$fixStructures$5",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixStructures$4",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixDimension$3",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixDimension$2",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix": {
      "fields": {
        "a": "CONVERSION_MAP"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateStarts",
        "a(Lcom/mojang/datafixers/util/Pair;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "updateStart",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateReferences",
        "b(Lcom/mojang/datafixers/util/Pair;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/datafixers/util/Pair;": "updateReference",
        "c(Lcom/mojang/datafixers/util/Pair;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "findUpdatedStructureType",
        "a(Lcom/mojang/serialization/Dynamic;Lnet/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix$Conversion;)Ljava/util/Optional;": "guessConfiguration",
        "a(Lnet/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix$Conversion;Lit/unimi/dsi/fastutil/objects/Object2IntArrayMap;Lcom/mojang/serialization/Dynamic;)V": "lambda$guessConfiguration$9",
        "b(Lnet/minecraft/util/datafix/fixes/StructuresBecomeConfiguredFix$Conversion;Lit/unimi/dsi/fastutil/objects/Object2IntArrayMap;Lcom/mojang/serialization/Dynamic;)V": "lambda$guessConfiguration$8",
        "a(Lcom/mojang/datafixers/util/Pair;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$updateReference$7",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateReferences$6",
        "a(Ljava/util/List;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)V": "lambda$updateReferences$5",
        "b(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateStarts$4",
        "b(Ljava/util/List;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)V": "lambda$updateStarts$3",
        "c(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$2",
        "d(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$1",
        "e(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterTeamDisplayName": {
      "methods": {
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/util/function/Function;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$1",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterTrappedChest": {
      "fields": {
        "a": "LOGGER",
        "b": "SIZE",
        "c": "SIZE_BITS"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$5",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;IILit/unimi/dsi/fastutil/ints/IntSet;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(IILit/unimi/dsi/fastutil/ints/IntSet;Lcom/mojang/datafixers/types/templates/TaggedChoice$TaggedChoiceType;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$makeRule$1",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/VariantRenameFix": {
      "fields": {
        "a": "renames"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$2",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$1",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterVillagerProfession": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(II)Ljava/lang/String;": "upgradeData"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterVillagerFollowRange": {
      "fields": {
        "a": "ORIGINAL_VALUE",
        "b": "NEW_BASE_VALUE"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fixValue",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixValue$1",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixValue$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterVillagerLevelXp": {
      "fields": {
        "a": "TRADES_PER_LEVEL",
        "b": "LEVEL_XP_THRESHOLDS"
      },
      "methods": {
        "a(I)I": "getMinXpPerLevel",
        "a(Lcom/mojang/datafixers/Typed;I)Lcom/mojang/datafixers/Typed;": "addLevel",
        "b(Lcom/mojang/datafixers/Typed;I)Lcom/mojang/datafixers/Typed;": "addXpFromLevel",
        "a(ILcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$addXpFromLevel$6",
        "b(ILcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$addLevel$5",
        "c(ILcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$addLevel$4",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$2",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Ljava/lang/Integer;": "lambda$makeRule$1",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Ljava/util/Optional;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterVillagerTrade": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "updateItemStack",
        "a(Lcom/mojang/datafixers/util/Pair;)Lcom/mojang/datafixers/util/Pair;": "lambda$updateItemStack$5",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$updateItemStack$4",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Ljava/util/function/Function;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$fix$3",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Ljava/util/function/Function;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$fix$2",
        "a(Lcom/mojang/datafixers/OpticFinder;Ljava/util/function/Function;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$fix$1",
        "b(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterWallProperty": {
      "fields": {
        "a": "WALL_BLOCKS"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "mapProperty",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;": "fixWallProperty",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "upgradeBlockStateTag",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$upgradeBlockStateTag$2",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fixWallProperty$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/WeaponSmithChestLootTableFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/fixes/WorldGenSettingsDisallowOldCustomWorldsFix": {
      "methods": {
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$4",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$3",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;": "lambda$makeRule$2",
        "a(Ljava/util/Map;)Ljava/util/Map;": "lambda$makeRule$1",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)V": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterWorldGenSettingsBuilding": {
      "fields": {
        "a": "VILLAGE",
        "b": "DESERT_PYRAMID",
        "c": "IGLOO",
        "d": "JUNGLE_TEMPLE",
        "e": "SWAMP_HUT",
        "f": "PILLAGER_OUTPOST",
        "g": "END_CITY",
        "h": "WOODLAND_MANSION",
        "i": "OCEAN_MONUMENT",
        "j": "DEFAULTS"
      },
      "methods": {
        "a(JLcom/mojang/serialization/DynamicLike;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "noise",
        "a(Lcom/mojang/serialization/Dynamic;JZZ)Lcom/mojang/serialization/Dynamic;": "vanillaBiomeSource",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;J)Lcom/mojang/serialization/Dynamic;": "defaultOverworld",
        "a(Lcom/mojang/serialization/Dynamic;JLcom/mojang/serialization/Dynamic;Z)Ljava/lang/Object;": "vanillaLevels",
        "a(Lcom/mojang/serialization/DynamicOps;Lcom/mojang/serialization/OptionalDynamic;)Ljava/util/Map;": "fixFlatStructures",
        "a(Ljava/lang/String;I)I": "getInt",
        "a(Ljava/lang/String;II)I": "getInt",
        "a(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;I)V": "setSpacing",
        "a(Lcom/mojang/serialization/DynamicOps;Ljava/util/Map$Entry;)Lcom/mojang/serialization/Dynamic;": "lambda$fixFlatStructures$12",
        "a(Lcom/mojang/serialization/OptionalDynamic;Ljava/util/Map$Entry;)Lcom/mojang/serialization/Dynamic;": "lambda$fixFlatStructures$11",
        "a(Lorg/apache/commons/lang3/mutable/MutableBoolean;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Ljava/util/Map;Ljava/util/Map;)V": "lambda$fixFlatStructures$10",
        "a(Lorg/apache/commons/lang3/mutable/MutableBoolean;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Ljava/util/Map;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)V": "lambda$fixFlatStructures$9",
        "a(Lcom/mojang/serialization/Dynamic;Lorg/apache/commons/lang3/mutable/MutableBoolean;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Ljava/util/Map;Ljava/util/Map;)V": "lambda$fixFlatStructures$8",
        "a(Lcom/mojang/serialization/Dynamic;Lorg/apache/commons/lang3/mutable/MutableBoolean;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableInt;Ljava/util/Map;Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)V": "lambda$fixFlatStructures$7",
        "a(Lcom/google/common/collect/ImmutableMap$Builder;Lcom/mojang/serialization/DynamicOps;Ljava/lang/String;)V": "lambda$fix$6",
        "b(Lcom/mojang/serialization/Dynamic;)Ljava/util/Optional;": "lambda$fix$5",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$4",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$3",
        "a(Ljava/util/Optional;Lcom/mojang/serialization/Dynamic;)Ljava/util/Optional;": "lambda$fix$2",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$fix$1",
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/WorldGenSettingsHeightAndBiomeFix": {
      "fields": {
        "b": "NAME",
        "a": "WAS_PREVIOUSLY_INCREASED_KEY"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "updateLayers",
        "a(Lcom/mojang/datafixers/OpticFinder;Lcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$9",
        "a(ZZLcom/mojang/datafixers/types/Type;Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "lambda$makeRule$8",
        "a()Ljava/lang/IllegalStateException;": "lambda$makeRule$7",
        "a(ZZLcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$6",
        "b(ZZLcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$5",
        "b(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$4",
        "c(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$3",
        "a(ZLorg/apache/commons/lang3/mutable/MutableBoolean;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$2",
        "b()Ljava/lang/IllegalStateException;": "lambda$makeRule$1",
        "d(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$makeRule$0"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterShoulderEntity": {
      "fields": {
        "a": "name",
        "b": "type"
      }
    },
    "net/minecraft/util/datafix/fixes/DataConverterZombieVillagerLevelXp": {
      "methods": {
        "a(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;": "fix",
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$fix$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaNamed": {
      "fields": {
        "a": "NAMESPACED_STRING_CODEC",
        "b": "NAMESPACED_STRING"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/lang/String;": "ensureNamespaced",
        "a()Lcom/mojang/datafixers/types/Type;": "namespacedString"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV100": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "equipment",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$4",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$3",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$2",
        "c(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV102": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1022": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$2",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$1",
        "a()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV106": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV107": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1125": {
      "methods": {
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$2",
        "c()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$1",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV135": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV143": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451_1": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451_2": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451_3": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$11",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$10",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$9",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$8",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$7",
        "f(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$6",
        "g(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$5",
        "h(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$4",
        "i(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$3",
        "j(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$2",
        "k(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451_4": {
      "methods": {
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451_5": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1451_6": {
      "fields": {
        "b": "SPECIAL_OBJECTIVE_MARKER",
        "c": "UNPACK_OBJECTIVE_ID",
        "d": "REPACK_OBJECTIVE_ID"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Ljava/util/Map;": "createCriterionTypes",
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$createCriterionTypes$7",
        "c()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$createCriterionTypes$6",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$createCriterionTypes$5",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$createCriterionTypes$4",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$createCriterionTypes$3",
        "a(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$2",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/function/Supplier;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$1",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1460": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerInventory",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$46",
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$45",
        "c()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$44",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$43",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$42",
        "a(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$41",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$40",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/function/Supplier;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$39",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$38",
        "d()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$37",
        "e()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$36",
        "f(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$35",
        "g(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$34",
        "h(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$33",
        "b(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$32",
        "i(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$31",
        "c(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$30",
        "j(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$29",
        "k(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$28",
        "f()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$27",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$26",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$25",
        "c(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$24",
        "d(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$23",
        "e(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$22",
        "f(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$21",
        "g(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$20",
        "h(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$19",
        "i(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$18",
        "j(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$17",
        "k(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$16",
        "l(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$15",
        "m(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$14",
        "n(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$13",
        "o(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$12",
        "p(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$11",
        "q(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$10",
        "r(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$9",
        "s(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$8",
        "t(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$7",
        "u(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$6",
        "v(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$5",
        "w(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$4",
        "x(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$3",
        "y(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$2",
        "l(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerInventory$1",
        "m(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1466": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1470": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1481": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1483": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1486": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1510": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1800": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1801": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1904": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1906": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerInventory",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerInventory$1",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1909": {},
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1920": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerInventory",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerInventory$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1928": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "equipment",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1929": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV1931": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2100": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2501": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerFurnace",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerFurnace$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2502": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2505": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2509": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2519": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2522": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2551": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$5",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$4",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$3",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$2",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$1",
        "f(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV2568": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2571": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2684": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$1",
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2686": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2688": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2704": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2707": {},
    "net/minecraft/util/datafix/schemas/V2831": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2832": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$7",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$6",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$5",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$4",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$3",
        "f(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$2",
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$1",
        "g(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V2842": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3076": {},
    "net/minecraft/util/datafix/schemas/V3078": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3081": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3082": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3083": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3202": {},
    "net/minecraft/util/datafix/schemas/V3203": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3204": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3325": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3326": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3327": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/V3328": {},
    "net/minecraft/util/datafix/schemas/V3438": {},
    "net/minecraft/util/datafix/schemas/V3448": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV501": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV700": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV701": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV702": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV703": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$4",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$3",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$2",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$1",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV704": {
      "fields": {
        "a": "ITEM_TO_BLOCKENTITY",
        "b": "ADD_NAMES"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerInventory",
        "a()Lcom/google/common/collect/ImmutableMap;": "lambda$static$6",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$5",
        "a(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$4",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$3",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$2",
        "c(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$1",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerInventory$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV705": {
      "fields": {
        "b": "ADD_NAMES"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerThrowableProjectile",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$25",
        "a(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$24",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$23",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$22",
        "c(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$21",
        "d(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$20",
        "e(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$19",
        "f(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$18",
        "g(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$17",
        "h(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$16",
        "i(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$15",
        "j(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$14",
        "k(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$13",
        "l(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$12",
        "m(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$11",
        "n(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$10",
        "o(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$9",
        "p(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$8",
        "q(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$7",
        "r(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$6",
        "s(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$5",
        "t(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$4",
        "u(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$3",
        "v(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$2",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerThrowableProjectile$1",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV808": {
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerInventory",
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerInventory$0"
      }
    },
    "net/minecraft/util/datafix/schemas/DataConverterSchemaV99": {
      "fields": {
        "b": "LOGGER",
        "c": "ITEM_TO_BLOCKENTITY",
        "a": "ADD_NAMES"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "equipment",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMob",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerThrowableProjectile",
        "c(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerMinecart",
        "d(Lcom/mojang/datafixers/schemas/Schema;Ljava/util/Map;Ljava/lang/String;)V": "registerInventory",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Object;": "addNames",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Map;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$addNames$36",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$addNames$35",
        "a(Lcom/mojang/serialization/Dynamic;Ljava/util/Map;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;": "lambda$addNames$34",
        "a(Ljava/util/HashMap;)V": "lambda$static$33",
        "b(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$32",
        "c(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$31",
        "a()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$30",
        "b()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$29",
        "d(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$28",
        "a(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$27",
        "c()Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$26",
        "e(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$25",
        "b(Ljava/util/Map;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$24",
        "f(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$23",
        "g(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerTypes$22",
        "a(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$21",
        "b(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$20",
        "c(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerBlockEntities$19",
        "d(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$18",
        "e(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$17",
        "f(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$16",
        "g(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$15",
        "h(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$14",
        "h(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$13",
        "i(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$12",
        "i(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$11",
        "j(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$10",
        "k(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$9",
        "l(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$8",
        "m(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$7",
        "n(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$6",
        "o(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$5",
        "p(Lcom/mojang/datafixers/schemas/Schema;Ljava/lang/String;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerEntities$4",
        "j(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerInventory$3",
        "k(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMinecart$2",
        "l(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerThrowableProjectile$1",
        "m(Lcom/mojang/datafixers/schemas/Schema;)Lcom/mojang/datafixers/types/templates/TypeTemplate;": "lambda$registerMob$0"
      }
    },
    "net/minecraft/util/monitoring/jmx/MinecraftServerBeans": {
      "fields": {
        "a": "LOGGER",
        "b": "server",
        "c": "mBeanInfo",
        "d": "attributeDescriptionByName"
      },
      "methods": {
        "a(Lnet/minecraft/server/MinecraftServer;)V": "registerJmxMonitoring",
        "a()F": "getAverageTickTime",
        "b()[J": "getTickTimes",
        "a(Lnet/minecraft/util/monitoring/jmx/MinecraftServerStatistics$AttributeDescription;)Ljavax/management/Attribute;": "lambda$getAttributes$2",
        "a(I)[Ljavax/management/MBeanAttributeInfo;": "lambda$new$1",
        "b(Lnet/minecraft/util/monitoring/jmx/MinecraftServerStatistics$AttributeDescription;)Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/util/profiling/MethodProfiler": {
      "fields": {
        "a": "WARNING_TIME_NANOS",
        "c": "LOGGER",
        "d": "paths",
        "e": "startTimes",
        "f": "entries",
        "g": "getTickTime",
        "h": "getRealTime",
        "i": "startTimeNano",
        "j": "startTimeTicks",
        "k": "path",
        "l": "started",
        "m": "currentEntry",
        "n": "warn",
        "o": "chartedPaths"
      },
      "methods": {
        "a()V": "startTick",
        "b()V": "endTick",
        "a(Ljava/lang/String;)V": "push",
        "a(Ljava/util/function/Supplier;)V": "push",
        "a(Lnet/minecraft/util/profiling/metrics/MetricCategory;)V": "markForCharting",
        "c()V": "pop",
        "b(Ljava/lang/String;)V": "popPush",
        "b(Ljava/util/function/Supplier;)V": "popPush",
        "f()Lnet/minecraft/util/profiling/ActiveProfiler$PathEntry;": "getCurrentEntry",
        "a(Ljava/lang/String;I)V": "incrementCounter",
        "a(Ljava/util/function/Supplier;I)V": "incrementCounter",
        "d()Lnet/minecraft/util/profiling/ProfileResults;": "getResults",
        "c(Ljava/lang/String;)Lnet/minecraft/util/profiling/ActiveProfiler$PathEntry;": "getEntry",
        "e()Ljava/util/Set;": "getChartedPaths",
        "e(Ljava/lang/String;)Lnet/minecraft/util/profiling/ActiveProfiler$PathEntry;": "lambda$getCurrentEntry$3",
        "a(J)Ljava/lang/Object;": "lambda$pop$2",
        "g()Ljava/lang/Object;": "lambda$pop$1",
        "h()Ljava/lang/Object;": "lambda$endTick$0"
      }
    },
    "net/minecraft/util/profiling/GameProfilerSwitcher": {
      "fields": {
        "a": "realTime",
        "b": "tickCount",
        "c": "profiler"
      },
      "methods": {
        "a()Z": "isEnabled",
        "b()V": "disable",
        "c()V": "enable",
        "d()Lnet/minecraft/util/profiling/ProfilerFiller;": "getFiller",
        "e()Lnet/minecraft/util/profiling/ProfileResults;": "getResults"
      }
    },
    "net/minecraft/util/profiling/MethodProfilerResultsEmpty": {
      "fields": {
        "a": "EMPTY"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/util/List;": "getTimes",
        "a(Ljava/nio/file/Path;)Z": "saveResults",
        "a()J": "getStartTimeNano",
        "b()I": "getStartTimeTicks",
        "c()J": "getEndTimeNano",
        "d()I": "getEndTimeTicks",
        "e()Ljava/lang/String;": "getProfilerResults"
      }
    },
    "net/minecraft/util/profiling/MethodProfilerResultsFilled": {
      "fields": {
        "a": "LOGGER",
        "b": "EMPTY",
        "c": "SPLITTER",
        "e": "COUNTER_ENTRY_COMPARATOR",
        "f": "entries",
        "g": "startTimeNano",
        "h": "startTimeTicks",
        "i": "endTimeNano",
        "j": "endTimeTicks",
        "k": "tickDuration"
      },
      "methods": {
        "c(Ljava/lang/String;)Lnet/minecraft/util/profiling/ProfilerPathEntry;": "getEntry",
        "a(Ljava/lang/String;)Ljava/util/List;": "getTimes",
        "a(Ljava/lang/String;Ljava/lang/String;)Z": "isDirectChild",
        "h()Ljava/util/Map;": "getCounterValues",
        "a()J": "getStartTimeNano",
        "b()I": "getStartTimeTicks",
        "c()J": "getEndTimeNano",
        "d()I": "getEndTimeTicks",
        "a(Ljava/nio/file/Path;)Z": "saveResults",
        "a(JI)Ljava/lang/String;": "getProfilerResults",
        "e()Ljava/lang/String;": "getProfilerResults",
        "a(Ljava/lang/StringBuilder;I)Ljava/lang/StringBuilder;": "indentLine",
        "a(ILjava/lang/String;Ljava/lang/StringBuilder;)V": "appendProfilerResults",
        "a(ILjava/lang/String;Lnet/minecraft/util/profiling/FilledProfileResults$CounterCollector;ILjava/lang/StringBuilder;)V": "appendCounterResults",
        "a(Ljava/util/Map;Ljava/lang/StringBuilder;I)V": "appendCounters",
        "i()Ljava/lang/String;": "getComment",
        "f()I": "getTickDuration",
        "a(Ljava/lang/StringBuilder;ILjava/lang/String;Lnet/minecraft/util/profiling/FilledProfileResults$CounterCollector;)V": "lambda$appendCounters$6",
        "a(IILjava/lang/StringBuilder;Ljava/util/Map$Entry;)V": "lambda$appendCounterResults$5",
        "a(Ljava/lang/StringBuilder;ILjava/lang/String;Ljava/lang/Long;)V": "lambda$appendProfilerResults$4",
        "a(Ljava/util/Map;Ljava/lang/String;Lnet/minecraft/util/profiling/ProfilerPathEntry;)V": "lambda$getCounterValues$3",
        "a(Ljava/util/Map;Ljava/util/List;Ljava/lang/String;Ljava/lang/Long;)V": "lambda$getCounterValues$2",
        "d(Ljava/lang/String;)Lnet/minecraft/util/profiling/FilledProfileResults$CounterCollector;": "lambda$getCounterValues$1",
        "a(Lnet/minecraft/util/profiling/FilledProfileResults$CounterCollector;)J": "lambda$static$0"
      }
    },
    "net/minecraft/util/profiling/GameProfilerDisabled": {
      "fields": {
        "a": "INSTANCE"
      },
      "methods": {
        "a()V": "startTick",
        "b()V": "endTick",
        "a(Ljava/lang/String;)V": "push",
        "a(Ljava/util/function/Supplier;)V": "push",
        "a(Lnet/minecraft/util/profiling/metrics/MetricCategory;)V": "markForCharting",
        "c()V": "pop",
        "b(Ljava/lang/String;)V": "popPush",
        "b(Ljava/util/function/Supplier;)V": "popPush",
        "a(Ljava/lang/String;I)V": "incrementCounter",
        "a(Ljava/util/function/Supplier;I)V": "incrementCounter",
        "d()Lnet/minecraft/util/profiling/ProfileResults;": "getResults",
        "c(Ljava/lang/String;)Lnet/minecraft/util/profiling/ActiveProfiler$PathEntry;": "getEntry",
        "e()Ljava/util/Set;": "getChartedPaths"
      }
    },
    "net/minecraft/util/profiling/GameProfilerFillerActive": {
      "methods": {
        "d()Lnet/minecraft/util/profiling/ProfileResults;": "getResults",
        "c(Ljava/lang/String;)Lnet/minecraft/util/profiling/ActiveProfiler$PathEntry;": "getEntry",
        "e()Ljava/util/Set;": "getChartedPaths"
      }
    },
    "net/minecraft/util/profiling/MethodProfilerResults": {
      "fields": {
        "d": "PATH_SEPARATOR"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/util/List;": "getTimes",
        "a(Ljava/nio/file/Path;)Z": "saveResults",
        "a()J": "getStartTimeNano",
        "b()I": "getStartTimeTicks",
        "c()J": "getEndTimeNano",
        "d()I": "getEndTimeTicks",
        "g()J": "getNanoDuration",
        "f()I": "getTickDuration",
        "e()Ljava/lang/String;": "getProfilerResults",
        "b(Ljava/lang/String;)Ljava/lang/String;": "demanglePath"
      }
    },
    "net/minecraft/util/profiling/GameProfilerFiller": {
      "fields": {
        "b": "ROOT"
      },
      "methods": {
        "a()V": "startTick",
        "b()V": "endTick",
        "a(Ljava/lang/String;)V": "push",
        "a(Ljava/util/function/Supplier;)V": "push",
        "c()V": "pop",
        "b(Ljava/lang/String;)V": "popPush",
        "b(Ljava/util/function/Supplier;)V": "popPush",
        "a(Lnet/minecraft/util/profiling/metrics/MetricCategory;)V": "markForCharting",
        "d(Ljava/lang/String;)V": "incrementCounter",
        "a(Ljava/lang/String;I)V": "incrementCounter",
        "c(Ljava/util/function/Supplier;)V": "incrementCounter",
        "a(Ljava/util/function/Supplier;I)V": "incrementCounter",
        "a(Lnet/minecraft/util/profiling/ProfilerFiller;Lnet/minecraft/util/profiling/ProfilerFiller;)Lnet/minecraft/util/profiling/ProfilerFiller;": "tee"
      }
    },
    "net/minecraft/util/profiling/MethodProfilerResult": {
      "methods": {
        "a()J": "getDuration",
        "b()J": "getMaxDuration",
        "c()J": "getCount",
        "d()Lit/unimi/dsi/fastutil/objects/Object2LongMap;": "getCounters"
      }
    },
    "net/minecraft/util/profiling/MethodProfilerResultsField": {
      "fields": {
        "a": "percentage",
        "b": "globalPercentage",
        "c": "count",
        "d": "name"
      },
      "methods": {
        "a(Lnet/minecraft/util/profiling/ResultField;)I": "compareTo",
        "a()I": "getColor"
      }
    },
    "net/minecraft/util/profiling/GameProfilerTick": {
      "fields": {
        "a": "LOGGER",
        "b": "realTime",
        "c": "saveThreshold",
        "d": "tick",
        "e": "location",
        "f": "profiler"
      },
      "methods": {
        "a()Lnet/minecraft/util/profiling/ProfilerFiller;": "startTick",
        "b()V": "endTick",
        "a(Ljava/lang/String;)Lnet/minecraft/util/profiling/SingleTickProfiler;": "createTickProfiler",
        "a(Lnet/minecraft/util/profiling/ProfilerFiller;Lnet/minecraft/util/profiling/SingleTickProfiler;)Lnet/minecraft/util/profiling/ProfilerFiller;": "decorateFiller",
        "c()I": "lambda$startTick$0"
      }
    },
    "net/minecraft/util/profiling/jfr/Environment": {
      "fields": {
        "a": "CLIENT",
        "b": "SERVER",
        "c": "description",
        "d": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/server/MinecraftServer;)Lnet/minecraft/util/profiling/jfr/Environment;": "from",
        "a()Ljava/lang/String;": "getDescription",
        "b()[Lnet/minecraft/util/profiling/jfr/Environment;": "$values"
      }
    },
    "net/minecraft/util/profiling/jfr/JfrProfiler": {
      "fields": {
        "f": "LOGGER",
        "a": "ROOT_CATEGORY",
        "b": "WORLD_GEN_CATEGORY",
        "c": "TICK_CATEGORY",
        "d": "NETWORK_CATEGORY",
        "g": "CUSTOM_EVENTS",
        "h": "FLIGHT_RECORDER_CONFIG",
        "i": "DATE_TIME_FORMATTER",
        "j": "INSTANCE",
        "k": "recording",
        "l": "currentAverageTickTime",
        "m": "networkTrafficByAddress"
      },
      "methods": {
        "a()Lnet/minecraft/util/profiling/jfr/JfrProfiler;": "getInstance",
        "a(Lnet/minecraft/util/profiling/jfr/Environment;)Z": "start",
        "b()Ljava/nio/file/Path;": "stop",
        "c()Z": "isRunning",
        "d()Z": "isAvailable",
        "a(Ljava/io/Reader;Lnet/minecraft/util/profiling/jfr/Environment;)Z": "start",
        "f()V": "setupSummaryListener",
        "a(F)V": "onServerTick",
        "a(IILjava/net/SocketAddress;I)V": "onPacketReceived",
        "b(IILjava/net/SocketAddress;I)V": "onPacketSent",
        "a(Ljava/net/SocketAddress;)Lnet/minecraft/util/profiling/jfr/event/NetworkSummaryEvent$SumAggregation;": "networkStatFor",
        "e()Lnet/minecraft/util/profiling/jfr/callback/ProfiledDuration;": "onWorldLoadedStarted",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;)Lnet/minecraft/util/profiling/jfr/callback/ProfiledDuration;": "onChunkGenerate",
        "a(Lnet/minecraft/util/profiling/jfr/Environment;Ljava/lang/String;Ljdk/jfr/Recording;)V": "lambda$start$2",
        "g()V": "lambda$new$1",
        "h()V": "lambda$new$0"
      }
    },
    "net/minecraft/util/profiling/jfr/JvmProfiler": {
      "fields": {
        "e": "INSTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/util/profiling/jfr/Environment;)Z": "start",
        "b()Ljava/nio/file/Path;": "stop",
        "c()Z": "isRunning",
        "d()Z": "isAvailable",
        "a(F)V": "onServerTick",
        "a(IILjava/net/SocketAddress;I)V": "onPacketReceived",
        "b(IILjava/net/SocketAddress;I)V": "onPacketSent",
        "e()Lnet/minecraft/util/profiling/jfr/callback/ProfiledDuration;": "onWorldLoadedStarted",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/resources/ResourceKey;Ljava/lang/String;)Lnet/minecraft/util/profiling/jfr/callback/ProfiledDuration;": "onChunkGenerate"
      }
    },
    "net/minecraft/util/profiling/jfr/Percentiles": {
      "fields": {
        "a": "DEFAULT_INDEXES"
      },
      "methods": {
        "a([J)Ljava/util/Map;": "evaluate",
        "a([D)Ljava/util/Map;": "evaluate",
        "a(Ljava/util/Map;)Ljava/util/Map;": "sorted",
        "a(Ljava/util/Map;Lit/unimi/dsi/fastutil/ints/Int2DoubleRBTreeMap;)V": "lambda$sorted$0"
      }
    },
    "net/minecraft/util/profiling/jfr/SummaryReporter": {
      "fields": {
        "a": "LOGGER",
        "b": "onDeregistration"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)V": "recordingStopped",
        "a(Ljava/util/function/Supplier;)V": "infoWithFallback",
        "a(Ljava/util/function/Supplier;Ljava/lang/Throwable;)V": "warnWithFallback",
        "a()Ljava/lang/String;": "lambda$recordingStopped$3",
        "b(Ljava/nio/file/Path;)Ljava/lang/String;": "lambda$recordingStopped$2",
        "b()Ljava/lang/String;": "lambda$recordingStopped$1",
        "c(Ljava/nio/file/Path;)Ljava/lang/String;": "lambda$recordingStopped$0"
      }
    },
    "net/minecraft/util/profiling/jfr/callback/ProfiledDuration": {},
    "net/minecraft/util/profiling/jfr/event/NetworkSummaryEvent": {
      "fields": {
        "EVENT_NAME": "EVENT_NAME",
        "TYPE": "TYPE",
        "remoteAddress": "remoteAddress",
        "sentBytes": "sentBytes",
        "sentPackets": "sentPackets",
        "receivedBytes": "receivedBytes",
        "receivedPackets": "receivedPackets"
      }
    },
    "net/minecraft/util/profiling/jfr/event/PacketEvent": {
      "fields": {
        "protocolId": "protocolId",
        "packetId": "packetId",
        "remoteAddress": "remoteAddress",
        "bytes": "bytes"
      }
    },
    "net/minecraft/util/profiling/jfr/parse/JfrStatsParser": {
      "fields": {
        "a": "recordingStarted",
        "b": "recordingEnded",
        "c": "chunkGenStats",
        "d": "cpuLoadStat",
        "e": "receivedPackets",
        "f": "sentPackets",
        "g": "fileWrites",
        "h": "fileReads",
        "i": "garbageCollections",
        "j": "gcTotalDuration",
        "k": "gcHeapStats",
        "l": "threadAllocationStats",
        "m": "tickTimes",
        "n": "worldCreationDuration"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)Lnet/minecraft/util/profiling/jfr/parse/JfrStatsResult;": "parse",
        "a()Lnet/minecraft/util/profiling/jfr/parse/JfrStatsResult;": "results",
        "a(Ljava/util/stream/Stream;)V": "capture",
        "a(Ljdk/jfr/consumer/RecordedEvent;ILjava/util/Map;)V": "incrementPacket",
        "a(Ljdk/jfr/consumer/RecordedEvent;Ljava/util/List;Ljava/lang/String;)V": "appendFileIO",
        "a(Ljava/time/Duration;Ljava/util/Map;)Lnet/minecraft/util/profiling/jfr/stats/NetworkPacketSummary;": "collectPacketStats",
        "a(Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$collectPacketStats$2",
        "a(Lnet/minecraft/util/profiling/jfr/stats/NetworkPacketSummary$PacketIdentification;)Lnet/minecraft/util/profiling/jfr/parse/JfrStatsParser$MutableCountAndSize;": "lambda$incrementPacket$1",
        "a(Ljdk/jfr/consumer/RecordedEvent;)V": "lambda$capture$0"
      }
    },
    "net/minecraft/util/profiling/jfr/parse/JfrStatsResult": {
      "fields": {
        "a": "recordingStarted",
        "b": "recordingEnded",
        "c": "recordingDuration",
        "d": "worldCreationDuration",
        "e": "tickTimes",
        "f": "cpuLoadStats",
        "g": "heapSummary",
        "h": "threadAllocationSummary",
        "i": "receivedPacketsSummary",
        "j": "sentPacketsSummary",
        "k": "fileWrites",
        "l": "fileReads",
        "m": "chunkGenStats"
      },
      "methods": {
        "a()Ljava/util/List;": "chunkGenSummary",
        "b()Ljava/lang/String;": "asJson",
        "c()Ljava/time/Instant;": "recordingStarted",
        "d()Ljava/time/Instant;": "recordingEnded",
        "e()Ljava/time/Duration;": "recordingDuration",
        "f()Ljava/time/Duration;": "worldCreationDuration",
        "g()Ljava/util/List;": "tickTimes",
        "h()Ljava/util/List;": "cpuLoadStats",
        "i()Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat$Summary;": "heapSummary",
        "j()Lnet/minecraft/util/profiling/jfr/stats/ThreadAllocationStat$Summary;": "threadAllocationSummary",
        "k()Lnet/minecraft/util/profiling/jfr/stats/NetworkPacketSummary;": "receivedPacketsSummary",
        "l()Lnet/minecraft/util/profiling/jfr/stats/NetworkPacketSummary;": "sentPacketsSummary",
        "m()Lnet/minecraft/util/profiling/jfr/stats/FileIOStat$Summary;": "fileWrites",
        "n()Lnet/minecraft/util/profiling/jfr/stats/FileIOStat$Summary;": "fileReads",
        "o()Ljava/util/List;": "chunkGenStats",
        "a(Lcom/mojang/datafixers/util/Pair;)Ljava/time/Duration;": "lambda$chunkGenSummary$1",
        "a(Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$chunkGenSummary$0"
      }
    },
    "net/minecraft/util/profiling/jfr/serialize/JfrResultJsonSerializer": {
      "fields": {
        "b": "BYTES_PER_SECOND",
        "c": "COUNT",
        "d": "DURATION_NANOS_TOTAL",
        "e": "TOTAL_BYTES",
        "f": "COUNT_PER_SECOND",
        "a": "gson"
      },
      "methods": {
        "a(Lnet/minecraft/util/profiling/jfr/parse/JfrStatsResult;)Ljava/lang/String;": "format",
        "a(Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat$Summary;)Lcom/google/gson/JsonElement;": "heap",
        "a(Ljava/util/List;)Lcom/google/gson/JsonElement;": "chunkGen",
        "a(Lnet/minecraft/util/profiling/jfr/stats/ThreadAllocationStat$Summary;)Lcom/google/gson/JsonElement;": "threadAllocations",
        "b(Ljava/util/List;)Lcom/google/gson/JsonElement;": "serverTicks",
        "b(Lnet/minecraft/util/profiling/jfr/parse/JfrStatsResult;)Lcom/google/gson/JsonElement;": "fileIO",
        "a(Lnet/minecraft/util/profiling/jfr/stats/FileIOStat$Summary;)Lcom/google/gson/JsonElement;": "fileIoSummary",
        "c(Lnet/minecraft/util/profiling/jfr/parse/JfrStatsResult;)Lcom/google/gson/JsonElement;": "network",
        "a(Lnet/minecraft/util/profiling/jfr/stats/NetworkPacketSummary;)Lcom/google/gson/JsonElement;": "packets",
        "c(Ljava/util/List;)Lcom/google/gson/JsonElement;": "cpu",
        "a(Ljava/util/List;Ljava/util/function/ToDoubleFunction;)Lcom/google/gson/JsonObject;": "lambda$cpu$11",
        "a(Lcom/google/gson/JsonArray;Lcom/mojang/datafixers/util/Pair;)V": "lambda$packets$10",
        "b(Lcom/google/gson/JsonArray;Lcom/mojang/datafixers/util/Pair;)V": "lambda$fileIoSummary$9",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/Integer;Ljava/lang/Double;)V": "lambda$serverTicks$8",
        "a(Lnet/minecraft/util/profiling/jfr/stats/TickTimeStat;)D": "lambda$serverTicks$7",
        "a(Lcom/google/gson/JsonArray;Ljava/lang/String;Ljava/lang/Double;)V": "lambda$threadAllocations$6",
        "a(Ljava/lang/String;Ljava/lang/Double;Lcom/google/gson/JsonObject;)V": "lambda$threadAllocations$5",
        "a(Lnet/minecraft/util/profiling/jfr/stats/ChunkGenStat;)Lcom/google/gson/JsonElement;": "lambda$chunkGen$4",
        "b(Lcom/google/gson/JsonObject;Ljava/lang/Integer;Ljava/lang/Double;)V": "lambda$chunkGen$3",
        "a(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonObject;)V": "lambda$chunkGen$2",
        "a(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonArray;)V": "lambda$chunkGen$1",
        "a(Lcom/mojang/datafixers/util/Pair;)D": "lambda$chunkGen$0"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/ChunkGenStat": {
      "fields": {
        "a": "duration",
        "b": "chunkPos",
        "c": "worldPos",
        "d": "status",
        "e": "level"
      },
      "methods": {
        "a(Ljdk/jfr/consumer/RecordedEvent;)Lnet/minecraft/util/profiling/jfr/stats/ChunkGenStat;": "from",
        "a()Ljava/time/Duration;": "duration",
        "b()Lnet/minecraft/world/level/ChunkPos;": "chunkPos",
        "c()Lnet/minecraft/server/level/ColumnPos;": "worldPos",
        "d()Lnet/minecraft/world/level/chunk/ChunkStatus;": "status",
        "e()Ljava/lang/String;": "level"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/CpuLoadStat": {
      "fields": {
        "a": "jvm",
        "b": "userJvm",
        "c": "system"
      },
      "methods": {
        "a(Ljdk/jfr/consumer/RecordedEvent;)Lnet/minecraft/util/profiling/jfr/stats/CpuLoadStat;": "from",
        "a()D": "jvm",
        "b()D": "userJvm",
        "c()D": "system"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/FileIOStat": {
      "fields": {
        "a": "duration",
        "b": "path",
        "c": "bytes"
      },
      "methods": {
        "a(Ljava/time/Duration;Ljava/util/List;)Lnet/minecraft/util/profiling/jfr/stats/FileIOStat$Summary;": "summary",
        "a()Ljava/time/Duration;": "duration",
        "b()Ljava/lang/String;": "path",
        "c()J": "bytes",
        "a(Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$summary$4",
        "a(Lnet/minecraft/util/profiling/jfr/stats/FileIOStat;)J": "lambda$summary$3",
        "b(Lnet/minecraft/util/profiling/jfr/stats/FileIOStat;)Ljava/lang/String;": "lambda$summary$2",
        "c(Lnet/minecraft/util/profiling/jfr/stats/FileIOStat;)Z": "lambda$summary$1",
        "d(Lnet/minecraft/util/profiling/jfr/stats/FileIOStat;)J": "lambda$summary$0"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/GcHeapStat": {
      "fields": {
        "a": "timestamp",
        "b": "heapUsed",
        "c": "timing"
      },
      "methods": {
        "a(Ljdk/jfr/consumer/RecordedEvent;)Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat;": "from",
        "a(Ljava/time/Duration;Ljava/util/List;Ljava/time/Duration;I)Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat$Summary;": "summary",
        "a(Ljava/util/List;)D": "calculateAllocationRatePerSecond",
        "a()Ljava/time/Instant;": "timestamp",
        "b()J": "heapUsed",
        "c()Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat$Timing;": "timing",
        "a(Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat;)Lnet/minecraft/util/profiling/jfr/stats/GcHeapStat$Timing;": "lambda$calculateAllocationRatePerSecond$0"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/NetworkPacketSummary": {
      "fields": {
        "a": "totalPacketCountAndSize",
        "b": "largestSizeContributors",
        "c": "recordingDuration"
      },
      "methods": {
        "a()D": "getCountsPerSecond",
        "b()D": "getSizePerSecond",
        "c()J": "getTotalCount",
        "d()J": "getTotalSize",
        "e()Ljava/util/List;": "largestSizeContributors",
        "f()Lnet/minecraft/util/profiling/jfr/stats/NetworkPacketSummary$PacketCountAndSize;": "lambda$new$0"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/ThreadAllocationStat": {
      "fields": {
        "a": "timestamp",
        "b": "threadName",
        "c": "totalBytes",
        "d": "UNKNOWN_THREAD"
      },
      "methods": {
        "a(Ljdk/jfr/consumer/RecordedEvent;)Lnet/minecraft/util/profiling/jfr/stats/ThreadAllocationStat;": "from",
        "a(Ljava/util/List;)Lnet/minecraft/util/profiling/jfr/stats/ThreadAllocationStat$Summary;": "summary",
        "a()Ljava/time/Instant;": "timestamp",
        "b()Ljava/lang/String;": "threadName",
        "c()J": "totalBytes",
        "a(Ljava/util/Map;Ljava/lang/String;Ljava/util/List;)V": "lambda$summary$1",
        "a(Lnet/minecraft/util/profiling/jfr/stats/ThreadAllocationStat;)Ljava/lang/String;": "lambda$summary$0"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/TickTimeStat": {
      "fields": {
        "a": "timestamp",
        "b": "currentAverage"
      },
      "methods": {
        "a(Ljdk/jfr/consumer/RecordedEvent;)Lnet/minecraft/util/profiling/jfr/stats/TickTimeStat;": "from",
        "a()Ljava/time/Instant;": "timestamp",
        "b()Ljava/time/Duration;": "currentAverage"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/TimedStat": {
      "methods": {
        "a()Ljava/time/Duration;": "duration"
      }
    },
    "net/minecraft/util/profiling/jfr/stats/TimedStatSummary": {
      "fields": {
        "a": "fastest",
        "b": "slowest",
        "c": "secondSlowest",
        "d": "count",
        "e": "percentilesNanos",
        "f": "totalDuration"
      },
      "methods": {
        "a(Ljava/util/List;)Lnet/minecraft/util/profiling/jfr/stats/TimedStatSummary;": "summary",
        "a()Lnet/minecraft/util/profiling/jfr/stats/TimedStat;": "fastest",
        "b()Lnet/minecraft/util/profiling/jfr/stats/TimedStat;": "slowest",
        "c()Lnet/minecraft/util/profiling/jfr/stats/TimedStat;": "secondSlowest",
        "d()I": "count",
        "e()Ljava/util/Map;": "percentilesNanos",
        "f()Ljava/time/Duration;": "totalDuration",
        "a(Lnet/minecraft/util/profiling/jfr/stats/TimedStat;)J": "lambda$summary$0"
      }
    },
    "net/minecraft/util/profiling/metrics/MetricCategory": {
      "fields": {
        "a": "PATH_FINDING",
        "b": "EVENT_LOOPS",
        "c": "MAIL_BOXES",
        "d": "TICK_LOOP",
        "e": "JVM",
        "f": "CHUNK_RENDERING",
        "g": "CHUNK_RENDERING_DISPATCHING",
        "h": "CPU",
        "i": "GPU",
        "j": "description",
        "k": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getDescription",
        "b()[Lnet/minecraft/util/profiling/metrics/MetricCategory;": "$values"
      }
    },
    "net/minecraft/util/profiling/metrics/MetricSampler": {
      "fields": {
        "b": "name",
        "c": "category",
        "d": "sampler",
        "e": "ticks",
        "f": "values",
        "g": "isRunning",
        "h": "beforeTick",
        "a": "thresholdTest",
        "i": "currentValue"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/util/profiling/metrics/MetricCategory;Ljava/util/function/DoubleSupplier;)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "create",
        "a(Ljava/lang/String;Lnet/minecraft/util/profiling/metrics/MetricCategory;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "create",
        "a(Ljava/lang/String;Lnet/minecraft/util/profiling/metrics/MetricCategory;Ljava/util/function/ToDoubleFunction;Ljava/lang/Object;)Lnet/minecraft/util/profiling/metrics/MetricSampler$MetricSamplerBuilder;": "builder",
        "a()V": "onStartTick",
        "a(I)V": "onEndTick",
        "b()V": "onFinished",
        "h()V": "verifyRunning",
        "c()Ljava/util/function/DoubleSupplier;": "getSampler",
        "d()Ljava/lang/String;": "getName",
        "e()Lnet/minecraft/util/profiling/metrics/MetricCategory;": "getCategory",
        "f()Lnet/minecraft/util/profiling/metrics/MetricSampler$SamplerResult;": "result",
        "g()Z": "triggersThreshold"
      }
    },
    "net/minecraft/util/profiling/metrics/MetricsRegistry": {
      "fields": {
        "a": "INSTANCE",
        "b": "measuredInstances"
      },
      "methods": {
        "a(Lnet/minecraft/util/profiling/metrics/ProfilerMeasured;)V": "add",
        "a()Ljava/util/List;": "getRegisteredSamplers",
        "a(Ljava/util/Map;)Ljava/util/List;": "aggregateDuplicates",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "lambda$aggregateDuplicates$1",
        "b(Lnet/minecraft/util/profiling/metrics/ProfilerMeasured;)Ljava/util/stream/Stream;": "lambda$getRegisteredSamplers$0"
      }
    },
    "net/minecraft/util/profiling/metrics/MetricsSamplerProvider": {
      "methods": {
        "a(Ljava/util/function/Supplier;)Ljava/util/Set;": "samplers"
      }
    },
    "net/minecraft/util/profiling/metrics/ProfilerMeasured": {
      "methods": {
        "bk()Ljava/util/List;": "profiledMetrics"
      }
    },
    "net/minecraft/util/profiling/metrics/profiling/ActiveMetricsRecorder": {
      "fields": {
        "a": "PROFILING_MAX_DURATION_SECONDS",
        "b": "globalOnReportFinished",
        "c": "deviationsBySampler",
        "d": "taskProfiler",
        "e": "ioExecutor",
        "f": "metricsPersister",
        "g": "onProfilingEnd",
        "h": "onReportFinished",
        "i": "metricsSamplerProvider",
        "j": "wallTimeSource",
        "k": "deadlineNano",
        "l": "currentTick",
        "m": "singleTickProfiler",
        "n": "killSwitch",
        "o": "thisTickSamplers"
      },
      "methods": {
        "a(Lnet/minecraft/util/profiling/metrics/MetricsSamplerProvider;Ljava/util/function/LongSupplier;Ljava/util/concurrent/Executor;Lnet/minecraft/util/profiling/metrics/storage/MetricsPersister;Ljava/util/function/Consumer;Ljava/util/function/Consumer;)Lnet/minecraft/util/profiling/metrics/profiling/ActiveMetricsRecorder;": "createStarted",
        "a()V": "end",
        "b()V": "cancel",
        "c()V": "startTick",
        "d()V": "endTick",
        "e()Z": "isRecording",
        "f()Lnet/minecraft/util/profiling/ProfilerFiller;": "getProfiler",
        "g()V": "verifyStarted",
        "a(Lnet/minecraft/util/profiling/ProfileResults;)V": "scheduleSaveResults",
        "a(Ljava/util/Collection;)V": "cleanup",
        "a(Ljava/util/function/Consumer;)V": "registerGlobalCompletionCallback",
        "a(Ljava/util/HashSet;Lnet/minecraft/util/profiling/ProfileResults;)V": "lambda$scheduleSaveResults$5",
        "h()I": "lambda$endTick$4",
        "a(Lnet/minecraft/util/profiling/metrics/MetricSampler;)Ljava/util/List;": "lambda$endTick$3",
        "i()Lnet/minecraft/util/profiling/ProfileCollector;": "lambda$startTick$2",
        "j()I": "lambda$new$1",
        "k()I": "lambda$new$0"
      }
    },
    "net/minecraft/util/profiling/metrics/profiling/InactiveMetricsRecorder": {
      "fields": {
        "a": "INSTANCE"
      },
      "methods": {
        "a()V": "end",
        "b()V": "cancel",
        "c()V": "startTick",
        "e()Z": "isRecording",
        "f()Lnet/minecraft/util/profiling/ProfilerFiller;": "getProfiler",
        "d()V": "endTick"
      }
    },
    "net/minecraft/util/profiling/metrics/profiling/MetricsRecorder": {
      "methods": {
        "a()V": "end",
        "b()V": "cancel",
        "c()V": "startTick",
        "e()Z": "isRecording",
        "f()Lnet/minecraft/util/profiling/ProfilerFiller;": "getProfiler",
        "d()V": "endTick"
      }
    },
    "net/minecraft/util/profiling/metrics/profiling/ProfilerSamplerAdapter": {
      "fields": {
        "a": "previouslyFoundSamplerNames"
      },
      "methods": {
        "a(Ljava/util/function/Supplier;)Ljava/util/Set;": "newSamplersFoundInProfiler",
        "a(Ljava/util/function/Supplier;Ljava/lang/String;Lnet/minecraft/util/profiling/metrics/MetricCategory;)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "samplerForProfilingPath",
        "a(Ljava/util/function/Supplier;Ljava/lang/String;)D": "lambda$samplerForProfilingPath$2",
        "a(Ljava/util/function/Supplier;Lorg/apache/commons/lang3/tuple/Pair;)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "lambda$newSamplersFoundInProfiler$1",
        "a(Lorg/apache/commons/lang3/tuple/Pair;)Z": "lambda$newSamplersFoundInProfiler$0"
      }
    },
    "net/minecraft/util/profiling/metrics/profiling/ServerMetricsSamplersProvider": {
      "fields": {
        "a": "LOGGER",
        "b": "samplers",
        "c": "samplerFactory"
      },
      "methods": {
        "a()Ljava/util/Set;": "runtimeIndependentSamplers",
        "a(Ljava/util/function/Supplier;)Ljava/util/Set;": "samplers",
        "a(Ljava/util/function/LongSupplier;)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "tickTimeSampler",
        "a(Lcom/google/common/base/Stopwatch;)D": "lambda$tickTimeSampler$3",
        "b()D": "lambda$runtimeIndependentSamplers$2",
        "a(Lnet/minecraft/util/profiling/metrics/profiling/ServerMetricsSamplersProvider$CpuStats;I)Lnet/minecraft/util/profiling/metrics/MetricSampler;": "lambda$runtimeIndependentSamplers$1",
        "b(Lnet/minecraft/util/profiling/metrics/profiling/ServerMetricsSamplersProvider$CpuStats;I)D": "lambda$runtimeIndependentSamplers$0"
      }
    },
    "net/minecraft/util/profiling/metrics/storage/MetricsPersister": {
      "fields": {
        "a": "PROFILING_RESULTS_DIR",
        "b": "METRICS_DIR_NAME",
        "c": "DEVIATIONS_DIR_NAME",
        "d": "PROFILING_RESULT_FILENAME",
        "e": "LOGGER",
        "f": "rootFolderName"
      },
      "methods": {
        "a(Ljava/util/Set;Ljava/util/Map;Lnet/minecraft/util/profiling/ProfileResults;)Ljava/nio/file/Path;": "saveReports",
        "a(Ljava/util/Set;Ljava/nio/file/Path;)V": "saveMetrics",
        "a(Lnet/minecraft/util/profiling/metrics/MetricCategory;Ljava/util/List;Ljava/nio/file/Path;)V": "saveCategory",
        "a(Ljava/util/Map;Ljava/nio/file/Path;)V": "saveDeviations",
        "a(Lnet/minecraft/util/profiling/ProfileResults;Ljava/nio/file/Path;)V": "saveProfilingTaskExecutionResult",
        "a(Ljava/time/format/DateTimeFormatter;Ljava/nio/file/Path;Lnet/minecraft/util/profiling/metrics/MetricSampler;Ljava/util/List;)V": "lambda$saveDeviations$4",
        "a(Ljava/time/format/DateTimeFormatter;Ljava/nio/file/Path;Lnet/minecraft/util/profiling/metrics/MetricSampler;Lnet/minecraft/util/profiling/metrics/storage/RecordedDeviation;)V": "lambda$saveDeviations$3",
        "a(I)[Ljava/lang/String;": "lambda$saveCategory$2",
        "a(ILnet/minecraft/util/profiling/metrics/MetricSampler$SamplerResult;)Ljava/lang/String;": "lambda$saveCategory$1",
        "a(Ljava/nio/file/Path;Lnet/minecraft/util/profiling/metrics/MetricCategory;Ljava/util/List;)V": "lambda$saveMetrics$0"
      }
    },
    "net/minecraft/util/profiling/metrics/storage/RecordedDeviation": {
      "fields": {
        "a": "timestamp",
        "b": "tick",
        "c": "profilerResultAtTick"
      }
    },
    "net/minecraft/util/random/SimpleWeightedRandomList": {
      "methods": {
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "wrappedCodecAllowingEmpty",
        "b(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "wrappedCodec",
        "a()Lnet/minecraft/util/random/SimpleWeightedRandomList$Builder;": "builder",
        "b()Lnet/minecraft/util/random/SimpleWeightedRandomList;": "empty",
        "a(Ljava/lang/Object;)Lnet/minecraft/util/random/SimpleWeightedRandomList;": "single",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandomValue"
      }
    },
    "net/minecraft/util/random/Weight": {
      "fields": {
        "a": "CODEC",
        "b": "ONE",
        "c": "LOGGER",
        "d": "value"
      },
      "methods": {
        "a(I)Lnet/minecraft/util/random/Weight;": "of",
        "a()I": "asInt",
        "b(I)V": "validateWeight"
      }
    },
    "net/minecraft/util/random/WeightedEntry": {
      "methods": {
        "a()Lnet/minecraft/util/random/Weight;": "getWeight",
        "a(Ljava/lang/Object;I)Lnet/minecraft/util/random/WeightedEntry$Wrapper;": "wrap"
      }
    },
    "net/minecraft/util/random/WeightedRandom2": {
      "methods": {
        "a(Ljava/util/List;)I": "getTotalWeight",
        "a(Lnet/minecraft/util/RandomSource;Ljava/util/List;I)Ljava/util/Optional;": "getRandomItem",
        "a(Ljava/util/List;I)Ljava/util/Optional;": "getWeightedItem",
        "a(Lnet/minecraft/util/RandomSource;Ljava/util/List;)Ljava/util/Optional;": "getRandomItem"
      }
    },
    "net/minecraft/util/random/WeightedRandomList": {
      "fields": {
        "a": "totalWeight",
        "b": "items"
      },
      "methods": {
        "c()Lnet/minecraft/util/random/WeightedRandomList;": "create",
        "a([Lnet/minecraft/util/random/WeightedEntry;)Lnet/minecraft/util/random/WeightedRandomList;": "create",
        "a(Ljava/util/List;)Lnet/minecraft/util/random/WeightedRandomList;": "create",
        "d()Z": "isEmpty",
        "b(Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandom",
        "e()Ljava/util/List;": "unwrap",
        "c(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/util/thread/IAsyncTaskHandler": {
      "fields": {
        "b": "name",
        "c": "LOGGER",
        "d": "pendingRunnables",
        "e": "blockingCount"
      },
      "methods": {
        "f(Ljava/lang/Runnable;)Ljava/lang/Runnable;": "wrapRunnable",
        "e(Ljava/lang/Runnable;)Z": "shouldRun",
        "bl()Z": "isSameThread",
        "au()Ljava/lang/Thread;": "getRunningThread",
        "at()Z": "scheduleExecutables",
        "bm()I": "getPendingTasksCount",
        "bn()Ljava/lang/String;": "name",
        "a(Ljava/util/function/Supplier;)Ljava/util/concurrent/CompletableFuture;": "submit",
        "a(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;": "submitAsync",
        "g(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;": "submit",
        "h(Ljava/lang/Runnable;)V": "executeBlocking",
        "i(Ljava/lang/Runnable;)V": "tell",
        "c(Ljava/lang/Runnable;)V": "executeIfPossible",
        "bo()V": "dropAllTasks",
        "bp()V": "runAllTasks",
        "x()Z": "pollTask",
        "c(Ljava/util/function/BooleanSupplier;)V": "managedBlock",
        "bq()V": "waitForTasks",
        "d(Ljava/lang/Runnable;)V": "doRunTask",
        "bk()Ljava/util/List;": "profiledMetrics",
        "a(Ljava/lang/Object;)V": "tell",
        "b(Ljava/lang/Runnable;)Ljava/lang/Void;": "lambda$submitAsync$0"
      }
    },
    "net/minecraft/util/thread/Mailbox": {
      "methods": {
        "bn()Ljava/lang/String;": "name",
        "a(Ljava/lang/Object;)V": "tell",
        "b(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;": "ask",
        "c(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;": "askEither",
        "a(Ljava/lang/String;Ljava/util/function/Consumer;)Lnet/minecraft/util/thread/ProcessorHandle;": "of",
        "a(Ljava/util/concurrent/CompletableFuture;Lcom/mojang/datafixers/util/Either;)V": "lambda$askEither$0"
      }
    },
    "net/minecraft/util/thread/ThreadedMailbox": {
      "fields": {
        "a": "LOGGER",
        "b": "CLOSED_BIT",
        "c": "SCHEDULED_BIT",
        "d": "status",
        "e": "queue",
        "f": "dispatcher",
        "g": "name"
      },
      "methods": {
        "a(Ljava/util/concurrent/Executor;Ljava/lang/String;)Lnet/minecraft/util/thread/ProcessorMailbox;": "create",
        "d()Z": "setAsScheduled",
        "e()V": "setAsIdle",
        "f()Z": "canBeScheduled",
        "g()Z": "shouldProcess",
        "h()Z": "pollTask",
        "a()V": "runAll",
        "a(Ljava/lang/Object;)V": "tell",
        "i()V": "registerForExecution",
        "a(Lit/unimi/dsi/fastutil/ints/Int2BooleanFunction;)I": "pollUntil",
        "b()I": "size",
        "c()Z": "hasWork",
        "bn()Ljava/lang/String;": "name",
        "bk()Ljava/util/List;": "profiledMetrics",
        "a(I)Z": "lambda$runAll$1",
        "b(I)Z": "lambda$run$0"
      }
    },
    "net/minecraft/util/thread/IAsyncTaskHandlerReentrant": {
      "fields": {
        "b": "reentrantCount"
      },
      "methods": {
        "at()Z": "scheduleExecutables",
        "br()Z": "runningTask",
        "d(Ljava/lang/Runnable;)V": "doRunTask"
      }
    },
    "net/minecraft/util/thread/PairedQueue": {
      "methods": {
        "a()Ljava/lang/Object;": "pop",
        "a(Ljava/lang/Object;)Z": "push",
        "b()Z": "isEmpty",
        "c()I": "size"
      }
    },
    "net/minecraft/util/valueproviders/BiasedToBottomInt": {
      "fields": {
        "a": "CODEC",
        "b": "minInclusive",
        "f": "maxInclusive"
      },
      "methods": {
        "a(II)Lnet/minecraft/util/valueproviders/BiasedToBottomInt;": "of",
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/BiasedToBottomInt;)Lcom/mojang/serialization/DataResult;": "lambda$static$4",
        "b(Lnet/minecraft/util/valueproviders/BiasedToBottomInt;)Ljava/lang/String;": "lambda$static$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "c(Lnet/minecraft/util/valueproviders/BiasedToBottomInt;)Ljava/lang/Integer;": "lambda$static$1",
        "d(Lnet/minecraft/util/valueproviders/BiasedToBottomInt;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/ClampedInt": {
      "fields": {
        "a": "CODEC",
        "b": "source",
        "f": "minInclusive",
        "g": "maxInclusive"
      },
      "methods": {
        "a(Lnet/minecraft/util/valueproviders/IntProvider;II)Lnet/minecraft/util/valueproviders/ClampedInt;": "of",
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/ClampedInt;)Lcom/mojang/serialization/DataResult;": "lambda$static$5",
        "b(Lnet/minecraft/util/valueproviders/ClampedInt;)Ljava/lang/String;": "lambda$static$4",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "c(Lnet/minecraft/util/valueproviders/ClampedInt;)Ljava/lang/Integer;": "lambda$static$2",
        "d(Lnet/minecraft/util/valueproviders/ClampedInt;)Ljava/lang/Integer;": "lambda$static$1",
        "e(Lnet/minecraft/util/valueproviders/ClampedInt;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/ClampedNormalFloat": {
      "fields": {
        "a": "CODEC",
        "b": "mean",
        "d": "deviation",
        "e": "min",
        "f": "max"
      },
      "methods": {
        "a(FFFF)Lnet/minecraft/util/valueproviders/ClampedNormalFloat;": "of",
        "a(Lnet/minecraft/util/RandomSource;)F": "sample",
        "a(Lnet/minecraft/util/RandomSource;FFFF)F": "sample",
        "a()F": "getMinValue",
        "b()F": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/FloatProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/ClampedNormalFloat;)Lcom/mojang/serialization/DataResult;": "lambda$static$6",
        "b(Lnet/minecraft/util/valueproviders/ClampedNormalFloat;)Ljava/lang/String;": "lambda$static$5",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "c(Lnet/minecraft/util/valueproviders/ClampedNormalFloat;)Ljava/lang/Float;": "lambda$static$3",
        "d(Lnet/minecraft/util/valueproviders/ClampedNormalFloat;)Ljava/lang/Float;": "lambda$static$2",
        "e(Lnet/minecraft/util/valueproviders/ClampedNormalFloat;)Ljava/lang/Float;": "lambda$static$1",
        "f(Lnet/minecraft/util/valueproviders/ClampedNormalFloat;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/ClampedNormalInt": {
      "fields": {
        "a": "CODEC",
        "b": "mean",
        "f": "deviation",
        "g": "min_inclusive",
        "h": "max_inclusive"
      },
      "methods": {
        "a(FFII)Lnet/minecraft/util/valueproviders/ClampedNormalInt;": "of",
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a(Lnet/minecraft/util/RandomSource;FFFF)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/ClampedNormalInt;)Lcom/mojang/serialization/DataResult;": "lambda$static$6",
        "b(Lnet/minecraft/util/valueproviders/ClampedNormalInt;)Ljava/lang/String;": "lambda$static$5",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "c(Lnet/minecraft/util/valueproviders/ClampedNormalInt;)Ljava/lang/Integer;": "lambda$static$3",
        "d(Lnet/minecraft/util/valueproviders/ClampedNormalInt;)Ljava/lang/Integer;": "lambda$static$2",
        "e(Lnet/minecraft/util/valueproviders/ClampedNormalInt;)Ljava/lang/Float;": "lambda$static$1",
        "f(Lnet/minecraft/util/valueproviders/ClampedNormalInt;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/ConstantFloat": {
      "fields": {
        "a": "ZERO",
        "b": "CODEC",
        "d": "value"
      },
      "methods": {
        "a(F)Lnet/minecraft/util/valueproviders/ConstantFloat;": "of",
        "d()F": "getValue",
        "a(Lnet/minecraft/util/RandomSource;)F": "sample",
        "a()F": "getMinValue",
        "b()F": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/FloatProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/ConstantFloat;)Lcom/mojang/datafixers/util/Either;": "lambda$static$4",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/util/valueproviders/ConstantFloat;": "lambda$static$3",
        "b(Lnet/minecraft/util/valueproviders/ConstantFloat;)Lnet/minecraft/util/valueproviders/ConstantFloat;": "lambda$static$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "c(Lnet/minecraft/util/valueproviders/ConstantFloat;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/ConstantInt": {
      "fields": {
        "a": "ZERO",
        "b": "CODEC",
        "f": "value"
      },
      "methods": {
        "a(I)Lnet/minecraft/util/valueproviders/ConstantInt;": "of",
        "d()I": "getValue",
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/ConstantInt;)Lcom/mojang/datafixers/util/Either;": "lambda$static$4",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/util/valueproviders/ConstantInt;": "lambda$static$3",
        "b(Lnet/minecraft/util/valueproviders/ConstantInt;)Lnet/minecraft/util/valueproviders/ConstantInt;": "lambda$static$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "c(Lnet/minecraft/util/valueproviders/ConstantInt;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/FloatProvider": {
      "fields": {
        "a": "CONSTANT_OR_DISPATCH_CODEC",
        "c": "CODEC"
      },
      "methods": {
        "a(FF)Lcom/mojang/serialization/Codec;": "codec",
        "a()F": "getMinValue",
        "b()F": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/FloatProviderType;": "getType",
        "a(FFLnet/minecraft/util/valueproviders/FloatProvider;)Lcom/mojang/serialization/DataResult;": "lambda$codec$5",
        "a(FLnet/minecraft/util/valueproviders/FloatProvider;)Ljava/lang/String;": "lambda$codec$4",
        "b(FLnet/minecraft/util/valueproviders/FloatProvider;)Ljava/lang/String;": "lambda$codec$3",
        "a(Lnet/minecraft/util/valueproviders/FloatProvider;)Lcom/mojang/datafixers/util/Either;": "lambda$static$2",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$1",
        "b(Lnet/minecraft/util/valueproviders/FloatProvider;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/FloatProviderType": {
      "fields": {
        "a": "CONSTANT",
        "b": "UNIFORM",
        "c": "CLAMPED_NORMAL",
        "d": "TRAPEZOID"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/util/valueproviders/FloatProviderType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/util/valueproviders/IntProvider": {
      "fields": {
        "a": "CONSTANT_OR_DISPATCH_CODEC",
        "c": "CODEC",
        "d": "NON_NEGATIVE_CODEC",
        "e": "POSITIVE_CODEC"
      },
      "methods": {
        "b(II)Lcom/mojang/serialization/Codec;": "codec",
        "a(IILcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(IILnet/minecraft/util/valueproviders/IntProvider;)Lcom/mojang/serialization/DataResult;": "lambda$codec$5",
        "a(ILnet/minecraft/util/valueproviders/IntProvider;)Ljava/lang/String;": "lambda$codec$4",
        "b(ILnet/minecraft/util/valueproviders/IntProvider;)Ljava/lang/String;": "lambda$codec$3",
        "a(Lnet/minecraft/util/valueproviders/IntProvider;)Lcom/mojang/datafixers/util/Either;": "lambda$static$2",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "b(Lnet/minecraft/util/valueproviders/IntProvider;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/IntProviderType": {
      "fields": {
        "a": "CONSTANT",
        "b": "UNIFORM",
        "c": "BIASED_TO_BOTTOM",
        "d": "CLAMPED",
        "e": "WEIGHTED_LIST",
        "f": "CLAMPED_NORMAL"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/util/valueproviders/IntProviderType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/util/valueproviders/SampledFloat": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)F": "sample"
      }
    },
    "net/minecraft/util/valueproviders/TrapezoidFloat": {
      "fields": {
        "a": "CODEC",
        "b": "min",
        "d": "max",
        "e": "plateau"
      },
      "methods": {
        "a(FFF)Lnet/minecraft/util/valueproviders/TrapezoidFloat;": "of",
        "a(Lnet/minecraft/util/RandomSource;)F": "sample",
        "a()F": "getMinValue",
        "b()F": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/FloatProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/TrapezoidFloat;)Lcom/mojang/serialization/DataResult;": "lambda$static$6",
        "b(Lnet/minecraft/util/valueproviders/TrapezoidFloat;)Ljava/lang/String;": "lambda$static$5",
        "c(Lnet/minecraft/util/valueproviders/TrapezoidFloat;)Ljava/lang/String;": "lambda$static$4",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "d(Lnet/minecraft/util/valueproviders/TrapezoidFloat;)Ljava/lang/Float;": "lambda$static$2",
        "e(Lnet/minecraft/util/valueproviders/TrapezoidFloat;)Ljava/lang/Float;": "lambda$static$1",
        "f(Lnet/minecraft/util/valueproviders/TrapezoidFloat;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/UniformFloat": {
      "fields": {
        "a": "CODEC",
        "b": "minInclusive",
        "d": "maxExclusive"
      },
      "methods": {
        "b(FF)Lnet/minecraft/util/valueproviders/UniformFloat;": "of",
        "a(Lnet/minecraft/util/RandomSource;)F": "sample",
        "a()F": "getMinValue",
        "b()F": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/FloatProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/UniformFloat;)Lcom/mojang/serialization/DataResult;": "lambda$static$4",
        "b(Lnet/minecraft/util/valueproviders/UniformFloat;)Ljava/lang/String;": "lambda$static$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "c(Lnet/minecraft/util/valueproviders/UniformFloat;)Ljava/lang/Float;": "lambda$static$1",
        "d(Lnet/minecraft/util/valueproviders/UniformFloat;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/UniformInt": {
      "fields": {
        "a": "CODEC",
        "b": "minInclusive",
        "f": "maxInclusive"
      },
      "methods": {
        "a(II)Lnet/minecraft/util/valueproviders/UniformInt;": "of",
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(Lnet/minecraft/util/valueproviders/UniformInt;)Lcom/mojang/serialization/DataResult;": "lambda$static$4",
        "b(Lnet/minecraft/util/valueproviders/UniformInt;)Ljava/lang/String;": "lambda$static$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "c(Lnet/minecraft/util/valueproviders/UniformInt;)Ljava/lang/Integer;": "lambda$static$1",
        "d(Lnet/minecraft/util/valueproviders/UniformInt;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/util/valueproviders/WeightedListInt": {
      "fields": {
        "a": "CODEC",
        "b": "distribution",
        "f": "minValue",
        "g": "maxValue"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)I": "sample",
        "a()I": "getMinValue",
        "b()I": "getMaxValue",
        "c()Lnet/minecraft/util/valueproviders/IntProviderType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/util/valueproviders/WeightedListInt;)Lnet/minecraft/util/random/SimpleWeightedRandomList;": "lambda$static$0"
      }
    },
    "net/minecraft/util/worldupdate/WorldUpgrader": {
      "fields": {
        "a": "LOGGER",
        "b": "THREAD_FACTORY",
        "d": "levels",
        "e": "eraseCache",
        "f": "levelStorage",
        "g": "thread",
        "h": "dataFixer",
        "i": "running",
        "j": "finished",
        "k": "progress",
        "l": "totalChunks",
        "m": "converted",
        "n": "skipped",
        "o": "progressMap",
        "p": "status",
        "q": "REGEX",
        "r": "overworldDataStorage"
      },
      "methods": {
        "a()V": "cancel",
        "i()V": "work",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/util/List;": "getAllChunkPos",
        "b()Z": "isFinished",
        "c()Ljava/util/Set;": "levels",
        "a(Lnet/minecraft/resources/ResourceKey;)F": "dimensionProgress",
        "d()F": "getProgress",
        "e()I": "getTotalChunks",
        "f()I": "getConverted",
        "g()I": "getSkipped",
        "h()Lnet/minecraft/network/chat/Component;": "getStatus"
      }
    },
    "net/minecraft/world/BossBattle": {
      "fields": {
        "h": "id",
        "a": "name",
        "b": "progress",
        "c": "color",
        "d": "overlay",
        "e": "darkenScreen",
        "f": "playBossMusic",
        "g": "createWorldFog"
      },
      "methods": {
        "i()Ljava/util/UUID;": "getId",
        "j()Lnet/minecraft/network/chat/Component;": "getName",
        "a(Lnet/minecraft/network/chat/Component;)V": "setName",
        "k()F": "getProgress",
        "a(F)V": "setProgress",
        "l()Lnet/minecraft/world/BossEvent$BossBarColor;": "getColor",
        "a(Lnet/minecraft/world/BossEvent$BossBarColor;)V": "setColor",
        "m()Lnet/minecraft/world/BossEvent$BossBarOverlay;": "getOverlay",
        "a(Lnet/minecraft/world/BossEvent$BossBarOverlay;)V": "setOverlay",
        "n()Z": "shouldDarkenScreen",
        "a(Z)Lnet/minecraft/world/BossEvent;": "setDarkenScreen",
        "o()Z": "shouldPlayBossMusic",
        "b(Z)Lnet/minecraft/world/BossEvent;": "setPlayBossMusic",
        "c(Z)Lnet/minecraft/world/BossEvent;": "setCreateWorldFog",
        "p()Z": "shouldCreateWorldFog"
      }
    },
    "net/minecraft/world/BossBattle$BarColor": {
      "fields": {
        "a": "PINK",
        "b": "BLUE",
        "c": "RED",
        "d": "GREEN",
        "e": "YELLOW",
        "f": "PURPLE",
        "g": "WHITE",
        "h": "name",
        "i": "formatting",
        "j": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/ChatFormatting;": "getFormatting",
        "b()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Lnet/minecraft/world/BossEvent$BossBarColor;": "byName",
        "c()[Lnet/minecraft/world/BossEvent$BossBarColor;": "$values"
      }
    },
    "net/minecraft/world/BossBattle$BarStyle": {
      "fields": {
        "a": "PROGRESS",
        "b": "NOTCHED_6",
        "c": "NOTCHED_10",
        "d": "NOTCHED_12",
        "e": "NOTCHED_20",
        "f": "name",
        "g": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Lnet/minecraft/world/BossEvent$BossBarOverlay;": "byName",
        "b()[Lnet/minecraft/world/BossEvent$BossBarOverlay;": "$values"
      }
    },
    "net/minecraft/world/Clearable": {
      "methods": {
        "a()V": "clearContent",
        "a_(Ljava/lang/Object;)V": "tryClear"
      }
    },
    "net/minecraft/world/InventoryLargeChest": {
      "fields": {
        "c": "container1",
        "d": "container2"
      },
      "methods": {
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(Lnet/minecraft/world/Container;)Z": "contains",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "ac_()I": "getMaxStackSize",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "d_(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "b(ILnet/minecraft/world/item/ItemStack;)Z": "canPlaceItem",
        "a()V": "clearContent"
      }
    },
    "net/minecraft/world/IInventory": {
      "fields": {
        "m_": "LARGE_MAX_STACK_SIZE",
        "n_": "DEFAULT_DISTANCE_LIMIT"
      },
      "methods": {
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "ac_()I": "getMaxStackSize",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "d_(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "b(ILnet/minecraft/world/item/ItemStack;)Z": "canPlaceItem",
        "a(Lnet/minecraft/world/Container;ILnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "a_(Lnet/minecraft/world/item/Item;)I": "countItem",
        "a(Ljava/util/Set;)Z": "hasAnyOf",
        "a_(Ljava/util/function/Predicate;)Z": "hasAnyMatching",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/entity/player/Player;)Z": "stillValidBlockEntity",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/entity/player/Player;I)Z": "stillValidBlockEntity"
      }
    },
    "net/minecraft/world/ContainerUtil": {
      "methods": {
        "a(Ljava/util/List;II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "a(Ljava/util/List;I)Lnet/minecraft/world/item/ItemStack;": "takeItem",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/core/NonNullList;)Lnet/minecraft/nbt/CompoundTag;": "saveAllItems",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/core/NonNullList;Z)Lnet/minecraft/nbt/CompoundTag;": "saveAllItems",
        "b(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/core/NonNullList;)V": "loadAllItems",
        "a(Lnet/minecraft/world/Container;Ljava/util/function/Predicate;IZ)I": "clearOrCountMatchingItems",
        "a(Lnet/minecraft/world/item/ItemStack;Ljava/util/function/Predicate;IZ)I": "clearOrCountMatchingItems"
      }
    },
    "net/minecraft/world/IInventoryListener": {
      "methods": {
        "a(Lnet/minecraft/world/Container;)V": "containerChanged"
      }
    },
    "net/minecraft/world/InventoryUtils": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/Container;)V": "dropContents",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/Container;)V": "dropContents",
        "a(Lnet/minecraft/world/level/Level;DDDLnet/minecraft/world/Container;)V": "dropContents",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/NonNullList;)V": "dropContents",
        "a(Lnet/minecraft/world/level/Level;DDDLnet/minecraft/world/item/ItemStack;)V": "dropItemStack",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)V": "lambda$dropContents$0"
      }
    },
    "net/minecraft/world/EnumDifficulty": {
      "fields": {
        "a": "PEACEFUL",
        "b": "EASY",
        "c": "NORMAL",
        "d": "HARD",
        "e": "CODEC",
        "f": "BY_ID",
        "g": "id",
        "h": "key",
        "i": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "b()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "d()Lnet/minecraft/network/chat/Component;": "getInfo",
        "a(I)Lnet/minecraft/world/Difficulty;": "byId",
        "a(Ljava/lang/String;)Lnet/minecraft/world/Difficulty;": "byName",
        "e()Ljava/lang/String;": "getKey",
        "c()Ljava/lang/String;": "getSerializedName",
        "f()[Lnet/minecraft/world/Difficulty;": "$values"
      }
    },
    "net/minecraft/world/DifficultyDamageScaler": {
      "fields": {
        "a": "DIFFICULTY_TIME_GLOBAL_OFFSET",
        "b": "MAX_DIFFICULTY_TIME_GLOBAL",
        "c": "MAX_DIFFICULTY_TIME_LOCAL",
        "d": "base",
        "e": "effectiveDifficulty"
      },
      "methods": {
        "a()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "b()F": "getEffectiveDifficulty",
        "c()Z": "isHard",
        "a(F)Z": "isHarderThan",
        "d()F": "getSpecialMultiplier",
        "a(Lnet/minecraft/world/Difficulty;JJF)F": "calculateDifficulty"
      }
    },
    "net/minecraft/world/EnumHand": {
      "fields": {
        "a": "MAIN_HAND",
        "b": "OFF_HAND",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/InteractionHand;": "$values"
      }
    },
    "net/minecraft/world/EnumInteractionResult": {
      "fields": {
        "a": "SUCCESS",
        "b": "CONSUME",
        "c": "CONSUME_PARTIAL",
        "d": "PASS",
        "e": "FAIL",
        "f": "$VALUES"
      },
      "methods": {
        "a()Z": "consumesAction",
        "b()Z": "shouldSwing",
        "c()Z": "shouldAwardStats",
        "a(Z)Lnet/minecraft/world/InteractionResult;": "sidedSuccess",
        "d()[Lnet/minecraft/world/InteractionResult;": "$values"
      }
    },
    "net/minecraft/world/InteractionResultWrapper": {
      "fields": {
        "a": "result",
        "b": "object"
      },
      "methods": {
        "a()Lnet/minecraft/world/InteractionResult;": "getResult",
        "b()Ljava/lang/Object;": "getObject",
        "a(Ljava/lang/Object;)Lnet/minecraft/world/InteractionResultHolder;": "success",
        "b(Ljava/lang/Object;)Lnet/minecraft/world/InteractionResultHolder;": "consume",
        "c(Ljava/lang/Object;)Lnet/minecraft/world/InteractionResultHolder;": "pass",
        "d(Ljava/lang/Object;)Lnet/minecraft/world/InteractionResultHolder;": "fail",
        "a(Ljava/lang/Object;Z)Lnet/minecraft/world/InteractionResultHolder;": "sidedSuccess"
      }
    },
    "net/minecraft/world/ChestLock": {
      "fields": {
        "a": "NO_LOCK",
        "b": "TAG_LOCK",
        "c": "key"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "unlocksWith",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "addToTag",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/LockCode;": "fromTag"
      }
    },
    "net/minecraft/world/ITileInventory": {
      "methods": {
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName"
      }
    },
    "net/minecraft/world/INamableTileEntity": {
      "methods": {
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "aa()Z": "hasCustomName",
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "ab()Lnet/minecraft/network/chat/Component;": "getCustomName"
      }
    },
    "net/minecraft/world/RandomSequence": {
      "fields": {
        "a": "CODEC",
        "b": "source"
      },
      "methods": {
        "a(JLnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/XoroshiroRandomSource;": "createSequence",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/RandomSupport$Seed128bit;": "seedForKey",
        "a()Lnet/minecraft/util/RandomSource;": "random",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/RandomSequence;)Lnet/minecraft/world/level/levelgen/XoroshiroRandomSource;": "lambda$static$0"
      }
    },
    "net/minecraft/world/RandomSequences": {
      "fields": {
        "a": "LOGGER",
        "b": "seed",
        "c": "sequences"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/util/RandomSource;": "get",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(JLnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/RandomSequences;": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/RandomSequence;)V": "lambda$save$1",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/RandomSequence;": "lambda$get$0"
      }
    },
    "net/minecraft/world/InventorySubcontainer": {
      "fields": {
        "c": "size",
        "d": "items",
        "e": "listeners"
      },
      "methods": {
        "a(Lnet/minecraft/world/ContainerListener;)V": "addListener",
        "b(Lnet/minecraft/world/ContainerListener;)V": "removeListener",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "f()Ljava/util/List;": "removeAllItems",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "a(Lnet/minecraft/world/item/Item;I)Lnet/minecraft/world/item/ItemStack;": "removeItemType",
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "addItem",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "canAddItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a()V": "clearContent",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillStackedContents",
        "c(Lnet/minecraft/world/item/ItemStack;)V": "moveItemToEmptySlots",
        "d(Lnet/minecraft/world/item/ItemStack;)V": "moveItemToOccupiedSlotsWithSameType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "moveItemsBetweenStacks",
        "a(Lnet/minecraft/nbt/ListTag;)V": "fromTag",
        "g()Lnet/minecraft/nbt/ListTag;": "createTag"
      }
    },
    "net/minecraft/world/TileInventory": {
      "fields": {
        "a": "title",
        "b": "menuConstructor"
      },
      "methods": {
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName"
      }
    },
    "net/minecraft/world/IWorldInventory": {
      "methods": {
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace"
      }
    },
    "net/minecraft/world/IInventoryHolder": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/WorldlyContainer;": "getContainer"
      }
    },
    "net/minecraft/world/damagesource/CombatEntry": {
      "fields": {
        "a": "source",
        "b": "damage",
        "c": "fallLocation",
        "d": "fallDistance"
      },
      "methods": {
        "a()Lnet/minecraft/world/damagesource/DamageSource;": "source",
        "b()F": "damage",
        "c()Lnet/minecraft/world/damagesource/FallLocation;": "fallLocation",
        "d()F": "fallDistance"
      }
    },
    "net/minecraft/world/damagesource/CombatMath": {
      "fields": {
        "a": "MAX_ARMOR",
        "b": "ARMOR_PROTECTION_DIVIDER",
        "c": "BASE_ARMOR_TOUGHNESS",
        "d": "MIN_ARMOR_RATIO",
        "e": "NUM_ARMOR_ITEMS"
      },
      "methods": {
        "a(FFF)F": "getDamageAfterAbsorb",
        "a(FF)F": "getDamageAfterMagicAbsorb"
      }
    },
    "net/minecraft/world/damagesource/CombatTracker": {
      "fields": {
        "a": "RESET_DAMAGE_STATUS_TIME",
        "b": "RESET_COMBAT_STATUS_TIME",
        "c": "INTENTIONAL_GAME_DESIGN_STYLE",
        "d": "entries",
        "e": "mob",
        "f": "lastDamageTime",
        "g": "combatStartTime",
        "h": "combatEndTime",
        "i": "inCombat",
        "j": "takingDamage"
      },
      "methods": {
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)V": "recordDamage",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)Z": "shouldEnterCombat",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/network/chat/Component;Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/network/chat/Component;": "getMessageForAssistedFall",
        "a(Lnet/minecraft/world/damagesource/CombatEntry;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "getFallMessage",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a()Lnet/minecraft/network/chat/Component;": "getDeathMessage",
        "d()Lnet/minecraft/world/damagesource/CombatEntry;": "getMostSignificantFall",
        "b()I": "getCombatDuration",
        "c()V": "recheckStatus"
      }
    },
    "net/minecraft/world/damagesource/DamageEffects": {
      "fields": {
        "a": "HURT",
        "b": "THORNS",
        "c": "DROWNING",
        "d": "BURNING",
        "e": "POKING",
        "f": "FREEZING",
        "g": "CODEC",
        "h": "id",
        "i": "sound",
        "j": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Lnet/minecraft/sounds/SoundEvent;": "sound",
        "b()[Lnet/minecraft/world/damagesource/DamageEffects;": "$values"
      }
    },
    "net/minecraft/world/damagesource/DamageScaling": {
      "fields": {
        "a": "NEVER",
        "b": "WHEN_CAUSED_BY_LIVING_NON_PLAYER",
        "c": "ALWAYS",
        "d": "CODEC",
        "e": "id",
        "f": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/damagesource/DamageScaling;": "$values"
      }
    },
    "net/minecraft/world/damagesource/DamageSource": {
      "fields": {
        "a": "type",
        "b": "causingEntity",
        "c": "directEntity",
        "d": "damageSourcePosition"
      },
      "methods": {
        "a()F": "getFoodExhaustion",
        "b()Z": "isIndirect",
        "c()Lnet/minecraft/world/entity/Entity;": "getDirectEntity",
        "d()Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/network/chat/Component;": "getLocalizedDeathMessage",
        "e()Ljava/lang/String;": "getMsgId",
        "f()Z": "scalesWithDifficulty",
        "g()Z": "isCreativePlayer",
        "h()Lnet/minecraft/world/phys/Vec3;": "getSourcePosition",
        "i()Lnet/minecraft/world/phys/Vec3;": "sourcePositionRaw",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "a(Lnet/minecraft/resources/ResourceKey;)Z": "is",
        "j()Lnet/minecraft/world/damagesource/DamageType;": "type",
        "k()Lnet/minecraft/core/Holder;": "typeHolder"
      }
    },
    "net/minecraft/world/damagesource/DamageSources": {
      "fields": {
        "b": "inFire",
        "c": "lightningBolt",
        "d": "onFire",
        "e": "lava",
        "f": "hotFloor",
        "g": "inWall",
        "h": "cramming",
        "i": "drown",
        "j": "starve",
        "k": "cactus",
        "l": "fall",
        "m": "flyIntoWall",
        "n": "fellOutOfWorld",
        "o": "generic",
        "p": "magic",
        "q": "wither",
        "r": "dragonBreath",
        "s": "dryOut",
        "t": "sweetBerryBush",
        "u": "freeze",
        "v": "stalagmite",
        "w": "outsideBorder",
        "x": "genericKill"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/damagesource/DamageSource;": "source",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "source",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "source",
        "a()Lnet/minecraft/world/damagesource/DamageSource;": "inFire",
        "b()Lnet/minecraft/world/damagesource/DamageSource;": "lightningBolt",
        "c()Lnet/minecraft/world/damagesource/DamageSource;": "onFire",
        "d()Lnet/minecraft/world/damagesource/DamageSource;": "lava",
        "e()Lnet/minecraft/world/damagesource/DamageSource;": "hotFloor",
        "f()Lnet/minecraft/world/damagesource/DamageSource;": "inWall",
        "g()Lnet/minecraft/world/damagesource/DamageSource;": "cramming",
        "h()Lnet/minecraft/world/damagesource/DamageSource;": "drown",
        "i()Lnet/minecraft/world/damagesource/DamageSource;": "starve",
        "j()Lnet/minecraft/world/damagesource/DamageSource;": "cactus",
        "k()Lnet/minecraft/world/damagesource/DamageSource;": "fall",
        "l()Lnet/minecraft/world/damagesource/DamageSource;": "flyIntoWall",
        "m()Lnet/minecraft/world/damagesource/DamageSource;": "fellOutOfWorld",
        "n()Lnet/minecraft/world/damagesource/DamageSource;": "generic",
        "o()Lnet/minecraft/world/damagesource/DamageSource;": "magic",
        "p()Lnet/minecraft/world/damagesource/DamageSource;": "wither",
        "q()Lnet/minecraft/world/damagesource/DamageSource;": "dragonBreath",
        "r()Lnet/minecraft/world/damagesource/DamageSource;": "dryOut",
        "s()Lnet/minecraft/world/damagesource/DamageSource;": "sweetBerryBush",
        "t()Lnet/minecraft/world/damagesource/DamageSource;": "freeze",
        "u()Lnet/minecraft/world/damagesource/DamageSource;": "stalagmite",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "fallingBlock",
        "b(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "anvil",
        "c(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "fallingStalactite",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/damagesource/DamageSource;": "sting",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/damagesource/DamageSource;": "mobAttack",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/damagesource/DamageSource;": "noAggroMobAttack",
        "a(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/damagesource/DamageSource;": "playerAttack",
        "a(Lnet/minecraft/world/entity/projectile/AbstractArrow;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "arrow",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "trident",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/damagesource/DamageSource;": "mobProjectile",
        "a(Lnet/minecraft/world/entity/projectile/FireworkRocketEntity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "fireworks",
        "a(Lnet/minecraft/world/entity/projectile/Fireball;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "fireball",
        "a(Lnet/minecraft/world/entity/projectile/WitherSkull;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "witherSkull",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "thrown",
        "c(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "indirectMagic",
        "d(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "thorns",
        "a(Lnet/minecraft/world/level/Explosion;)Lnet/minecraft/world/damagesource/DamageSource;": "explosion",
        "d(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "explosion",
        "e(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "sonicBoom",
        "a(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/damagesource/DamageSource;": "badRespawnPointExplosion",
        "v()Lnet/minecraft/world/damagesource/DamageSource;": "outOfBorder",
        "w()Lnet/minecraft/world/damagesource/DamageSource;": "genericKill"
      }
    },
    "net/minecraft/world/damagesource/DamageType": {
      "fields": {
        "b": "msgId",
        "c": "scaling",
        "d": "exhaustion",
        "e": "effects",
        "f": "deathMessageType",
        "a": "CODEC"
      },
      "methods": {
        "a()Ljava/lang/String;": "msgId",
        "b()Lnet/minecraft/world/damagesource/DamageScaling;": "scaling",
        "c()F": "exhaustion",
        "d()Lnet/minecraft/world/damagesource/DamageEffects;": "effects",
        "e()Lnet/minecraft/world/damagesource/DeathMessageType;": "deathMessageType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/damagesource/DamageTypes": {
      "fields": {
        "a": "IN_FIRE",
        "b": "LIGHTNING_BOLT",
        "c": "ON_FIRE",
        "d": "LAVA",
        "e": "HOT_FLOOR",
        "f": "IN_WALL",
        "g": "CRAMMING",
        "h": "DROWN",
        "i": "STARVE",
        "j": "CACTUS",
        "k": "FALL",
        "l": "FLY_INTO_WALL",
        "m": "FELL_OUT_OF_WORLD",
        "n": "GENERIC",
        "o": "MAGIC",
        "p": "WITHER",
        "q": "DRAGON_BREATH",
        "r": "DRY_OUT",
        "s": "SWEET_BERRY_BUSH",
        "t": "FREEZE",
        "u": "STALAGMITE",
        "v": "FALLING_BLOCK",
        "w": "FALLING_ANVIL",
        "x": "FALLING_STALACTITE",
        "y": "STING",
        "z": "MOB_ATTACK",
        "A": "MOB_ATTACK_NO_AGGRO",
        "B": "PLAYER_ATTACK",
        "C": "ARROW",
        "D": "TRIDENT",
        "E": "MOB_PROJECTILE",
        "F": "FIREWORKS",
        "G": "FIREBALL",
        "H": "UNATTRIBUTED_FIREBALL",
        "I": "WITHER_SKULL",
        "J": "THROWN",
        "K": "INDIRECT_MAGIC",
        "L": "THORNS",
        "M": "EXPLOSION",
        "N": "PLAYER_EXPLOSION",
        "O": "SONIC_BOOM",
        "P": "BAD_RESPAWN_POINT",
        "Q": "OUTSIDE_BORDER",
        "R": "GENERIC_KILL"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap"
      }
    },
    "net/minecraft/world/damagesource/DeathMessageType": {
      "fields": {
        "a": "DEFAULT",
        "b": "FALL_VARIANTS",
        "c": "INTENTIONAL_GAME_DESIGN",
        "d": "CODEC",
        "e": "id",
        "f": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/damagesource/DeathMessageType;": "$values"
      }
    },
    "net/minecraft/world/damagesource/FallLocation": {
      "fields": {
        "i": "id",
        "a": "GENERIC",
        "b": "LADDER",
        "c": "VINES",
        "d": "WEEPING_VINES",
        "e": "TWISTING_VINES",
        "f": "SCAFFOLDING",
        "g": "OTHER_CLIMBABLE",
        "h": "WATER"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/damagesource/FallLocation;": "blockToFallLocation",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/damagesource/FallLocation;": "getCurrentFallLocation",
        "a()Ljava/lang/String;": "languageKey",
        "b()Ljava/lang/String;": "id"
      }
    },
    "net/minecraft/world/effect/MobEffectAbsorption": {
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/attributes/AttributeMap;I)V": "removeAttributeModifiers",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/attributes/AttributeMap;I)V": "addAttributeModifiers"
      }
    },
    "net/minecraft/world/effect/MobEffectAttackDamage": {
      "fields": {
        "a": "multiplier"
      },
      "methods": {
        "a(ILnet/minecraft/world/entity/ai/attributes/AttributeModifier;)D": "getAttributeModifierValue"
      }
    },
    "net/minecraft/world/effect/MobEffectHealthBoost": {
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/attributes/AttributeMap;I)V": "removeAttributeModifiers"
      }
    },
    "net/minecraft/world/effect/InstantMobEffect": {
      "methods": {
        "a()Z": "isInstantenous",
        "a(II)Z": "isDurationEffectTick"
      }
    },
    "net/minecraft/world/effect/MobEffectList": {
      "fields": {
        "a": "attributeModifiers",
        "b": "category",
        "c": "color",
        "d": "descriptionId",
        "e": "factorDataFactory"
      },
      "methods": {
        "b()Ljava/util/Optional;": "createFactorData",
        "a(Lnet/minecraft/world/entity/LivingEntity;I)V": "applyEffectTick",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/LivingEntity;ID)V": "applyInstantenousEffect",
        "a(II)Z": "isDurationEffectTick",
        "a()Z": "isInstantenous",
        "c()Ljava/lang/String;": "getOrCreateDescriptionId",
        "d()Ljava/lang/String;": "getDescriptionId",
        "e()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "f()Lnet/minecraft/world/effect/MobEffectCategory;": "getCategory",
        "g()I": "getColor",
        "h()Ljava/util/Map;": "getAttributeModifiers",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/attributes/AttributeMap;I)V": "removeAttributeModifiers",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/attributes/AttributeMap;I)V": "addAttributeModifiers",
        "a(ILnet/minecraft/world/entity/ai/attributes/AttributeModifier;)D": "getAttributeModifierValue",
        "i()Z": "isBeneficial"
      }
    },
    "net/minecraft/world/effect/MobEffectInfo": {
      "fields": {
        "a": "BENEFICIAL",
        "b": "HARMFUL",
        "c": "NEUTRAL",
        "d": "tooltipFormatting",
        "e": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/ChatFormatting;": "getTooltipFormatting",
        "b()[Lnet/minecraft/world/effect/MobEffectCategory;": "$values"
      }
    },
    "net/minecraft/world/effect/MobEffect": {
      "fields": {
        "b": "LOGGER",
        "a": "INFINITE_DURATION",
        "d": "duration",
        "e": "amplifier",
        "f": "ambient",
        "g": "visible",
        "h": "showIcon",
        "i": "hiddenEffect",
        "j": "factorData"
      },
      "methods": {
        "a()Ljava/util/Optional;": "getFactorData",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;)V": "setDetailsFrom",
        "b(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "update",
        "d(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "isShorterDurationThan",
        "b()Z": "isInfiniteDuration",
        "a(I)Z": "endsWithin",
        "a(Lit/unimi/dsi/fastutil/ints/Int2IntFunction;)I": "mapDuration",
        "d()I": "getDuration",
        "e()I": "getAmplifier",
        "f()Z": "isAmbient",
        "g()Z": "isVisible",
        "h()Z": "showIcon",
        "a(Lnet/minecraft/world/entity/LivingEntity;Ljava/lang/Runnable;)Z": "tick",
        "j()Z": "hasRemainingDuration",
        "k()I": "tickDownDuration",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "applyEffect",
        "i()Ljava/lang/String;": "getDescriptionId",
        "l()Ljava/lang/String;": "describeDuration",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "writeDetailsTo",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/effect/MobEffectInstance;": "load",
        "c(Lnet/minecraft/world/effect/MobEffectInstance;)I": "compareTo",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/effect/MobEffectInstance$FactorData;)V": "lambda$writeDetailsTo$3",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$writeDetailsTo$2",
        "b(I)I": "lambda$tickDownDuration$1",
        "a(Lnet/minecraft/world/effect/MobEffectInstance$FactorData;)V": "lambda$tick$0"
      }
    },
    "net/minecraft/world/effect/MobEffectUtil": {
      "methods": {
        "a(Lnet/minecraft/world/effect/MobEffectInstance;F)Lnet/minecraft/network/chat/Component;": "formatDuration",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasDigSpeed",
        "b(Lnet/minecraft/world/entity/LivingEntity;)I": "getDigSpeedAmplification",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasWaterBreathing",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;DLnet/minecraft/world/effect/MobEffectInstance;I)Ljava/util/List;": "addEffectToPlayersAround",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$addEffectToPlayersAround$1"
      }
    },
    "net/minecraft/world/effect/MobEffects": {
      "fields": {
        "H": "DARKNESS_EFFECT_FACTOR_PADDING_DURATION_TICKS"
      }
    },
    "net/minecraft/world/entity/EntityAgeable": {
      "fields": {
        "bT": "DATA_BABY_ID",
        "b": "BABY_START_AGE",
        "bU": "FORCED_AGE_PARTICLE_TICKS",
        "c": "age",
        "d": "forcedAge",
        "e": "forcedAgeTimer"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "a_()V": "defineSynchedData",
        "P_()Z": "canBreed",
        "h()I": "getAge",
        "a(IZ)V": "ageUp",
        "b_(I)V": "ageUp",
        "c_(I)V": "setAge",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "b_()V": "aiStep",
        "m()V": "ageBoundaryReached",
        "h_()Z": "isBaby",
        "a(Z)V": "setBaby",
        "d_(I)I": "getSpeedUpSecondsWhenFeeding"
      }
    },
    "net/minecraft/world/entity/AnimationState": {
      "fields": {
        "a": "STOPPED",
        "b": "lastTime",
        "c": "accumulatedTime"
      },
      "methods": {
        "a(I)V": "start",
        "b(I)V": "startIfStopped",
        "a(ZI)V": "animateWhen",
        "a()V": "stop",
        "a(Ljava/util/function/Consumer;)V": "ifStarted",
        "a(FF)V": "updateTime",
        "b()J": "getAccumulatedTime",
        "c()Z": "isStarted"
      }
    },
    "net/minecraft/world/entity/EntityAreaEffectCloud": {
      "fields": {
        "d": "LOGGER",
        "e": "TIME_BETWEEN_APPLICATIONS",
        "f": "DATA_RADIUS",
        "g": "DATA_COLOR",
        "h": "DATA_WAITING",
        "i": "DATA_PARTICLE",
        "j": "MAX_RADIUS",
        "k": "MINIMAL_RADIUS",
        "l": "DEFAULT_RADIUS",
        "b": "DEFAULT_WIDTH",
        "c": "HEIGHT",
        "m": "potion",
        "n": "effects",
        "o": "victims",
        "p": "duration",
        "q": "waitTime",
        "r": "reapplicationDelay",
        "s": "fixedColor",
        "t": "durationOnUse",
        "u": "radiusOnUse",
        "aD": "radiusPerTick",
        "aE": "owner",
        "aF": "ownerUUID"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(F)V": "setRadius",
        "d_()V": "refreshDimensions",
        "h()F": "getRadius",
        "a(Lnet/minecraft/world/item/alchemy/Potion;)V": "setPotion",
        "w()V": "updateColor",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;)V": "addEffect",
        "i()I": "getColor",
        "a(I)V": "setFixedColor",
        "j()Lnet/minecraft/core/particles/ParticleOptions;": "getParticle",
        "a(Lnet/minecraft/core/particles/ParticleOptions;)V": "setParticle",
        "a(Z)V": "setWaiting",
        "k()Z": "isWaiting",
        "m()I": "getDuration",
        "b(I)V": "setDuration",
        "l()V": "tick",
        "o()F": "getRadiusOnUse",
        "b(F)V": "setRadiusOnUse",
        "p()F": "getRadiusPerTick",
        "c(F)V": "setRadiusPerTick",
        "q()I": "getDurationOnUse",
        "c(I)V": "setDurationOnUse",
        "r()I": "getWaitTime",
        "d(I)V": "setWaitTime",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setOwner",
        "s()Lnet/minecraft/world/entity/LivingEntity;": "getOwner",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "t()Lnet/minecraft/world/item/alchemy/Potion;": "getPotion",
        "l_()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner"
      }
    },
    "net/minecraft/world/entity/Attackable": {
      "methods": {
        "M_()Lnet/minecraft/world/entity/LivingEntity;": "getLastAttacker"
      }
    },
    "net/minecraft/world/entity/Display": {
      "fields": {
        "o": "LOGGER",
        "b": "NO_BRIGHTNESS_OVERRIDE",
        "p": "DATA_INTERPOLATION_START_DELTA_TICKS_ID",
        "q": "DATA_INTERPOLATION_DURATION_ID",
        "r": "DATA_TRANSLATION_ID",
        "s": "DATA_SCALE_ID",
        "t": "DATA_LEFT_ROTATION_ID",
        "u": "DATA_RIGHT_ROTATION_ID",
        "aD": "DATA_BILLBOARD_RENDER_CONSTRAINTS_ID",
        "aE": "DATA_BRIGHTNESS_OVERRIDE_ID",
        "aF": "DATA_VIEW_RANGE_ID",
        "aG": "DATA_SHADOW_RADIUS_ID",
        "aH": "DATA_SHADOW_STRENGTH_ID",
        "aI": "DATA_WIDTH_ID",
        "aJ": "DATA_HEIGHT_ID",
        "aK": "DATA_GLOW_COLOR_OVERRIDE_ID",
        "aL": "RENDER_STATE_IDS",
        "aM": "INITIAL_SHADOW_RADIUS",
        "aN": "INITIAL_SHADOW_STRENGTH",
        "aO": "NO_GLOW_COLOR_OVERRIDE",
        "c": "TAG_INTERPOLATION_DURATION",
        "d": "TAG_START_INTERPOLATION",
        "e": "TAG_TRANSFORMATION",
        "f": "TAG_BILLBOARD",
        "g": "TAG_BRIGHTNESS",
        "h": "TAG_VIEW_RANGE",
        "i": "TAG_SHADOW_RADIUS",
        "j": "TAG_SHADOW_STRENGTH",
        "k": "TAG_WIDTH",
        "l": "TAG_HEIGHT",
        "m": "TAG_GLOW_COLOR_OVERRIDE",
        "aP": "orientation",
        "aQ": "interpolationStartClientTick",
        "aR": "interpolationDuration",
        "aS": "lastProgress",
        "aT": "cullingBoundingBox",
        "n": "updateRenderState",
        "aU": "updateStartTick",
        "aV": "updateInterpolationDuration",
        "aW": "renderState"
      },
      "methods": {
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "a(Lnet/minecraft/network/syncher/SynchedEntityData;)Lcom/mojang/math/Transformation;": "createTransformation",
        "l()V": "tick",
        "a(ZF)V": "updateRenderSubState",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lcom/mojang/math/Transformation;)V": "setTransformation",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "j_()Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForCulling",
        "l_()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "c_()Z": "isIgnoringBlockTriggers",
        "j()Lorg/joml/Quaternionf;": "orientation",
        "k()Lnet/minecraft/world/entity/Display$RenderState;": "renderState",
        "b(I)V": "setInterpolationDuration",
        "o()I": "getInterpolationDuration",
        "c(I)V": "setInterpolationDelay",
        "p()I": "getInterpolationDelay",
        "a(Lnet/minecraft/world/entity/Display$BillboardConstraints;)V": "setBillboardConstraints",
        "q()Lnet/minecraft/world/entity/Display$BillboardConstraints;": "getBillboardConstraints",
        "a(Lnet/minecraft/util/Brightness;)V": "setBrightnessOverride",
        "r()Lnet/minecraft/util/Brightness;": "getBrightnessOverride",
        "s()I": "getPackedBrightnessOverride",
        "s(F)V": "setViewRange",
        "t()F": "getViewRange",
        "t(F)V": "setShadowRadius",
        "v()F": "getShadowRadius",
        "u(F)V": "setShadowStrength",
        "w()F": "getShadowStrength",
        "v(F)V": "setWidth",
        "x()F": "getWidth",
        "w(F)V": "setHeight",
        "y()I": "getGlowColorOverride",
        "d(I)V": "setGlowColorOverride",
        "a(F)F": "calculateInterpolationProgress",
        "z()F": "getHeight",
        "e(DDD)V": "setPos",
        "A()V": "updateCulling",
        "b_(F)V": "setXRot",
        "a_(F)V": "setYRot",
        "C()V": "updateOrientation",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "k_()I": "getTeamColor",
        "D()Lnet/minecraft/world/entity/Display$RenderState;": "createFreshRenderState",
        "a(Lnet/minecraft/world/entity/Display$RenderState;F)Lnet/minecraft/world/entity/Display$RenderState;": "createInterpolatedRenderState"
      }
    },
    "net/minecraft/world/entity/Display$BillboardConstraints": {
      "fields": {
        "a": "FIXED",
        "b": "VERTICAL",
        "c": "HORIZONTAL",
        "d": "CENTER",
        "e": "CODEC",
        "f": "BY_ID",
        "g": "id",
        "h": "name",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()B": "getId"
      }
    },
    "net/minecraft/world/entity/Display$BlockDisplay": {
      "fields": {
        "o": "TAG_BLOCK_STATE",
        "p": "DATA_BLOCK_STATE_ID",
        "q": "blockRenderState"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "p()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlockState",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "o()Lnet/minecraft/world/entity/Display$BlockDisplay$BlockRenderState;": "blockRenderState",
        "a(ZF)V": "updateRenderSubState"
      }
    },
    "net/minecraft/world/entity/Display$ColorInterpolator": {
      "fields": {
        "a": "previous",
        "b": "current"
      },
      "methods": {
        "a()I": "previous",
        "b()I": "current"
      }
    },
    "net/minecraft/world/entity/Display$FloatInterpolator": {},
    "net/minecraft/world/entity/Display$GenericInterpolator": {},
    "net/minecraft/world/entity/Display$IntInterpolator": {},
    "net/minecraft/world/entity/Display$ItemDisplay": {
      "fields": {
        "o": "TAG_ITEM",
        "p": "TAG_ITEM_DISPLAY",
        "q": "DATA_ITEM_STACK_ID",
        "r": "DATA_ITEM_DISPLAY_ID",
        "s": "slot",
        "t": "itemRenderState"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "p()Lnet/minecraft/world/item/ItemStack;": "getItemStack",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setItemStack",
        "a(Lnet/minecraft/world/item/ItemDisplayContext;)V": "setItemTransform",
        "q()Lnet/minecraft/world/item/ItemDisplayContext;": "getItemTransform",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "o()Lnet/minecraft/world/entity/Display$ItemDisplay$ItemRenderState;": "itemRenderState",
        "a(ZF)V": "updateRenderSubState"
      }
    },
    "net/minecraft/world/entity/Display$TextDisplay": {
      "fields": {
        "o": "TAG_TEXT",
        "aD": "TAG_LINE_WIDTH",
        "aE": "TAG_TEXT_OPACITY",
        "aF": "TAG_BACKGROUND_COLOR",
        "aG": "TAG_SHADOW",
        "aH": "TAG_SEE_THROUGH",
        "aI": "TAG_USE_DEFAULT_BACKGROUND",
        "aJ": "TAG_ALIGNMENT",
        "p": "FLAG_SHADOW",
        "q": "FLAG_SEE_THROUGH",
        "r": "FLAG_USE_DEFAULT_BACKGROUND",
        "s": "FLAG_ALIGN_LEFT",
        "t": "FLAG_ALIGN_RIGHT",
        "aK": "INITIAL_TEXT_OPACITY",
        "u": "INITIAL_BACKGROUND",
        "aL": "DATA_TEXT_ID",
        "aM": "DATA_LINE_WIDTH_ID",
        "aN": "DATA_BACKGROUND_COLOR_ID",
        "aO": "DATA_TEXT_OPACITY_ID",
        "aP": "DATA_STYLE_FLAGS_ID",
        "aQ": "TEXT_RENDER_STATE_IDS",
        "aR": "clientDisplayCache",
        "aS": "textRenderState"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "p()Lnet/minecraft/network/chat/Component;": "getText",
        "c(Lnet/minecraft/network/chat/Component;)V": "setText",
        "q()I": "getLineWidth",
        "b(I)V": "setLineWidth",
        "r()B": "getTextOpacity",
        "c(B)V": "setTextOpacity",
        "s()I": "getBackgroundColor",
        "c(I)V": "setBackgroundColor",
        "t()B": "getFlags",
        "d(B)V": "setFlags",
        "a(BLnet/minecraft/nbt/CompoundTag;Ljava/lang/String;B)B": "loadFlag",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(BLnet/minecraft/nbt/CompoundTag;Ljava/lang/String;B)V": "storeFlag",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(ZF)V": "updateRenderSubState",
        "o()Lnet/minecraft/world/entity/Display$TextDisplay$TextRenderState;": "textRenderState",
        "v()Lnet/minecraft/world/entity/Display$TextDisplay$TextRenderState;": "createFreshTextRenderState",
        "a(Lnet/minecraft/world/entity/Display$TextDisplay$TextRenderState;F)Lnet/minecraft/world/entity/Display$TextDisplay$TextRenderState;": "createInterpolatedTextRenderState",
        "a(Lnet/minecraft/world/entity/Display$TextDisplay$LineSplitter;)Lnet/minecraft/world/entity/Display$TextDisplay$CachedInfo;": "cacheDisplay",
        "a(B)Lnet/minecraft/world/entity/Display$TextDisplay$Align;": "getAlign"
      }
    },
    "net/minecraft/world/entity/Display$TextDisplay$Align": {
      "fields": {
        "a": "CENTER",
        "b": "LEFT",
        "c": "RIGHT",
        "d": "CODEC",
        "e": "name",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName"
      }
    },
    "net/minecraft/world/entity/Display$TextDisplay$CachedInfo": {
      "fields": {
        "a": "lines",
        "b": "width"
      },
      "methods": {
        "a()Ljava/util/List;": "lines",
        "b()I": "width"
      }
    },
    "net/minecraft/world/entity/Display$TextDisplay$CachedLine": {
      "fields": {
        "a": "contents",
        "b": "width"
      },
      "methods": {
        "a()Lnet/minecraft/util/FormattedCharSequence;": "contents",
        "b()I": "width"
      }
    },
    "net/minecraft/world/entity/Display$TextDisplay$LineSplitter": {},
    "net/minecraft/world/entity/Entity": {
      "fields": {
        "c": "LOGGER",
        "v": "ID_TAG",
        "w": "PASSENGERS_TAG",
        "d": "ENTITY_COUNTER",
        "e": "EMPTY_LIST",
        "x": "BOARDING_COOLDOWN",
        "y": "TOTAL_AIR_SUPPLY",
        "z": "MAX_ENTITY_TAG_COUNT",
        "A": "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2",
        "B": "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5",
        "C": "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0",
        "D": "BREATHING_DISTANCE_BELOW_EYES",
        "E": "BASE_TICKS_REQUIRED_TO_FREEZE",
        "F": "FREEZE_HURT_FREQUENCY",
        "k": "INITIAL_AABB",
        "l": "WATER_FLOW_SCALE",
        "m": "LAVA_FAST_FLOW_SCALE",
        "n": "LAVA_SLOW_FLOW_SCALE",
        "G": "UUID_TAG",
        "o": "viewScale",
        "p": "type",
        "q": "id",
        "H": "blocksBuilding",
        "r": "passengers",
        "I": "boardingCooldown",
        "s": "vehicle",
        "t": "level",
        "J": "xo",
        "K": "yo",
        "L": "zo",
        "u": "position",
        "aD": "blockPosition",
        "aE": "chunkPosition",
        "aF": "deltaMovement",
        "aG": "yRot",
        "aH": "xRot",
        "M": "yRotO",
        "N": "xRotO",
        "aI": "bb",
        "aJ": "onGround",
        "O": "horizontalCollision",
        "P": "verticalCollision",
        "Q": "verticalCollisionBelow",
        "R": "minorHorizontalCollision",
        "S": "hurtMarked",
        "T": "stuckSpeedMultiplier",
        "aK": "removalReason",
        "U": "DEFAULT_BB_WIDTH",
        "V": "DEFAULT_BB_HEIGHT",
        "W": "walkDistO",
        "X": "walkDist",
        "Y": "moveDist",
        "Z": "flyDist",
        "aa": "fallDistance",
        "aL": "nextStep",
        "ab": "xOld",
        "ac": "yOld",
        "ad": "zOld",
        "aM": "maxUpStep",
        "ae": "noPhysics",
        "af": "random",
        "ag": "tickCount",
        "aN": "remainingFireTicks",
        "ah": "wasTouchingWater",
        "ai": "fluidHeight",
        "aj": "wasEyeInWater",
        "aO": "fluidOnEyes",
        "ak": "invulnerableTime",
        "al": "firstTick",
        "am": "entityData",
        "an": "DATA_SHARED_FLAGS_ID",
        "ao": "FLAG_ONFIRE",
        "aP": "FLAG_SHIFT_KEY_DOWN",
        "aQ": "FLAG_SPRINTING",
        "aR": "FLAG_SWIMMING",
        "aS": "FLAG_INVISIBLE",
        "ap": "FLAG_GLOWING",
        "aq": "FLAG_FALL_FLYING",
        "aT": "DATA_AIR_SUPPLY_ID",
        "aU": "DATA_CUSTOM_NAME",
        "aV": "DATA_CUSTOM_NAME_VISIBLE",
        "aW": "DATA_SILENT",
        "aX": "DATA_NO_GRAVITY",
        "ar": "DATA_POSE",
        "aY": "DATA_TICKS_FROZEN",
        "aZ": "levelCallback",
        "ba": "packetPositionCodec",
        "as": "noCulling",
        "at": "hasImpulse",
        "bb": "portalCooldown",
        "au": "isInsidePortal",
        "av": "portalTime",
        "aw": "portalEntrancePos",
        "bc": "invulnerable",
        "ax": "uuid",
        "ay": "stringUUID",
        "bd": "hasGlowingTag",
        "be": "tags",
        "bf": "pistonDeltas",
        "bg": "pistonDeltasGameTime",
        "bh": "dimensions",
        "bi": "eyeHeight",
        "az": "isInPowderSnow",
        "aA": "wasInPowderSnow",
        "aB": "wasOnFire",
        "aC": "mainSupportingBlockPos",
        "bj": "onGroundNoBlocks",
        "bk": "crystalSoundIntensity",
        "bl": "lastCrystalSoundPlayTick",
        "bm": "hasVisualFire",
        "bn": "feetBlockState"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isColliding",
        "k_()I": "getTeamColor",
        "G_()Z": "isSpectator",
        "ac()V": "unRide",
        "f(DDD)V": "syncPacketPositionCodec",
        "ad()Lnet/minecraft/network/protocol/game/VecDeltaCodec;": "getPositionCodec",
        "ae()Lnet/minecraft/world/entity/EntityType;": "getType",
        "af()I": "getId",
        "e(I)V": "setId",
        "ag()Ljava/util/Set;": "getTags",
        "a(Ljava/lang/String;)Z": "addTag",
        "b(Ljava/lang/String;)Z": "removeTag",
        "ah()V": "kill",
        "ai()V": "discard",
        "a_()V": "defineSynchedData",
        "aj()Lnet/minecraft/network/syncher/SynchedEntityData;": "getEntityData",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "ak()V": "onClientRemoval",
        "b(Lnet/minecraft/world/entity/Pose;)V": "setPose",
        "al()Lnet/minecraft/world/entity/Pose;": "getPose",
        "c(Lnet/minecraft/world/entity/Pose;)Z": "hasPose",
        "a(Lnet/minecraft/world/entity/Entity;D)Z": "closerThan",
        "a(Lnet/minecraft/world/entity/Entity;DD)Z": "closerThan",
        "a(FF)V": "setRot",
        "a(Lnet/minecraft/world/phys/Vec3;)V": "setPos",
        "e(DDD)V": "setPos",
        "am()Lnet/minecraft/world/phys/AABB;": "makeBoundingBox",
        "an()V": "reapplyPosition",
        "b(DD)V": "turn",
        "l()V": "tick",
        "ao()V": "baseTick",
        "a_(Z)V": "setSharedFlagOnFire",
        "ap()V": "checkBelowWorld",
        "aq()V": "setPortalCooldown",
        "f(I)V": "setPortalCooldown",
        "ar()I": "getPortalCooldown",
        "as()Z": "isOnPortalCooldown",
        "H()V": "processPortalCooldown",
        "at()I": "getPortalWaitTime",
        "au()V": "lavaHurt",
        "g(I)V": "setSecondsOnFire",
        "h(I)V": "setRemainingFireTicks",
        "av()I": "getRemainingFireTicks",
        "aw()V": "clearFire",
        "ax()V": "onBelowWorld",
        "g(DDD)Z": "isFree",
        "b(Lnet/minecraft/world/phys/AABB;)Z": "isFree",
        "c(Z)V": "setOnGround",
        "a(ZLnet/minecraft/world/phys/Vec3;)V": "setOnGroundWithKnownMovement",
        "d(Lnet/minecraft/core/BlockPos;)Z": "isSupportedBy",
        "b(ZLnet/minecraft/world/phys/Vec3;)V": "checkSupportingBlock",
        "ay()Z": "onGround",
        "a(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V": "move",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isStateClimbable",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;ZZLnet/minecraft/world/phys/Vec3;)Z": "vibrationAndSoundEffectsFromBlock",
        "b(Lnet/minecraft/world/phys/Vec3;)Z": "isHorizontalCollisionMinor",
        "az()V": "tryCheckInsideBlocks",
        "aA()V": "playEntityOnFireExtinguishedSound",
        "aB()V": "extinguishFire",
        "aC()V": "processFlappingMovement",
        "aD()Lnet/minecraft/core/BlockPos;": "getOnPosLegacy",
        "aE()Lnet/minecraft/core/BlockPos;": "getBlockPosBelowThatAffectsMyMovement",
        "aF()Lnet/minecraft/core/BlockPos;": "getOnPos",
        "d(F)Lnet/minecraft/core/BlockPos;": "getOnPos",
        "aG()F": "getBlockJumpFactor",
        "aH()F": "getBlockSpeedFactor",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/MoverType;)Lnet/minecraft/world/phys/Vec3;": "maybeBackOffFromEdge",
        "c(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "limitPistonMovement",
        "a(Lnet/minecraft/core/Direction$Axis;D)D": "applyPistonMovementRestriction",
        "h(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "collide",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/level/Level;Ljava/util/List;)Lnet/minecraft/world/phys/Vec3;": "collideBoundingBox",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Ljava/util/List;)Lnet/minecraft/world/phys/Vec3;": "collideWithShapes",
        "aI()F": "nextStep",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "aK()Lnet/minecraft/sounds/SoundEvent;": "getSwimSplashSound",
        "aL()Lnet/minecraft/sounds/SoundEvent;": "getSwimHighSpeedSplashSound",
        "aM()V": "checkInsideBlocks",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)V": "onInsideBlock",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/entity/Entity;)V": "gameEvent",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;)V": "gameEvent",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "walkingStepSound",
        "aN()V": "waterSwimSound",
        "e(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "getPrimaryStepSoundBlockPos",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)V": "playCombinationStepSounds",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)V": "playMuffledStepSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldPlayAmethystStepSound",
        "k()V": "playAmethystStepSound",
        "e(F)V": "playSwimSound",
        "aO()V": "onFlap",
        "aP()Z": "isFlapping",
        "a(Lnet/minecraft/sounds/SoundEvent;FF)V": "playSound",
        "a(Lnet/minecraft/sounds/SoundEvent;)V": "playSound",
        "aQ()Z": "isSilent",
        "d(Z)V": "setSilent",
        "aR()Z": "isNoGravity",
        "e(Z)V": "setNoGravity",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "aT()Z": "dampensVibrations",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "aU()Z": "fireImmune",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "aV()Z": "isInWater",
        "o()Z": "isInRain",
        "p()Z": "isInBubbleColumn",
        "aW()Z": "isInWaterOrRain",
        "aX()Z": "isInWaterRainOrBubble",
        "aY()Z": "isInWaterOrBubble",
        "aZ()Z": "isUnderWater",
        "ba()V": "updateSwimming",
        "bb()Z": "updateInWaterStateAndDoFluidPushing",
        "bc()V": "updateInWaterStateAndDoWaterCurrentPushing",
        "q()V": "updateFluidOnEyes",
        "bd()V": "doWaterSplashEffect",
        "be()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockStateOnLegacy",
        "bf()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockStateOn",
        "bg()Z": "canSpawnSprintParticle",
        "bh()V": "spawnSprintParticle",
        "a(Lnet/minecraft/tags/TagKey;)Z": "isEyeInFluid",
        "bi()Z": "isInLava",
        "a(FLnet/minecraft/world/phys/Vec3;)V": "moveRelative",
        "a(Lnet/minecraft/world/phys/Vec3;FF)Lnet/minecraft/world/phys/Vec3;": "getInputVector",
        "bj()F": "getLightLevelDependentMagicValue",
        "a(DDDFF)V": "absMoveTo",
        "h(DDD)V": "absMoveTo",
        "d(Lnet/minecraft/world/phys/Vec3;)V": "moveTo",
        "d(DDD)V": "moveTo",
        "a(Lnet/minecraft/core/BlockPos;FF)V": "moveTo",
        "b(DDDFF)V": "moveTo",
        "bk()V": "setOldPosAndRot",
        "e(Lnet/minecraft/world/entity/Entity;)F": "distanceTo",
        "i(DDD)D": "distanceToSqr",
        "f(Lnet/minecraft/world/entity/Entity;)D": "distanceToSqr",
        "e(Lnet/minecraft/world/phys/Vec3;)D": "distanceToSqr",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "g(Lnet/minecraft/world/entity/Entity;)V": "push",
        "j(DDD)V": "push",
        "bl()V": "markHurt",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "f(F)Lnet/minecraft/world/phys/Vec3;": "getViewVector",
        "g(F)F": "getViewXRot",
        "h(F)F": "getViewYRot",
        "b(FF)Lnet/minecraft/world/phys/Vec3;": "calculateViewVector",
        "i(F)Lnet/minecraft/world/phys/Vec3;": "getUpVector",
        "c(FF)Lnet/minecraft/world/phys/Vec3;": "calculateUpVector",
        "bm()Lnet/minecraft/world/phys/Vec3;": "getEyePosition",
        "j(F)Lnet/minecraft/world/phys/Vec3;": "getEyePosition",
        "k(F)Lnet/minecraft/world/phys/Vec3;": "getLightProbePosition",
        "l(F)Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "a(DFZ)Lnet/minecraft/world/phys/HitResult;": "pick",
        "bn()Z": "canBeHitByProjectile",
        "bo()Z": "isPickable",
        "bp()Z": "isPushable",
        "a(Lnet/minecraft/world/entity/Entity;ILnet/minecraft/world/damagesource/DamageSource;)V": "awardKillScore",
        "k(DDD)Z": "shouldRender",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "d(Lnet/minecraft/nbt/CompoundTag;)Z": "saveAsPassenger",
        "e(Lnet/minecraft/nbt/CompoundTag;)Z": "save",
        "f(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "saveWithoutId",
        "g(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "bq()Z": "repositionEntityAfterLoad",
        "br()Ljava/lang/String;": "getEncodeId",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a([D)Lnet/minecraft/nbt/ListTag;": "newDoubleList",
        "a([F)Lnet/minecraft/nbt/ListTag;": "newFloatList",
        "a(Lnet/minecraft/world/level/ItemLike;)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnAtLocation",
        "a(Lnet/minecraft/world/level/ItemLike;I)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnAtLocation",
        "b(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnAtLocation",
        "a(Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnAtLocation",
        "bs()Z": "isAlive",
        "bt()Z": "isInWall",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "h(Lnet/minecraft/world/entity/Entity;)Z": "canCollideWith",
        "bu()Z": "canBeCollidedWith",
        "bv()V": "rideTick",
        "i(Lnet/minecraft/world/entity/Entity;)V": "positionRider",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V": "positionRider",
        "j(Lnet/minecraft/world/entity/Entity;)V": "onPassengerTurned",
        "bw()D": "getMyRidingOffset",
        "bx()D": "getPassengersRidingOffset",
        "k(Lnet/minecraft/world/entity/Entity;)Z": "startRiding",
        "by()Z": "showVehicleHealth",
        "a(Lnet/minecraft/world/entity/Entity;Z)Z": "startRiding",
        "l(Lnet/minecraft/world/entity/Entity;)Z": "canRide",
        "d(Lnet/minecraft/world/entity/Pose;)Z": "canEnterPose",
        "bz()V": "ejectPassengers",
        "bA()V": "removeVehicle",
        "Y()V": "stopRiding",
        "m(Lnet/minecraft/world/entity/Entity;)V": "addPassenger",
        "n(Lnet/minecraft/world/entity/Entity;)V": "removePassenger",
        "o(Lnet/minecraft/world/entity/Entity;)Z": "canAddPassenger",
        "bB()Z": "couldAcceptPassenger",
        "a(DDDFFIZ)V": "lerpTo",
        "a(FI)V": "lerpHeadTo",
        "bC()F": "getPickRadius",
        "bD()Lnet/minecraft/world/phys/Vec3;": "getLookAngle",
        "a(Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/phys/Vec3;": "getHandHoldingItemAngle",
        "bE()Lnet/minecraft/world/phys/Vec2;": "getRotationVector",
        "bF()Lnet/minecraft/world/phys/Vec3;": "getForward",
        "f(Lnet/minecraft/core/BlockPos;)V": "handleInsidePortal",
        "bG()V": "handleNetherPortal",
        "bH()I": "getDimensionChangingDelay",
        "l(DDD)V": "lerpMotion",
        "c(Lnet/minecraft/world/damagesource/DamageSource;)V": "handleDamageEvent",
        "b(B)V": "handleEntityEvent",
        "m(F)V": "animateHurt",
        "bI()Ljava/lang/Iterable;": "getHandSlots",
        "bJ()Ljava/lang/Iterable;": "getArmorSlots",
        "bK()Ljava/lang/Iterable;": "getAllSlots",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlot",
        "bL()Z": "isOnFire",
        "bM()Z": "isPassenger",
        "bN()Z": "isVehicle",
        "bO()Z": "dismountsUnderwater",
        "f(Z)V": "setShiftKeyDown",
        "bP()Z": "isShiftKeyDown",
        "bQ()Z": "isSteppingCarefully",
        "bR()Z": "isSuppressingBounce",
        "bS()Z": "isDiscrete",
        "bT()Z": "isDescending",
        "bU()Z": "isCrouching",
        "bV()Z": "isSprinting",
        "g(Z)V": "setSprinting",
        "bW()Z": "isSwimming",
        "bX()Z": "isVisuallySwimming",
        "bY()Z": "isVisuallyCrawling",
        "h(Z)V": "setSwimming",
        "bZ()Z": "hasGlowingTag",
        "i(Z)V": "setGlowingTag",
        "ca()Z": "isCurrentlyGlowing",
        "cb()Z": "isInvisible",
        "d(Lnet/minecraft/world/entity/player/Player;)Z": "isInvisibleTo",
        "cc()Z": "isOnRails",
        "a(Ljava/util/function/BiConsumer;)V": "updateDynamicGameEventListener",
        "cd()Lnet/minecraft/world/scores/Team;": "getTeam",
        "p(Lnet/minecraft/world/entity/Entity;)Z": "isAlliedTo",
        "a(Lnet/minecraft/world/scores/Team;)Z": "isAlliedTo",
        "j(Z)V": "setInvisible",
        "i(I)Z": "getSharedFlag",
        "b(IZ)V": "setSharedFlag",
        "ce()I": "getMaxAirSupply",
        "cf()I": "getAirSupply",
        "j(I)V": "setAirSupply",
        "cg()I": "getTicksFrozen",
        "k(I)V": "setTicksFrozen",
        "ch()F": "getPercentFrozen",
        "ci()Z": "isFullyFrozen",
        "cj()I": "getTicksRequiredToFreeze",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "k(Z)V": "onAboveBubbleCol",
        "l(Z)V": "onInsideBubbleColumn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "killedEntity",
        "ck()V": "checkSlowFallDistance",
        "n()V": "resetFallDistance",
        "m(DDD)V": "moveTowardsClosestSpace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;)V": "makeStuckInBlock",
        "c(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "removeAction",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "cl()Lnet/minecraft/network/chat/Component;": "getTypeName",
        "q(Lnet/minecraft/world/entity/Entity;)Z": "is",
        "cm()F": "getYHeadRot",
        "n(F)V": "setYHeadRot",
        "o(F)V": "setYBodyRot",
        "cn()Z": "isAttackable",
        "r(Lnet/minecraft/world/entity/Entity;)Z": "skipAttackInteraction",
        "b(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isInvulnerableTo",
        "co()Z": "isInvulnerable",
        "m(Z)V": "setInvulnerable",
        "s(Lnet/minecraft/world/entity/Entity;)V": "copyPosition",
        "t(Lnet/minecraft/world/entity/Entity;)V": "restoreFrom",
        "b(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "changeDimension",
        "cp()V": "removeAfterChangingDimensions",
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/level/portal/PortalInfo;": "findDimensionEntryPoint",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/BlockUtil$FoundRectangle;)Lnet/minecraft/world/phys/Vec3;": "getRelativePortalPosition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/level/border/WorldBorder;)Ljava/util/Optional;": "getExitPortal",
        "cq()Z": "canChangeDimensions",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;F)F": "getBlockExplosionResistance",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;F)Z": "shouldBlockExplode",
        "cr()I": "getMaxFallDistance",
        "c_()Z": "isIgnoringBlockTriggers",
        "a(Lnet/minecraft/CrashReportCategory;)V": "fillCrashReportCategory",
        "cs()Z": "displayFireAnimation",
        "a_(Ljava/util/UUID;)V": "setUUID",
        "ct()Ljava/util/UUID;": "getUUID",
        "cu()Ljava/lang/String;": "getStringUUID",
        "cv()Ljava/lang/String;": "getScoreboardName",
        "cw()Z": "isPushedByFluid",
        "cx()D": "getViewScale",
        "b(D)V": "setViewScale",
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "b(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "ab()Lnet/minecraft/network/chat/Component;": "getCustomName",
        "aa()Z": "hasCustomName",
        "n(Z)V": "setCustomNameVisible",
        "cy()Z": "isCustomNameVisible",
        "n(DDD)V": "teleportToWithTicket",
        "a(Lnet/minecraft/server/level/ServerLevel;DDDLjava/util/Set;FF)Z": "teleportTo",
        "a(DDD)V": "dismountTo",
        "b(DDD)V": "teleportTo",
        "s()V": "teleportPassengers",
        "c(DDD)V": "teleportRelative",
        "cz()Z": "shouldShowName",
        "a(Ljava/util/List;)V": "onSyncedDataUpdated",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "cA()V": "fixupDimensions",
        "d_()V": "refreshDimensions",
        "cB()Lnet/minecraft/core/Direction;": "getDirection",
        "cC()Lnet/minecraft/core/Direction;": "getMotionDirection",
        "cD()Lnet/minecraft/network/chat/HoverEvent;": "createHoverEvent",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Z": "broadcastToPlayer",
        "cE()Lnet/minecraft/world/phys/AABB;": "getBoundingBox",
        "j_()Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForCulling",
        "e(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForPose",
        "a(Lnet/minecraft/world/phys/AABB;)V": "setBoundingBox",
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "f(Lnet/minecraft/world/entity/Pose;)F": "getEyeHeight",
        "cF()F": "getEyeHeight",
        "p(F)Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "cH()Lnet/minecraft/world/level/Level;": "getCommandSenderWorld",
        "cI()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactAt",
        "cJ()Z": "ignoreExplosion",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;)V": "doEnchantDamageEffects",
        "c(Lnet/minecraft/server/level/ServerPlayer;)V": "startSeenByPlayer",
        "d(Lnet/minecraft/server/level/ServerPlayer;)V": "stopSeenByPlayer",
        "a(Lnet/minecraft/world/level/block/Rotation;)F": "rotate",
        "a(Lnet/minecraft/world/level/block/Mirror;)F": "mirror",
        "cK()Z": "onlyOpCanSetNbt",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "cM()Z": "hasControllingPassenger",
        "cN()Ljava/util/List;": "getPassengers",
        "cO()Lnet/minecraft/world/entity/Entity;": "getFirstPassenger",
        "u(Lnet/minecraft/world/entity/Entity;)Z": "hasPassenger",
        "a(Ljava/util/function/Predicate;)Z": "hasPassenger",
        "t()Ljava/util/stream/Stream;": "getIndirectPassengersStream",
        "cP()Ljava/util/stream/Stream;": "getSelfAndPassengers",
        "cQ()Ljava/util/stream/Stream;": "getPassengersAndSelf",
        "cR()Ljava/lang/Iterable;": "getIndirectPassengers",
        "cS()Z": "hasExactlyOnePlayerPassenger",
        "cT()Lnet/minecraft/world/entity/Entity;": "getRootVehicle",
        "v(Lnet/minecraft/world/entity/Entity;)Z": "isPassengerOfSameVehicle",
        "w(Lnet/minecraft/world/entity/Entity;)Z": "hasIndirectPassenger",
        "cU()Z": "isControlledByLocalInstance",
        "cV()Z": "isEffectiveAi",
        "a(DDF)Lnet/minecraft/world/phys/Vec3;": "getCollisionHorizontalEscapeVector",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationForPassenger",
        "cW()Lnet/minecraft/world/entity/Entity;": "getVehicle",
        "cX()Lnet/minecraft/world/entity/Entity;": "getControlledVehicle",
        "l_()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "cZ()I": "getFireImmuneTicks",
        "da()Lnet/minecraft/commands/CommandSourceStack;": "createCommandSourceStack",
        "B()I": "getPermissionLevel",
        "l(I)Z": "hasPermissions",
        "e_()Z": "acceptsSuccess",
        "q_()Z": "acceptsFailure",
        "N_()Z": "shouldInformAdmins",
        "a(Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;Lnet/minecraft/world/phys/Vec3;)V": "lookAt",
        "a(Lnet/minecraft/tags/TagKey;D)Z": "updateFluidHeightAndDoFluidPushing",
        "db()Z": "touchingUnloadedChunk",
        "b(Lnet/minecraft/tags/TagKey;)D": "getFluidHeight",
        "dc()D": "getFluidJumpThreshold",
        "dd()F": "getBbWidth",
        "de()F": "getBbHeight",
        "df()F": "getNameTagOffsetY",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "dg()Lnet/minecraft/world/phys/Vec3;": "position",
        "dh()Lnet/minecraft/world/phys/Vec3;": "trackingPosition",
        "di()Lnet/minecraft/core/BlockPos;": "blockPosition",
        "dj()Lnet/minecraft/world/level/block/state/BlockState;": "getFeetBlockState",
        "dk()Lnet/minecraft/world/level/ChunkPos;": "chunkPosition",
        "dl()Lnet/minecraft/world/phys/Vec3;": "getDeltaMovement",
        "f(Lnet/minecraft/world/phys/Vec3;)V": "setDeltaMovement",
        "g(Lnet/minecraft/world/phys/Vec3;)V": "addDeltaMovement",
        "o(DDD)V": "setDeltaMovement",
        "dm()I": "getBlockX",
        "dn()D": "getX",
        "c(D)D": "getX",
        "d(D)D": "getRandomX",
        "do()I": "getBlockY",
        "dp()D": "getY",
        "e(D)D": "getY",
        "dq()D": "getRandomY",
        "dr()D": "getEyeY",
        "ds()I": "getBlockZ",
        "dt()D": "getZ",
        "f(D)D": "getZ",
        "g(D)D": "getRandomZ",
        "p(DDD)V": "setPosRaw",
        "du()V": "checkDespawn",
        "q(F)Lnet/minecraft/world/phys/Vec3;": "getRopeHoldPosition",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "o(Z)V": "setIsInPowderSnow",
        "dw()Z": "canFreeze",
        "dx()Z": "isFreezing",
        "dy()F": "getYRot",
        "dz()F": "getVisualRotationYInDegrees",
        "a_(F)V": "setYRot",
        "dA()F": "getXRot",
        "b_(F)V": "setXRot",
        "dB()Z": "canSprint",
        "dC()F": "maxUpStep",
        "r(F)V": "setMaxUpStep",
        "dD()Z": "isRemoved",
        "dE()Lnet/minecraft/world/entity/Entity$RemovalReason;": "getRemovalReason",
        "b(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "setRemoved",
        "dF()V": "unsetRemoved",
        "a(Lnet/minecraft/world/level/entity/EntityInLevelCallback;)V": "setLevelCallback",
        "dG()Z": "shouldBeSaved",
        "dH()Z": "isAlwaysTicking",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "mayInteract",
        "dI()Lnet/minecraft/world/level/Level;": "level",
        "a(Lnet/minecraft/world/level/Level;)V": "setLevel",
        "dJ()Lnet/minecraft/world/damagesource/DamageSources;": "damageSources",
        "x()Ljava/util/Iterator;": "lambda$getIndirectPassengers$15",
        "a(Lnet/minecraft/world/entity/EntityDimensions;Lnet/minecraft/world/phys/Vec3;)V": "lambda$refreshDimensions$14",
        "b(Lnet/minecraft/world/entity/Entity;)V": "lambda$teleportPassengers$13",
        "a(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$getDisplayName$12",
        "y()Ljava/lang/String;": "lambda$fillCrashReportCategory$11",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/BlockUtil$FoundRectangle;)Lnet/minecraft/world/level/portal/PortalInfo;": "lambda$findDimensionEntryPoint$7",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z": "lambda$findDimensionEntryPoint$6",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Z": "lambda$removePassenger$5",
        "c(Lnet/minecraft/world/entity/Entity;)V": "lambda$startRiding$4",
        "d(Lnet/minecraft/world/entity/Entity;)Z": "lambda$startRiding$3",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/core/BlockPos;)Z": "lambda$isInWall$2",
        "e(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$move$0"
      }
    },
    "net/minecraft/world/entity/Entity$MoveFunction": {},
    "net/minecraft/world/entity/Entity$MovementEmission": {
      "fields": {
        "a": "NONE",
        "b": "SOUNDS",
        "c": "EVENTS",
        "d": "ALL",
        "e": "sounds",
        "f": "events",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()Z": "emitsAnything",
        "b()Z": "emitsEvents",
        "c()Z": "emitsSounds"
      }
    },
    "net/minecraft/world/entity/Entity$RemovalReason": {
      "fields": {
        "a": "KILLED",
        "b": "DISCARDED",
        "c": "UNLOADED_TO_CHUNK",
        "d": "UNLOADED_WITH_PLAYER",
        "e": "CHANGED_DIMENSION",
        "f": "destroy",
        "g": "save",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()Z": "shouldDestroy",
        "b()Z": "shouldSave"
      }
    },
    "net/minecraft/world/entity/EntitySize": {
      "fields": {
        "a": "width",
        "b": "height",
        "c": "fixed"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;": "makeBoundingBox",
        "a(DDD)Lnet/minecraft/world/phys/AABB;": "makeBoundingBox",
        "a(F)Lnet/minecraft/world/entity/EntityDimensions;": "scale",
        "a(FF)Lnet/minecraft/world/entity/EntityDimensions;": "scale",
        "b(FF)Lnet/minecraft/world/entity/EntityDimensions;": "scalable",
        "c(FF)Lnet/minecraft/world/entity/EntityDimensions;": "fixed"
      }
    },
    "net/minecraft/world/entity/IEntitySelector": {
      "fields": {
        "a": "ENTITY_STILL_ALIVE",
        "b": "LIVING_ENTITY_STILL_ALIVE",
        "c": "ENTITY_NOT_BEING_RIDDEN",
        "d": "CONTAINER_ENTITY_SELECTOR",
        "e": "NO_CREATIVE_OR_SPECTATOR",
        "f": "NO_SPECTATORS",
        "g": "CAN_BE_COLLIDED_WITH"
      },
      "methods": {
        "a(DDDD)Ljava/util/function/Predicate;": "withinDistance",
        "a(Lnet/minecraft/world/entity/Entity;)Ljava/util/function/Predicate;": "pushableBy",
        "b(Lnet/minecraft/world/entity/Entity;)Ljava/util/function/Predicate;": "notRiding",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Z": "lambda$notRiding$7",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/scores/Team;Lnet/minecraft/world/scores/Team$CollisionRule;Lnet/minecraft/world/entity/Entity;)Z": "lambda$pushableBy$6",
        "a(DDDDLnet/minecraft/world/entity/Entity;)Z": "lambda$withinDistance$5"
      }
    },
    "net/minecraft/world/entity/IEntitySelector$EntitySelectorEquipable": {
      "fields": {
        "a": "itemStack"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)Z": "test"
      }
    },
    "net/minecraft/world/entity/EntityTypes": {
      "fields": {
        "bw": "LOGGER",
        "a": "ENTITY_TAG",
        "bx": "builtInRegistryHolder",
        "by": "MAGIC_HORSE_WIDTH",
        "bz": "DISPLAY_TRACKING_RANGE",
        "b": "ALLAY",
        "c": "AREA_EFFECT_CLOUD",
        "d": "ARMOR_STAND",
        "e": "ARROW",
        "f": "AXOLOTL",
        "g": "BAT",
        "h": "BEE",
        "i": "BLAZE",
        "j": "BLOCK_DISPLAY",
        "k": "BOAT",
        "l": "CAMEL",
        "m": "CAT",
        "n": "CAVE_SPIDER",
        "o": "CHEST_BOAT",
        "p": "CHEST_MINECART",
        "q": "CHICKEN",
        "r": "COD",
        "s": "COMMAND_BLOCK_MINECART",
        "t": "COW",
        "u": "CREEPER",
        "v": "DOLPHIN",
        "w": "DONKEY",
        "x": "DRAGON_FIREBALL",
        "y": "DROWNED",
        "z": "EGG",
        "A": "ELDER_GUARDIAN",
        "B": "END_CRYSTAL",
        "C": "ENDER_DRAGON",
        "D": "ENDER_PEARL",
        "E": "ENDERMAN",
        "F": "ENDERMITE",
        "G": "EVOKER",
        "H": "EVOKER_FANGS",
        "I": "EXPERIENCE_BOTTLE",
        "J": "EXPERIENCE_ORB",
        "K": "EYE_OF_ENDER",
        "L": "FALLING_BLOCK",
        "M": "FIREWORK_ROCKET",
        "N": "FOX",
        "O": "FROG",
        "P": "FURNACE_MINECART",
        "Q": "GHAST",
        "R": "GIANT",
        "S": "GLOW_ITEM_FRAME",
        "T": "GLOW_SQUID",
        "U": "GOAT",
        "V": "GUARDIAN",
        "W": "HOGLIN",
        "X": "HOPPER_MINECART",
        "Y": "HORSE",
        "Z": "HUSK",
        "aa": "ILLUSIONER",
        "ab": "INTERACTION",
        "ac": "IRON_GOLEM",
        "ad": "ITEM",
        "ae": "ITEM_DISPLAY",
        "af": "ITEM_FRAME",
        "ag": "FIREBALL",
        "ah": "LEASH_KNOT",
        "ai": "LIGHTNING_BOLT",
        "aj": "LLAMA",
        "ak": "LLAMA_SPIT",
        "al": "MAGMA_CUBE",
        "am": "MARKER",
        "an": "MINECART",
        "ao": "MOOSHROOM",
        "ap": "MULE",
        "aq": "OCELOT",
        "ar": "PAINTING",
        "as": "PANDA",
        "at": "PARROT",
        "au": "PHANTOM",
        "av": "PIG",
        "aw": "PIGLIN",
        "ax": "PIGLIN_BRUTE",
        "ay": "PILLAGER",
        "az": "POLAR_BEAR",
        "aA": "POTION",
        "aB": "PUFFERFISH",
        "aC": "RABBIT",
        "aD": "RAVAGER",
        "aE": "SALMON",
        "aF": "SHEEP",
        "aG": "SHULKER",
        "aH": "SHULKER_BULLET",
        "aI": "SILVERFISH",
        "aJ": "SKELETON",
        "aK": "SKELETON_HORSE",
        "aL": "SLIME",
        "aM": "SMALL_FIREBALL",
        "aN": "SNIFFER",
        "aO": "SNOW_GOLEM",
        "aP": "SNOWBALL",
        "aQ": "SPAWNER_MINECART",
        "aR": "SPECTRAL_ARROW",
        "aS": "SPIDER",
        "aT": "SQUID",
        "aU": "STRAY",
        "aV": "STRIDER",
        "aW": "TADPOLE",
        "aX": "TEXT_DISPLAY",
        "aY": "TNT",
        "aZ": "TNT_MINECART",
        "ba": "TRADER_LLAMA",
        "bb": "TRIDENT",
        "bc": "TROPICAL_FISH",
        "bd": "TURTLE",
        "be": "VEX",
        "bf": "VILLAGER",
        "bg": "VINDICATOR",
        "bh": "WANDERING_TRADER",
        "bi": "WARDEN",
        "bj": "WITCH",
        "bk": "WITHER",
        "bl": "WITHER_SKELETON",
        "bm": "WITHER_SKULL",
        "bn": "WOLF",
        "bo": "ZOGLIN",
        "bp": "ZOMBIE",
        "bq": "ZOMBIE_HORSE",
        "br": "ZOMBIE_VILLAGER",
        "bs": "ZOMBIFIED_PIGLIN",
        "bt": "PLAYER",
        "bu": "FISHING_BOBBER",
        "bA": "factory",
        "bB": "category",
        "bC": "immuneTo",
        "bD": "serialize",
        "bE": "summon",
        "bF": "fireImmune",
        "bG": "canSpawnFarFromPlayer",
        "bH": "clientTrackingRange",
        "bI": "updateInterval",
        "bJ": "descriptionId",
        "bK": "description",
        "bL": "lootTable",
        "bM": "dimensions",
        "bN": "requiredFeatures"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/entity/EntityType$Builder;)Lnet/minecraft/world/entity/EntityType;": "register",
        "a(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "byString",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/MobSpawnType;ZZ)Lnet/minecraft/world/entity/Entity;": "spawn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)Ljava/util/function/Consumer;": "createDefaultStackConfig",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)Ljava/util/function/Consumer;": "appendDefaultStackConfig",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/item/ItemStack;)Ljava/util/function/Consumer;": "appendCustomNameConfig",
        "b(Ljava/util/function/Consumer;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)Ljava/util/function/Consumer;": "appendCustomEntityStackConfig",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/MobSpawnType;)Lnet/minecraft/world/entity/Entity;": "spawn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/nbt/CompoundTag;Ljava/util/function/Consumer;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/MobSpawnType;ZZ)Lnet/minecraft/world/entity/Entity;": "spawn",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/nbt/CompoundTag;Ljava/util/function/Consumer;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/MobSpawnType;ZZ)Lnet/minecraft/world/entity/Entity;": "create",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/phys/AABB;)D": "getYOffset",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/nbt/CompoundTag;)V": "updateCustomEntityTag",
        "b()Z": "canSerialize",
        "c()Z": "canSummon",
        "d()Z": "fireImmune",
        "e()Z": "canSpawnFarFromPlayer",
        "f()Lnet/minecraft/world/entity/MobCategory;": "getCategory",
        "g()Ljava/lang/String;": "getDescriptionId",
        "h()Lnet/minecraft/network/chat/Component;": "getDescription",
        "i()Ljava/lang/String;": "toShortString",
        "j()Lnet/minecraft/resources/ResourceLocation;": "getDefaultLootTable",
        "k()F": "getWidth",
        "l()F": "getHeight",
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/Entity;": "create",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/Level;)Ljava/util/Optional;": "create",
        "a(DDD)Lnet/minecraft/world/phys/AABB;": "getAABB",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBlockDangerous",
        "n()Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "a(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/Optional;": "by",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/Level;Ljava/util/function/Function;)Lnet/minecraft/world/entity/Entity;": "loadEntityRecursive",
        "a(Ljava/util/List;Lnet/minecraft/world/level/Level;)Ljava/util/stream/Stream;": "loadEntitiesRecursive",
        "b(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/Level;)Ljava/util/Optional;": "loadStaticEntity",
        "o()I": "clientTrackingRange",
        "p()I": "updateInterval",
        "q()Z": "trackDeltas",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/Entity;": "tryCast",
        "a()Ljava/lang/Class;": "getBaseClass",
        "r()Lnet/minecraft/core/Holder$Reference;": "builtInRegistryHolder",
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "tryCast"
      }
    },
    "net/minecraft/world/entity/EntityTypes$Builder": {
      "fields": {
        "a": "factory",
        "b": "category",
        "c": "immuneTo",
        "d": "serialize",
        "e": "summon",
        "f": "fireImmune",
        "g": "canSpawnFarFromPlayer",
        "h": "clientTrackingRange",
        "i": "updateInterval",
        "j": "dimensions",
        "k": "requiredFeatures"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType$EntityFactory;Lnet/minecraft/world/entity/MobCategory;)Lnet/minecraft/world/entity/EntityType$Builder;": "of",
        "a(Lnet/minecraft/world/entity/MobCategory;)Lnet/minecraft/world/entity/EntityType$Builder;": "createNothing",
        "a(FF)Lnet/minecraft/world/entity/EntityType$Builder;": "sized",
        "a()Lnet/minecraft/world/entity/EntityType$Builder;": "noSummon",
        "b()Lnet/minecraft/world/entity/EntityType$Builder;": "noSave",
        "c()Lnet/minecraft/world/entity/EntityType$Builder;": "fireImmune",
        "a([Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/entity/EntityType$Builder;": "immuneTo",
        "d()Lnet/minecraft/world/entity/EntityType$Builder;": "canSpawnFarFromPlayer",
        "a(I)Lnet/minecraft/world/entity/EntityType$Builder;": "clientTrackingRange",
        "b(I)Lnet/minecraft/world/entity/EntityType$Builder;": "updateInterval",
        "a([Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/entity/EntityType$Builder;": "requiredFeatures",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/EntityType;": "build"
      }
    },
    "net/minecraft/world/entity/EnumItemSlot": {
      "fields": {
        "a": "MAINHAND",
        "b": "OFFHAND",
        "c": "FEET",
        "d": "LEGS",
        "e": "CHEST",
        "f": "HEAD",
        "g": "type",
        "h": "index",
        "i": "filterFlag",
        "j": "name",
        "k": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/EquipmentSlot$Type;": "getType",
        "b()I": "getIndex",
        "a(I)I": "getIndex",
        "c()I": "getFilterFlag",
        "d()Ljava/lang/String;": "getName",
        "e()Z": "isArmor",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/EquipmentSlot;": "byName",
        "a(Lnet/minecraft/world/entity/EquipmentSlot$Type;I)Lnet/minecraft/world/entity/EquipmentSlot;": "byTypeAndIndex",
        "f()[Lnet/minecraft/world/entity/EquipmentSlot;": "$values"
      }
    },
    "net/minecraft/world/entity/EnumItemSlot$Function": {
      "fields": {
        "a": "HAND",
        "b": "ARMOR",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/EquipmentSlot$Type;": "$values"
      }
    },
    "net/minecraft/world/entity/EntityExperienceOrb": {
      "fields": {
        "b": "LIFETIME",
        "c": "ENTITY_SCAN_PERIOD",
        "d": "MAX_FOLLOW_DIST",
        "e": "ORB_GROUPS_PER_AREA",
        "f": "ORB_MERGE_DISTANCE",
        "g": "age",
        "h": "health",
        "i": "value",
        "j": "count",
        "k": "followingPlayer"
      },
      "methods": {
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "aE()Lnet/minecraft/core/BlockPos;": "getBlockPosBelowThatAffectsMyMovement",
        "o()V": "scanForEntities",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;I)V": "award",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;I)Z": "tryMergeToExisting",
        "a(Lnet/minecraft/world/entity/ExperienceOrb;)Z": "canMerge",
        "a(Lnet/minecraft/world/entity/ExperienceOrb;II)Z": "canMerge",
        "b(Lnet/minecraft/world/entity/ExperienceOrb;)V": "merge",
        "p()V": "setUnderwaterMovement",
        "bd()V": "doWaterSplashEffect",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "a(Lnet/minecraft/world/entity/player/Player;I)I": "repairPlayerItems",
        "c(I)I": "durabilityToXp",
        "d(I)I": "xpToDurability",
        "j()I": "getValue",
        "k()I": "getIcon",
        "b(I)I": "getExperienceValue",
        "cn()Z": "isAttackable",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource"
      }
    },
    "net/minecraft/world/entity/EntityFlying": {
      "methods": {
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "i_()Z": "onClimbable"
      }
    },
    "net/minecraft/world/entity/GlowSquid": {
      "fields": {
        "bX": "DATA_DARK_TICKS_REMAINING"
      },
      "methods": {
        "q()Lnet/minecraft/core/particles/ParticleOptions;": "getInkParticle",
        "a_()V": "defineSynchedData",
        "r()Lnet/minecraft/sounds/SoundEvent;": "getSquirtSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "c(I)V": "setDarkTicks",
        "w()I": "getDarkTicksRemaining",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkGlowSquideSpawnRules"
      }
    },
    "net/minecraft/world/entity/HasCustomInventoryScreen": {
      "methods": {
        "b(Lnet/minecraft/world/entity/player/Player;)V": "openCustomInventoryScreen"
      }
    },
    "net/minecraft/world/entity/EnumMainHand": {
      "fields": {
        "a": "LEFT",
        "b": "RIGHT",
        "c": "id",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "d()Lnet/minecraft/world/entity/HumanoidArm;": "getOpposite",
        "a()I": "getId",
        "b()Ljava/lang/String;": "getKey",
        "e()[Lnet/minecraft/world/entity/HumanoidArm;": "$values"
      }
    },
    "net/minecraft/world/entity/Interaction": {
      "fields": {
        "b": "LOGGER",
        "c": "DATA_WIDTH_ID",
        "d": "DATA_HEIGHT_ID",
        "e": "DATA_RESPONSE_ID",
        "f": "TAG_WIDTH",
        "g": "TAG_HEIGHT",
        "h": "TAG_ATTACK",
        "i": "TAG_INTERACTION",
        "j": "TAG_RESPONSE",
        "k": "attack",
        "l": "interaction"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "bn()Z": "canBeHitByProjectile",
        "bo()Z": "isPickable",
        "l_()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "c_()Z": "isIgnoringBlockTriggers",
        "r(Lnet/minecraft/world/entity/Entity;)Z": "skipAttackInteraction",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "l()V": "tick",
        "M_()Lnet/minecraft/world/entity/LivingEntity;": "getLastAttacker",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget",
        "a(F)V": "setWidth",
        "k()F": "getWidth",
        "s(F)V": "setHeight",
        "o()F": "getHeight",
        "a(Z)V": "setResponse",
        "p()Z": "getResponse",
        "q()Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "am()Lnet/minecraft/world/phys/AABB;": "makeBoundingBox"
      }
    },
    "net/minecraft/world/entity/Interaction$PlayerAction": {
      "fields": {
        "b": "player",
        "c": "timestamp",
        "a": "CODEC"
      },
      "methods": {
        "a()Ljava/util/UUID;": "player",
        "b()J": "timestamp"
      }
    },
    "net/minecraft/world/entity/SaddleStorage": {
      "fields": {
        "a": "MIN_BOOST_TIME",
        "b": "MAX_BOOST_TIME",
        "c": "entityData",
        "d": "boostTimeAccessor",
        "e": "hasSaddleAccessor",
        "f": "boosting",
        "g": "boostTime"
      },
      "methods": {
        "a()V": "onSynced",
        "a(Lnet/minecraft/util/RandomSource;)Z": "boost",
        "b()V": "tickBoost",
        "c()F": "boostFactor",
        "e()I": "boostTimeTotal",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Z)V": "setSaddle",
        "d()Z": "hasSaddle"
      }
    },
    "net/minecraft/world/entity/ISteerable": {
      "methods": {
        "a()Z": "boost"
      }
    },
    "net/minecraft/world/entity/LerpingModel": {
      "methods": {
        "a()Ljava/util/Map;": "getModelRotationValues"
      }
    },
    "net/minecraft/world/entity/EntityLightning": {
      "fields": {
        "c": "START_LIFE",
        "d": "DAMAGE_RADIUS",
        "e": "DETECTION_RADIUS",
        "f": "life",
        "b": "seed",
        "g": "flashes",
        "h": "visualOnly",
        "i": "cause",
        "j": "hitEntities",
        "k": "blocksSetOnFire"
      },
      "methods": {
        "a(Z)V": "setVisualOnly",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "j()Lnet/minecraft/server/level/ServerPlayer;": "getCause",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "setCause",
        "p()V": "powerLightningRod",
        "l()V": "tick",
        "q()Lnet/minecraft/core/BlockPos;": "getStrikePosition",
        "b(I)V": "spawnFire",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "clearCopperOnLightningStrike",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;I)V": "randomWalkCleaningCopper",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "randomStepCleaningCopper",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "k()I": "getBlocksSetOnFire",
        "o()Ljava/util/stream/Stream;": "getHitEntities",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$randomStepCleaningCopper$2"
      }
    },
    "net/minecraft/world/entity/EntityLiving": {
      "fields": {
        "b": "LOGGER",
        "c": "SPEED_MODIFIER_SPRINTING_UUID",
        "d": "SPEED_MODIFIER_SOUL_SPEED_UUID",
        "e": "SPEED_MODIFIER_POWDER_SNOW_UUID",
        "bB": "SPEED_MODIFIER_SPRINTING",
        "h": "HAND_SLOTS",
        "i": "ARMOR_SLOTS",
        "j": "EQUIPMENT_SLOT_OFFSET",
        "k": "ARMOR_SLOT_OFFSET",
        "l": "SWING_DURATION",
        "m": "PLAYER_HURT_EXPERIENCE_TIME",
        "bC": "DAMAGE_SOURCE_TIMEOUT",
        "n": "MIN_MOVEMENT_DISTANCE",
        "o": "DEFAULT_BASE_GRAVITY",
        "p": "DEATH_DURATION",
        "bD": "WAIT_TICKS_BEFORE_ITEM_USE_EFFECTS",
        "bE": "TICKS_PER_ELYTRA_FREE_FALL_EVENT",
        "bF": "FREE_FALL_EVENTS_PER_ELYTRA_BREAK",
        "q": "USE_ITEM_INTERVAL",
        "bG": "BASE_JUMP_POWER",
        "bH": "MAX_LINE_OF_SIGHT_TEST_RANGE",
        "r": "LIVING_ENTITY_FLAG_IS_USING",
        "s": "LIVING_ENTITY_FLAG_OFF_HAND",
        "t": "LIVING_ENTITY_FLAG_SPIN_ATTACK",
        "u": "DATA_LIVING_ENTITY_FLAGS",
        "bI": "DATA_HEALTH_ID",
        "bJ": "DATA_EFFECT_COLOR_ID",
        "bK": "DATA_EFFECT_AMBIENCE_ID",
        "bL": "DATA_ARROW_COUNT_ID",
        "bM": "DATA_STINGER_COUNT_ID",
        "bN": "SLEEPING_POS_ID",
        "aD": "DEFAULT_EYE_HEIGHT",
        "aE": "SLEEPING_DIMENSIONS",
        "aF": "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT",
        "bO": "MAX_HEAD_ROTATION_RELATIVE_TO_BODY",
        "bP": "attributes",
        "bQ": "combatTracker",
        "bR": "activeEffects",
        "bS": "lastHandItemStacks",
        "bT": "lastArmorItemStacks",
        "aG": "swinging",
        "bU": "discardFriction",
        "aH": "swingingArm",
        "aI": "swingTime",
        "aJ": "removeArrowTime",
        "aK": "removeStingerTime",
        "aL": "hurtTime",
        "aM": "hurtDuration",
        "aN": "deathTime",
        "aO": "oAttackAnim",
        "aP": "attackAnim",
        "aQ": "attackStrengthTicker",
        "aR": "walkAnimation",
        "aS": "invulnerableDuration",
        "aT": "timeOffs",
        "aU": "rotA",
        "aV": "yBodyRot",
        "aW": "yBodyRotO",
        "aX": "yHeadRot",
        "aY": "yHeadRotO",
        "aZ": "lastHurtByPlayer",
        "ba": "lastHurtByPlayerTime",
        "bb": "dead",
        "bc": "noActionTime",
        "bd": "oRun",
        "be": "run",
        "bf": "animStep",
        "bg": "animStepO",
        "bh": "rotOffs",
        "bi": "deathScore",
        "bj": "lastHurt",
        "bk": "jumping",
        "bl": "xxa",
        "bm": "yya",
        "bn": "zza",
        "bo": "lerpSteps",
        "bp": "lerpX",
        "bq": "lerpY",
        "br": "lerpZ",
        "bs": "lerpYRot",
        "bt": "lerpXRot",
        "bu": "lyHeadRot",
        "bv": "lerpHeadSteps",
        "bV": "effectsDirty",
        "bW": "lastHurtByMob",
        "bX": "lastHurtByMobTimestamp",
        "bY": "lastHurtMob",
        "bZ": "lastHurtMobTimestamp",
        "ca": "speed",
        "cb": "noJumpDelay",
        "cc": "absorptionAmount",
        "bw": "useItem",
        "bx": "useItemRemaining",
        "by": "fallFlyTicks",
        "cd": "lastPos",
        "ce": "lastClimbablePos",
        "cf": "lastDamageSource",
        "cg": "lastDamageStamp",
        "bz": "autoSpinAttackTicks",
        "ch": "swimAmount",
        "ci": "swimAmountO",
        "bA": "brain",
        "cj": "skipDropExperience"
      },
      "methods": {
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "ah()V": "kill",
        "a(Lnet/minecraft/world/entity/EntityType;)Z": "canAttackType",
        "a_()V": "defineSynchedData",
        "dM()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createLivingAttributes",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "dN()Z": "canBreatheUnderwater",
        "a(F)F": "getSwimAmount",
        "ao()V": "baseTick",
        "dO()Z": "canSpawnSoulSpeedParticle",
        "dP()V": "spawnSoulSpeedParticle",
        "dQ()Z": "onSoulSpeedBlock",
        "aH()F": "getBlockSpeedFactor",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldRemoveSoulSpeed",
        "dR()V": "removeSoulSpeed",
        "dS()V": "tryAddSoulSpeed",
        "dT()V": "removeFrost",
        "dU()V": "tryAddFrost",
        "c(Lnet/minecraft/core/BlockPos;)V": "onChangedBlock",
        "h_()Z": "isBaby",
        "dV()F": "getScale",
        "dW()Z": "isAffectedByFluids",
        "dX()V": "tickDeath",
        "dY()Z": "shouldDropExperience",
        "dZ()Z": "shouldDropLoot",
        "m(I)I": "decreaseAirSupply",
        "n(I)I": "increaseAirSupply",
        "ea()I": "getExperienceReward",
        "eb()Z": "isAlwaysExperienceDropper",
        "ec()Lnet/minecraft/util/RandomSource;": "getRandom",
        "ed()Lnet/minecraft/world/entity/LivingEntity;": "getLastHurtByMob",
        "M_()Lnet/minecraft/world/entity/LivingEntity;": "getLastAttacker",
        "ee()I": "getLastHurtByMobTimestamp",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "setLastHurtByPlayer",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setLastHurtByMob",
        "ef()Lnet/minecraft/world/entity/LivingEntity;": "getLastHurtMob",
        "eg()I": "getLastHurtMobTimestamp",
        "x(Lnet/minecraft/world/entity/Entity;)V": "setLastHurtMob",
        "eh()I": "getNoActionTime",
        "o(I)V": "setNoActionTime",
        "ei()Z": "shouldDiscardFriction",
        "p(Z)V": "setDiscardFriction",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Z": "doesEmitEquipEvent",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "onEquipItem",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "ej()V": "tickEffects",
        "F()V": "updateInvisibilityStatus",
        "q()V": "updateGlowingStatus",
        "y(Lnet/minecraft/world/entity/Entity;)D": "getVisibilityPercent",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "canAttack",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;)Z": "canAttack",
        "ek()Z": "canBeSeenAsEnemy",
        "el()Z": "canBeSeenByAnyone",
        "c(Ljava/util/Collection;)Z": "areAllEffectsAmbient",
        "em()V": "removeEffectParticles",
        "en()Z": "removeAllEffects",
        "eo()Ljava/util/Collection;": "getActiveEffects",
        "ep()Ljava/util/Map;": "getActiveEffectsMap",
        "b(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "addEffect",
        "b(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;)Z": "addEffect",
        "c(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "canBeAffected",
        "c(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;)V": "forceAddEffect",
        "eq()Z": "isInvertedHealAndHarm",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;)V": "onEffectAdded",
        "d(Lnet/minecraft/world/effect/MobEffectInstance;)V": "sendEffectToPassengers",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;ZLnet/minecraft/world/entity/Entity;)V": "onEffectUpdated",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;)V": "onEffectRemoved",
        "s(F)V": "heal",
        "er()F": "getHealth",
        "t(F)V": "setHealth",
        "es()Z": "isDeadOrDying",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "d(Lnet/minecraft/world/entity/LivingEntity;)V": "blockUsingShield",
        "e(Lnet/minecraft/world/entity/LivingEntity;)V": "blockedByShield",
        "h(Lnet/minecraft/world/damagesource/DamageSource;)Z": "checkTotemDeathProtection",
        "et()Lnet/minecraft/world/damagesource/DamageSource;": "getLastDamageSource",
        "e(Lnet/minecraft/world/damagesource/DamageSource;)V": "playHurtSound",
        "f(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isDamageSourceBlocked",
        "i(Lnet/minecraft/world/item/ItemStack;)V": "breakItem",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "f(Lnet/minecraft/world/entity/LivingEntity;)V": "createWitherRose",
        "g(Lnet/minecraft/world/damagesource/DamageSource;)V": "dropAllDeathLoot",
        "eu()V": "dropEquipment",
        "ev()V": "dropExperience",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "ew()Lnet/minecraft/resources/ResourceLocation;": "getLootTable",
        "ex()J": "getLootTableSeed",
        "a(Lnet/minecraft/world/damagesource/DamageSource;Z)V": "dropFromLootTable",
        "q(DDD)V": "knockback",
        "a(DD)V": "indicateDamage",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(I)Lnet/minecraft/sounds/SoundEvent;": "getFallDamageSound",
        "ey()V": "skipDropExperience",
        "ez()Z": "wasExperienceConsumed",
        "eA()Lnet/minecraft/world/phys/Vec3;": "getMeleeAttackReferencePosition",
        "eB()F": "getHurtDir",
        "eC()Lnet/minecraft/world/entity/LivingEntity$Fallsounds;": "getFallSounds",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/sounds/SoundEvent;": "getDrinkingSound",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "eD()Ljava/util/Optional;": "getLastClimbablePos",
        "i_()Z": "onClimbable",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "trapdoorUsableAsLadder",
        "bs()Z": "isAlive",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "d(FF)I": "calculateFallDamage",
        "eE()V": "playBlockFallSound",
        "m(F)V": "animateHurt",
        "eF()I": "getArmorValue",
        "b(Lnet/minecraft/world/damagesource/DamageSource;F)V": "hurtArmor",
        "c(Lnet/minecraft/world/damagesource/DamageSource;F)V": "hurtHelmet",
        "u(F)V": "hurtCurrentlyUsedShield",
        "d(Lnet/minecraft/world/damagesource/DamageSource;F)F": "getDamageAfterArmorAbsorb",
        "e(Lnet/minecraft/world/damagesource/DamageSource;F)F": "getDamageAfterMagicAbsorb",
        "f(Lnet/minecraft/world/damagesource/DamageSource;F)V": "actuallyHurt",
        "eG()Lnet/minecraft/world/damagesource/CombatTracker;": "getCombatTracker",
        "eH()Lnet/minecraft/world/entity/LivingEntity;": "getKillCredit",
        "eI()F": "getMaxHealth",
        "eJ()I": "getArrowCount",
        "p(I)V": "setArrowCount",
        "eK()I": "getStingerCount",
        "q(I)V": "setStingerCount",
        "s()I": "getCurrentSwingDuration",
        "a(Lnet/minecraft/world/InteractionHand;)V": "swing",
        "a(Lnet/minecraft/world/InteractionHand;Z)V": "swing",
        "c(Lnet/minecraft/world/damagesource/DamageSource;)V": "handleDamageEvent",
        "b(B)V": "handleEntityEvent",
        "x()V": "makePoofParticles",
        "y()V": "swapHandItems",
        "ax()V": "onBelowWorld",
        "eL()V": "updateSwingTime",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "getAttribute",
        "a(Lnet/minecraft/core/Holder;)D": "getAttributeValue",
        "b(Lnet/minecraft/world/entity/ai/attributes/Attribute;)D": "getAttributeValue",
        "b(Lnet/minecraft/core/Holder;)D": "getAttributeBaseValue",
        "c(Lnet/minecraft/world/entity/ai/attributes/Attribute;)D": "getAttributeBaseValue",
        "eM()Lnet/minecraft/world/entity/ai/attributes/AttributeMap;": "getAttributes",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "eO()Lnet/minecraft/world/item/ItemStack;": "getMainHandItem",
        "eP()Lnet/minecraft/world/item/ItemStack;": "getOffhandItem",
        "b(Lnet/minecraft/world/item/Item;)Z": "isHolding",
        "b(Ljava/util/function/Predicate;)Z": "isHolding",
        "b(Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/item/ItemStack;": "getItemInHand",
        "a(Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)V": "setItemInHand",
        "b(Lnet/minecraft/world/entity/EquipmentSlot;)Z": "hasItemInSlot",
        "bJ()Ljava/lang/Iterable;": "getArmorSlots",
        "c(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getItemBySlot",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlot",
        "e(Lnet/minecraft/world/item/ItemStack;)V": "verifyEquippedItem",
        "eQ()F": "getArmorCoverPercentage",
        "g(Z)V": "setSprinting",
        "eR()F": "getSoundVolume",
        "eS()F": "getVoicePitch",
        "eT()Z": "isImmobile",
        "g(Lnet/minecraft/world/entity/Entity;)V": "push",
        "a(Lnet/minecraft/world/entity/Entity;)V": "dismountVehicle",
        "cz()Z": "shouldShowName",
        "eU()F": "getJumpPower",
        "eV()F": "getJumpBoostPower",
        "eW()V": "jumpFromGround",
        "eX()V": "goDownInWater",
        "c(Lnet/minecraft/tags/TagKey;)V": "jumpInLiquid",
        "eY()F": "getWaterSlowDown",
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "canStandOnFluid",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "c(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)V": "travelRidden",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)V": "tickRidden",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getRiddenInput",
        "e(Lnet/minecraft/world/entity/player/Player;)F": "getRiddenSpeed",
        "q(Z)V": "calculateEntityAnimation",
        "v(F)V": "updateWalkAnimation",
        "a(Lnet/minecraft/world/phys/Vec3;F)Lnet/minecraft/world/phys/Vec3;": "handleRelativeFrictionAndCalculateMovement",
        "a(DZLnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getFluidFallingAdjustedMovement",
        "j(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "handleOnClimbable",
        "z(F)F": "getFrictionInfluencedSpeed",
        "eZ()F": "getFlyingSpeed",
        "fa()F": "getSpeed",
        "w(F)V": "setSpeed",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "l()V": "tick",
        "z()V": "detectEquipmentUpdates",
        "A()Ljava/util/Map;": "collectEquipmentChanges",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "equipmentHasChanged",
        "a(Ljava/util/Map;)V": "handleHandSwap",
        "b(Ljava/util/Map;)V": "handleEquipmentChanges",
        "e(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getLastArmorItem",
        "b(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setLastArmorItem",
        "f(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getLastHandItem",
        "c(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setLastHandItem",
        "e(FF)F": "tickHeadTurn",
        "b_()V": "aiStep",
        "fb()Z": "isSensitiveToWater",
        "C()V": "updateFallFlying",
        "fc()V": "serverAiStep",
        "fd()V": "pushEntities",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/phys/AABB;)V": "checkAutoSpinAttack",
        "A(Lnet/minecraft/world/entity/Entity;)V": "doPush",
        "g(Lnet/minecraft/world/entity/LivingEntity;)V": "doAutoAttackOnTouch",
        "fe()Z": "isAutoSpinAttack",
        "Y()V": "stopRiding",
        "bv()V": "rideTick",
        "a(DDDFFIZ)V": "lerpTo",
        "a(FI)V": "lerpHeadTo",
        "r(Z)V": "setJumping",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "onItemPickup",
        "a(Lnet/minecraft/world/entity/Entity;I)V": "take",
        "B(Lnet/minecraft/world/entity/Entity;)Z": "hasLineOfSight",
        "h(F)F": "getViewYRot",
        "x(F)F": "getAttackAnim",
        "bo()Z": "isPickable",
        "bp()Z": "isPushable",
        "cm()F": "getYHeadRot",
        "n(F)V": "setYHeadRot",
        "o(F)V": "setYBodyRot",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/BlockUtil$FoundRectangle;)Lnet/minecraft/world/phys/Vec3;": "getRelativePortalPosition",
        "i(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "resetForwardDirectionOfRelativePortalPosition",
        "ff()F": "getAbsorptionAmount",
        "y(F)V": "setAbsorptionAmount",
        "Q_()V": "onEnterCombat",
        "F_()V": "onLeaveCombat",
        "fg()V": "updateEffectVisibility",
        "fh()Lnet/minecraft/world/entity/HumanoidArm;": "getMainArm",
        "fi()Z": "isUsingItem",
        "fj()Lnet/minecraft/world/InteractionHand;": "getUsedItemHand",
        "D()V": "updatingUsingItem",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "updateUsingItem",
        "E()Z": "shouldTriggerItemUseEffects",
        "G()V": "updateSwimAmount",
        "c(IZ)V": "setLivingEntityFlag",
        "c(Lnet/minecraft/world/InteractionHand;)V": "startUsingItem",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "a(Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;Lnet/minecraft/world/phys/Vec3;)V": "lookAt",
        "b(Lnet/minecraft/world/item/ItemStack;I)V": "triggerItemUseEffects",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "spawnItemParticles",
        "Z_()V": "completeUsingItem",
        "fk()Lnet/minecraft/world/item/ItemStack;": "getUseItem",
        "fl()I": "getUseItemRemainingTicks",
        "fm()I": "getTicksUsingItem",
        "fn()V": "releaseUsingItem",
        "fo()V": "stopUsingItem",
        "fp()Z": "isBlocking",
        "fq()Z": "isSuppressingSlidingDownLadder",
        "fr()Z": "isFallFlying",
        "bX()Z": "isVisuallySwimming",
        "fs()I": "getFallFlyingTicks",
        "b(DDDZ)Z": "randomTeleport",
        "ft()Z": "isAffectedByPotions",
        "fu()Z": "attackable",
        "a(Lnet/minecraft/core/BlockPos;Z)V": "setRecordPlayingNearby",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "fv()Lcom/google/common/collect/ImmutableList;": "getDismountPoses",
        "g(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/phys/AABB;": "getLocalBoundsForPose",
        "cq()Z": "canChangeDimensions",
        "fw()Ljava/util/Optional;": "getSleepingPos",
        "g(Lnet/minecraft/core/BlockPos;)V": "setSleepingPos",
        "fx()V": "clearSleepingPos",
        "fy()Z": "isSleeping",
        "b(Lnet/minecraft/core/BlockPos;)V": "startSleeping",
        "a(Lnet/minecraft/core/BlockPos;)V": "setPosToBed",
        "I()Z": "checkBedExists",
        "fz()V": "stopSleeping",
        "fA()Lnet/minecraft/core/Direction;": "getBedOrientation",
        "bt()Z": "isInWall",
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "g(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "getProjectile",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "eat",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)V": "addEatEffect",
        "g(Lnet/minecraft/world/entity/EquipmentSlot;)B": "entityEventForEquipmentBreak",
        "d(Lnet/minecraft/world/entity/EquipmentSlot;)V": "broadcastBreakEvent",
        "d(Lnet/minecraft/world/InteractionHand;)V": "broadcastBreakEvent",
        "j_()Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForCulling",
        "h(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlotForItem",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/entity/SlotAccess;": "createEquipmentSlotAccess",
        "r(I)Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "dw()Z": "canFreeze",
        "ca()Z": "isCurrentlyGlowing",
        "dz()F": "getVisualRotationYInDegrees",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "fB()Z": "canDisableShield",
        "dC()F": "maxUpStep",
        "d(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)Z": "lambda$createEquipmentSlotAccess$10",
        "h(Lnet/minecraft/core/BlockPos;)V": "lambda$stopSleeping$9",
        "i(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "lambda$stopSleeping$8",
        "j(Lnet/minecraft/core/BlockPos;)Ljava/lang/Boolean;": "lambda$checkBedExists$7",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$updateFallFlying$6",
        "a(Ljava/util/List;Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "lambda$handleEquipmentChanges$5",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/ItemStack;)Z": "lambda$isHolding$4"
      }
    },
    "net/minecraft/world/entity/Marker": {
      "fields": {
        "b": "DATA_TAG",
        "c": "data"
      },
      "methods": {
        "l()V": "tick",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "o(Lnet/minecraft/world/entity/Entity;)Z": "canAddPassenger",
        "bB()Z": "couldAcceptPassenger",
        "m(Lnet/minecraft/world/entity/Entity;)V": "addPassenger",
        "l_()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "c_()Z": "isIgnoringBlockTriggers"
      }
    },
    "net/minecraft/world/entity/EntityInsentient": {
      "fields": {
        "b": "DATA_MOB_FLAGS_ID",
        "c": "MOB_FLAG_NO_AI",
        "d": "MOB_FLAG_LEFTHANDED",
        "e": "MOB_FLAG_AGGRESSIVE",
        "f": "PICKUP_REACH",
        "bS": "ITEM_PICKUP_REACH",
        "g": "MAX_WEARING_ARMOR_CHANCE",
        "bB": "MAX_PICKUP_LOOT_CHANCE",
        "bC": "MAX_ENCHANTED_ARMOR_CHANCE",
        "bD": "MAX_ENCHANTED_WEAPON_CHANCE",
        "bE": "LEASH_TAG",
        "bF": "DEFAULT_EQUIPMENT_DROP_CHANCE",
        "bG": "PRESERVE_ITEM_DROP_CHANCE",
        "bH": "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS",
        "bI": "ambientSoundTime",
        "bJ": "xpReward",
        "bK": "lookControl",
        "bL": "moveControl",
        "bM": "jumpControl",
        "bT": "bodyRotationControl",
        "bN": "navigation",
        "bO": "goalSelector",
        "bP": "targetSelector",
        "bU": "target",
        "bV": "sensing",
        "bW": "handItems",
        "bQ": "handDropChances",
        "bX": "armorItems",
        "bR": "armorDropChances",
        "bY": "canPickUpLoot",
        "bZ": "persistenceRequired",
        "ca": "pathfindingMalus",
        "cb": "lootTable",
        "cc": "lootTableSeed",
        "cd": "leashHolder",
        "ce": "delayedLeashHolderId",
        "cf": "leashInfoTag",
        "cg": "restrictCenter",
        "ch": "restrictRadius"
      },
      "methods": {
        "x()V": "registerGoals",
        "y()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createMobAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "z()Z": "shouldPassengersInheritMalus",
        "a(Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)F": "getPathfindingMalus",
        "a(Lnet/minecraft/world/level/pathfinder/BlockPathTypes;F)V": "setPathfindingMalus",
        "A()V": "onPathfindingStart",
        "C()V": "onPathfindingDone",
        "D()Lnet/minecraft/world/entity/ai/control/BodyRotationControl;": "createBodyControl",
        "E()Lnet/minecraft/world/entity/ai/control/LookControl;": "getLookControl",
        "G()Lnet/minecraft/world/entity/ai/control/MoveControl;": "getMoveControl",
        "I()Lnet/minecraft/world/entity/ai/control/JumpControl;": "getJumpControl",
        "J()Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "getNavigation",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "K()Lnet/minecraft/world/entity/ai/sensing/Sensing;": "getSensing",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "a(Lnet/minecraft/world/entity/EntityType;)Z": "canAttackType",
        "a(Lnet/minecraft/world/item/ProjectileWeaponItem;)Z": "canFireProjectileWeapon",
        "L()V": "ate",
        "a_()V": "defineSynchedData",
        "M()I": "getAmbientSoundInterval",
        "N()V": "playAmbientSound",
        "ao()V": "baseTick",
        "e(Lnet/minecraft/world/damagesource/DamageSource;)V": "playHurtSound",
        "q()V": "resetAmbientSoundTime",
        "ea()I": "getExperienceReward",
        "O()V": "spawnAnim",
        "b(B)V": "handleEntityEvent",
        "l()V": "tick",
        "P()V": "updateControlFlags",
        "e(FF)F": "tickHeadTurn",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/damagesource/DamageSource;Z)V": "dropFromLootTable",
        "ew()Lnet/minecraft/resources/ResourceLocation;": "getLootTable",
        "Q()Lnet/minecraft/resources/ResourceLocation;": "getDefaultLootTable",
        "ex()J": "getLootTableSeed",
        "z(F)V": "setZza",
        "A(F)V": "setYya",
        "B(F)V": "setXxa",
        "w(F)V": "setSpeed",
        "b_()V": "aiStep",
        "R()Lnet/minecraft/core/Vec3i;": "getPickupReach",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "i(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "equipItemIfPossible",
        "b(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlotAndDropWhenKilled",
        "e(Lnet/minecraft/world/entity/EquipmentSlot;)V": "setGuaranteedDrop",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "canReplaceCurrentItem",
        "c(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "canReplaceEqualItem",
        "j(Lnet/minecraft/world/item/ItemStack;)Z": "canHoldItem",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp",
        "h(D)Z": "removeWhenFarAway",
        "T()Z": "requiresCustomPersistence",
        "U()Z": "shouldDespawnInPeaceful",
        "du()V": "checkDespawn",
        "fc()V": "serverAiStep",
        "V()V": "sendDebugPackets",
        "W()V": "customServerAiStep",
        "X()I": "getMaxHeadXRot",
        "fC()I": "getMaxHeadYRot",
        "fD()I": "getHeadRotSpeed",
        "a(Lnet/minecraft/world/entity/Entity;FF)V": "lookAt",
        "a(FFF)F": "rotlerp",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkMobSpawnRules",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;)Z": "checkSpawnRules",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "fE()I": "getMaxSpawnClusterSize",
        "d(I)Z": "isMaxGroupSizeReached",
        "cr()I": "getMaxFallDistance",
        "bI()Ljava/lang/Iterable;": "getHandSlots",
        "bJ()Ljava/lang/Iterable;": "getArmorSlots",
        "c(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getItemBySlot",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlot",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "f(Lnet/minecraft/world/entity/EquipmentSlot;)F": "getEquipmentDropChance",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;I)Lnet/minecraft/world/item/Item;": "getEquipmentForSlot",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentEnchantments",
        "a(Lnet/minecraft/util/RandomSource;F)V": "enchantSpawnedWeapon",
        "a(Lnet/minecraft/util/RandomSource;FLnet/minecraft/world/entity/EquipmentSlot;)V": "enchantSpawnedArmor",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "fF()V": "setPersistenceRequired",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;F)V": "setDropChance",
        "fG()Z": "canPickUpLoot",
        "s(Z)V": "setCanPickUpLoot",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "fH()Z": "isPersistenceRequired",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "c(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "checkAndHandleImportantInteractions",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Mob;)V": "onOffspringSpawnedFromEgg",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "fI()Z": "isWithinRestriction",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isWithinRestriction",
        "a(Lnet/minecraft/core/BlockPos;I)V": "restrictTo",
        "fJ()Lnet/minecraft/core/BlockPos;": "getRestrictCenter",
        "fK()F": "getRestrictRadius",
        "fL()V": "clearRestriction",
        "fM()Z": "hasRestriction",
        "a(Lnet/minecraft/world/entity/EntityType;Z)Lnet/minecraft/world/entity/Mob;": "convertTo",
        "fN()V": "tickLeash",
        "a(ZZ)V": "dropLeash",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "fO()Z": "isLeashed",
        "fP()Lnet/minecraft/world/entity/Entity;": "getLeashHolder",
        "b(Lnet/minecraft/world/entity/Entity;Z)V": "setLeashedTo",
        "r(I)V": "setDelayedLeashHolderId",
        "a(Lnet/minecraft/world/entity/Entity;Z)Z": "startRiding",
        "fV()V": "restoreLeashFromSave",
        "cV()Z": "isEffectiveAi",
        "t(Z)V": "setNoAi",
        "u(Z)V": "setLeftHanded",
        "v(Z)V": "setAggressive",
        "fQ()Z": "isNoAi",
        "fR()Z": "isLeftHanded",
        "fS()Z": "isAggressive",
        "a(Z)V": "setBaby",
        "fh()Lnet/minecraft/world/entity/HumanoidArm;": "getMainArm",
        "i(Lnet/minecraft/world/entity/LivingEntity;)D": "getMeleeAttackRangeSqr",
        "j(Lnet/minecraft/world/entity/LivingEntity;)D": "getPerceivedTargetDistanceSquareForMeleeAttack",
        "k(Lnet/minecraft/world/entity/LivingEntity;)Z": "isWithinMeleeAttackRange",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "maybeDisableShield",
        "fT()Z": "isSunBurnTick",
        "c(Lnet/minecraft/tags/TagKey;)V": "jumpInLiquid",
        "fU()V": "removeFreeWill",
        "c(Ljava/util/function/Predicate;)V": "removeAllGoals",
        "cp()V": "removeAfterChangingDimensions",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult"
      }
    },
    "net/minecraft/world/entity/EnumCreatureType": {
      "fields": {
        "a": "MONSTER",
        "b": "CREATURE",
        "c": "AMBIENT",
        "d": "AXOLOTLS",
        "e": "UNDERGROUND_WATER_CREATURE",
        "f": "WATER_CREATURE",
        "g": "WATER_AMBIENT",
        "h": "MISC",
        "i": "CODEC",
        "j": "max",
        "k": "isFriendly",
        "l": "isPersistent",
        "m": "name",
        "n": "noDespawnDistance",
        "o": "despawnDistance",
        "p": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()I": "getMaxInstancesPerChunk",
        "d()Z": "isFriendly",
        "e()Z": "isPersistent",
        "f()I": "getDespawnDistance",
        "g()I": "getNoDespawnDistance",
        "h()[Lnet/minecraft/world/entity/MobCategory;": "$values"
      }
    },
    "net/minecraft/world/entity/EnumMobSpawn": {
      "fields": {
        "a": "NATURAL",
        "b": "CHUNK_GENERATION",
        "c": "SPAWNER",
        "d": "STRUCTURE",
        "e": "BREEDING",
        "f": "MOB_SUMMONED",
        "g": "JOCKEY",
        "h": "EVENT",
        "i": "CONVERSION",
        "j": "REINFORCEMENT",
        "k": "TRIGGERED",
        "l": "BUCKET",
        "m": "SPAWN_EGG",
        "n": "COMMAND",
        "o": "DISPENSER",
        "p": "PATROL",
        "q": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/MobSpawnType;": "$values"
      }
    },
    "net/minecraft/world/entity/EnumMonsterType": {
      "fields": {
        "a": "UNDEFINED",
        "b": "UNDEAD",
        "c": "ARTHROPOD",
        "d": "ILLAGER",
        "e": "WATER"
      }
    },
    "net/minecraft/world/entity/EnumMoveType": {
      "fields": {
        "a": "SELF",
        "b": "PLAYER",
        "c": "PISTON",
        "d": "SHULKER_BOX",
        "e": "SHULKER",
        "f": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/MoverType;": "$values"
      }
    },
    "net/minecraft/world/entity/IEntityAngerable": {
      "fields": {
        "a_": "TAG_ANGER_TIME",
        "b_": "TAG_ANGRY_AT"
      },
      "methods": {
        "a()I": "getRemainingPersistentAngerTime",
        "a(I)V": "setRemainingPersistentAngerTime",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "c()V": "startPersistentAngerTimer",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "addPersistentAngerSaveData",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/nbt/CompoundTag;)V": "readPersistentAngerSaveData",
        "a(Lnet/minecraft/server/level/ServerLevel;Z)V": "updatePersistentAnger",
        "a_(Lnet/minecraft/world/entity/LivingEntity;)Z": "isAngryAt",
        "a_(Lnet/minecraft/world/level/Level;)Z": "isAngryAtAllPlayers",
        "S_()Z": "isAngry",
        "a_(Lnet/minecraft/world/entity/player/Player;)V": "playerDied",
        "T_()V": "forgetCurrentTargetAndRefreshUniversalAnger",
        "O_()V": "stopBeingAngry",
        "ed()Lnet/minecraft/world/entity/LivingEntity;": "getLastHurtByMob",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setLastHurtByMob",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "setLastHurtByPlayer",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "canAttack",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget"
      }
    },
    "net/minecraft/world/entity/OwnableEntity": {
      "methods": {
        "U_()Ljava/util/UUID;": "getOwnerUUID",
        "e()Lnet/minecraft/world/level/EntityGetter;": "level",
        "I_()Lnet/minecraft/world/entity/LivingEntity;": "getOwner"
      }
    },
    "net/minecraft/world/entity/EntityCreature": {
      "fields": {
        "bS": "DEFAULT_WALK_TARGET_VALUE"
      },
      "methods": {
        "h(Lnet/minecraft/core/BlockPos;)F": "getWalkTargetValue",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;)Z": "checkSpawnRules",
        "fV()Z": "isPathFinding",
        "fN()V": "tickLeash",
        "fW()Z": "shouldStayCloseToLeashHolder",
        "fX()D": "followLeashSpeed",
        "C(F)V": "onLeashDistance"
      }
    },
    "net/minecraft/world/entity/PlayerRideable": {},
    "net/minecraft/world/entity/IJumpable": {
      "methods": {
        "b(I)V": "onPlayerJump",
        "a()Z": "canJump",
        "c(I)V": "handleStartJump",
        "b()V": "handleStopJump",
        "W_()I": "getJumpCooldown"
      }
    },
    "net/minecraft/world/entity/EntityPose": {
      "fields": {
        "a": "STANDING",
        "b": "FALL_FLYING",
        "c": "SLEEPING",
        "d": "SWIMMING",
        "e": "SPIN_ATTACK",
        "f": "CROUCHING",
        "g": "LONG_JUMPING",
        "h": "DYING",
        "i": "CROAKING",
        "j": "USING_TONGUE",
        "k": "SITTING",
        "l": "ROARING",
        "m": "SNIFFING",
        "n": "EMERGING",
        "o": "DIGGING",
        "p": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/Pose;": "$values"
      }
    },
    "net/minecraft/world/entity/PowerableMob": {
      "methods": {
        "a()Z": "isPowered"
      }
    },
    "net/minecraft/world/entity/RelativeMovement": {
      "fields": {
        "a": "X",
        "b": "Y",
        "c": "Z",
        "d": "Y_ROT",
        "e": "X_ROT",
        "f": "ALL",
        "g": "ROTATION",
        "h": "bit",
        "i": "$VALUES"
      },
      "methods": {
        "a()I": "getMask",
        "b(I)Z": "isSet",
        "a(I)Ljava/util/Set;": "unpack",
        "a(Ljava/util/Set;)I": "pack",
        "b()[Lnet/minecraft/world/entity/RelativeMovement;": "$values"
      }
    },
    "net/minecraft/world/entity/ReputationHandler": {
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/village/ReputationEventType;Lnet/minecraft/world/entity/Entity;)V": "onReputationEventFrom"
      }
    },
    "net/minecraft/world/entity/RiderShieldingMount": {
      "methods": {
        "d()D": "getRiderShieldingHeight"
      }
    },
    "net/minecraft/world/entity/ISaddleable": {
      "methods": {
        "g()Z": "isSaddleable",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "equipSaddle",
        "R_()Lnet/minecraft/sounds/SoundEvent;": "getSaddleSoundEvent",
        "i()Z": "isSaddled"
      }
    },
    "net/minecraft/world/entity/IShearable": {
      "methods": {
        "a(Lnet/minecraft/sounds/SoundSource;)V": "shear",
        "a()Z": "readyForShearing"
      }
    },
    "net/minecraft/world/entity/SlotAccess": {
      "fields": {
        "b": "NULL"
      },
      "methods": {
        "a(Lnet/minecraft/world/Container;ILjava/util/function/Predicate;)Lnet/minecraft/world/entity/SlotAccess;": "forContainer",
        "a(Lnet/minecraft/world/Container;I)Lnet/minecraft/world/entity/SlotAccess;": "forContainer",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/EquipmentSlot;Ljava/util/function/Predicate;)Lnet/minecraft/world/entity/SlotAccess;": "forEquipmentSlot",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/entity/SlotAccess;": "forEquipmentSlot",
        "a()Lnet/minecraft/world/item/ItemStack;": "get",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "set",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$forEquipmentSlot$1",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$forContainer$0"
      }
    },
    "net/minecraft/world/entity/GroupDataEntity": {},
    "net/minecraft/world/entity/EntityPositionTypes": {
      "fields": {
        "a": "DATA_BY_TYPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/SpawnPlacements$Type;Lnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/entity/SpawnPlacements$SpawnPredicate;)V": "register",
        "a(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/world/entity/SpawnPlacements$Type;": "getPlacementType",
        "b(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "getHeightmapType",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkSpawnRules"
      }
    },
    "net/minecraft/world/entity/EntityPositionTypes$Surface": {
      "fields": {
        "a": "ON_GROUND",
        "b": "IN_WATER",
        "c": "NO_RESTRICTIONS",
        "d": "IN_LAVA",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/SpawnPlacements$Type;": "$values"
      }
    },
    "net/minecraft/world/entity/EntityTameableAnimal": {
      "fields": {
        "bT": "DATA_FLAGS_ID",
        "bU": "DATA_OWNERUUID_ID",
        "bW": "orderedToSit"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "w(Z)V": "spawnTamingParticles",
        "b(B)V": "handleEntityEvent",
        "q()Z": "isTame",
        "x(Z)V": "setTame",
        "r()V": "reassessTameGoals",
        "w()Z": "isInSittingPose",
        "y(Z)V": "setInSittingPose",
        "U_()Ljava/util/UUID;": "getOwnerUUID",
        "b(Ljava/util/UUID;)V": "setOwnerUUID",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "tame",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "canAttack",
        "l(Lnet/minecraft/world/entity/LivingEntity;)Z": "isOwnedBy",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "wantsToAttack",
        "cd()Lnet/minecraft/world/scores/Team;": "getTeam",
        "p(Lnet/minecraft/world/entity/Entity;)Z": "isAlliedTo",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "fY()Z": "isOrderedToSit",
        "z(Z)V": "setOrderedToSit",
        "e()Lnet/minecraft/world/level/EntityGetter;": "level"
      }
    },
    "net/minecraft/world/entity/Targeting": {
      "methods": {
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget"
      }
    },
    "net/minecraft/world/entity/TraceableEntity": {
      "methods": {
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner"
      }
    },
    "net/minecraft/world/entity/VariantHolder": {
      "methods": {
        "a(Ljava/lang/Object;)V": "setVariant",
        "c()Ljava/lang/Object;": "getVariant"
      }
    },
    "net/minecraft/world/entity/WalkAnimationState": {
      "fields": {
        "a": "speedOld",
        "b": "speed",
        "c": "position"
      },
      "methods": {
        "a(F)V": "setSpeed",
        "a(FF)V": "update",
        "a()F": "speed",
        "b(F)F": "speed",
        "b()F": "position",
        "c(F)F": "position",
        "c()Z": "isMoving"
      }
    },
    "net/minecraft/world/entity/ai/BehaviorController": {
      "fields": {
        "a": "LOGGER",
        "b": "codec",
        "c": "SCHEDULE_UPDATE_DELAY",
        "d": "memories",
        "e": "sensors",
        "f": "availableBehaviorsByPriority",
        "g": "schedule",
        "h": "activityRequirements",
        "i": "activityMemoriesToEraseWhenStopped",
        "j": "coreActivities",
        "k": "activeActivities",
        "l": "defaultActivity",
        "m": "lastScheduleUpdate"
      },
      "methods": {
        "a(Ljava/util/Collection;Ljava/util/Collection;)Lnet/minecraft/world/entity/ai/Brain$Provider;": "provider",
        "b(Ljava/util/Collection;Ljava/util/Collection;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/DataResult;": "serializeStart",
        "j()Ljava/util/stream/Stream;": "memories",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Z": "hasMemoryValue",
        "a()V": "clearMemories",
        "b(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)V": "eraseMemory",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/lang/Object;)V": "setMemory",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/lang/Object;J)V": "setMemoryWithExpiry",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/Optional;)V": "setMemory",
        "b(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/Optional;)V": "setMemoryInternal",
        "c(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Ljava/util/Optional;": "getMemory",
        "d(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Ljava/util/Optional;": "getMemoryInternal",
        "e(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)J": "getTimeUntilExpiry",
        "b()Ljava/util/Map;": "getMemories",
        "b(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/lang/Object;)Z": "isMemoryValue",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/ai/memory/MemoryStatus;)Z": "checkMemory",
        "c()Lnet/minecraft/world/entity/schedule/Schedule;": "getSchedule",
        "a(Lnet/minecraft/world/entity/schedule/Schedule;)V": "setSchedule",
        "a(Ljava/util/Set;)V": "setCoreActivities",
        "d()Ljava/util/Set;": "getActiveActivities",
        "e()Ljava/util/List;": "getRunningBehaviors",
        "f()V": "useDefaultActivity",
        "g()Ljava/util/Optional;": "getActiveNonCoreActivity",
        "a(Lnet/minecraft/world/entity/schedule/Activity;)V": "setActiveActivityIfPossible",
        "d(Lnet/minecraft/world/entity/schedule/Activity;)V": "setActiveActivity",
        "e(Lnet/minecraft/world/entity/schedule/Activity;)V": "eraseMemoriesForOtherActivitesThan",
        "a(JJ)V": "updateActivityFromSchedule",
        "a(Ljava/util/List;)V": "setActiveActivityToFirstValid",
        "b(Lnet/minecraft/world/entity/schedule/Activity;)V": "setDefaultActivity",
        "a(Lnet/minecraft/world/entity/schedule/Activity;ILcom/google/common/collect/ImmutableList;)V": "addActivity",
        "a(Lnet/minecraft/world/entity/schedule/Activity;ILcom/google/common/collect/ImmutableList;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)V": "addActivityAndRemoveMemoryWhenStopped",
        "a(Lnet/minecraft/world/entity/schedule/Activity;Lcom/google/common/collect/ImmutableList;)V": "addActivity",
        "a(Lnet/minecraft/world/entity/schedule/Activity;Lcom/google/common/collect/ImmutableList;Ljava/util/Set;)V": "addActivityWithConditions",
        "a(Lnet/minecraft/world/entity/schedule/Activity;Lcom/google/common/collect/ImmutableList;Ljava/util/Set;Ljava/util/Set;)V": "addActivityAndRemoveMemoriesWhenStopped",
        "h()V": "removeAllBehaviors",
        "c(Lnet/minecraft/world/entity/schedule/Activity;)Z": "isActive",
        "i()Lnet/minecraft/world/entity/ai/Brain;": "copyWithoutBehaviors",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "tick",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "tickSensors",
        "k()V": "forgetOutdatedMemories",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "stopAll",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "startEachNonRunningBehavior",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "tickEachRunningBehavior",
        "f(Lnet/minecraft/world/entity/schedule/Activity;)Z": "activityRequirementsAreMet",
        "a(Ljava/lang/Object;)Z": "isEmptyCollection",
        "a(ILcom/google/common/collect/ImmutableList;)Lcom/google/common/collect/ImmutableList;": "createPriorityPairs",
        "g(Lnet/minecraft/world/entity/schedule/Activity;)Ljava/util/Set;": "lambda$addActivityAndRemoveMemoriesWhenStopped$4",
        "a(Ljava/lang/Integer;)Ljava/util/Map;": "lambda$addActivityAndRemoveMemoriesWhenStopped$3",
        "a(Ljava/lang/Object;Ljava/lang/Object;)Z": "lambda$isMemoryValue$2",
        "f(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)V": "lambda$clearMemories$1",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/world/entity/ai/Brain$MemoryValue;": "lambda$memories$0"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeBase": {
      "fields": {
        "a": "MAX_NAME_LENGTH",
        "b": "defaultValue",
        "c": "syncable",
        "d": "descriptionId"
      },
      "methods": {
        "a()D": "getDefaultValue",
        "b()Z": "isClientSyncable",
        "a(Z)Lnet/minecraft/world/entity/ai/attributes/Attribute;": "setSyncable",
        "a(D)D": "sanitizeValue",
        "c()Ljava/lang/String;": "getDescriptionId"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeModifiable": {
      "fields": {
        "a": "attribute",
        "b": "modifiersByOperation",
        "c": "modifierById",
        "d": "permanentModifiers",
        "e": "baseValue",
        "f": "dirty",
        "g": "cachedValue",
        "h": "onDirty"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/attributes/Attribute;": "getAttribute",
        "b()D": "getBaseValue",
        "a(D)V": "setBaseValue",
        "a(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;)Ljava/util/Set;": "getModifiers",
        "c()Ljava/util/Set;": "getModifiers",
        "a(Ljava/util/UUID;)Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;": "getModifier",
        "a(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)Z": "hasModifier",
        "e(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)V": "addModifier",
        "b(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)V": "addTransientModifier",
        "c(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)V": "addPermanentModifier",
        "d()V": "setDirty",
        "d(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)V": "removeModifier",
        "b(Ljava/util/UUID;)V": "removeModifier",
        "c(Ljava/util/UUID;)Z": "removePermanentModifier",
        "e()V": "removeModifiers",
        "f()D": "getValue",
        "h()D": "calculateValue",
        "b(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;)Ljava/util/Collection;": "getModifiersOrEmpty",
        "a(Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;)V": "replaceFrom",
        "g()Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;Ljava/util/Set;)V": "lambda$replaceFrom$1",
        "c(Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;)Ljava/util/Set;": "lambda$getModifiers$0"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeMapBase": {
      "fields": {
        "a": "LOGGER",
        "b": "attributes",
        "c": "dirtyAttributes",
        "d": "supplier"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;)V": "onAttributeModified",
        "a()Ljava/util/Set;": "getDirtyAttributes",
        "b()Ljava/util/Collection;": "getSyncableAttributes",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "getInstance",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "getInstance",
        "b(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Z": "hasAttribute",
        "b(Lnet/minecraft/core/Holder;)Z": "hasAttribute",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;Ljava/util/UUID;)Z": "hasModifier",
        "a(Lnet/minecraft/core/Holder;Ljava/util/UUID;)Z": "hasModifier",
        "c(Lnet/minecraft/world/entity/ai/attributes/Attribute;)D": "getValue",
        "d(Lnet/minecraft/world/entity/ai/attributes/Attribute;)D": "getBaseValue",
        "b(Lnet/minecraft/world/entity/ai/attributes/Attribute;Ljava/util/UUID;)D": "getModifierValue",
        "b(Lnet/minecraft/core/Holder;Ljava/util/UUID;)D": "getModifierValue",
        "a(Lcom/google/common/collect/Multimap;)V": "removeAttributeModifiers",
        "b(Lcom/google/common/collect/Multimap;)V": "addTransientAttributeModifiers",
        "a(Lnet/minecraft/world/entity/ai/attributes/AttributeMap;)V": "assignValues",
        "c()Lnet/minecraft/nbt/ListTag;": "save",
        "a(Lnet/minecraft/nbt/ListTag;)V": "load",
        "a(Ljava/lang/String;)V": "lambda$load$6",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/entity/ai/attributes/Attribute;)V": "lambda$load$5",
        "b(Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;)V": "lambda$assignValues$4",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;)V": "lambda$addTransientAttributeModifiers$3",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;Ljava/util/Collection;)V": "lambda$removeAttributeModifiers$2",
        "e(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "lambda$getInstance$1",
        "c(Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;)Z": "lambda$getSyncableAttributes$0"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeModifier": {
      "fields": {
        "a": "LOGGER",
        "b": "amount",
        "c": "operation",
        "d": "nameGetter",
        "e": "id"
      },
      "methods": {
        "a()Ljava/util/UUID;": "getId",
        "b()Ljava/lang/String;": "getName",
        "c()Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;": "getOperation",
        "d()D": "getAmount",
        "e()Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;": "load",
        "a(Ljava/lang/String;)Ljava/lang/String;": "lambda$new$1",
        "b(Ljava/lang/String;)Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeModifier$Operation": {
      "fields": {
        "a": "ADDITION",
        "b": "MULTIPLY_BASE",
        "c": "MULTIPLY_TOTAL",
        "d": "OPERATIONS",
        "e": "value",
        "f": "$VALUES"
      },
      "methods": {
        "a()I": "toValue",
        "a(I)Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;": "fromValue",
        "b()[Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeProvider": {
      "fields": {
        "a": "instances"
      },
      "methods": {
        "d(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "getAttributeInstance",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;)D": "getValue",
        "b(Lnet/minecraft/world/entity/ai/attributes/Attribute;)D": "getBaseValue",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;Ljava/util/UUID;)D": "getModifierValue",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "createInstance",
        "a()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "builder",
        "c(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Z": "hasAttribute",
        "b(Lnet/minecraft/world/entity/ai/attributes/Attribute;Ljava/util/UUID;)Z": "hasModifier"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeProvider$Builder": {
      "fields": {
        "a": "builder",
        "b": "instanceFrozen"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;": "create",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "add",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;D)Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "add",
        "a()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier;": "build",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;Lnet/minecraft/world/entity/ai/attributes/AttributeInstance;)V": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/attributes/GenericAttributes": {
      "fields": {
        "a": "MAX_HEALTH",
        "b": "FOLLOW_RANGE",
        "c": "KNOCKBACK_RESISTANCE",
        "d": "MOVEMENT_SPEED",
        "e": "FLYING_SPEED",
        "f": "ATTACK_DAMAGE",
        "g": "ATTACK_KNOCKBACK",
        "h": "ATTACK_SPEED",
        "i": "ARMOR",
        "j": "ARMOR_TOUGHNESS",
        "k": "LUCK",
        "l": "SPAWN_REINFORCEMENTS_CHANCE",
        "m": "JUMP_STRENGTH"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/entity/ai/attributes/Attribute;)Lnet/minecraft/world/entity/ai/attributes/Attribute;": "register"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeDefaults": {
      "fields": {
        "a": "LOGGER",
        "b": "SUPPLIERS"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier;": "getSupplier",
        "b(Lnet/minecraft/world/entity/EntityType;)Z": "hasSupplier",
        "a()V": "validate",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "lambda$validate$2",
        "c(Lnet/minecraft/world/entity/EntityType;)Z": "lambda$validate$1",
        "d(Lnet/minecraft/world/entity/EntityType;)Z": "lambda$validate$0"
      }
    },
    "net/minecraft/world/entity/ai/attributes/AttributeRanged": {
      "fields": {
        "b": "minValue",
        "c": "maxValue"
      },
      "methods": {
        "d()D": "getMinValue",
        "e()D": "getMaxValue",
        "a(D)D": "sanitizeValue"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorFindPosition": {
      "fields": {
        "a": "SCAN_RANGE"
      },
      "methods": {
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ZLjava/util/Optional;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ZLjava/util/Optional;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/ai/behavior/OneShot;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$10",
        "a(Lnet/minecraft/world/entity/ai/behavior/OneShot;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$9",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ZLorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;Ljava/util/function/Predicate;Ljava/util/Optional;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$8",
        "a(ZLorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;Ljava/util/function/Predicate;Ljava/util/Optional;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$7",
        "a(ZLorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/Optional;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$6",
        "a(Lnet/minecraft/server/level/ServerLevel;JJ)Lnet/minecraft/world/entity/ai/behavior/AcquirePoi$JitteredLinearRetry;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiManager;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Ljava/util/Optional;Lnet/minecraft/world/entity/PathfinderMob;Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;Lnet/minecraft/core/Holder;)V": "lambda$create$4",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;Ljava/lang/Byte;)V": "lambda$create$3",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;Lnet/minecraft/core/BlockPos;)Z": "lambda$create$2",
        "a(Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;JLnet/minecraft/core/BlockPos;)Z": "lambda$create$1",
        "a(JLit/unimi/dsi/fastutil/longs/Long2ObjectMap$Entry;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorMakeLoveAnimal": {
      "fields": {
        "c": "BREED_RANGE",
        "d": "MIN_DURATION",
        "e": "MAX_DURATION",
        "f": "partnerType",
        "g": "speedModifier",
        "h": "spawnChildAtTime"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;J)V": "start",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;J)V": "stop",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Lnet/minecraft/world/entity/animal/Animal;": "getBreedTarget",
        "b(Lnet/minecraft/world/entity/animal/Animal;)Z": "hasBreedTargetOfRightType",
        "c(Lnet/minecraft/world/entity/animal/Animal;)Ljava/util/Optional;": "findValidBreedPartner",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/world/entity/animal/Animal;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$findValidBreedPartner$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/AnimalPanic": {
      "fields": {
        "c": "PANIC_MIN_DURATION",
        "d": "PANIC_MAX_DURATION",
        "e": "PANIC_DISTANCE_HORIZONTAL",
        "f": "PANIC_DISTANCE_VERTICAL",
        "g": "DEFAULT_SHOULD_PANIC_PREDICATE",
        "h": "speedMultiplier",
        "i": "shouldPanic"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "tick",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/phys/Vec3;": "getPanicPos",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/entity/Entity;)Ljava/util/Optional;": "lookForWater",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$lookForWater$3",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$lookForWater$2",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$lookForWater$1",
        "a(Lnet/minecraft/world/entity/PathfinderMob;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorCareer": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorFollowAdult": {
      "methods": {
        "a(Lnet/minecraft/util/valueproviders/UniformInt;F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/util/valueproviders/UniformInt;Ljava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorRetreat": {
      "methods": {
        "a(IF)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(IFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;IFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPacify": {
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;I)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Ljava/lang/String;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/Behavior": {
      "fields": {
        "a": "DEFAULT_DURATION",
        "b": "entryCondition",
        "c": "status",
        "d": "endTimestamp",
        "e": "minDuration",
        "f": "maxDuration"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/Behavior$Status;": "getStatus",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "tryStart",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "f(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tickOrStop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "g(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "doStop",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "a(J)Z": "timedOut",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "b()Ljava/lang/String;": "debugString",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasRequiredMemories"
      }
    },
    "net/minecraft/world/entity/ai/behavior/Behavior$Status": {
      "fields": {
        "a": "STOPPED",
        "b": "RUNNING",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/behavior/Behavior$Status;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorControl": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/Behavior$Status;": "getStatus",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "tryStart",
        "f(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tickOrStop",
        "g(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "doStop",
        "b()Ljava/lang/String;": "debugString"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorUtil": {
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;F)V": "lockGazeAndWalkToEachOther",
        "a(Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/world/entity/LivingEntity;)Z": "entityIsVisible",
        "a(Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/EntityType;)Z": "targetIsValid",
        "a(Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/function/Predicate;)Z": "targetIsValid",
        "c(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)V": "lookAtEachOther",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)V": "lookAtEntity",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;F)V": "setWalkAndLookTargetMemoriesToEachOther",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;FI)V": "setWalkAndLookTargetMemories",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/core/BlockPos;FI)V": "setWalkAndLookTargetMemories",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/behavior/PositionTracker;FI)V": "setWalkAndLookTargetMemories",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/phys/Vec3;)V": "throwItem",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;F)V": "throwItem",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/SectionPos;I)Lnet/minecraft/core/SectionPos;": "findSectionClosestToVillage",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/LivingEntity;I)Z": "isWithinAttackRange",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;D)Z": "isOtherTargetMuchFurtherAwayThanCurrentAttackTarget",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "canSee",
        "a(Lnet/minecraft/world/entity/LivingEntity;Ljava/util/Optional;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/LivingEntity;": "getNearestTarget",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/LivingEntity;": "getTargetNearestMe",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Ljava/util/Optional;": "getLivingEntityFromUUIDMemory",
        "a(Lnet/minecraft/world/entity/PathfinderMob;II)Lnet/minecraft/world/phys/Vec3;": "getRandomSwimmablePos",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "isBreeding"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorTarget": {
      "fields": {
        "a": "blockPos",
        "b": "centerPosition"
      },
      "methods": {
        "a()Lnet/minecraft/world/phys/Vec3;": "currentPosition",
        "b()Lnet/minecraft/core/BlockPos;": "currentBlockPosition",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "isVisibleBy"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorCelebrate": {
      "fields": {
        "c": "currentRaid"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "a(Lnet/minecraft/world/item/DyeColor;I)Lnet/minecraft/world/item/ItemStack;": "getFirework",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorExpirableMemory": {
      "methods": {
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/util/valueproviders/UniformInt;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/function/Predicate;Lnet/minecraft/util/valueproviders/UniformInt;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/util/valueproviders/UniformInt;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/util/valueproviders/UniformInt;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/CountDownCooldownTicks": {
      "fields": {
        "c": "cooldownTicks"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "getCooldownTickMemory",
        "a(J)Z": "timedOut",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop"
      }
    },
    "net/minecraft/world/entity/ai/behavior/Croak": {
      "fields": {
        "c": "CROAK_TICKS",
        "d": "TIME_OUT_DURATION",
        "e": "croakCounter"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorCrossbowAttack": {
      "fields": {
        "c": "TIMEOUT",
        "d": "attackDelay",
        "e": "crossbowState"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "tick",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "stop",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/LivingEntity;)V": "crossbowAttack",
        "b(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/LivingEntity;)V": "lookAtTarget",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/LivingEntity;": "getAttackTarget",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorCrossbowAttack$BowState": {
      "fields": {
        "a": "UNCHARGED",
        "b": "CHARGING",
        "c": "CHARGED",
        "d": "READY_TO_ATTACK",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/behavior/CrossbowAttack$CrossbowState;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStopRiding": {
      "methods": {
        "a(ILjava/util/function/BiPredicate;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)Z": "isVehicleValid",
        "a(ILjava/util/function/BiPredicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILjava/util/function/BiPredicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILjava/util/function/BiPredicate;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorNop": {
      "fields": {
        "a": "minDuration",
        "b": "maxDuration",
        "c": "status",
        "d": "endTimestamp"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/Behavior$Status;": "getStatus",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "tryStart",
        "f(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tickOrStop",
        "g(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "doStop",
        "b()Ljava/lang/String;": "debugString"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPositionEntity": {
      "fields": {
        "a": "entity",
        "b": "trackEyeHeight"
      },
      "methods": {
        "a()Lnet/minecraft/world/phys/Vec3;": "currentPosition",
        "b()Lnet/minecraft/core/BlockPos;": "currentBlockPosition",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "isVisibleBy",
        "c()Lnet/minecraft/world/entity/Entity;": "getEntity"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorRemoveMemory": {
      "methods": {
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/FollowTemptation": {
      "fields": {
        "c": "TEMPTATION_COOLDOWN",
        "d": "CLOSE_ENOUGH_DIST",
        "e": "speedModifier",
        "f": "closeEnoughDistance"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/PathfinderMob;)F": "getSpeedModifier",
        "b(Lnet/minecraft/world/entity/PathfinderMob;)Ljava/util/Optional;": "getTemptingPlayer",
        "a(J)Z": "timedOut",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "c()Lcom/google/common/collect/ImmutableMap;": "lambda$new$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Double;": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorGate": {
      "fields": {
        "a": "entryCondition",
        "b": "exitErasedMemories",
        "c": "orderPolicy",
        "d": "runningPolicy",
        "e": "behaviors",
        "f": "status"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/Behavior$Status;": "getStatus",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasRequiredMemories",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "tryStart",
        "f(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tickOrStop",
        "g(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "doStop",
        "b()Ljava/lang/String;": "debugString",
        "a(Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;)Z": "lambda$toString$6",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;JLnet/minecraft/world/entity/ai/behavior/BehaviorControl;)V": "lambda$doStop$5",
        "b(Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;)Z": "lambda$doStop$4",
        "c(Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;)Z": "lambda$tickOrStop$3",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;JLnet/minecraft/world/entity/ai/behavior/BehaviorControl;)V": "lambda$tickOrStop$2",
        "d(Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;)Z": "lambda$tickOrStop$1",
        "a(Lcom/mojang/datafixers/util/Pair;)V": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorGate$Order": {
      "fields": {
        "a": "ORDERED",
        "b": "SHUFFLED",
        "c": "consumer",
        "d": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/behavior/ShufflingList;)V": "apply",
        "b(Lnet/minecraft/world/entity/ai/behavior/ShufflingList;)V": "lambda$static$0",
        "a()[Lnet/minecraft/world/entity/ai/behavior/GateBehavior$OrderPolicy;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorGate$Execution": {
      "fields": {
        "a": "RUN_ONE",
        "b": "TRY_ALL",
        "c": "$VALUES"
      },
      "methods": {
        "a(Ljava/util/stream/Stream;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "apply",
        "a()[Lnet/minecraft/world/entity/ai/behavior/GateBehavior$RunningPolicy;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorVillageHeroGift": {
      "fields": {
        "c": "THROW_GIFT_AT_DISTANCE",
        "d": "MIN_TIME_BETWEEN_GIFTS",
        "e": "MAX_TIME_BETWEEN_GIFTS",
        "f": "TIME_TO_DELAY_FOR_HEAD_TO_FINISH_TURNING",
        "g": "GIFTS",
        "h": "SPEED_MODIFIER",
        "i": "timeUntilNextGift",
        "j": "giftGivenDuringThisRun",
        "k": "timeSinceStart"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/LivingEntity;)V": "throwGift",
        "a(Lnet/minecraft/world/entity/npc/Villager;)Ljava/util/List;": "getItemToThrow",
        "b(Lnet/minecraft/world/entity/npc/Villager;)Z": "isHeroVisible",
        "c(Lnet/minecraft/world/entity/npc/Villager;)Ljava/util/Optional;": "getNearestTargetableHero",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "isHero",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/player/Player;)Z": "isWithinThrowingDistance",
        "a(Lnet/minecraft/server/level/ServerLevel;)I": "calculateTimeUntilNextGift",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/GoAndGiveItemsToTarget": {
      "fields": {
        "c": "CLOSE_ENOUGH_DISTANCE_TO_TARGET",
        "d": "ITEM_PICKUP_COOLDOWN_AFTER_THROWING",
        "e": "targetPositionGetter",
        "f": "speedModifier"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "a(Lnet/minecraft/world/entity/ai/behavior/PositionTracker;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/server/level/ServerPlayer;)V": "triggerDropItemOnBlock",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "canThrowItemToTarget",
        "a(Lnet/minecraft/world/entity/ai/behavior/PositionTracker;)Lnet/minecraft/world/phys/Vec3;": "getThrowPosition",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/phys/Vec3;)V": "throwItem",
        "b(Lnet/minecraft/world/entity/ai/behavior/PositionTracker;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$tick$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/behavior/PositionTracker;)V": "lambda$start$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorNearestVillage": {
      "methods": {
        "a(FI)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(FILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(FILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiManager;Lnet/minecraft/core/BlockPos;)D": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPotentialJobSite": {
      "fields": {
        "d": "TICKS_UNTIL_TIMEOUT",
        "c": "speedModifier"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/GlobalPos;)V": "lambda$stop$2",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$stop$1",
        "a(Lnet/minecraft/world/entity/schedule/Activity;)Ljava/lang/Boolean;": "lambda$checkExtraStartConditions$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/GoToTargetLocation": {
      "methods": {
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "getNearbyPos",
        "a(Lnet/minecraft/util/RandomSource;)I": "getRandomOffset",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;IF)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;IFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;IFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;IFLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorFindAdmirableItem": {
      "methods": {
        "a(FZI)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Predicate;FZI)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorFarm": {
      "fields": {
        "d": "HARVEST_DURATION",
        "c": "SPEED_MODIFIER",
        "e": "aboveFarmlandPos",
        "f": "nextOkStartTime",
        "g": "timeWorkedSoFar",
        "h": "validFarmlandAroundVillager"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/core/BlockPos;": "getValidFarmland",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;)Z": "validPos",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStrollInside": {
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$6",
        "a(FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/core/BlockPos;)V": "lambda$create$3",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "lambda$create$2",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorInteract": {
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;ILnet/minecraft/world/entity/ai/memory/MemoryModuleType;FI)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "of",
        "a(Lnet/minecraft/world/entity/EntityType;ILjava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FI)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "of",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/function/Predicate;Ljava/util/function/Predicate;IFILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$of$7",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/Predicate;Ljava/util/function/Predicate;IFILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$of$6",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/Predicate;Ljava/util/function/Predicate;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$of$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/world/entity/LivingEntity;)V": "lambda$of$4",
        "a(Lnet/minecraft/world/entity/LivingEntity;ILjava/util/function/Predicate;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$of$3",
        "a(Lnet/minecraft/world/entity/EntityType;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$of$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$of$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$of$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorInteractDoor": {
      "fields": {
        "a": "COOLDOWN_BEFORE_RERUNNING_IN_SAME_NODE",
        "b": "SKIP_CLOSING_DOOR_IF_FURTHER_AWAY_THAN",
        "c": "MAX_DISTANCE_TO_HOLD_DOOR_OPEN_FOR_OTHER_MOBS"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;Ljava/util/Set;Ljava/util/Optional;)V": "closeDoorsThatIHaveOpenedOrPassedThrough",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/core/BlockPos;Ljava/util/Optional;)Z": "areOtherMobsComingThroughDoor",
        "a(Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/core/BlockPos;)Z": "isMobComingThroughDoor",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/core/GlobalPos;)Z": "isDoorTooFarAway",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/Optional;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "rememberDoorToClose"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorBedJump": {
      "fields": {
        "c": "MAX_TIME_TO_REACH_BED",
        "d": "MIN_JUMPS",
        "e": "MAX_JUMPS",
        "f": "COOLDOWN_BETWEEN_JUMPS",
        "g": "speedModifier",
        "h": "targetBed",
        "i": "remainingTimeToReachBed",
        "j": "remainingJumps",
        "k": "remainingCooldownUntilNextJump"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "start",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "a(J)Z": "timedOut",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "tick",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)V": "startWalkingTowardsBed",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "nearBed",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "onOrOverBed",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "onBedSurface",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "isBed",
        "a(Lnet/minecraft/world/entity/Mob;)Ljava/util/Optional;": "getNearestBed",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "tiredOfWalking",
        "f(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "tiredOfJumping",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)V": "lambda$start$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorHome": {
      "methods": {
        "a(IFI)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(IIFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$10",
        "a(IILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$9",
        "a(IILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$8",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/core/BlockPos;)V": "lambda$create$7",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Ljava/util/Optional;": "lambda$create$6",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;I)Ljava/util/Optional;": "lambda$create$5",
        "a(Lnet/minecraft/core/BlockPos;)Z": "lambda$create$4",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/LivingEntity;ILnet/minecraft/core/BlockPos;)Z": "lambda$create$2",
        "b(Lnet/minecraft/core/BlockPos;)Z": "lambda$create$1",
        "b(Lnet/minecraft/core/Holder;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/LongJumpMidJump": {
      "fields": {
        "c": "TIME_OUT_DURATION",
        "d": "timeBetweenLongJumps",
        "e": "landingSound"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/LongJumpToPreferredBlock": {
      "fields": {
        "m": "preferredBlockTag",
        "n": "preferredBlocksChance",
        "o": "notPrefferedJumpCandidates",
        "p": "currentlyWantingPreferredOnes"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "start",
        "a(Lnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "getJumpCandidate",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/LongJumpToRandomPos": {
      "fields": {
        "c": "FIND_JUMP_TRIES",
        "m": "PREPARE_JUMP_DURATION",
        "d": "MIN_PATHFIND_DISTANCE_TO_VALID_JUMP",
        "n": "TIME_OUT_DURATION",
        "o": "ALLOWED_ANGLES",
        "p": "timeBetweenLongJumps",
        "e": "maxLongJumpHeight",
        "f": "maxLongJumpWidth",
        "g": "maxJumpVelocity",
        "h": "jumpCandidates",
        "i": "initialPosition",
        "j": "chosenJump",
        "k": "findJumpTries",
        "l": "prepareJumpStart",
        "q": "getJumpSound",
        "r": "acceptableLandingSpot"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)Z": "defaultAcceptableLandingSpot",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "checkExtraStartConditions",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "pickCandidate",
        "a(Lnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "getJumpCandidate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)Z": "isAcceptableLandingPosition",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "calculateOptimalJumpVector",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/phys/Vec3;I)Lnet/minecraft/world/phys/Vec3;": "calculateJumpVectorForAngle",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/EntityDimensions;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z": "isClearTransition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/ai/behavior/LongJumpToRandomPos$PossibleJump;": "lambda$start$1",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Z": "lambda$start$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorInteractPlayer": {
      "fields": {
        "c": "speedModifier"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "a(J)Z": "timedOut",
        "a(Lnet/minecraft/world/entity/npc/Villager;)V": "followPlayer",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorLook": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/ai/behavior/PositionTracker;)V": "lambda$tick$1",
        "b(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/ai/behavior/PositionTracker;)Z": "lambda$canStillUse$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorAttack": {
      "methods": {
        "a(I)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/Mob;)Z": "isHoldingUsableProjectileWeapon",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/item/ItemStack;)Z": "lambda$isHoldingUsableProjectileWeapon$3",
        "a(ILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStartRiding": {
      "fields": {
        "a": "CLOSE_ENOUGH_TO_START_RIDING_DIST"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorOutside": {
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getOutdoorPosition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/core/BlockPos;)Z": "hasNoBlocksAbove",
        "a(FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/world/phys/Vec3;)V": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehavorMove": {
      "fields": {
        "c": "MAX_COOLDOWN_BEFORE_RETRYING",
        "d": "remainingCooldown",
        "f": "lastTargetPos",
        "g": "speedModifier"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "start",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "tick",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/ai/memory/WalkTarget;J)Z": "tryComputePath",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/ai/memory/WalkTarget;)Z": "reachedTarget",
        "a(Lnet/minecraft/world/entity/ai/memory/WalkTarget;)Z": "isWalkTargetSpectator",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/OneShot": {
      "fields": {
        "a": "status"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/Behavior$Status;": "getStatus",
        "e(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "tryStart",
        "f(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tickOrStop",
        "g(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "doStop",
        "b()Ljava/lang/String;": "debugString"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPlay": {
      "fields": {
        "a": "MAX_FLEE_XZ_DIST",
        "b": "MAX_FLEE_Y_DIST",
        "c": "FLEE_SPEED_MODIFIER",
        "d": "CHASE_SPEED_MODIFIER",
        "e": "MAX_CHASERS_PER_TARGET",
        "f": "AVERAGE_WAIT_TIME_BETWEEN_RUNS"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/LivingEntity;)V": "chaseKid",
        "a(Ljava/util/List;)Ljava/util/Optional;": "findSomeoneBeingChased",
        "b(Ljava/util/List;)Ljava/util/Map;": "checkHowManyChasersEachFriendHas",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/LivingEntity;": "whoAreYouChasing",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "isChasingSomeone",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isFriendChasingMe",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$isFriendChasingMe$8",
        "a(Ljava/util/Map;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$checkHowManyChasersEachFriendHas$7",
        "a(Lnet/minecraft/world/entity/LivingEntity;Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$checkHowManyChasersEachFriendHas$6",
        "a(Ljava/util/Map$Entry;)Z": "lambda$findSomeoneBeingChased$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$2",
        "b(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorBetterJob": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/npc/Villager;)Lnet/minecraft/world/entity/npc/Villager;": "selectWinner",
        "a(Lnet/minecraft/core/GlobalPos;Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/npc/Villager;)Z": "competesForSameJobsite",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/npc/VillagerProfession;)Z": "hasMatchingProfession",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$6",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/core/GlobalPos;Lnet/minecraft/core/Holder;)V": "lambda$create$3",
        "b(Lnet/minecraft/core/GlobalPos;Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/npc/Villager;)Z": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/npc/Villager;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPosition": {
      "methods": {
        "a()Lnet/minecraft/world/phys/Vec3;": "currentPosition",
        "b()Lnet/minecraft/core/BlockPos;": "currentBlockPosition",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "isVisibleBy"
      }
    },
    "net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget": {
      "fields": {
        "c": "TIME_OUT_DURATION",
        "d": "getCooldownOnFail",
        "e": "minRamDistance",
        "f": "maxRamDistance",
        "g": "walkSpeed",
        "h": "ramTargeting",
        "i": "ramPrepareTime",
        "j": "getPrepareRamSound",
        "k": "reachedRamPositionTimestamp",
        "l": "ramCandidate"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "start",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "canStillUse",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)V": "tick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "getEdgeOfBlock",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "calculateRammingStartPosition",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "isWalkableBlock",
        "b(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/world/entity/LivingEntity;)V": "chooseRamPosition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/RamTarget": {
      "fields": {
        "c": "TIME_OUT_DURATION",
        "d": "RAM_SPEED_FORCE_FACTOR",
        "e": "getTimeBetweenRams",
        "f": "ramTargeting",
        "g": "speed",
        "h": "getKnockbackForce",
        "i": "ramDirection",
        "j": "getImpactSound",
        "k": "getHornBreakSound"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/goat/Goat;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/goat/Goat;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/goat/Goat;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/goat/Goat;J)V": "tick",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/goat/Goat;)Z": "hasRammedHornBreakingBlock",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/goat/Goat;)V": "finishRam",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/RandomLookAround": {
      "fields": {
        "c": "interval",
        "d": "maxYaw",
        "e": "minPitch",
        "f": "pitchRange"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "start",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStrollRandomUnconstrained": {
      "fields": {
        "a": "MAX_XZ_DIST",
        "b": "MAX_Y_DIST",
        "c": "SWIM_XY_DISTANCE_TIERS"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "stroll",
        "a(FZ)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "stroll",
        "a(FII)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "stroll",
        "b(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "fly",
        "c(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "swim",
        "a(FLjava/util/function/Function;Ljava/util/function/Predicate;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "strollFlyOrSwim",
        "a(Lnet/minecraft/world/entity/PathfinderMob;)Lnet/minecraft/world/phys/Vec3;": "getTargetSwimPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;II)Lnet/minecraft/world/phys/Vec3;": "getTargetFlyPos",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Function;FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$strollFlyOrSwim$10",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Function;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$strollFlyOrSwim$9",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$strollFlyOrSwim$8",
        "a(FLnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/entity/ai/memory/WalkTarget;": "lambda$strollFlyOrSwim$7",
        "b(Lnet/minecraft/world/entity/PathfinderMob;)Z": "lambda$fly$6",
        "c(Lnet/minecraft/world/entity/PathfinderMob;)Lnet/minecraft/world/phys/Vec3;": "lambda$fly$5",
        "d(Lnet/minecraft/world/entity/PathfinderMob;)Z": "lambda$stroll$4",
        "a(IILnet/minecraft/world/entity/PathfinderMob;)Lnet/minecraft/world/phys/Vec3;": "lambda$stroll$3",
        "e(Lnet/minecraft/world/entity/PathfinderMob;)Z": "lambda$stroll$2",
        "f(Lnet/minecraft/world/entity/PathfinderMob;)Z": "lambda$stroll$1",
        "g(Lnet/minecraft/world/entity/PathfinderMob;)Lnet/minecraft/world/phys/Vec3;": "lambda$stroll$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorBellAlert": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorProfession": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorRaidReset": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorBellRing": {
      "fields": {
        "b": "BELL_RING_CHANCE",
        "a": "RING_BELL_FROM_DISTANCE"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorGateSingle": {},
    "net/minecraft/world/entity/ai/behavior/BehaviorWalkHome": {
      "fields": {
        "a": "CACHE_TIMEOUT",
        "b": "BATCH_SIZE",
        "c": "RATE",
        "d": "OK_DISTANCE_SQR"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2LongMap;FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$6",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2LongMap;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$5",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2LongMap;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$4",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;Lit/unimi/dsi/fastutil/longs/Long2LongMap$Entry;)Z": "lambda$create$3",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$create$2",
        "a(Lit/unimi/dsi/fastutil/longs/Long2LongMap;Lorg/apache/commons/lang3/mutable/MutableInt;Lorg/apache/commons/lang3/mutable/MutableLong;Lnet/minecraft/core/BlockPos;)Z": "lambda$create$1",
        "b(Lnet/minecraft/core/Holder;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorLookTarget": {
      "methods": {
        "a(Lnet/minecraft/world/entity/MobCategory;F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/EntityType;F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Ljava/util/function/Predicate;F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Ljava/util/function/Predicate;FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$6",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/Predicate;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/Predicate;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/LivingEntity;FLnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/SetEntityLookTargetSometimes": {
      "methods": {
        "a(FLnet/minecraft/util/valueproviders/UniformInt;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/EntityType;FLnet/minecraft/util/valueproviders/UniformInt;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(FLnet/minecraft/util/valueproviders/UniformInt;Ljava/util/function/Predicate;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Predicate;FLnet/minecraft/world/entity/ai/behavior/SetEntityLookTargetSometimes$Ticker;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/Predicate;FLnet/minecraft/world/entity/ai/behavior/SetEntityLookTargetSometimes$Ticker;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/Predicate;FLnet/minecraft/world/entity/ai/behavior/SetEntityLookTargetSometimes$Ticker;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/LivingEntity;FLnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorHide": {
      "fields": {
        "a": "HIDE_TIMEOUT"
      },
      "methods": {
        "a(II)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lorg/apache/commons/lang3/mutable/MutableInt;IILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lorg/apache/commons/lang3/mutable/MutableInt;IILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lorg/apache/commons/lang3/mutable/MutableInt;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorLookInteract": {
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;I)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(ILnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;ILnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorRaid": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorWalkAway": {
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FIZ)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "pos",
        "b(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FIZ)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "entity",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FIZLjava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ZLjava/util/function/Function;IFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ZLjava/util/function/Function;IFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ZLjava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;IFLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorWalkAwayOutOfRange": {
      "fields": {
        "a": "PROJECTILE_ATTACK_RANGE_BUFFER"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/Function;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "lambda$create$1",
        "a(FLnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorWalkAwayBlock": {
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FIII)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;IIFILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILnet/minecraft/world/entity/ai/memory/MemoryModuleType;IFILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/ai/memory/MemoryModuleType;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorLookWalk": {
      "methods": {
        "a(FI)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Function;I)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Function;ILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$4",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/Function;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$3",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/Function;ILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$2",
        "a(FLnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorTradePlayer": {
      "fields": {
        "c": "MAX_LOOK_TIME",
        "d": "STARTING_LOOK_TIME",
        "e": "playerItemStack",
        "f": "displayItems",
        "g": "cycleCounter",
        "h": "displayIndex",
        "i": "lookTime"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/npc/Villager;)V": "findItemsToDisplay",
        "a(Lnet/minecraft/world/entity/npc/Villager;)V": "displayFirstItem",
        "b(Lnet/minecraft/world/entity/npc/Villager;)V": "updateDisplayItems",
        "a(Lnet/minecraft/world/item/trading/MerchantOffer;)Z": "playerItemStackMatchesCostOfOffer",
        "c(Lnet/minecraft/world/entity/npc/Villager;)V": "clearHeldItem",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/item/ItemStack;)V": "displayAsHeldItem",
        "d(Lnet/minecraft/world/entity/npc/Villager;)Lnet/minecraft/world/entity/LivingEntity;": "lookAtTarget",
        "e(Lnet/minecraft/world/entity/npc/Villager;)V": "displayCyclingItems",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/ShufflingList": {
      "fields": {
        "a": "entries",
        "b": "random"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Ljava/lang/Object;I)Lnet/minecraft/world/entity/ai/behavior/ShufflingList;": "add",
        "a()Lnet/minecraft/world/entity/ai/behavior/ShufflingList;": "shuffle",
        "b()Ljava/util/stream/Stream;": "stream",
        "a(Lnet/minecraft/world/entity/ai/behavior/ShufflingList$WeightedEntry;)V": "lambda$shuffle$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/ShufflingList;)Ljava/util/List;": "lambda$codec$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorSleep": {
      "fields": {
        "c": "COOLDOWN_AFTER_BEING_WOKEN",
        "d": "nextOkStartTime"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(J)Z": "timedOut",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorBell": {
      "fields": {
        "a": "SPEED_MODIFIER"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorAttackTargetSet": {
      "methods": {
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorCelebrateDeath": {
      "methods": {
        "a(ILjava/util/function/BiPredicate;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/BiPredicate;ILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/BiPredicate;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/BiPredicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/StayCloseToTarget": {
      "methods": {
        "a(Ljava/util/function/Function;Ljava/util/function/Predicate;IIF)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Function;Ljava/util/function/Predicate;IFILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Ljava/util/function/Function;Ljava/util/function/Predicate;IFILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Ljava/util/function/Function;Ljava/util/function/Predicate;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorAttackTargetForget": {
      "fields": {
        "a": "TIMEOUT_TO_GET_WITHIN_ATTACK_RANGE"
      },
      "methods": {
        "a(Ljava/util/function/BiConsumer;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Predicate;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;Z)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/LivingEntity;Ljava/util/Optional;)Z": "isTiredOfTryingToReachTarget"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorForgetAnger": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$create$2",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/LivingEntity;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStrollPosition": {
      "fields": {
        "a": "MIN_TIME_BETWEEN_STROLLS",
        "b": "STROLL_MAX_XZ_DIST",
        "c": "STROLL_MAX_Y_DIST"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FI)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ILorg/apache/commons/lang3/mutable/MutableLong;FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILorg/apache/commons/lang3/mutable/MutableLong;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILorg/apache/commons/lang3/mutable/MutableLong;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$1",
        "a(FLnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/entity/ai/memory/WalkTarget;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStrollPlace": {
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FII)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ILorg/apache/commons/lang3/mutable/MutableLong;FILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILorg/apache/commons/lang3/mutable/MutableLong;FILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILorg/apache/commons/lang3/mutable/MutableLong;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStrollPlaceList": {
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;FIILnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;ILorg/apache/commons/lang3/mutable/MutableLong;FILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILorg/apache/commons/lang3/mutable/MutableLong;FILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILorg/apache/commons/lang3/mutable/MutableLong;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorSwim": {
      "fields": {
        "c": "chance"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorTradeVillager": {
      "fields": {
        "c": "INTERACT_DIST_SQR",
        "d": "SPEED_MODIFIER",
        "e": "trades"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/npc/Villager;)Ljava/util/Set;": "figureOutWhatIAmWillingToTrade",
        "a(Lnet/minecraft/world/entity/npc/Villager;Ljava/util/Set;Lnet/minecraft/world/entity/LivingEntity;)V": "throwHalfStack",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lcom/google/common/collect/ImmutableSet;Lnet/minecraft/world/item/Item;)Z": "lambda$figureOutWhatIAmWillingToTrade$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/TriggerGate": {
      "methods": {
        "a(Ljava/util/List;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "triggerOneShuffled",
        "a(Ljava/util/List;Lnet/minecraft/world/entity/ai/behavior/GateBehavior$OrderPolicy;Lnet/minecraft/world/entity/ai/behavior/GateBehavior$RunningPolicy;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "triggerGate",
        "a(Lnet/minecraft/world/entity/ai/behavior/GateBehavior$OrderPolicy;Lnet/minecraft/world/entity/ai/behavior/ShufflingList;Lnet/minecraft/world/entity/ai/behavior/GateBehavior$RunningPolicy;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$triggerGate$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/GateBehavior$OrderPolicy;Lnet/minecraft/world/entity/ai/behavior/ShufflingList;Lnet/minecraft/world/entity/ai/behavior/GateBehavior$RunningPolicy;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$triggerGate$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/ShufflingList;Lcom/mojang/datafixers/util/Pair;)V": "lambda$triggerGate$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/TryFindLand": {
      "fields": {
        "a": "COOLDOWN_TICKS"
      },
      "methods": {
        "a(IF)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;IFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;IFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/TryFindLandNearWater": {
      "methods": {
        "a(IF)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;IFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;IFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/TryFindWater": {
      "methods": {
        "a(IF)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;IFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;IFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lorg/apache/commons/lang3/mutable/MutableLong;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/TryLaySpawnOnWaterNearLand": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorSchedule": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorBonemeal": {
      "fields": {
        "c": "BONEMEALING_DURATION",
        "d": "nextWorkCycleTime",
        "e": "lastBonemealingSession",
        "f": "timeWorkedSoFar",
        "g": "cropPos"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Ljava/util/Optional;": "pickNextTarget",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;)Z": "validPos",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "a(Lnet/minecraft/world/entity/npc/Villager;)V": "setCurrentCropAsTarget",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/core/BlockPos;)V": "lambda$setCurrentCropAsTarget$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPositionValidate": {
      "fields": {
        "a": "MAX_DISTANCE"
      },
      "methods": {
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "bedIsOccupied",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Ljava/util/function/Predicate;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorStrollRandom": {
      "fields": {
        "a": "MAX_XZ_DIST",
        "b": "MAX_Y_DIST"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(FII)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(IIFLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(IIFLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(IILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;J)Z": "lambda$create$1",
        "a(FLnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/entity/ai/memory/WalkTarget;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorCooldown": {
      "fields": {
        "a": "SAFE_DISTANCE_FROM_DANGER"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/Behaviors": {
      "fields": {
        "a": "STROLL_SPEED_MODIFIER"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getCorePackage",
        "b(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getWorkPackage",
        "a(F)Lcom/google/common/collect/ImmutableList;": "getPlayPackage",
        "c(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getRestPackage",
        "d(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getMeetPackage",
        "e(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getIdlePackage",
        "f(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getPanicPackage",
        "g(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getPreRaidPackage",
        "h(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getRaidPackage",
        "i(Lnet/minecraft/world/entity/npc/VillagerProfession;F)Lcom/google/common/collect/ImmutableList;": "getHidePackage",
        "a()Lcom/mojang/datafixers/util/Pair;": "getFullLookBehavior",
        "b()Lcom/mojang/datafixers/util/Pair;": "getMinimalLookBehavior",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "raidExistsAndActive",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "raidExistsAndNotVictory",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$getMeetPackage$3",
        "b(Lnet/minecraft/core/Holder;)Z": "lambda$getRestPackage$2",
        "c(Lnet/minecraft/core/Holder;)Z": "lambda$getCorePackage$1",
        "d(Lnet/minecraft/core/Holder;)Z": "lambda$getCorePackage$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorMakeLove": {
      "fields": {
        "c": "INTERACT_DIST_SQR",
        "d": "SPEED_MODIFIER",
        "e": "birthTimestamp"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/npc/Villager;)V": "tryToGiveBirth",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "stop",
        "a(Lnet/minecraft/world/entity/npc/Villager;)Z": "isBreedingPossible",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Ljava/util/Optional;": "takeVacantBed",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)Z": "canReach",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/npc/Villager;)Ljava/util/Optional;": "breed",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/core/BlockPos;)V": "giveBedToChild",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorPanic": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "tick",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasHostile",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "isHurt",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorWake": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorWorkComposter": {
      "fields": {
        "c": "COMPOSTABLE_ITEMS"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)V": "useWorkstation",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/core/GlobalPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "compostItems",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "spawnComposterFillEffects",
        "a(Lnet/minecraft/world/entity/npc/Villager;)V": "makeBread"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorWork": {
      "fields": {
        "c": "CHECK_COOLDOWN",
        "d": "DISTANCE",
        "e": "lastCheck"
      },
      "methods": {
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "start",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)V": "useWorkstation",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "canStillUse",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/core/GlobalPos;)V": "lambda$start$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/BehaviorLeaveJob": {
      "methods": {
        "a(F)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/core/BlockPos;)Z": "nearbyWantsJobsite",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiType;)Z": "canReachPos",
        "a(FLnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$6",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;FLnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$5",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)Z": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/core/BlockPos;FLnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)V": "lambda$create$3",
        "a(Ljava/util/Optional;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/npc/Villager;)Z": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/npc/Villager;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/npc/Villager;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder": {
      "fields": {
        "a": "trigger"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/kinds/App;)Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder;": "unbox",
        "a()Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;": "instance",
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "sequence",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/OneShot;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "triggerIf",
        "a(Ljava/util/function/Predicate;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "triggerIf",
        "a(Ljava/util/function/BiPredicate;)Lnet/minecraft/world/entity/ai/behavior/OneShot;": "triggerIf",
        "b(Lcom/mojang/datafixers/kinds/App;)Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$TriggerWithResult;": "get",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$TriggerWithResult;)Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder;": "create",
        "a(Ljava/util/function/BiPredicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$triggerIf$5",
        "a(Ljava/util/function/BiPredicate;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$triggerIf$4",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$triggerIf$3",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$triggerIf$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$sequence$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;Lcom/mojang/datafixers/util/Unit;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$sequence$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor": {
      "fields": {
        "a": "brain",
        "b": "memoryType",
        "c": "value"
      },
      "methods": {
        "a()Lcom/mojang/datafixers/kinds/App;": "value",
        "a(Ljava/lang/Object;)V": "set",
        "a(Ljava/util/Optional;)V": "setOrErase",
        "a(Ljava/lang/Object;J)V": "setWithExpiry",
        "b()V": "erase"
      }
    },
    "net/minecraft/world/entity/ai/behavior/declarative/MemoryCondition": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "memory",
        "b()Lnet/minecraft/world/entity/ai/memory/MemoryStatus;": "condition",
        "a(Lnet/minecraft/world/entity/ai/Brain;Ljava/util/Optional;)Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;": "createAccessor"
      }
    },
    "net/minecraft/world/entity/ai/behavior/declarative/Trigger": {},
    "net/minecraft/world/entity/ai/behavior/warden/Digging": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "canStillUse",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;)Z": "checkExtraStartConditions",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/Emerging": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/ForceUnmount": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/Roar": {
      "fields": {
        "c": "TICKS_BEFORE_PLAYING_ROAR_SOUND",
        "d": "ROAR_ANGER_INCREASE"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "start",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "canStillUse",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/SetRoarTarget": {
      "methods": {
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Ljava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Ljava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Ljava/util/function/Function;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/SetWardenLookTarget": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Ljava/util/Optional;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/Sniffing": {
      "fields": {
        "c": "ANGER_FROM_SNIFFING_MAX_DISTANCE_XZ",
        "d": "ANGER_FROM_SNIFFING_MAX_DISTANCE_Y"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "stop",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$stop$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/SonicBoom": {
      "fields": {
        "d": "DISTANCE_XZ",
        "e": "DISTANCE_Y",
        "f": "KNOCKBACK_VERTICAL",
        "g": "KNOCKBACK_HORIZONTAL",
        "c": "COOLDOWN",
        "h": "TICKS_BEFORE_PLAYING_SOUND",
        "i": "DURATION"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)V": "stop",
        "a(Lnet/minecraft/world/entity/LivingEntity;I)V": "setCooldown",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$tick$2",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$tick$1",
        "b(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$tick$0"
      }
    },
    "net/minecraft/world/entity/ai/behavior/warden/TryToSniff": {
      "fields": {
        "a": "SNIFF_COOLDOWN"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/ai/control/EntityAIBodyControl": {
      "fields": {
        "a": "mob",
        "b": "HEAD_STABLE_ANGLE",
        "c": "DELAY_UNTIL_STARTING_TO_FACE_FORWARD",
        "d": "HOW_LONG_IT_TAKES_TO_FACE_FORWARD",
        "e": "headStableTime",
        "f": "lastStableYHeadRot"
      },
      "methods": {
        "a()V": "clientTick",
        "b()V": "rotateBodyIfNecessary",
        "c()V": "rotateHeadIfNecessary",
        "d()V": "rotateHeadTowardsFront",
        "e()Z": "notCarryingMobPassengers",
        "f()Z": "isMoving"
      }
    },
    "net/minecraft/world/entity/ai/control/Control": {},
    "net/minecraft/world/entity/ai/control/ControllerMoveFlying": {
      "fields": {
        "l": "maxTurn",
        "m": "hoversInPlace"
      },
      "methods": {
        "a()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/control/ControllerJump": {
      "fields": {
        "b": "mob",
        "a": "jump"
      },
      "methods": {
        "a()V": "jump",
        "b()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/control/ControllerLook": {
      "fields": {
        "a": "mob",
        "b": "yMaxRotSpeed",
        "c": "xMaxRotAngle",
        "d": "lookAtCooldown",
        "e": "wantedX",
        "f": "wantedY",
        "g": "wantedZ"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/Vec3;)V": "setLookAt",
        "a(Lnet/minecraft/world/entity/Entity;)V": "setLookAt",
        "a(Lnet/minecraft/world/entity/Entity;FF)V": "setLookAt",
        "a(DDD)V": "setLookAt",
        "a(DDDFF)V": "setLookAt",
        "a()V": "tick",
        "b()V": "clampHeadRotationToBody",
        "c()Z": "resetXRotOnTick",
        "d()Z": "isLookingAtTarget",
        "e()D": "getWantedX",
        "f()D": "getWantedY",
        "g()D": "getWantedZ",
        "h()Ljava/util/Optional;": "getXRotD",
        "i()Ljava/util/Optional;": "getYRotD",
        "a(FFF)F": "rotateTowards",
        "b(Lnet/minecraft/world/entity/Entity;)D": "getWantedY",
        "a(Ljava/lang/Float;)V": "lambda$tick$1",
        "b(Ljava/lang/Float;)V": "lambda$tick$0"
      }
    },
    "net/minecraft/world/entity/ai/control/ControllerMove": {
      "fields": {
        "a": "MIN_SPEED",
        "b": "MIN_SPEED_SQR",
        "c": "MAX_TURN",
        "d": "mob",
        "e": "wantedX",
        "f": "wantedY",
        "g": "wantedZ",
        "h": "speedModifier",
        "i": "strafeForwards",
        "j": "strafeRight",
        "k": "operation"
      },
      "methods": {
        "b()Z": "hasWanted",
        "c()D": "getSpeedModifier",
        "a(DDDD)V": "setWantedPosition",
        "a(FF)V": "strafe",
        "a()V": "tick",
        "b(FF)Z": "isWalkable",
        "a(FFF)F": "rotlerp",
        "d()D": "getWantedX",
        "e()D": "getWantedY",
        "f()D": "getWantedZ"
      }
    },
    "net/minecraft/world/entity/ai/control/ControllerMove$Operation": {
      "fields": {
        "a": "WAIT",
        "b": "MOVE_TO",
        "c": "STRAFE",
        "d": "JUMPING",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/control/MoveControl$Operation;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/control/SmoothSwimmingLookControl": {
      "fields": {
        "h": "maxYRotFromCenter",
        "i": "HEAD_TILT_X",
        "j": "HEAD_TILT_Y"
      },
      "methods": {
        "a()V": "tick",
        "a(Ljava/lang/Float;)V": "lambda$tick$1",
        "b(Ljava/lang/Float;)V": "lambda$tick$0"
      }
    },
    "net/minecraft/world/entity/ai/control/SmoothSwimmingMoveControl": {
      "fields": {
        "l": "FULL_SPEED_TURN_THRESHOLD",
        "m": "STOP_TURN_THRESHOLD",
        "n": "maxTurnX",
        "o": "maxTurnY",
        "p": "inWaterSpeedModifier",
        "q": "outsideWaterSpeedModifier",
        "r": "applyGravity"
      },
      "methods": {
        "a()V": "tick",
        "a(F)F": "getTurningSpeedFactor"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalAvoidTarget": {
      "fields": {
        "a": "mob",
        "i": "walkSpeedModifier",
        "j": "sprintSpeedModifier",
        "b": "toAvoid",
        "c": "maxDist",
        "e": "pathNav",
        "f": "avoidClass",
        "g": "avoidPredicate",
        "h": "predicateOnAvoidEntity",
        "k": "avoidEntityTargeting"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$canUse$2",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$1",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalBeg": {
      "fields": {
        "a": "wolf",
        "b": "player",
        "c": "level",
        "d": "lookDistance",
        "e": "lookTime",
        "f": "begTargeting"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "playerHoldingInteresting"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalBoat": {
      "fields": {
        "a": "GO_TO_BOAT",
        "b": "GO_IN_BOAT_DIRECTION",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/goal/BoatGoals;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalBreakDoor": {
      "fields": {
        "g": "DEFAULT_DOOR_BREAK_TIME",
        "h": "validDifficulties",
        "a": "breakTime",
        "b": "lastBreakProgress",
        "c": "doorBreakTime"
      },
      "methods": {
        "f()I": "getDoorBreakTime",
        "a()Z": "canUse",
        "c()V": "start",
        "b()Z": "canContinueToUse",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/Difficulty;)Z": "isValidDifficulty"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalBreath": {
      "fields": {
        "a": "mob"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "J_()Z": "isInterruptable",
        "c()V": "start",
        "h()V": "findAirPosition",
        "e()V": "tick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "givesAir"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalBreed": {
      "fields": {
        "d": "PARTNER_TARGETING",
        "a": "animal",
        "e": "partnerClass",
        "b": "level",
        "c": "partner",
        "f": "loveTime",
        "g": "speedModifier"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "d()V": "stop",
        "e()V": "tick",
        "h()Lnet/minecraft/world/entity/animal/Animal;": "getFreePartner",
        "g()V": "breed"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalCatSitOnBed": {
      "fields": {
        "g": "cat"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "a(Lnet/minecraft/world/entity/PathfinderMob;)I": "nextStartTick",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isValidTarget"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalJumpOnBlock": {
      "fields": {
        "g": "cat"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isValidTarget",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour$BlockStateBase;)Z": "lambda$isValidTarget$1",
        "a(Lnet/minecraft/world/level/block/state/properties/BedPart;)Ljava/lang/Boolean;": "lambda$isValidTarget$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/ClimbOnTopOfPowderSnowGoal": {
      "fields": {
        "a": "mob",
        "b": "level"
      },
      "methods": {
        "a()Z": "canUse",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalWaterJump": {
      "fields": {
        "a": "STEPS_TO_CHECK",
        "b": "dolphin",
        "c": "interval",
        "d": "breached"
      },
      "methods": {
        "a()Z": "canUse",
        "a(Lnet/minecraft/core/BlockPos;III)Z": "waterIsClear",
        "b(Lnet/minecraft/core/BlockPos;III)Z": "surfaceIsClear",
        "b()Z": "canContinueToUse",
        "J_()Z": "isInterruptable",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalDoorInteract": {
      "fields": {
        "d": "mob",
        "e": "doorPos",
        "f": "hasDoor",
        "a": "passed",
        "b": "doorOpenDirX",
        "c": "doorOpenDirZ"
      },
      "methods": {
        "h()Z": "isOpen",
        "a(Z)V": "setOpen",
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalEatTile": {
      "fields": {
        "a": "EAT_ANIMATION_TICKS",
        "b": "IS_TALL_GRASS",
        "c": "mob",
        "d": "level",
        "e": "eatAnimationTick"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop",
        "b()Z": "canContinueToUse",
        "h()I": "getEatAnimationTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFleeSun": {
      "fields": {
        "a": "mob",
        "b": "wantedX",
        "c": "wantedY",
        "d": "wantedZ",
        "e": "speedModifier",
        "f": "level"
      },
      "methods": {
        "a()Z": "canUse",
        "h()Z": "setWantedPos",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "i()Lnet/minecraft/world/phys/Vec3;": "getHidePos"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFloat": {
      "fields": {
        "a": "mob"
      },
      "methods": {
        "a()Z": "canUse",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFollowBoat": {
      "fields": {
        "a": "timeToRecalcPath",
        "b": "mob",
        "c": "following",
        "d": "currentGoal"
      },
      "methods": {
        "a()Z": "canUse",
        "J_()Z": "isInterruptable",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFishSchool": {
      "fields": {
        "a": "INTERVAL_TICKS",
        "b": "mob",
        "c": "timeToRecalcPath",
        "d": "nextStartTick"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;)I": "nextStartTick",
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "b(Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;)Z": "lambda$canUse$1",
        "c(Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;)Z": "lambda$canUse$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFollowEntity": {
      "fields": {
        "a": "mob",
        "b": "followPredicate",
        "c": "followingMob",
        "d": "speedModifier",
        "e": "navigation",
        "f": "timeToRecalcPath",
        "g": "stopDistance",
        "h": "oldWaterCost",
        "i": "areaSize"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/Mob;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFollowOwner": {
      "fields": {
        "a": "TELEPORT_WHEN_DISTANCE_IS",
        "b": "MIN_HORIZONTAL_DISTANCE_FROM_PLAYER_WHEN_TELEPORTING",
        "c": "MAX_HORIZONTAL_DISTANCE_FROM_PLAYER_WHEN_TELEPORTING",
        "d": "MAX_VERTICAL_DISTANCE_FROM_PLAYER_WHEN_TELEPORTING",
        "e": "tamable",
        "f": "owner",
        "g": "level",
        "h": "speedModifier",
        "i": "navigation",
        "j": "timeToRecalcPath",
        "k": "stopDistance",
        "l": "startDistance",
        "m": "oldWaterCost",
        "n": "canFly"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "h()Z": "unableToMove",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "i()V": "teleportToOwner",
        "a(III)Z": "maybeTeleportTo",
        "a(Lnet/minecraft/core/BlockPos;)Z": "canTeleportTo",
        "a(II)I": "randomIntInclusive"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalFollowParent": {
      "fields": {
        "a": "HORIZONTAL_SCAN_RANGE",
        "b": "VERTICAL_SCAN_RANGE",
        "c": "DONT_FOLLOW_IF_CLOSER_THAN",
        "d": "animal",
        "e": "parent",
        "f": "speedModifier",
        "g": "timeToRecalcPath"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoal": {
      "fields": {
        "a": "flags"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "J_()Z": "isInterruptable",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick",
        "a(Ljava/util/EnumSet;)V": "setFlags",
        "j()Ljava/util/EnumSet;": "getFlags",
        "a(I)I": "adjustedTickDelay",
        "b(I)I": "reducedTickDelay"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoal$Type": {
      "fields": {
        "a": "MOVE",
        "b": "LOOK",
        "c": "JUMP",
        "d": "TARGET",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/goal/Goal$Flag;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalSelector": {
      "fields": {
        "a": "LOGGER",
        "b": "NO_GOAL",
        "c": "lockedFlags",
        "d": "availableGoals",
        "e": "profiler",
        "f": "disabledFlags",
        "g": "tickCount",
        "h": "newGoalRate"
      },
      "methods": {
        "a(ILnet/minecraft/world/entity/ai/goal/Goal;)V": "addGoal",
        "a(Ljava/util/function/Predicate;)V": "removeAllGoals",
        "a(Lnet/minecraft/world/entity/ai/goal/Goal;)V": "removeGoal",
        "a(Lnet/minecraft/world/entity/ai/goal/WrappedGoal;Ljava/util/EnumSet;)Z": "goalContainsAnyFlags",
        "a(Lnet/minecraft/world/entity/ai/goal/WrappedGoal;Ljava/util/Map;)Z": "goalCanBeReplacedForAllFlags",
        "a()V": "tick",
        "a(Z)V": "tickRunningGoals",
        "b()Ljava/util/Set;": "getAvailableGoals",
        "c()Ljava/util/stream/Stream;": "getRunningGoals",
        "a(I)V": "setNewGoalRate",
        "a(Lnet/minecraft/world/entity/ai/goal/Goal$Flag;)V": "disableControlFlag",
        "b(Lnet/minecraft/world/entity/ai/goal/Goal$Flag;)V": "enableControlFlag",
        "a(Lnet/minecraft/world/entity/ai/goal/Goal$Flag;Z)V": "setControlFlag",
        "a(Lnet/minecraft/world/entity/ai/goal/Goal;Lnet/minecraft/world/entity/ai/goal/WrappedGoal;)Z": "lambda$removeGoal$2",
        "b(Lnet/minecraft/world/entity/ai/goal/Goal;Lnet/minecraft/world/entity/ai/goal/WrappedGoal;)Z": "lambda$removeGoal$1",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/goal/WrappedGoal;)Z": "lambda$removeAllGoals$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalStrollVillageGolem": {
      "fields": {
        "i": "POI_SECTION_SCAN_RADIUS",
        "j": "VILLAGER_SCAN_RADIUS",
        "k": "RANDOM_POS_XY_DISTANCE",
        "l": "RANDOM_POS_Y_DISTANCE"
      },
      "methods": {
        "h()Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "k()Lnet/minecraft/world/phys/Vec3;": "getPositionTowardsAnywhere",
        "l()Lnet/minecraft/world/phys/Vec3;": "getPositionTowardsVillagerWhoWantsGolem",
        "m()Lnet/minecraft/world/phys/Vec3;": "getPositionTowardsPoi",
        "n()Lnet/minecraft/core/SectionPos;": "getRandomVillageSection",
        "a(Lnet/minecraft/core/SectionPos;)Lnet/minecraft/core/BlockPos;": "getRandomPoiWithinSection",
        "a(Lnet/minecraft/world/entity/npc/Villager;)Z": "doesVillagerWantGolem",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$getRandomPoiWithinSection$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/SectionPos;)Z": "lambda$getRandomVillageSection$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalInteract": {},
    "net/minecraft/world/entity/ai/goal/PathfinderGoalWaterJumpAbstract": {},
    "net/minecraft/world/entity/ai/goal/PathfinderGoalPerch": {
      "fields": {
        "a": "entity",
        "b": "owner",
        "c": "isSittingOnShoulder"
      },
      "methods": {
        "a()Z": "canUse",
        "J_()Z": "isInterruptable",
        "c()V": "start",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalLeapAtTarget": {
      "fields": {
        "a": "mob",
        "b": "target",
        "c": "yd"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalLlamaFollow": {
      "fields": {
        "a": "llama",
        "b": "speedModifier",
        "c": "CARAVAN_LIMIT",
        "d": "distCheckCounter"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/animal/horse/Llama;I)Z": "firstIsLeashed",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "lambda$canUse$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalLookAtPlayer": {
      "fields": {
        "a": "DEFAULT_PROBABILITY",
        "b": "mob",
        "c": "lookAt",
        "d": "lookDistance",
        "h": "lookTime",
        "e": "probability",
        "i": "onlyHorizontal",
        "f": "lookAtType",
        "g": "lookAtContext"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$canUse$1",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalLookAtTradingPlayer": {
      "fields": {
        "h": "villager"
      },
      "methods": {
        "a()Z": "canUse"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalMeleeAttack": {
      "fields": {
        "a": "mob",
        "b": "speedModifier",
        "c": "followingTargetEvenIfNotSeen",
        "e": "pathedTargetX",
        "f": "pathedTargetY",
        "g": "pathedTargetZ",
        "h": "ticksUntilNextPathRecalculation",
        "i": "ticksUntilNextAttack",
        "j": "attackInterval",
        "k": "lastCanUseCheck",
        "l": "COOLDOWN_BETWEEN_CAN_USE_CHECKS"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/LivingEntity;D)V": "checkAndPerformAttack",
        "h()V": "resetAttackCooldown",
        "i()Z": "isTimeToAttack",
        "k()I": "getTicksUntilNextAttack",
        "l()I": "getAttackInterval",
        "a(Lnet/minecraft/world/entity/LivingEntity;)D": "getAttackReachSqr"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalStrollVillage": {
      "fields": {
        "i": "MAX_XZ_DIST",
        "j": "MAX_Y_DIST"
      },
      "methods": {
        "a()Z": "canUse",
        "h()Lnet/minecraft/world/phys/Vec3;": "getPosition"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalMoveThroughVillage": {
      "fields": {
        "a": "mob",
        "b": "speedModifier",
        "d": "poiPos",
        "e": "onlyAtNight",
        "f": "visited",
        "g": "distanceToPoi",
        "h": "canDealWithDoors"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "a(Lnet/minecraft/core/BlockPos;)Z": "hasNotVisited",
        "h()V": "updateVisited",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$canUse$3",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)D": "lambda$canUse$2",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/lang/Double;": "lambda$canUse$1",
        "b(Lnet/minecraft/core/Holder;)Z": "lambda$canUse$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalGotoTarget": {
      "fields": {
        "g": "GIVE_UP_TICKS",
        "h": "STAY_TICKS",
        "i": "INTERVAL_TICKS",
        "a": "mob",
        "b": "speedModifier",
        "c": "nextStartTick",
        "d": "tryTicks",
        "j": "maxStayTicks",
        "e": "blockPos",
        "k": "reachedTarget",
        "l": "searchRange",
        "m": "verticalSearchRange",
        "f": "verticalSearchStart"
      },
      "methods": {
        "a()Z": "canUse",
        "a(Lnet/minecraft/world/entity/PathfinderMob;)I": "nextStartTick",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "h()V": "moveMobToBlock",
        "i()D": "acceptedDistance",
        "k()Lnet/minecraft/core/BlockPos;": "getMoveToTarget",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick",
        "l()Z": "shouldRecalculatePath",
        "m()Z": "isReachedTarget",
        "n()Z": "findNearestBlock",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isValidTarget"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalMoveTowardsRestriction": {
      "fields": {
        "a": "mob",
        "b": "wantedX",
        "c": "wantedY",
        "d": "wantedZ",
        "e": "speedModifier"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalMoveTowardsTarget": {
      "fields": {
        "a": "mob",
        "b": "target",
        "c": "wantedX",
        "d": "wantedY",
        "e": "wantedZ",
        "f": "speedModifier",
        "g": "within"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "d()V": "stop",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalOcelotAttack": {
      "fields": {
        "a": "mob",
        "b": "target",
        "c": "attackTime"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalOfferFlower": {
      "fields": {
        "b": "OFFER_TARGER_CONTEXT",
        "a": "OFFER_TICKS",
        "c": "golem",
        "d": "villager",
        "e": "tick"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalDoorOpen": {
      "fields": {
        "a": "closeDoor",
        "b": "forgetTime"
      },
      "methods": {
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalPanic": {
      "fields": {
        "a": "WATER_CHECK_DISTANCE_VERTICAL",
        "b": "mob",
        "c": "speedModifier",
        "d": "posX",
        "e": "posY",
        "f": "posZ",
        "g": "isRunning"
      },
      "methods": {
        "a()Z": "canUse",
        "h()Z": "shouldPanic",
        "i()Z": "findRandomPosition",
        "k()Z": "isRunning",
        "c()V": "start",
        "d()V": "stop",
        "b()Z": "canContinueToUse",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/core/BlockPos;": "lookForWater",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$lookForWater$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRaid": {
      "fields": {
        "a": "RECRUITMENT_SEARCH_TICK_DELAY",
        "b": "SPEED_MODIFIER",
        "c": "mob",
        "d": "recruitmentTick"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "e()V": "tick",
        "a(Lnet/minecraft/world/entity/raid/Raid;)V": "recruitNearby",
        "a(Lnet/minecraft/world/entity/raid/Raid;Lnet/minecraft/world/entity/raid/Raider;)Z": "lambda$recruitNearby$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRandomLookaround": {
      "fields": {
        "a": "mob",
        "b": "relX",
        "c": "relZ",
        "d": "lookTime"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/RandomStandGoal": {
      "fields": {
        "a": "horse",
        "b": "nextStand"
      },
      "methods": {
        "c()V": "start",
        "h()V": "playStandSound",
        "b()Z": "canContinueToUse",
        "a()Z": "canUse",
        "a(Lnet/minecraft/world/entity/animal/horse/AbstractHorse;)V": "resetStandInterval",
        "K_()Z": "requiresUpdateEveryTick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRandomStroll": {
      "fields": {
        "a": "DEFAULT_INTERVAL",
        "b": "mob",
        "c": "wantedX",
        "d": "wantedY",
        "e": "wantedZ",
        "f": "speedModifier",
        "g": "interval",
        "h": "forceTrigger",
        "i": "checkNoActionTime"
      },
      "methods": {
        "a()Z": "canUse",
        "h()Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "i()V": "trigger",
        "c(I)V": "setInterval"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRandomSwim": {
      "methods": {
        "h()Lnet/minecraft/world/phys/Vec3;": "getPosition"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalArrowAttack": {
      "fields": {
        "a": "mob",
        "b": "rangedAttackMob",
        "c": "target",
        "d": "attackTime",
        "e": "speedModifier",
        "f": "seeTime",
        "g": "attackIntervalMin",
        "h": "attackIntervalMax",
        "i": "attackRadius",
        "j": "attackRadiusSqr"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalBowShoot": {
      "fields": {
        "a": "mob",
        "b": "speedModifier",
        "c": "attackIntervalMin",
        "d": "attackRadiusSqr",
        "e": "attackTime",
        "f": "seeTime",
        "g": "strafingClockwise",
        "h": "strafingBackwards",
        "i": "strafingTime"
      },
      "methods": {
        "c(I)V": "setMinAttackInterval",
        "a()Z": "canUse",
        "h()Z": "isHoldingBow",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalCrossbowAttack": {
      "fields": {
        "a": "PATHFINDING_DELAY_RANGE",
        "b": "mob",
        "c": "crossbowState",
        "d": "speedModifier",
        "e": "attackRadiusSqr",
        "f": "seeTime",
        "g": "attackDelay",
        "h": "updatePathDelay"
      },
      "methods": {
        "a()Z": "canUse",
        "h()Z": "isHoldingCrossbow",
        "b()Z": "canContinueToUse",
        "i()Z": "isValidTarget",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick",
        "k()Z": "canRun"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalCrossbowAttack$State": {
      "fields": {
        "a": "UNCHARGED",
        "b": "CHARGING",
        "c": "CHARGED",
        "d": "READY_TO_ATTACK",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal$CrossbowState;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRemoveBlock": {
      "fields": {
        "g": "blockToRemove",
        "h": "removerMob",
        "i": "ticksSinceReachedGoal",
        "j": "WAIT_AFTER_BLOCK_FOUND"
      },
      "methods": {
        "a()Z": "canUse",
        "d()V": "stop",
        "c()V": "start",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "playDestroyProgressSound",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "playBreakSound",
        "e()V": "tick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/BlockGetter;)Lnet/minecraft/core/BlockPos;": "getPosWithBlock",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isValidTarget"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRestrictSun": {
      "fields": {
        "a": "mob"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalTame": {
      "fields": {
        "a": "horse",
        "b": "speedModifier",
        "c": "posX",
        "d": "posY",
        "e": "posZ"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "b()Z": "canContinueToUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalSit": {
      "fields": {
        "a": "mob"
      },
      "methods": {
        "b()Z": "canContinueToUse",
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalNearestVillage": {
      "fields": {
        "a": "DISTANCE_THRESHOLD",
        "b": "mob",
        "c": "interval",
        "d": "wantedPos"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "e()V": "tick",
        "h()V": "moveRandomly",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)D": "lambda$canUse$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalSwell": {
      "fields": {
        "a": "creeper",
        "b": "target"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalTempt": {
      "fields": {
        "c": "TEMP_TARGETING",
        "d": "targetingConditions",
        "a": "mob",
        "e": "speedModifier",
        "f": "px",
        "g": "py",
        "h": "pz",
        "i": "pRotX",
        "j": "pRotY",
        "b": "player",
        "k": "calmDown",
        "l": "isRunning",
        "m": "items",
        "n": "canScare"
      },
      "methods": {
        "a()Z": "canUse",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "shouldFollow",
        "b()Z": "canContinueToUse",
        "h()Z": "canScare",
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick",
        "i()Z": "isRunning"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalTradeWithPlayer": {
      "fields": {
        "a": "mob"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalWater": {
      "fields": {
        "a": "mob"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalUseItem": {
      "fields": {
        "a": "mob",
        "b": "item",
        "c": "canUseSelector",
        "d": "finishUsingSound"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRandomFly": {
      "methods": {
        "h()Lnet/minecraft/world/phys/Vec3;": "getPosition"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalRandomStrollLand": {
      "fields": {
        "i": "PROBABILITY",
        "j": "probability"
      },
      "methods": {
        "h()Lnet/minecraft/world/phys/Vec3;": "getPosition"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalWrapped": {
      "fields": {
        "a": "goal",
        "b": "priority",
        "c": "isRunning"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/goal/WrappedGoal;)Z": "canBeReplacedBy",
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "J_()Z": "isInterruptable",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "a(I)I": "adjustedTickDelay",
        "e()V": "tick",
        "a(Ljava/util/EnumSet;)V": "setFlags",
        "j()Ljava/util/EnumSet;": "getFlags",
        "h()Z": "isRunning",
        "i()I": "getPriority",
        "k()Lnet/minecraft/world/entity/ai/goal/Goal;": "getGoal"
      }
    },
    "net/minecraft/world/entity/ai/goal/PathfinderGoalZombieAttack": {
      "fields": {
        "b": "zombie",
        "c": "raiseArmTicks"
      },
      "methods": {
        "c()V": "start",
        "d()V": "stop",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalDefendVillage": {
      "fields": {
        "a": "golem",
        "b": "potentialTarget",
        "c": "attackTargeting"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalHurtByTarget": {
      "fields": {
        "a": "HURT_BY_TARGETING",
        "b": "ALERT_RANGE_Y",
        "c": "alertSameType",
        "d": "timestamp",
        "i": "toIgnoreDamage",
        "j": "toIgnoreAlert"
      },
      "methods": {
        "a()Z": "canUse",
        "a([Ljava/lang/Class;)Lnet/minecraft/world/entity/ai/goal/target/HurtByTargetGoal;": "setAlertOthers",
        "c()V": "start",
        "h()V": "alertOthers",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/LivingEntity;)V": "alertOther"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalNearestAttackableTarget": {
      "fields": {
        "i": "DEFAULT_RANDOM_INTERVAL",
        "a": "targetType",
        "b": "randomInterval",
        "c": "target",
        "d": "targetConditions"
      },
      "methods": {
        "a()Z": "canUse",
        "a(D)Lnet/minecraft/world/phys/AABB;": "getTargetSearchArea",
        "h()V": "findTarget",
        "c()V": "start",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalNearestAttackableTargetWitch": {
      "fields": {
        "i": "canAttack"
      },
      "methods": {
        "a(Z)V": "setCanAttack",
        "a()Z": "canUse"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalNearestHealableRaider": {
      "fields": {
        "i": "DEFAULT_COOLDOWN",
        "j": "cooldown"
      },
      "methods": {
        "i()I": "getCooldown",
        "k()V": "decrementCooldown",
        "a()Z": "canUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalRandomTargetNonTamed": {
      "fields": {
        "i": "tamableMob"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalOwnerHurtByTarget": {
      "fields": {
        "a": "tameAnimal",
        "b": "ownerLastHurtBy",
        "c": "timestamp"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalOwnerHurtTarget": {
      "fields": {
        "a": "tameAnimal",
        "b": "ownerLastHurt",
        "c": "timestamp"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalUniversalAngerReset": {
      "fields": {
        "a": "ALERT_RANGE_Y",
        "b": "mob",
        "c": "alertOthersOfSameType",
        "d": "lastHurtByPlayerTimestamp"
      },
      "methods": {
        "a()Z": "canUse",
        "h()Z": "wasHurtByPlayer",
        "c()V": "start",
        "i()Ljava/util/List;": "getNearbyMobsOfSameType",
        "a(Lnet/minecraft/world/entity/Mob;)Lnet/minecraft/world/entity/NeutralMob;": "lambda$start$1",
        "b(Lnet/minecraft/world/entity/Mob;)Z": "lambda$start$0"
      }
    },
    "net/minecraft/world/entity/ai/goal/target/PathfinderGoalTarget": {
      "fields": {
        "a": "EMPTY_REACH_CACHE",
        "b": "CAN_REACH_CACHE",
        "c": "CANT_REACH_CACHE",
        "e": "mob",
        "f": "mustSee",
        "d": "mustReach",
        "i": "reachCache",
        "j": "reachCacheTime",
        "k": "unseenTicks",
        "g": "targetMob",
        "h": "unseenMemoryTicks"
      },
      "methods": {
        "b()Z": "canContinueToUse",
        "l()D": "getFollowDistance",
        "c()V": "start",
        "d()V": "stop",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;)Z": "canAttack",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "canReach",
        "c(I)Lnet/minecraft/world/entity/ai/goal/target/TargetGoal;": "setUnseenMemoryTicks"
      }
    },
    "net/minecraft/world/entity/ai/gossip/Reputation": {
      "fields": {
        "b": "LOGGER",
        "a": "DISCARD_THRESHOLD",
        "c": "gossips"
      },
      "methods": {
        "a()Ljava/util/Map;": "getGossipEntries",
        "b()V": "decay",
        "c()Ljava/util/stream/Stream;": "unpack",
        "a(Lnet/minecraft/util/RandomSource;I)Ljava/util/Collection;": "selectGossipsForTransfer",
        "a(Ljava/util/UUID;)Lnet/minecraft/world/entity/ai/gossip/GossipContainer$EntityGossips;": "getOrCreate",
        "a(Lnet/minecraft/world/entity/ai/gossip/GossipContainer;Lnet/minecraft/util/RandomSource;I)V": "transferFrom",
        "a(Ljava/util/UUID;Ljava/util/function/Predicate;)I": "getReputation",
        "a(Lnet/minecraft/world/entity/ai/gossip/GossipType;Ljava/util/function/DoublePredicate;)J": "getCountForType",
        "a(Ljava/util/UUID;Lnet/minecraft/world/entity/ai/gossip/GossipType;I)V": "add",
        "b(Ljava/util/UUID;Lnet/minecraft/world/entity/ai/gossip/GossipType;I)V": "remove",
        "a(Ljava/util/UUID;Lnet/minecraft/world/entity/ai/gossip/GossipType;)V": "remove",
        "a(Lnet/minecraft/world/entity/ai/gossip/GossipType;)V": "remove",
        "a(Lcom/mojang/serialization/DynamicOps;)Ljava/lang/Object;": "store",
        "a(Lcom/mojang/serialization/Dynamic;)V": "update",
        "a(II)I": "mergeValuesForTransfer",
        "a(Lnet/minecraft/world/entity/ai/gossip/GossipType;II)I": "mergeValuesForAddition",
        "a(Lnet/minecraft/world/entity/ai/gossip/GossipContainer$GossipEntry;)V": "lambda$update$9",
        "a(Lcom/mojang/datafixers/util/Pair;)Ljava/util/stream/Stream;": "lambda$update$8",
        "a(Ljava/lang/String;)V": "lambda$update$7",
        "b(Ljava/lang/String;)V": "lambda$store$6",
        "b(Lnet/minecraft/world/entity/ai/gossip/GossipType;II)I": "lambda$add$5",
        "a(Ljava/util/function/DoublePredicate;Lnet/minecraft/world/entity/ai/gossip/GossipType;Lnet/minecraft/world/entity/ai/gossip/GossipContainer$EntityGossips;)Z": "lambda$getCountForType$4",
        "b(Lnet/minecraft/world/entity/ai/gossip/GossipContainer$GossipEntry;)V": "lambda$transferFrom$3",
        "b(Ljava/util/UUID;)Lnet/minecraft/world/entity/ai/gossip/GossipContainer$EntityGossips;": "lambda$getOrCreate$2",
        "a(Ljava/util/Map$Entry;)Ljava/util/stream/Stream;": "lambda$unpack$1",
        "a(Ljava/util/Map;Ljava/util/UUID;)V": "lambda$getGossipEntries$0"
      }
    },
    "net/minecraft/world/entity/ai/gossip/ReputationType": {
      "fields": {
        "a": "MAJOR_NEGATIVE",
        "b": "MINOR_NEGATIVE",
        "c": "MINOR_POSITIVE",
        "d": "MAJOR_POSITIVE",
        "e": "TRADING",
        "f": "REPUTATION_CHANGE_PER_EVENT",
        "g": "REPUTATION_CHANGE_PER_EVERLASTING_MEMORY",
        "h": "REPUTATION_CHANGE_PER_TRADE",
        "i": "id",
        "j": "weight",
        "k": "max",
        "l": "decayPerDay",
        "m": "decayPerTransfer",
        "n": "CODEC",
        "o": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/entity/ai/gossip/GossipType;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/memory/ExpirableMemory": {
      "fields": {
        "a": "value",
        "b": "timeToLive"
      },
      "methods": {
        "a()V": "tick",
        "a(Ljava/lang/Object;)Lnet/minecraft/world/entity/ai/memory/ExpirableValue;": "of",
        "a(Ljava/lang/Object;J)Lnet/minecraft/world/entity/ai/memory/ExpirableValue;": "of",
        "b()J": "getTimeToLive",
        "c()Ljava/lang/Object;": "getValue",
        "d()Z": "hasExpired",
        "e()Z": "canExpire",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Lcom/mojang/serialization/Codec;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$3",
        "a(Ljava/lang/Object;Ljava/util/Optional;)Lnet/minecraft/world/entity/ai/memory/ExpirableValue;": "lambda$codec$2",
        "a(Lnet/minecraft/world/entity/ai/memory/ExpirableValue;)Ljava/util/Optional;": "lambda$codec$1",
        "b(Lnet/minecraft/world/entity/ai/memory/ExpirableValue;)Ljava/lang/Object;": "lambda$codec$0"
      }
    },
    "net/minecraft/world/entity/ai/memory/MemoryModuleType": {
      "fields": {
        "a": "DUMMY",
        "b": "HOME",
        "c": "JOB_SITE",
        "d": "POTENTIAL_JOB_SITE",
        "e": "MEETING_POINT",
        "f": "SECONDARY_JOB_SITE",
        "g": "NEAREST_LIVING_ENTITIES",
        "h": "NEAREST_VISIBLE_LIVING_ENTITIES",
        "i": "VISIBLE_VILLAGER_BABIES",
        "j": "NEAREST_PLAYERS",
        "k": "NEAREST_VISIBLE_PLAYER",
        "l": "NEAREST_VISIBLE_ATTACKABLE_PLAYER",
        "m": "WALK_TARGET",
        "n": "LOOK_TARGET",
        "o": "ATTACK_TARGET",
        "p": "ATTACK_COOLING_DOWN",
        "q": "INTERACTION_TARGET",
        "r": "BREED_TARGET",
        "s": "RIDE_TARGET",
        "t": "PATH",
        "u": "INTERACTABLE_DOORS",
        "v": "DOORS_TO_CLOSE",
        "w": "NEAREST_BED",
        "x": "HURT_BY",
        "y": "HURT_BY_ENTITY",
        "z": "AVOID_TARGET",
        "A": "NEAREST_HOSTILE",
        "B": "NEAREST_ATTACKABLE",
        "C": "HIDING_PLACE",
        "D": "HEARD_BELL_TIME",
        "E": "CANT_REACH_WALK_TARGET_SINCE",
        "F": "GOLEM_DETECTED_RECENTLY",
        "G": "LAST_SLEPT",
        "H": "LAST_WOKEN",
        "I": "LAST_WORKED_AT_POI",
        "J": "NEAREST_VISIBLE_ADULT",
        "K": "NEAREST_VISIBLE_WANTED_ITEM",
        "L": "NEAREST_VISIBLE_NEMESIS",
        "M": "PLAY_DEAD_TICKS",
        "N": "TEMPTING_PLAYER",
        "O": "TEMPTATION_COOLDOWN_TICKS",
        "P": "GAZE_COOLDOWN_TICKS",
        "Q": "IS_TEMPTED",
        "R": "LONG_JUMP_COOLDOWN_TICKS",
        "S": "LONG_JUMP_MID_JUMP",
        "T": "HAS_HUNTING_COOLDOWN",
        "U": "RAM_COOLDOWN_TICKS",
        "V": "RAM_TARGET",
        "W": "IS_IN_WATER",
        "X": "IS_PREGNANT",
        "Y": "IS_PANICKING",
        "Z": "UNREACHABLE_TONGUE_TARGETS",
        "aa": "ANGRY_AT",
        "ab": "UNIVERSAL_ANGER",
        "ac": "ADMIRING_ITEM",
        "ad": "TIME_TRYING_TO_REACH_ADMIRE_ITEM",
        "ae": "DISABLE_WALK_TO_ADMIRE_ITEM",
        "af": "ADMIRING_DISABLED",
        "ag": "HUNTED_RECENTLY",
        "ah": "CELEBRATE_LOCATION",
        "ai": "DANCING",
        "aj": "NEAREST_VISIBLE_HUNTABLE_HOGLIN",
        "ak": "NEAREST_VISIBLE_BABY_HOGLIN",
        "al": "NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD",
        "am": "NEARBY_ADULT_PIGLINS",
        "an": "NEAREST_VISIBLE_ADULT_PIGLINS",
        "ao": "NEAREST_VISIBLE_ADULT_HOGLINS",
        "ap": "NEAREST_VISIBLE_ADULT_PIGLIN",
        "aq": "NEAREST_VISIBLE_ZOMBIFIED",
        "ar": "VISIBLE_ADULT_PIGLIN_COUNT",
        "as": "VISIBLE_ADULT_HOGLIN_COUNT",
        "at": "NEAREST_PLAYER_HOLDING_WANTED_ITEM",
        "au": "ATE_RECENTLY",
        "av": "NEAREST_REPELLENT",
        "aw": "PACIFIED",
        "ax": "ROAR_TARGET",
        "ay": "DISTURBANCE_LOCATION",
        "az": "RECENT_PROJECTILE",
        "aA": "IS_SNIFFING",
        "aB": "IS_EMERGING",
        "aC": "ROAR_SOUND_DELAY",
        "aD": "DIG_COOLDOWN",
        "aE": "ROAR_SOUND_COOLDOWN",
        "aF": "SNIFF_COOLDOWN",
        "aG": "TOUCH_COOLDOWN",
        "aH": "VIBRATION_COOLDOWN",
        "aI": "SONIC_BOOM_COOLDOWN",
        "aJ": "SONIC_BOOM_SOUND_COOLDOWN",
        "aK": "SONIC_BOOM_SOUND_DELAY",
        "aL": "LIKED_PLAYER",
        "aM": "LIKED_NOTEBLOCK_POSITION",
        "aN": "LIKED_NOTEBLOCK_COOLDOWN_TICKS",
        "aO": "ITEM_PICKUP_COOLDOWN_TICKS",
        "aP": "SNIFFER_EXPLORED_POSITIONS",
        "aQ": "SNIFFER_SNIFFING_TARGET",
        "aR": "SNIFFER_DIGGING",
        "aS": "SNIFFER_HAPPY",
        "aT": "codec"
      },
      "methods": {
        "a()Ljava/util/Optional;": "getCodec",
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "register",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "register"
      }
    },
    "net/minecraft/world/entity/ai/memory/MemoryStatus": {
      "fields": {
        "a": "VALUE_PRESENT",
        "b": "VALUE_ABSENT",
        "c": "REGISTERED",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/ai/memory/MemoryStatus;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/memory/NearestVisibleLivingEntities": {
      "fields": {
        "a": "EMPTY",
        "b": "nearbyEntities",
        "c": "lineOfSightTest"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/memory/NearestVisibleLivingEntities;": "empty",
        "a(Ljava/util/function/Predicate;)Ljava/util/Optional;": "findClosest",
        "b(Ljava/util/function/Predicate;)Ljava/lang/Iterable;": "findAll",
        "c(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;": "find",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "contains",
        "d(Ljava/util/function/Predicate;)Z": "contains",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$find$4",
        "b(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$findAll$3",
        "a(Lit/unimi/dsi/fastutil/objects/Object2BooleanOpenHashMap;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/ai/memory/MemoryTarget": {
      "fields": {
        "a": "target",
        "b": "speedModifier",
        "c": "closeEnoughDist"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/PositionTracker;": "getTarget",
        "b()F": "getSpeedModifier",
        "c()I": "getCloseEnoughDist"
      }
    },
    "net/minecraft/world/entity/ai/navigation/AmphibiousPathNavigation": {
      "methods": {
        "a(I)Lnet/minecraft/world/level/pathfinder/PathFinder;": "createPathFinder",
        "a()Z": "canUpdatePath",
        "b()Lnet/minecraft/world/phys/Vec3;": "getTempMobPos",
        "a(Lnet/minecraft/world/phys/Vec3;)D": "getGroundY",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z": "canMoveDirectly",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isStableDestination",
        "a(Z)V": "setCanFloat"
      }
    },
    "net/minecraft/world/entity/ai/navigation/NavigationFlying": {
      "methods": {
        "a(I)Lnet/minecraft/world/level/pathfinder/PathFinder;": "createPathFinder",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z": "canMoveDirectly",
        "a()Z": "canUpdatePath",
        "b()Lnet/minecraft/world/phys/Vec3;": "getTempMobPos",
        "c()V": "tick",
        "b(Z)V": "setCanOpenDoors",
        "d()Z": "canPassDoors",
        "c(Z)V": "setCanPassDoors",
        "e()Z": "canOpenDoors",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isStableDestination"
      }
    },
    "net/minecraft/world/entity/ai/navigation/Navigation": {
      "fields": {
        "p": "avoidSun"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/pathfinder/PathFinder;": "createPathFinder",
        "a()Z": "canUpdatePath",
        "b()Lnet/minecraft/world/phys/Vec3;": "getTempMobPos",
        "t()I": "getSurfaceY",
        "L_()V": "trimPath",
        "a(Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)Z": "hasValidPathType",
        "b(Z)V": "setCanOpenDoors",
        "e()Z": "canPassDoors",
        "c(Z)V": "setCanPassDoors",
        "f()Z": "canOpenDoors",
        "d(Z)V": "setAvoidSun",
        "e(Z)V": "setCanWalkOverFences"
      }
    },
    "net/minecraft/world/entity/ai/navigation/NavigationAbstract": {
      "fields": {
        "p": "MAX_TIME_RECOMPUTE",
        "q": "STUCK_CHECK_INTERVAL",
        "r": "STUCK_THRESHOLD_DISTANCE_FACTOR",
        "a": "mob",
        "b": "level",
        "d": "speedModifier",
        "e": "tick",
        "f": "lastStuckCheck",
        "g": "lastStuckCheckPos",
        "h": "timeoutCachedNode",
        "i": "timeoutTimer",
        "j": "lastTimeoutCheck",
        "k": "timeoutLimit",
        "l": "maxDistanceToWaypoint",
        "m": "hasDelayedRecomputation",
        "n": "timeLastRecompute",
        "o": "nodeEvaluator",
        "s": "targetPos",
        "t": "reachRange",
        "u": "maxVisitedNodesMultiplier",
        "v": "pathFinder",
        "w": "isStuck"
      },
      "methods": {
        "g()V": "resetMaxVisitedNodesMultiplier",
        "a(F)V": "setMaxVisitedNodesMultiplier",
        "h()Lnet/minecraft/core/BlockPos;": "getTargetPos",
        "a(I)Lnet/minecraft/world/level/pathfinder/PathFinder;": "createPathFinder",
        "a(D)V": "setSpeedModifier",
        "i()V": "recomputePath",
        "a(DDDD)Z": "moveTo",
        "a(Lnet/minecraft/world/entity/Entity;D)Z": "moveTo",
        "c()V": "tick",
        "a(Lnet/minecraft/world/phys/Vec3;)D": "getGroundY",
        "k()V": "followThePath",
        "c(Lnet/minecraft/world/phys/Vec3;)Z": "shouldTargetNextNodeInDirection",
        "b(Lnet/minecraft/world/phys/Vec3;)V": "doStuckDetection",
        "e()V": "timeoutPath",
        "f()V": "resetStuckTimeout",
        "l()Z": "isDone",
        "m()Z": "isInProgress",
        "n()V": "stop",
        "b()Lnet/minecraft/world/phys/Vec3;": "getTempMobPos",
        "a()Z": "canUpdatePath",
        "o()Z": "isInLiquid",
        "L_()V": "trimPath",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z": "canMoveDirectly",
        "b(Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)Z": "canCutCorner",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Z)Z": "isClearForMovementBetween",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isStableDestination",
        "p()Lnet/minecraft/world/level/pathfinder/NodeEvaluator;": "getNodeEvaluator",
        "a(Z)V": "setCanFloat",
        "q()Z": "canFloat",
        "b(Lnet/minecraft/core/BlockPos;)Z": "shouldRecomputePath",
        "r()F": "getMaxDistanceToWaypoint",
        "s()Z": "isStuck"
      }
    },
    "net/minecraft/world/entity/ai/navigation/NavigationSpider": {
      "fields": {
        "p": "pathToPosition"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;D)Z": "moveTo",
        "c()V": "tick"
      }
    },
    "net/minecraft/world/entity/ai/navigation/NavigationGuardian": {
      "fields": {
        "p": "allowBreaching"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/pathfinder/PathFinder;": "createPathFinder",
        "a()Z": "canUpdatePath",
        "b()Lnet/minecraft/world/phys/Vec3;": "getTempMobPos",
        "a(Lnet/minecraft/world/phys/Vec3;)D": "getGroundY",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z": "canMoveDirectly",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isStableDestination",
        "a(Z)V": "setCanFloat"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorAdult": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)V": "doTick",
        "a(Lnet/minecraft/world/entity/AgeableMob;Lnet/minecraft/world/entity/ai/memory/NearestVisibleLivingEntities;)V": "setNearestVisibleAdult",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/world/entity/AgeableMob;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$setNearestVisibleAdult$1",
        "b(Lnet/minecraft/world/entity/AgeableMob;Lnet/minecraft/world/entity/ai/memory/NearestVisibleLivingEntities;)V": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/AxolotlAttackablesSensor": {
      "fields": {
        "a": "TARGET_DETECTION_DISTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isMatchingEntity",
        "e(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isHuntTarget",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "isHostileTarget",
        "f(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isClose",
        "b()Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "getMemory"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorDummy": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a()Ljava/util/Set;": "requires"
      }
    },
    "net/minecraft/world/entity/ai/sensing/FrogAttackablesSensor": {
      "fields": {
        "a": "TARGET_DETECTION_DISTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isMatchingEntity",
        "e(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isUnreachableAttackTarget",
        "b()Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "getMemory"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorGolemLastSeen": {
      "fields": {
        "a": "GOLEM_SCAN_RATE",
        "c": "MEMORY_TIME_TO_LIVE"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "checkForNearbyGolem",
        "b(Lnet/minecraft/world/entity/LivingEntity;)V": "golemDetected",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$checkForNearbyGolem$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorHoglinSpecific": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)V": "doTick",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Ljava/util/Optional;": "findNearestRepellent",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "lambda$findNearestRepellent$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorHurtBy": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/IsInWaterSensor": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorNearestBed": {
      "fields": {
        "a": "CACHE_TIMEOUT",
        "c": "BATCH_SIZE",
        "d": "RATE",
        "e": "batchCache",
        "f": "triedCount",
        "g": "lastUpdate"
      },
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)V": "doTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lit/unimi/dsi/fastutil/longs/Long2LongMap$Entry;)Z": "lambda$doTick$2",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$doTick$1",
        "a(Lnet/minecraft/core/BlockPos;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorNearestItems": {
      "fields": {
        "c": "XZ_RANGE",
        "d": "Y_RANGE",
        "a": "MAX_DISTANCE_TO_WANTED_ITEM"
      },
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;)V": "doTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/item/ItemEntity;)Z": "lambda$doTick$2",
        "b(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/item/ItemEntity;)Z": "lambda$doTick$1",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorNearestLivingEntities": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "b()I": "radiusXZ",
        "c()I": "radiusY",
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/NearestVisibleLivingEntitySensor": {
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isMatchingEntity",
        "b()Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "getMemory",
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "getNearestEntity",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "getVisibleEntities",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/memory/NearestVisibleLivingEntities;)Ljava/util/Optional;": "lambda$getNearestEntity$1",
        "e(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$getNearestEntity$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorPiglinBruteSpecific": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorPiglinSpecific": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "findNearestRepellent",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "isValidRepellent",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "lambda$findNearestRepellent$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorNearestPlayers": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/player/Player;)Z": "lambda$doTick$2",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/player/Player;)Z": "lambda$doTick$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorSecondaryPlaces": {
      "fields": {
        "a": "SCAN_RATE"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;)V": "doTick",
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick"
      }
    },
    "net/minecraft/world/entity/ai/sensing/EntitySenses": {
      "fields": {
        "a": "mob",
        "b": "seen",
        "c": "unseen"
      },
      "methods": {
        "a()V": "tick",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "hasLineOfSight"
      }
    },
    "net/minecraft/world/entity/ai/sensing/Sensor": {
      "fields": {
        "a": "RANDOM",
        "c": "DEFAULT_SCAN_RATE",
        "b": "TARGETING_RANGE",
        "d": "TARGET_CONDITIONS",
        "e": "TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING",
        "f": "ATTACK_TARGET_CONDITIONS",
        "g": "ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING",
        "h": "ATTACK_TARGET_CONDITIONS_IGNORE_LINE_OF_SIGHT",
        "i": "ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_AND_LINE_OF_SIGHT",
        "j": "scanRate",
        "k": "timeToTick"
      },
      "methods": {
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a()Ljava/util/Set;": "requires",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isEntityTargetable",
        "c(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isEntityAttackable",
        "d(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isEntityAttackableIgnoringLineOfSight"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorType": {
      "fields": {
        "a": "DUMMY",
        "b": "NEAREST_ITEMS",
        "c": "NEAREST_LIVING_ENTITIES",
        "d": "NEAREST_PLAYERS",
        "e": "NEAREST_BED",
        "f": "HURT_BY",
        "g": "VILLAGER_HOSTILES",
        "h": "VILLAGER_BABIES",
        "i": "SECONDARY_POIS",
        "j": "GOLEM_DETECTED",
        "k": "PIGLIN_SPECIFIC_SENSOR",
        "l": "PIGLIN_BRUTE_SPECIFIC_SENSOR",
        "m": "HOGLIN_SPECIFIC_SENSOR",
        "n": "NEAREST_ADULT",
        "o": "AXOLOTL_ATTACKABLES",
        "p": "AXOLOTL_TEMPTATIONS",
        "q": "GOAT_TEMPTATIONS",
        "r": "FROG_TEMPTATIONS",
        "s": "CAMEL_TEMPTATIONS",
        "t": "FROG_ATTACKABLES",
        "u": "IS_IN_WATER",
        "v": "WARDEN_ENTITY_SENSOR",
        "w": "SNIFFER_TEMPTATIONS",
        "x": "factory"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/sensing/Sensor;": "create",
        "a(Ljava/lang/String;Ljava/util/function/Supplier;)Lnet/minecraft/world/entity/ai/sensing/SensorType;": "register",
        "b()Lnet/minecraft/world/entity/ai/sensing/TemptingSensor;": "lambda$static$4",
        "c()Lnet/minecraft/world/entity/ai/sensing/TemptingSensor;": "lambda$static$3",
        "d()Lnet/minecraft/world/entity/ai/sensing/TemptingSensor;": "lambda$static$2",
        "e()Lnet/minecraft/world/entity/ai/sensing/TemptingSensor;": "lambda$static$1",
        "f()Lnet/minecraft/world/entity/ai/sensing/TemptingSensor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/ai/sensing/TemptingSensor": {
      "fields": {
        "a": "TEMPTATION_RANGE",
        "c": "TEMPT_TARGETING",
        "d": "temptations"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/PathfinderMob;)V": "doTick",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "playerHoldingTemptation",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isTemptation",
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorVillagerBabies": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/List;": "getNearestVillagerBabies",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "isVillagerBaby",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/ai/memory/NearestVisibleLivingEntities;": "getVisibleEntities"
      }
    },
    "net/minecraft/world/entity/ai/sensing/SensorVillagerHostiles": {
      "fields": {
        "a": "ACCEPTABLE_DISTANCE_FROM_HOSTILES"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isMatchingEntity",
        "e(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "isClose",
        "b()Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;": "getMemory",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "isHostile"
      }
    },
    "net/minecraft/world/entity/ai/sensing/WardenEntitySensor": {
      "methods": {
        "a()Ljava/util/Set;": "requires",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;)V": "doTick",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Ljava/util/function/Predicate;)Ljava/util/Optional;": "getClosest",
        "b()I": "radiusXZ",
        "c()I": "radiusY",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V": "doTick",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;)V": "lambda$doTick$4",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$doTick$3",
        "b(Lnet/minecraft/world/entity/monster/warden/Warden;)Ljava/util/Optional;": "lambda$doTick$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$doTick$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$doTick$0"
      }
    },
    "net/minecraft/world/entity/ai/targeting/PathfinderTargetCondition": {
      "fields": {
        "a": "DEFAULT",
        "b": "MIN_VISIBILITY_DISTANCE_FOR_INVISIBLE_TARGET",
        "c": "isCombat",
        "d": "range",
        "e": "checkLineOfSight",
        "f": "testInvisible",
        "g": "selector"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "forCombat",
        "b()Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "forNonCombat",
        "c()Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "copy",
        "a(D)Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "range",
        "d()Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "ignoreLineOfSight",
        "e()Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "ignoreInvisibilityTesting",
        "a(Ljava/util/function/Predicate;)Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;": "selector",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "test"
      }
    },
    "net/minecraft/world/entity/ai/util/AirAndWaterRandomPos": {
      "methods": {
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIIDDD)Lnet/minecraft/world/phys/Vec3;": "getPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIIDDDZ)Lnet/minecraft/core/BlockPos;": "generateRandomPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "lambda$generateRandomPos$1",
        "b(Lnet/minecraft/world/entity/PathfinderMob;IIIDDDZ)Lnet/minecraft/core/BlockPos;": "lambda$getPos$0"
      }
    },
    "net/minecraft/world/entity/ai/util/AirRandomPos": {
      "methods": {
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIILnet/minecraft/world/phys/Vec3;D)Lnet/minecraft/world/phys/Vec3;": "getPosTowards",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIILnet/minecraft/world/phys/Vec3;DZ)Lnet/minecraft/core/BlockPos;": "lambda$getPosTowards$0"
      }
    },
    "net/minecraft/world/entity/ai/util/DefaultRandomPos": {
      "methods": {
        "a(Lnet/minecraft/world/entity/PathfinderMob;II)Lnet/minecraft/world/phys/Vec3;": "getPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;D)Lnet/minecraft/world/phys/Vec3;": "getPosTowards",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getPosAway",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IZLnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "generateRandomPosTowardDirection",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;Z)Lnet/minecraft/core/BlockPos;": "lambda$getPosAway$2",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;DZ)Lnet/minecraft/core/BlockPos;": "lambda$getPosTowards$1",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIZ)Lnet/minecraft/core/BlockPos;": "lambda$getPos$0"
      }
    },
    "net/minecraft/world/entity/ai/util/PathfinderGoalUtil": {
      "methods": {
        "a(Lnet/minecraft/world/entity/Mob;)Z": "hasGroundPathNavigation",
        "a(Lnet/minecraft/world/entity/PathfinderMob;I)Z": "mobRestricted",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/PathfinderMob;)Z": "isOutsideLimits",
        "a(ZLnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "isRestricted",
        "a(Lnet/minecraft/world/entity/ai/navigation/PathNavigation;Lnet/minecraft/core/BlockPos;)Z": "isNotStable",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "isWater",
        "b(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "hasMalus",
        "c(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "isSolid"
      }
    },
    "net/minecraft/world/entity/ai/util/HoverRandomPos": {
      "methods": {
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIDDFII)Lnet/minecraft/world/phys/Vec3;": "getPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIDDFZII)Lnet/minecraft/core/BlockPos;": "lambda$getPos$1",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "lambda$getPos$0"
      }
    },
    "net/minecraft/world/entity/ai/util/LandRandomPos": {
      "methods": {
        "a(Lnet/minecraft/world/entity/PathfinderMob;II)Lnet/minecraft/world/phys/Vec3;": "getPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILjava/util/function/ToDoubleFunction;)Lnet/minecraft/world/phys/Vec3;": "getPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getPosTowards",
        "b(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getPosAway",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;Z)Lnet/minecraft/world/phys/Vec3;": "getPosInDirection",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "movePosUpOutOfSolid",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IZLnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "generateRandomPosTowardDirection",
        "b(Lnet/minecraft/world/entity/PathfinderMob;Lnet/minecraft/core/BlockPos;)Z": "lambda$movePosUpOutOfSolid$2",
        "b(Lnet/minecraft/world/entity/PathfinderMob;IILnet/minecraft/world/phys/Vec3;Z)Lnet/minecraft/core/BlockPos;": "lambda$getPosInDirection$1",
        "a(Lnet/minecraft/world/entity/PathfinderMob;IIZ)Lnet/minecraft/core/BlockPos;": "lambda$getPos$0"
      }
    },
    "net/minecraft/world/entity/ai/util/RandomPositionGenerator": {
      "fields": {
        "a": "RANDOM_POS_ATTEMPTS"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;II)Lnet/minecraft/core/BlockPos;": "generateRandomDirection",
        "a(Lnet/minecraft/util/RandomSource;IIIDDD)Lnet/minecraft/core/BlockPos;": "generateRandomDirectionWithinRadians",
        "a(Lnet/minecraft/core/BlockPos;ILjava/util/function/Predicate;)Lnet/minecraft/core/BlockPos;": "moveUpOutOfSolid",
        "a(Lnet/minecraft/core/BlockPos;IILjava/util/function/Predicate;)Lnet/minecraft/core/BlockPos;": "moveUpToAboveSolid",
        "a(Lnet/minecraft/world/entity/PathfinderMob;Ljava/util/function/Supplier;)Lnet/minecraft/world/phys/Vec3;": "generateRandomPos",
        "a(Ljava/util/function/Supplier;Ljava/util/function/ToDoubleFunction;)Lnet/minecraft/world/phys/Vec3;": "generateRandomPos",
        "a(Lnet/minecraft/world/entity/PathfinderMob;ILnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "generateRandomPosTowardDirection"
      }
    },
    "net/minecraft/world/entity/ai/village/ReputationEvent": {
      "fields": {
        "a": "ZOMBIE_VILLAGER_CURED",
        "b": "GOLEM_KILLED",
        "c": "VILLAGER_HURT",
        "d": "VILLAGER_KILLED",
        "e": "TRADE"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/ai/village/ReputationEventType;": "register"
      }
    },
    "net/minecraft/world/entity/ai/village/VillageSiege": {
      "fields": {
        "a": "LOGGER",
        "b": "hasSetupSiege",
        "c": "siegeState",
        "d": "zombiesToSpawn",
        "e": "nextSpawnTime",
        "f": "spawnX",
        "g": "spawnY",
        "h": "spawnZ"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;ZZ)I": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;)Z": "tryToSetupSiege",
        "b(Lnet/minecraft/server/level/ServerLevel;)V": "trySpawn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "findRandomSpawnPos"
      }
    },
    "net/minecraft/world/entity/ai/village/VillageSiege$State": {
      "fields": {
        "a": "SIEGE_CAN_ACTIVATE",
        "b": "SIEGE_TONIGHT",
        "c": "SIEGE_DONE",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/ai/village/poi/VillagePlace": {
      "fields": {
        "a": "MAX_VILLAGE_DISTANCE",
        "b": "VILLAGE_SECTION_SIZE",
        "d": "distanceTracker",
        "e": "loadedChunks"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "add",
        "a(Lnet/minecraft/core/BlockPos;)V": "remove",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)J": "getCountInRange",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/BlockPos;)Z": "existsAtPosition",
        "b(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "getInSquare",
        "c(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "getInRange",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "getInChunk",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "findAll",
        "b(Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "findAllWithType",
        "c(Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "findAllClosestFirstWithType",
        "d(Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/Optional;": "find",
        "d(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/Optional;": "findClosest",
        "e(Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/Optional;": "findClosestWithType",
        "e(Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/Optional;": "findClosest",
        "a(Ljava/util/function/Predicate;Ljava/util/function/BiPredicate;Lnet/minecraft/core/BlockPos;I)Ljava/util/Optional;": "take",
        "a(Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;Lnet/minecraft/core/BlockPos;ILnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getRandom",
        "b(Lnet/minecraft/core/BlockPos;)Z": "release",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "exists",
        "c(Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "getType",
        "d(Lnet/minecraft/core/BlockPos;)I": "getFreeTickets",
        "a(Lnet/minecraft/core/SectionPos;)I": "sectionsToVillage",
        "g(J)Z": "isVillageCenter",
        "a(Ljava/util/function/BooleanSupplier;)V": "tick",
        "a(J)V": "setDirty",
        "b(J)V": "onSectionLoad",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/chunk/LevelChunkSection;)V": "checkConsistencyWithBlocks",
        "a(Lnet/minecraft/world/level/chunk/LevelChunkSection;)Z": "mayHavePoi",
        "a(Lnet/minecraft/world/level/chunk/LevelChunkSection;Lnet/minecraft/core/SectionPos;Ljava/util/function/BiConsumer;)V": "updateFromSection",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;I)V": "ensureLoadedAndValid",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/ChunkPos;)V": "lambda$ensureLoadedAndValid$33",
        "b(Lnet/minecraft/world/level/ChunkPos;)Z": "lambda$ensureLoadedAndValid$32",
        "a(Lcom/mojang/datafixers/util/Pair;)Lnet/minecraft/world/level/ChunkPos;": "lambda$ensureLoadedAndValid$31",
        "b(Lcom/mojang/datafixers/util/Pair;)Z": "lambda$ensureLoadedAndValid$30",
        "b(Lnet/minecraft/core/SectionPos;)Lcom/mojang/datafixers/util/Pair;": "lambda$ensureLoadedAndValid$29",
        "a(Lnet/minecraft/world/level/chunk/LevelChunkSection;Ljava/util/function/BiConsumer;Lnet/minecraft/core/BlockPos;)V": "lambda$updateFromSection$28",
        "a(Ljava/util/function/BiConsumer;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "lambda$updateFromSection$27",
        "a(Lnet/minecraft/world/level/chunk/LevelChunkSection;Lnet/minecraft/core/SectionPos;)V": "lambda$checkConsistencyWithBlocks$26",
        "a(Lnet/minecraft/world/level/chunk/LevelChunkSection;Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)V": "lambda$checkConsistencyWithBlocks$25",
        "b(Lnet/minecraft/world/level/chunk/LevelChunkSection;Lnet/minecraft/core/SectionPos;Ljava/util/function/BiConsumer;)V": "lambda$checkConsistencyWithBlocks$24",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/lang/Boolean;": "lambda$isVillageCenter$23",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$isVillageCenter$22",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/lang/Integer;": "lambda$getFreeTickets$21",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/util/Optional;": "lambda$getType$20",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/lang/Boolean;": "lambda$exists$19",
        "e(Lnet/minecraft/core/BlockPos;)Ljava/lang/IllegalStateException;": "lambda$release$18",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/lang/Boolean;": "lambda$release$17",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$getRandom$16",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Lnet/minecraft/core/BlockPos;": "lambda$take$15",
        "a(Ljava/util/function/BiPredicate;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$take$14",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)D": "lambda$findClosest$13",
        "b(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Lcom/mojang/datafixers/util/Pair;": "lambda$findClosestWithType$12",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)D": "lambda$findClosestWithType$11",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)D": "lambda$findClosest$10",
        "a(Lnet/minecraft/core/BlockPos;Lcom/mojang/datafixers/util/Pair;)D": "lambda$findAllClosestFirstWithType$9",
        "c(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Lcom/mojang/datafixers/util/Pair;": "lambda$findAllWithType$8",
        "b(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$findAllWithType$7",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;Ljava/util/Optional;)Ljava/util/stream/Stream;": "lambda$getInChunk$6",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Integer;)Ljava/util/Optional;": "lambda$getInChunk$5",
        "a(Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$getInRange$4",
        "b(Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$getInSquare$3",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;Lnet/minecraft/world/level/ChunkPos;)Ljava/util/stream/Stream;": "lambda$getInSquare$2",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;)Z": "lambda$existsAtPosition$1",
        "d(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)V": "lambda$remove$0"
      }
    },
    "net/minecraft/world/entity/ai/village/poi/VillagePlace$Occupancy": {
      "fields": {
        "a": "HAS_SPACE",
        "b": "IS_OCCUPIED",
        "c": "ANY",
        "d": "test",
        "e": "$VALUES"
      },
      "methods": {
        "a()Ljava/util/function/Predicate;": "getTest",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$static$0",
        "b()[Lnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;": "$values"
      }
    },
    "net/minecraft/world/entity/ai/village/poi/VillagePlaceRecord": {
      "fields": {
        "a": "pos",
        "b": "poiType",
        "c": "freeTickets",
        "d": "setDirty"
      },
      "methods": {
        "a(Ljava/lang/Runnable;)Lcom/mojang/serialization/Codec;": "codec",
        "a()I": "getFreeTickets",
        "b()Z": "acquireTicket",
        "c()Z": "releaseTicket",
        "d()Z": "hasSpace",
        "e()Z": "isOccupied",
        "f()Lnet/minecraft/core/BlockPos;": "getPos",
        "g()Lnet/minecraft/core/Holder;": "getPoiType",
        "a(Ljava/lang/Runnable;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$3",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Ljava/lang/Integer;": "lambda$codec$2",
        "b(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Lnet/minecraft/core/Holder;": "lambda$codec$1",
        "c(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Lnet/minecraft/core/BlockPos;": "lambda$codec$0"
      }
    },
    "net/minecraft/world/entity/ai/village/poi/VillagePlaceSection": {
      "fields": {
        "a": "LOGGER",
        "b": "records",
        "c": "byType",
        "d": "setDirty",
        "e": "isValid"
      },
      "methods": {
        "a(Ljava/lang/Runnable;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/entity/ai/village/poi/PoiManager$Occupancy;)Ljava/util/stream/Stream;": "getRecords",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "add",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "add",
        "a(Lnet/minecraft/core/BlockPos;)V": "remove",
        "b(Lnet/minecraft/core/BlockPos;)I": "getFreeTickets",
        "c(Lnet/minecraft/core/BlockPos;)Z": "release",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "exists",
        "d(Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "getType",
        "e(Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "getPoiRecord",
        "a(Ljava/util/function/Consumer;)V": "refresh",
        "b()V": "clear",
        "a()Z": "isValid",
        "a(Lit/unimi/dsi/fastutil/shorts/Short2ObjectMap;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)V": "lambda$refresh$9",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;S)Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;": "lambda$refresh$8",
        "a(Lnet/minecraft/core/Holder;)Ljava/util/Set;": "lambda$add$7",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$add$6",
        "a(Ljava/util/Map$Entry;)Ljava/util/stream/Stream;": "lambda$getRecords$5",
        "a(Ljava/util/function/Predicate;Ljava/util/Map$Entry;)Z": "lambda$getRecords$4",
        "b(Ljava/lang/Runnable;)Lnet/minecraft/world/entity/ai/village/poi/PoiSection;": "lambda$codec$3",
        "a(Ljava/lang/Runnable;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$2",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/util/List;": "lambda$codec$1",
        "b(Lnet/minecraft/world/entity/ai/village/poi/PoiSection;)Ljava/lang/Boolean;": "lambda$codec$0"
      }
    },
    "net/minecraft/world/entity/ai/village/poi/VillagePlaceType": {
      "fields": {
        "b": "matchingStates",
        "c": "maxTickets",
        "d": "validRange",
        "a": "NONE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "is",
        "a()Ljava/util/Set;": "matchingStates",
        "b()I": "maxTickets",
        "c()I": "validRange",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/ai/village/poi/PoiTypes": {
      "fields": {
        "a": "ARMORER",
        "b": "BUTCHER",
        "c": "CARTOGRAPHER",
        "d": "CLERIC",
        "e": "FARMER",
        "f": "FISHERMAN",
        "g": "FLETCHER",
        "h": "LEATHERWORKER",
        "i": "LIBRARIAN",
        "j": "MASON",
        "k": "SHEPHERD",
        "l": "TOOLSMITH",
        "m": "WEAPONSMITH",
        "n": "HOME",
        "o": "MEETING",
        "p": "BEEHIVE",
        "q": "BEE_NEST",
        "r": "NETHER_PORTAL",
        "s": "LODESTONE",
        "t": "LIGHTNING_ROD",
        "u": "BEDS",
        "v": "CAULDRONS",
        "w": "TYPE_BY_STATE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Ljava/util/Set;": "getBlockStates",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/core/Holder;Ljava/util/Set;)V": "registerBlockStates",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "forState",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasPoi",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$registerBlockStates$3",
        "b(Lnet/minecraft/world/level/block/Block;)Ljava/util/stream/Stream;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$static$1",
        "c(Lnet/minecraft/world/level/block/Block;)Ljava/util/stream/Stream;": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/ambient/EntityAmbient": {
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed"
      }
    },
    "net/minecraft/world/entity/ambient/EntityBat": {
      "fields": {
        "b": "FLAP_DEGREES_PER_TICK",
        "c": "TICKS_PER_FLAP",
        "d": "DATA_ID_FLAGS",
        "e": "FLAG_RESTING",
        "bS": "BAT_RESTING_TARGETING",
        "bT": "targetPosition"
      },
      "methods": {
        "aP()Z": "isFlapping",
        "a_()V": "defineSynchedData",
        "eR()F": "getSoundVolume",
        "eS()F": "getVoicePitch",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "bp()Z": "isPushable",
        "A(Lnet/minecraft/world/entity/Entity;)V": "doPush",
        "fd()V": "pushEntities",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "r()Z": "isResting",
        "w(Z)V": "setResting",
        "l()V": "tick",
        "W()V": "customServerAiStep",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "c_()Z": "isIgnoringBlockTriggers",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkBatSpawnRules",
        "w()Z": "isHalloween",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight"
      }
    },
    "net/minecraft/world/entity/animal/EntityFish": {
      "fields": {
        "b": "FROM_BUCKET"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "T()Z": "requiresCustomPersistence",
        "h(D)Z": "removeWhenFarAway",
        "fE()I": "getMaxSpawnClusterSize",
        "a_()V": "defineSynchedData",
        "r()Z": "fromBucket",
        "w(Z)V": "setFromBucket",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "x()V": "registerGoals",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "b_()V": "aiStep",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "saveToBucketTag",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "loadFromBucketTag",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getPickupSound",
        "fY()Z": "canRandomSwim",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound"
      }
    },
    "net/minecraft/world/entity/animal/EntityGolem": {
      "methods": {
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "M()I": "getAmbientSoundInterval",
        "h(D)Z": "removeWhenFarAway"
      }
    },
    "net/minecraft/world/entity/animal/EntityFishSchool": {
      "fields": {
        "b": "leader",
        "c": "schoolSize"
      },
      "methods": {
        "x()V": "registerGoals",
        "fE()I": "getMaxSpawnClusterSize",
        "ga()I": "getMaxSchoolSize",
        "fY()Z": "canRandomSwim",
        "gb()Z": "isFollower",
        "a(Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;)Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;": "startFollowing",
        "gc()V": "stopFollowing",
        "gh()V": "addFollower",
        "gi()V": "removeFollower",
        "gd()Z": "canBeFollowed",
        "l()V": "tick",
        "ge()Z": "hasFollowers",
        "gf()Z": "inRangeOfLeader",
        "gg()V": "pathToLeader",
        "a(Ljava/util/stream/Stream;)V": "addFollowers",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;)V": "lambda$addFollowers$1",
        "c(Lnet/minecraft/world/entity/animal/AbstractSchoolingFish;)Z": "lambda$addFollowers$0"
      }
    },
    "net/minecraft/world/entity/animal/EntityAnimal": {
      "fields": {
        "bV": "PARENT_AGE_AFTER_BREEDING",
        "bT": "inLove",
        "bU": "loveCause"
      },
      "methods": {
        "W()V": "customServerAiStep",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "bw()D": "getMyRidingOffset",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkAnimalSpawnRules",
        "a(Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/core/BlockPos;)Z": "isBrightEnoughToSpawn",
        "M()I": "getAmbientSoundInterval",
        "h(D)Z": "removeWhenFarAway",
        "ea()I": "getExperienceReward",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)V": "usePlayerItem",
        "fZ()Z": "canFallInLove",
        "g(Lnet/minecraft/world/entity/player/Player;)V": "setInLove",
        "s(I)V": "setInLoveTime",
        "ga()I": "getInLoveTime",
        "gb()Lnet/minecraft/server/level/ServerPlayer;": "getLoveCause",
        "gc()Z": "isInLove",
        "gd()V": "resetLove",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;)V": "spawnChildFromBreeding",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;Lnet/minecraft/world/entity/AgeableMob;)V": "finalizeSpawnChildFromBreeding",
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/world/entity/animal/Animal;Lnet/minecraft/world/entity/AgeableMob;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$finalizeSpawnChildFromBreeding$1",
        "b(Lnet/minecraft/world/entity/animal/Animal;)Ljava/util/Optional;": "lambda$finalizeSpawnChildFromBreeding$0"
      }
    },
    "net/minecraft/world/entity/animal/EntityBee": {
      "fields": {
        "bT": "FLAP_DEGREES_PER_TICK",
        "bU": "TICKS_PER_FLAP",
        "cd": "DATA_FLAGS_ID",
        "ce": "DATA_REMAINING_ANGER_TIME",
        "cf": "FLAG_ROLL",
        "cg": "FLAG_HAS_STUNG",
        "ch": "FLAG_HAS_NECTAR",
        "ci": "STING_DEATH_COUNTDOWN",
        "cj": "TICKS_BEFORE_GOING_TO_KNOWN_FLOWER",
        "ck": "TICKS_WITHOUT_NECTAR_BEFORE_GOING_HOME",
        "cl": "MIN_ATTACK_DIST",
        "cm": "MAX_CROPS_GROWABLE",
        "cn": "POISON_SECONDS_NORMAL",
        "co": "POISON_SECONDS_HARD",
        "cp": "TOO_FAR_DISTANCE",
        "cq": "HIVE_CLOSE_ENOUGH_DISTANCE",
        "cr": "PATHFIND_TO_HIVE_WHEN_CLOSER_THAN",
        "cs": "HIVE_SEARCH_DISTANCE",
        "bW": "TAG_CROPS_GROWN_SINCE_POLLINATION",
        "bX": "TAG_CANNOT_ENTER_HIVE_TICKS",
        "bY": "TAG_TICKS_SINCE_POLLINATION",
        "bZ": "TAG_HAS_STUNG",
        "ca": "TAG_HAS_NECTAR",
        "cb": "TAG_FLOWER_POS",
        "cc": "TAG_HIVE_POS",
        "ct": "PERSISTENT_ANGER_TIME",
        "cu": "persistentAngerTarget",
        "cv": "rollAmount",
        "cw": "rollAmountO",
        "cx": "timeSinceSting",
        "cy": "ticksWithoutNectarSinceExitingHive",
        "cz": "stayOutOfHiveCountdown",
        "cA": "numCropsGrownSincePollination",
        "cB": "COOLDOWN_BEFORE_LOCATING_NEW_HIVE",
        "cC": "remainingCooldownBeforeLocatingNewHive",
        "cD": "COOLDOWN_BEFORE_LOCATING_NEW_FLOWER",
        "cE": "remainingCooldownBeforeLocatingNewFlower",
        "cF": "savedFlowerPos",
        "cG": "hivePos",
        "cH": "beePollinateGoal",
        "cI": "goToHiveGoal",
        "cJ": "goToKnownFlowerGoal",
        "cK": "underWaterTicks"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "x()V": "registerGoals",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "l()V": "tick",
        "a(Lnet/minecraft/world/level/Level;DDDDDLnet/minecraft/core/particles/ParticleOptions;)V": "spawnFluidParticle",
        "j(Lnet/minecraft/core/BlockPos;)V": "pathfindRandomlyTowards",
        "q()Lnet/minecraft/core/BlockPos;": "getSavedFlowerPos",
        "r()Z": "hasSavedFlowerPos",
        "i(Lnet/minecraft/core/BlockPos;)V": "setSavedFlowerPos",
        "w()I": "getTravellingTicks",
        "fY()Ljava/util/List;": "getBlacklistedHives",
        "gn()Z": "isTiredOfLookingForNectar",
        "go()Z": "wantsToEnterHive",
        "t(I)V": "setStayOutOfHiveCountdown",
        "D(F)F": "getRollAmount",
        "gp()V": "updateRollAmount",
        "W()V": "customServerAiStep",
        "ge()V": "resetTicksWithoutNectarSinceExitingHive",
        "gq()Z": "isHiveNearFire",
        "a()I": "getRemainingPersistentAngerTime",
        "a(I)V": "setRemainingPersistentAngerTime",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "c()V": "startPersistentAngerTimer",
        "k(Lnet/minecraft/core/BlockPos;)Z": "doesHiveHaveSpace",
        "gf()Z": "hasHive",
        "gg()Lnet/minecraft/core/BlockPos;": "getHivePos",
        "gh()Lnet/minecraft/world/entity/ai/goal/GoalSelector;": "getGoalSelector",
        "V()V": "sendDebugPackets",
        "gr()I": "getCropsGrownSincePollination",
        "gs()V": "resetNumCropsGrownSincePollination",
        "gt()V": "incrementNumCropsGrownSincePollination",
        "b_()V": "aiStep",
        "gu()Z": "isHiveValid",
        "gi()Z": "hasNectar",
        "w(Z)V": "setHasNectar",
        "gj()Z": "hasStung",
        "x(Z)V": "setHasStung",
        "gv()Z": "isRolling",
        "y(Z)V": "setRolling",
        "l(Lnet/minecraft/core/BlockPos;)Z": "isTooFarAway",
        "d(IZ)V": "setFlag",
        "u(I)Z": "getFlag",
        "gk()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "m(Lnet/minecraft/core/BlockPos;)Z": "isFlowerValid",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "eR()F": "getSoundVolume",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Bee;": "getBreedOffspring",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "aP()Z": "isFlapping",
        "gl()Z": "isFlying",
        "gm()V": "dropOffNectar",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "c(Lnet/minecraft/tags/TagKey;)V": "jumpInLiquid",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "b(Lnet/minecraft/core/BlockPos;I)Z": "closerThan",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "c(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "access$200",
        "e(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "access$400",
        "g(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "access$600",
        "h(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "access$700",
        "i(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "access$800",
        "u(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/util/RandomSource;": "access$2000",
        "w(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/util/RandomSource;": "access$2200",
        "x(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "access$2300",
        "A(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/util/RandomSource;": "access$2600",
        "C(Lnet/minecraft/world/entity/animal/Bee;)Lnet/minecraft/util/RandomSource;": "access$2800"
      }
    },
    "net/minecraft/world/entity/animal/Bucketable": {
      "methods": {
        "r()Z": "fromBucket",
        "w(Z)V": "setFromBucket",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "saveToBucketTag",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "loadFromBucketTag",
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getPickupSound",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/item/ItemStack;)V": "saveDefaultDataToBucketTag",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/nbt/CompoundTag;)V": "loadDefaultDataFromBucketTag",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "bucketMobPickup"
      }
    },
    "net/minecraft/world/entity/animal/EntityCat": {
      "fields": {
        "bW": "TEMPT_SPEED_MOD",
        "bX": "WALK_SPEED_MOD",
        "bY": "SPRINT_SPEED_MOD",
        "bZ": "TEMPT_INGREDIENT",
        "ca": "DATA_VARIANT_ID",
        "cb": "IS_LYING",
        "cc": "RELAX_STATE_ONE",
        "cd": "DATA_COLLAR_COLOR",
        "ce": "avoidPlayersGoal",
        "cf": "temptGoal",
        "cg": "lieDownAmount",
        "ch": "lieDownAmountO",
        "ci": "lieDownAmountTail",
        "cj": "lieDownAmountOTail",
        "ck": "relaxStateOneAmount",
        "cl": "relaxStateOneAmountO"
      },
      "methods": {
        "ge()Lnet/minecraft/resources/ResourceLocation;": "getResourceLocation",
        "x()V": "registerGoals",
        "gf()Lnet/minecraft/world/entity/animal/CatVariant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/CatVariant;)V": "setVariant",
        "A(Z)V": "setLying",
        "gg()Z": "isLying",
        "B(Z)V": "setRelaxStateOne",
        "gh()Z": "isRelaxStateOne",
        "gi()Lnet/minecraft/world/item/DyeColor;": "getCollarColor",
        "a(Lnet/minecraft/world/item/DyeColor;)V": "setCollarColor",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "W()V": "customServerAiStep",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "M()I": "getAmbientSoundInterval",
        "gj()V": "hiss",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "gk()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)V": "usePlayerItem",
        "gl()F": "getAttackDamage",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "l()V": "tick",
        "gm()V": "handleLieDown",
        "gn()V": "updateLieDownAmount",
        "go()V": "updateRelaxStateOneAmount",
        "D(F)F": "getLieDownAmount",
        "E(F)F": "getLieDownAmountTail",
        "F(F)F": "getRelaxStateOneAmount",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Cat;": "getBreedOffspring",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "h(D)Z": "removeWhenFarAway",
        "r()V": "reassessTameGoals",
        "bQ()Z": "isSteppingCarefully",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/EntityCat$PathfinderGoalTemptChance": {
      "fields": {
        "c": "selectedPlayer",
        "d": "cat"
      },
      "methods": {
        "e()V": "tick",
        "h()Z": "canScare",
        "a()Z": "canUse"
      }
    },
    "net/minecraft/world/entity/animal/CatVariant": {
      "fields": {
        "l": "texture",
        "a": "TABBY",
        "b": "BLACK",
        "c": "RED",
        "d": "SIAMESE",
        "e": "BRITISH_SHORTHAIR",
        "f": "CALICO",
        "g": "PERSIAN",
        "h": "RAGDOLL",
        "i": "WHITE",
        "j": "JELLIE",
        "k": "ALL_BLACK"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a()Lnet/minecraft/resources/ResourceLocation;": "texture"
      }
    },
    "net/minecraft/world/entity/animal/EntityChicken": {
      "fields": {
        "cb": "FOOD_ITEMS",
        "bT": "flap",
        "bU": "flapSpeed",
        "bW": "oFlapSpeed",
        "bX": "oFlap",
        "bY": "flapping",
        "cc": "nextFlap",
        "bZ": "eggTime",
        "ca": "isChickenJockey"
      },
      "methods": {
        "x()V": "registerGoals",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b_()V": "aiStep",
        "aP()Z": "isFlapping",
        "aO()V": "onFlap",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Chicken;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "ea()I": "getExperienceReward",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "h(D)Z": "removeWhenFarAway",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V": "positionRider",
        "r()Z": "isChickenJockey",
        "w(Z)V": "setChickenJockey",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/EntityCod": {
      "methods": {
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound"
      }
    },
    "net/minecraft/world/entity/animal/EntityCow": {
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "eR()F": "getSoundVolume",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Cow;": "getBreedOffspring",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/EntityDolphin": {
      "fields": {
        "d": "TREASURE_POS",
        "e": "GOT_FISH",
        "bT": "MOISTNESS_LEVEL",
        "bU": "SWIM_WITH_PLAYER_TARGETING",
        "b": "TOTAL_AIR_SUPPLY",
        "bV": "TOTAL_MOISTNESS_LEVEL",
        "c": "ALLOWED_ITEMS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "dN()Z": "canBreatheUnderwater",
        "b(I)V": "handleAirSupply",
        "i(Lnet/minecraft/core/BlockPos;)V": "setTreasurePos",
        "q()Lnet/minecraft/core/BlockPos;": "getTreasurePos",
        "r()Z": "gotFish",
        "w(Z)V": "setGotFish",
        "w()I": "getMoistnessLevel",
        "c(I)V": "setMoisntessLevel",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "x()V": "registerGoals",
        "fY()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "ce()I": "getMaxAirSupply",
        "n(I)I": "increaseAirSupply",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "X()I": "getMaxHeadXRot",
        "fC()I": "getMaxHeadYRot",
        "l(Lnet/minecraft/world/entity/Entity;)Z": "canRide",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "l()V": "tick",
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/core/particles/ParticleOptions;)V": "addParticlesAroundSelf",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "aK()Lnet/minecraft/sounds/SoundEvent;": "getSwimSplashSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "fZ()Z": "closeToNextPos",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed"
      }
    },
    "net/minecraft/world/entity/animal/EntityBird": {
      "methods": {
        "gl()Z": "isFlying"
      }
    },
    "net/minecraft/world/entity/animal/EntityFox": {
      "fields": {
        "bX": "DATA_TYPE_ID",
        "bY": "DATA_FLAGS_ID",
        "bZ": "FLAG_SITTING",
        "bT": "FLAG_CROUCHING",
        "bU": "FLAG_INTERESTED",
        "bW": "FLAG_POUNCING",
        "ca": "FLAG_SLEEPING",
        "cb": "FLAG_FACEPLANTED",
        "cc": "FLAG_DEFENDING",
        "cd": "DATA_TRUSTED_ID_0",
        "ce": "DATA_TRUSTED_ID_1",
        "cf": "ALLOWED_ITEMS",
        "cg": "TRUSTED_TARGET_SELECTOR",
        "ch": "STALKABLE_PREY",
        "ci": "AVOID_PLAYERS",
        "cj": "MIN_TICKS_BEFORE_EAT",
        "ck": "landTargetGoal",
        "cl": "turtleEggTargetGoal",
        "cm": "fishTargetGoal",
        "cn": "interestedAngle",
        "co": "interestedAngleO",
        "cp": "crouchAmount",
        "cq": "crouchAmountO",
        "cr": "ticksSinceEaten"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "x()V": "registerGoals",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "b_()V": "aiStep",
        "eT()Z": "isImmobile",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "canEat",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "b(B)V": "handleEntityEvent",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Fox;": "getBreedOffspring",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkFoxSpawnRules",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "gi()V": "setTargetGoals",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)V": "usePlayerItem",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "r()Lnet/minecraft/world/entity/animal/Fox$Type;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/Fox$Type;)V": "setVariant",
        "gj()Ljava/util/List;": "getTrustedUUIDs",
        "b(Ljava/util/UUID;)V": "addTrustedUUID",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "w()Z": "isSitting",
        "w(Z)V": "setSitting",
        "fY()Z": "isFaceplanted",
        "A(Z)V": "setFaceplanted",
        "gk()Z": "isDefending",
        "B(Z)V": "setDefending",
        "fy()Z": "isSleeping",
        "C(Z)V": "setSleeping",
        "d(IZ)V": "setFlag",
        "t(I)Z": "getFlag",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "j(Lnet/minecraft/world/item/ItemStack;)Z": "canHoldItem",
        "n(Lnet/minecraft/world/item/ItemStack;)V": "spitOutItem",
        "o(Lnet/minecraft/world/item/ItemStack;)V": "dropItemStack",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "l()V": "tick",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Mob;)V": "onOffspringSpawnedFromEgg",
        "ge()Z": "isPouncing",
        "x(Z)V": "setIsPouncing",
        "gf()Z": "isJumping",
        "gg()Z": "isFullyCrouched",
        "y(Z)V": "setIsCrouching",
        "bU()Z": "isCrouching",
        "z(Z)V": "setIsInterested",
        "gh()Z": "isInterested",
        "D(F)F": "getHeadRollAngle",
        "E(F)F": "getCrouchAmount",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "d(FF)I": "calculateFallDamage",
        "gl()V": "wakeUp",
        "gm()V": "clearStates",
        "gn()Z": "canMove",
        "N()V": "playAmbientSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "c(Ljava/util/UUID;)Z": "trusts",
        "g(Lnet/minecraft/world/damagesource/DamageSource;)V": "dropAllDeathLoot",
        "a(Lnet/minecraft/world/entity/animal/Fox;Lnet/minecraft/world/entity/LivingEntity;)Z": "isPathClear",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant",
        "a(Lnet/minecraft/world/entity/animal/Fox;)Z": "access$000",
        "d(Lnet/minecraft/world/entity/animal/Fox;)Lnet/minecraft/util/RandomSource;": "access$300"
      }
    },
    "net/minecraft/world/entity/animal/EntityFox$Type": {
      "fields": {
        "a": "RED",
        "b": "SNOW",
        "c": "CODEC",
        "d": "BY_ID",
        "e": "id",
        "f": "name",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()I": "getId",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/animal/Fox$Type;": "byName",
        "a(I)Lnet/minecraft/world/entity/animal/Fox$Type;": "byId",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/entity/animal/Fox$Type;": "byBiome"
      }
    },
    "net/minecraft/world/entity/animal/FrogVariant": {
      "fields": {
        "d": "texture",
        "a": "TEMPERATE",
        "b": "WARM",
        "c": "COLD"
      },
      "methods": {
        "a(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/world/entity/animal/FrogVariant;": "register",
        "a()Lnet/minecraft/resources/ResourceLocation;": "texture"
      }
    },
    "net/minecraft/world/entity/animal/EntityIronGolem": {
      "fields": {
        "c": "DATA_FLAGS_ID",
        "d": "IRON_INGOT_HEAL_AMOUNT",
        "e": "attackAnimationTick",
        "bT": "offerFlowerTick",
        "bU": "PERSISTENT_ANGER_TIME",
        "bV": "remainingPersistentAngerTime",
        "bW": "persistentAngerTarget"
      },
      "methods": {
        "x()V": "registerGoals",
        "a_()V": "defineSynchedData",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "m(I)I": "decreaseAirSupply",
        "A(Lnet/minecraft/world/entity/Entity;)V": "doPush",
        "b_()V": "aiStep",
        "bg()Z": "canSpawnSprintParticle",
        "a(Lnet/minecraft/world/entity/EntityType;)Z": "canAttackType",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "c()V": "startPersistentAngerTimer",
        "a(I)V": "setRemainingPersistentAngerTime",
        "a()I": "getRemainingPersistentAngerTime",
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "ga()F": "getAttackDamage",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "r()Lnet/minecraft/world/entity/animal/IronGolem$Crackiness;": "getCrackiness",
        "b(B)V": "handleEntityEvent",
        "w()I": "getAttackAnimationTick",
        "w(Z)V": "offerFlower",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "fY()I": "getOfferFlowerTick",
        "fZ()Z": "isPlayerCreated",
        "x(Z)V": "setPlayerCreated",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset"
      }
    },
    "net/minecraft/world/entity/animal/EntityIronGolem$CrackLevel": {
      "fields": {
        "a": "NONE",
        "b": "LOW",
        "c": "MEDIUM",
        "d": "HIGH",
        "e": "BY_DAMAGE",
        "f": "fraction",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/entity/animal/IronGolem$Crackiness;": "byFraction"
      }
    },
    "net/minecraft/world/entity/animal/EntityMushroomCow": {
      "fields": {
        "bT": "DATA_TYPE",
        "bU": "MUTATE_CHANCE",
        "bX": "effectDuration",
        "bY": "lastLightningBoltUUID"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkMushroomSpawnRules",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "shear",
        "a()Z": "readyForShearing",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "l(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getEffectFromItemStack",
        "a(Lnet/minecraft/world/entity/animal/MushroomCow$MushroomType;)V": "setVariant",
        "r()Lnet/minecraft/world/entity/animal/MushroomCow$MushroomType;": "getVariant",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/MushroomCow;": "getBreedOffspring",
        "a(Lnet/minecraft/world/entity/animal/MushroomCow;)Lnet/minecraft/world/entity/animal/MushroomCow$MushroomType;": "getOffspringType",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Cow;": "getBreedOffspring",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/EntityMushroomCow$Type": {
      "fields": {
        "a": "RED",
        "b": "BROWN",
        "c": "CODEC",
        "d": "type",
        "e": "blockState",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/animal/MushroomCow$MushroomType;": "byType"
      }
    },
    "net/minecraft/world/entity/animal/EntityOcelot": {
      "fields": {
        "bT": "CROUCH_SPEED_MOD",
        "bU": "WALK_SPEED_MOD",
        "bW": "SPRINT_SPEED_MOD",
        "bX": "TEMPT_INGREDIENT",
        "bY": "DATA_TRUSTING",
        "bZ": "ocelotAvoidPlayersGoal",
        "ca": "temptGoal"
      },
      "methods": {
        "w()Z": "isTrusting",
        "w(Z)V": "setTrusting",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a_()V": "defineSynchedData",
        "x()V": "registerGoals",
        "W()V": "customServerAiStep",
        "h(D)Z": "removeWhenFarAway",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "M()I": "getAmbientSoundInterval",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "fY()F": "getAttackDamage",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(B)V": "handleEntityEvent",
        "x(Z)V": "spawnTrustingParticles",
        "r()V": "reassessTrustingGoals",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Ocelot;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkOcelotSpawnRules",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "bQ()Z": "isSteppingCarefully",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/EntityPanda": {
      "fields": {
        "bW": "UNHAPPY_COUNTER",
        "bX": "SNEEZE_COUNTER",
        "bY": "EAT_COUNTER",
        "bZ": "MAIN_GENE_ID",
        "ca": "HIDDEN_GENE_ID",
        "cb": "DATA_ID_FLAGS",
        "cc": "BREED_TARGETING",
        "cd": "FLAG_SNEEZE",
        "ce": "FLAG_ROLL",
        "cf": "FLAG_SIT",
        "cg": "FLAG_ON_BACK",
        "ch": "EAT_TICK_INTERVAL",
        "bT": "TOTAL_ROLL_STEPS",
        "ci": "TOTAL_UNHAPPY_TIME",
        "cj": "gotBamboo",
        "ck": "didBite",
        "bU": "rollCounter",
        "cl": "rollDelta",
        "cm": "sitAmount",
        "cn": "sitAmountO",
        "co": "onBackAmount",
        "cp": "onBackAmountO",
        "cq": "rollAmount",
        "cr": "rollAmountO",
        "cs": "lookAtPlayerGoal",
        "ct": "PANDA_ITEMS"
      },
      "methods": {
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "q()I": "getUnhappyCounter",
        "t(I)V": "setUnhappyCounter",
        "r()Z": "isSneezing",
        "w()Z": "isSitting",
        "w(Z)V": "sit",
        "fY()Z": "isOnBack",
        "x(Z)V": "setOnBack",
        "ge()Z": "isEating",
        "y(Z)V": "eat",
        "gt()I": "getEatCounter",
        "v(I)V": "setEatCounter",
        "z(Z)V": "sneeze",
        "gf()I": "getSneezeCounter",
        "u(I)V": "setSneezeCounter",
        "gg()Lnet/minecraft/world/entity/animal/Panda$Gene;": "getMainGene",
        "a(Lnet/minecraft/world/entity/animal/Panda$Gene;)V": "setMainGene",
        "gh()Lnet/minecraft/world/entity/animal/Panda$Gene;": "getHiddenGene",
        "b(Lnet/minecraft/world/entity/animal/Panda$Gene;)V": "setHiddenGene",
        "gi()Z": "isRolling",
        "A(Z)V": "roll",
        "a_()V": "defineSynchedData",
        "w(I)Z": "getFlag",
        "d(IZ)V": "setFlag",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "x()V": "registerGoals",
        "gj()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "gk()Lnet/minecraft/world/entity/animal/Panda$Gene;": "getVariant",
        "gl()Z": "isLazy",
        "gm()Z": "isWorried",
        "gn()Z": "isPlayful",
        "go()Z": "isBrown",
        "gp()Z": "isWeak",
        "fS()Z": "isAggressive",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "l()V": "tick",
        "gq()Z": "isScared",
        "gu()V": "handleEating",
        "gv()V": "addEatingParticles",
        "gw()V": "updateSitAmount",
        "gx()V": "updateOnBackAnimation",
        "gy()V": "updateRollAmount",
        "D(F)F": "getSitAmount",
        "E(F)F": "getLieOnBackAmount",
        "F(F)F": "getRollAmount",
        "gz()V": "handleRoll",
        "gA()V": "afterSneeze",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/entity/animal/Panda;Lnet/minecraft/world/entity/animal/Panda;)V": "setGeneFromParents",
        "gB()Lnet/minecraft/world/entity/animal/Panda$Gene;": "getOneOfGenesRandomly",
        "gr()V": "setAttributes",
        "gC()V": "tryToSit",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "isFoodOrCake",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "gs()Z": "canPerformAction"
      }
    },
    "net/minecraft/world/entity/animal/EntityPanda$Gene": {
      "fields": {
        "a": "NORMAL",
        "b": "LAZY",
        "c": "WORRIED",
        "d": "PLAYFUL",
        "e": "BROWN",
        "f": "WEAK",
        "g": "AGGRESSIVE",
        "h": "CODEC",
        "i": "BY_ID",
        "j": "MAX_GENE",
        "k": "id",
        "l": "name",
        "m": "isRecessive",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()Z": "isRecessive",
        "a(Lnet/minecraft/world/entity/animal/Panda$Gene;Lnet/minecraft/world/entity/animal/Panda$Gene;)Lnet/minecraft/world/entity/animal/Panda$Gene;": "getVariantFromGenes",
        "a(I)Lnet/minecraft/world/entity/animal/Panda$Gene;": "byId",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/animal/Panda$Gene;": "byName",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/entity/animal/Panda$Gene;": "getRandom"
      }
    },
    "net/minecraft/world/entity/animal/EntityParrot": {
      "fields": {
        "ca": "DATA_VARIANT_ID",
        "cb": "NOT_PARROT_PREDICATE",
        "cc": "POISONOUS_FOOD",
        "cd": "TAME_FOOD",
        "ce": "MOB_SOUND_MAP",
        "bW": "flap",
        "bX": "flapSpeed",
        "bY": "oFlapSpeed",
        "bZ": "oFlap",
        "cf": "flapping",
        "cg": "nextFlap",
        "ch": "partyParrot",
        "ci": "jukebox"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "h_()Z": "isBaby",
        "x()V": "registerGoals",
        "ge()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/core/BlockPos;Z)V": "setRecordPlayingNearby",
        "gf()Z": "isPartyParrot",
        "gi()V": "calculateFlapping",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;)Z": "imitateNearbyMobs",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkParrotSpawnRules",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/sounds/SoundEvent;": "getAmbient",
        "b(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/sounds/SoundEvent;": "getImitatedSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "aP()Z": "isFlapping",
        "aO()V": "onFlap",
        "eS()F": "getVoicePitch",
        "a(Lnet/minecraft/util/RandomSource;)F": "getPitch",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "bp()Z": "isPushable",
        "A(Lnet/minecraft/world/entity/Entity;)V": "doPush",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "gg()Lnet/minecraft/world/entity/animal/Parrot$Variant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/Parrot$Variant;)V": "setVariant",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "gl()Z": "isFlying",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/EntityParrot$Variant": {
      "fields": {
        "a": "RED_BLUE",
        "b": "BLUE",
        "c": "GREEN",
        "d": "YELLOW_BLUE",
        "e": "GRAY",
        "f": "CODEC",
        "g": "BY_ID",
        "h": "id",
        "i": "name",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "a(I)Lnet/minecraft/world/entity/animal/Parrot$Variant;": "byId",
        "c()Ljava/lang/String;": "getSerializedName"
      }
    },
    "net/minecraft/world/entity/animal/EntityPig": {
      "fields": {
        "bT": "DATA_SADDLE_ID",
        "bU": "DATA_BOOST_TIME",
        "bW": "FOOD_ITEMS",
        "bX": "steering"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "g()Z": "isSaddleable",
        "eu()V": "dropEquipment",
        "i()Z": "isSaddled",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "equipSaddle",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationForPassenger",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)V": "tickRidden",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getRiddenInput",
        "e(Lnet/minecraft/world/entity/player/Player;)F": "getRiddenSpeed",
        "a()Z": "boost",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Pig;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/EntityPolarBear": {
      "fields": {
        "bT": "DATA_STANDING_ID",
        "bU": "STAND_ANIMATION_TICKS",
        "bW": "clientSideStandAnimationO",
        "bX": "clientSideStandAnimation",
        "bY": "warningSoundTicks",
        "bZ": "PERSISTENT_ANGER_TIME",
        "ca": "remainingPersistentAngerTime",
        "cb": "persistentAngerTarget"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkPolarBearSpawnRules",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "c()V": "startPersistentAngerTimer",
        "a(I)V": "setRemainingPersistentAngerTime",
        "a()I": "getRemainingPersistentAngerTime",
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "r()V": "playWarningSound",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "w()Z": "isStanding",
        "w(Z)V": "setStanding",
        "D(F)F": "getStandingAnimationScale",
        "eY()F": "getWaterSlowDown",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn"
      }
    },
    "net/minecraft/world/entity/animal/EntityPufferFish": {
      "fields": {
        "e": "PUFF_STATE",
        "bT": "inflateCounter",
        "bU": "deflateTimer",
        "bV": "SCARY_MOB",
        "bW": "targetingConditions",
        "b": "STATE_SMALL",
        "c": "STATE_MID",
        "d": "STATE_FULL"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "ga()I": "getPuffState",
        "c(I)V": "setPuffState",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "x()V": "registerGoals",
        "l()V": "tick",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/world/entity/Mob;)V": "touch",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "s(I)F": "getScale"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit": {
      "fields": {
        "bT": "STROLL_SPEED_MOD",
        "bU": "BREED_SPEED_MOD",
        "bW": "FOLLOW_SPEED_MOD",
        "bX": "FLEE_SPEED_MOD",
        "bY": "ATTACK_SPEED_MOD",
        "cb": "DATA_TYPE_ID",
        "cc": "KILLER_BUNNY",
        "bZ": "EVIL_ATTACK_POWER",
        "ca": "EVIL_ARMOR_VALUE",
        "cd": "MORE_CARROTS_DELAY",
        "ce": "jumpTicks",
        "cf": "jumpDuration",
        "cg": "wasOnGround",
        "ch": "jumpDelayTicks",
        "ci": "moreCarrotTicks"
      },
      "methods": {
        "x()V": "registerGoals",
        "eU()F": "getJumpPower",
        "eW()V": "jumpFromGround",
        "D(F)F": "getJumpCompletion",
        "i(D)V": "setSpeedModifier",
        "r(Z)V": "setJumping",
        "q()V": "startJumping",
        "a_()V": "defineSynchedData",
        "W()V": "customServerAiStep",
        "bg()Z": "canSpawnSprintParticle",
        "c(DD)V": "facePoint",
        "ge()V": "enableJumpControl",
        "gf()V": "disableJumpControl",
        "gg()V": "setLandingDelay",
        "gh()V": "checkLandingDelay",
        "b_()V": "aiStep",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getJumpSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "isTemptingItem",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Rabbit;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "fY()Lnet/minecraft/world/entity/animal/Rabbit$Variant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/Rabbit$Variant;)V": "setVariant",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/animal/Rabbit$Variant;": "getRandomRabbitVariant",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkRabbitSpawnRules",
        "gi()Z": "wantsMoreFood",
        "b(B)V": "handleEntityEvent",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant",
        "a(Lnet/minecraft/world/entity/animal/Rabbit;)Z": "access$000",
        "b(Lnet/minecraft/world/entity/animal/Rabbit;)Lnet/minecraft/world/entity/ai/control/JumpControl;": "access$100"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$PathfinderGoalKillerRabbitMeleeAttack": {
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;)D": "getAttackReachSqr"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$PathfinderGoalRabbitAvoidTarget": {
      "fields": {
        "i": "rabbit"
      },
      "methods": {
        "a()Z": "canUse"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$GroupDataRabbit": {
      "fields": {
        "a": "variant"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$ControllerJumpRabbit": {
      "fields": {
        "b": "rabbit",
        "c": "canJump"
      },
      "methods": {
        "c()Z": "wantJump",
        "d()Z": "canJump",
        "a(Z)V": "setCanJump",
        "b()V": "tick"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$ControllerMoveRabbit": {
      "fields": {
        "l": "rabbit",
        "m": "nextJumpSpeed"
      },
      "methods": {
        "a()V": "tick",
        "a(DDDD)V": "setWantedPosition"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$PathfinderGoalRabbitPanic": {
      "fields": {
        "h": "rabbit"
      },
      "methods": {
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$PathfinderGoalEatCarrots": {
      "fields": {
        "g": "rabbit",
        "h": "wantsToRaid",
        "i": "canRaid"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "e()V": "tick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isValidTarget"
      }
    },
    "net/minecraft/world/entity/animal/EntityRabbit$Variant": {
      "fields": {
        "a": "BROWN",
        "b": "WHITE",
        "c": "BLACK",
        "d": "WHITE_SPLOTCHED",
        "e": "GOLD",
        "f": "SALT",
        "g": "EVIL",
        "i": "BY_ID",
        "h": "CODEC",
        "j": "id",
        "k": "name",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()I": "id",
        "a(I)Lnet/minecraft/world/entity/animal/Rabbit$Variant;": "byId"
      }
    },
    "net/minecraft/world/entity/animal/EntitySalmon": {
      "methods": {
        "ga()I": "getMaxSchoolSize",
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound"
      }
    },
    "net/minecraft/world/entity/animal/EntitySheep": {
      "fields": {
        "bT": "EAT_ANIMATION_TICKS",
        "bU": "DATA_WOOL_ID",
        "bW": "ITEM_BY_DYE",
        "bX": "COLORARRAY_BY_COLOR",
        "bY": "eatAnimationTick",
        "bZ": "eatBlockGoal"
      },
      "methods": {
        "c(Lnet/minecraft/world/item/DyeColor;)[F": "createSheepColor",
        "a(Lnet/minecraft/world/item/DyeColor;)[F": "getColorArray",
        "x()V": "registerGoals",
        "W()V": "customServerAiStep",
        "b_()V": "aiStep",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "Q()Lnet/minecraft/resources/ResourceLocation;": "getDefaultLootTable",
        "b(B)V": "handleEntityEvent",
        "D(F)F": "getHeadEatPositionScale",
        "E(F)F": "getHeadEatAngleScale",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "shear",
        "a()Z": "readyForShearing",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "r()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "b(Lnet/minecraft/world/item/DyeColor;)V": "setColor",
        "w()Z": "isSheared",
        "w(Z)V": "setSheared",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/item/DyeColor;": "getRandomSheepColor",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Sheep;": "getBreedOffspring",
        "L()V": "ate",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/entity/animal/Animal;Lnet/minecraft/world/entity/animal/Animal;)Lnet/minecraft/world/item/DyeColor;": "getOffspringColor",
        "a(Lnet/minecraft/world/item/DyeColor;Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/inventory/CraftingContainer;": "makeContainer",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/EntityPerchable": {
      "fields": {
        "bW": "RIDE_COOLDOWN",
        "bX": "rideCooldownCounter"
      },
      "methods": {
        "b(Lnet/minecraft/server/level/ServerPlayer;)Z": "setEntityOnShoulder",
        "l()V": "tick",
        "gh()Z": "canSitOnShoulder"
      }
    },
    "net/minecraft/world/entity/animal/EntitySnowman": {
      "fields": {
        "b": "DATA_PUMPKIN_ID",
        "c": "PUMPKIN_FLAG",
        "d": "EYE_HEIGHT"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "fb()Z": "isSensitiveToWater",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "shear",
        "a()Z": "readyForShearing",
        "r()Z": "hasPumpkin",
        "w(Z)V": "setPumpkin",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset"
      }
    },
    "net/minecraft/world/entity/animal/EntitySquid": {
      "fields": {
        "b": "xBodyRot",
        "c": "xBodyRotO",
        "d": "zBodyRot",
        "e": "zBodyRotO",
        "bT": "tentacleMovement",
        "bU": "oldTentacleMovement",
        "bV": "tentacleAngle",
        "bW": "oldTentacleAngle",
        "bX": "speed",
        "bY": "tentacleSpeed",
        "bZ": "rotateSpeed",
        "ca": "tx",
        "cb": "ty",
        "cc": "tz"
      },
      "methods": {
        "x()V": "registerGoals",
        "fY()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "r()Lnet/minecraft/sounds/SoundEvent;": "getSquirtSound",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "eR()F": "getSoundVolume",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "j(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "rotateVector",
        "w()V": "spawnInk",
        "q()Lnet/minecraft/core/particles/ParticleOptions;": "getInkParticle",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "b(B)V": "handleEntityEvent",
        "a(FFF)V": "setMovementVector",
        "fZ()Z": "hasMovementVector",
        "a(Lnet/minecraft/world/entity/animal/Squid;)Z": "access$000"
      }
    },
    "net/minecraft/world/entity/animal/EntitySquid$PathfinderGoalSquid": {
      "fields": {
        "b": "squid",
        "a": "this$0"
      },
      "methods": {
        "a()Z": "canUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/animal/EntityTropicalFish": {
      "fields": {
        "b": "BUCKET_VARIANT_TAG",
        "d": "DATA_ID_TYPE_VARIANT",
        "c": "COMMON_VARIANTS",
        "e": "isSchool"
      },
      "methods": {
        "c(I)Ljava/lang/String;": "getPredefinedName",
        "a(Lnet/minecraft/world/entity/animal/TropicalFish$Pattern;Lnet/minecraft/world/item/DyeColor;Lnet/minecraft/world/item/DyeColor;)I": "packVariant",
        "s(I)Lnet/minecraft/world/item/DyeColor;": "getBaseColor",
        "t(I)Lnet/minecraft/world/item/DyeColor;": "getPatternColor",
        "u(I)Lnet/minecraft/world/entity/animal/TropicalFish$Pattern;": "getPattern",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "v(I)V": "setPackedVariant",
        "d(I)Z": "isMaxGroupSizeReached",
        "gk()I": "getPackedVariant",
        "gh()Lnet/minecraft/world/item/DyeColor;": "getBaseColor",
        "gi()Lnet/minecraft/world/item/DyeColor;": "getPatternColor",
        "gj()Lnet/minecraft/world/entity/animal/TropicalFish$Pattern;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/TropicalFish$Pattern;)V": "setVariant",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "saveToBucketTag",
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkTropicalFishSpawnRules",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/EntityTropicalFish$Base": {
      "fields": {
        "a": "SMALL",
        "b": "LARGE",
        "c": "id",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/animal/TropicalFish$Base;": "$values"
      }
    },
    "net/minecraft/world/entity/animal/EntityTropicalFish$Variant": {
      "fields": {
        "a": "KOB",
        "b": "SUNSTREAK",
        "c": "SNOOPER",
        "d": "DASHER",
        "e": "BRINELY",
        "f": "SPOTTY",
        "g": "FLOPPER",
        "h": "STRIPEY",
        "i": "GLITTER",
        "j": "BLOCKFISH",
        "k": "BETTY",
        "l": "CLAYFISH",
        "m": "CODEC",
        "n": "BY_ID",
        "o": "name",
        "p": "displayName",
        "q": "base",
        "r": "packedId",
        "s": "$VALUES"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/entity/animal/TropicalFish$Pattern;": "byId",
        "a()Lnet/minecraft/world/entity/animal/TropicalFish$Base;": "base",
        "b()I": "getPackedId",
        "c()Ljava/lang/String;": "getSerializedName",
        "d()Lnet/minecraft/network/chat/Component;": "displayName",
        "e()[Lnet/minecraft/world/entity/animal/TropicalFish$Pattern;": "$values"
      }
    },
    "net/minecraft/world/entity/animal/EntityTurtle": {
      "fields": {
        "bW": "HOME_POS",
        "bX": "HAS_EGG",
        "bY": "LAYING_EGG",
        "bZ": "TRAVEL_POS",
        "ca": "GOING_HOME",
        "cb": "TRAVELLING",
        "bT": "FOOD_ITEMS",
        "cc": "layEggCounter",
        "bU": "BABY_ON_LAND_SELECTOR"
      },
      "methods": {
        "i(Lnet/minecraft/core/BlockPos;)V": "setHomePos",
        "fY()Lnet/minecraft/core/BlockPos;": "getHomePos",
        "j(Lnet/minecraft/core/BlockPos;)V": "setTravelPos",
        "ge()Lnet/minecraft/core/BlockPos;": "getTravelPos",
        "q()Z": "hasEgg",
        "w(Z)V": "setHasEgg",
        "r()Z": "isLayingEgg",
        "x(Z)V": "setLayingEgg",
        "gf()Z": "isGoingHome",
        "y(Z)V": "setGoingHome",
        "gg()Z": "isTravelling",
        "z(Z)V": "setTravelling",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkTurtleSpawnRules",
        "x()V": "registerGoals",
        "w()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "cw()Z": "isPushedByFluid",
        "dN()Z": "canBreatheUnderwater",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "M()I": "getAmbientSoundInterval",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "e(F)V": "playSwimSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "fZ()Z": "canFallInLove",
        "aI()F": "nextStep",
        "dV()F": "getScale",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "b_()V": "aiStep",
        "m()V": "ageBoundaryReached",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit"
      }
    },
    "net/minecraft/world/entity/animal/EntityWaterAnimal": {
      "methods": {
        "dN()Z": "canBreatheUnderwater",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "M()I": "getAmbientSoundInterval",
        "ea()I": "getExperienceReward",
        "b(I)V": "handleAirSupply",
        "ao()V": "baseTick",
        "cw()Z": "isPushedByFluid",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkSurfaceWaterAnimalSpawnRules"
      }
    },
    "net/minecraft/world/entity/animal/EntityWolf": {
      "fields": {
        "bX": "DATA_INTERESTED_ID",
        "bY": "DATA_COLLAR_COLOR",
        "bZ": "DATA_REMAINING_ANGER_TIME",
        "bW": "PREY_SELECTOR",
        "ca": "START_HEALTH",
        "cb": "TAME_HEALTH",
        "cc": "interestedAngle",
        "cd": "interestedAngleO",
        "ce": "isWet",
        "cf": "isShaking",
        "cg": "shakeAnim",
        "ch": "shakeAnimO",
        "ci": "PERSISTENT_ANGER_TIME",
        "cj": "persistentAngerTarget"
      },
      "methods": {
        "x()V": "registerGoals",
        "ge()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "eR()F": "getSoundVolume",
        "b_()V": "aiStep",
        "l()V": "tick",
        "gj()V": "cancelShake",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "gf()Z": "isWet",
        "D(F)F": "getWetShade",
        "f(FF)F": "getBodyRollAngle",
        "E(F)F": "getHeadRollAngle",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "X()I": "getMaxHeadXRot",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "x(Z)V": "setTame",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(B)V": "handleEntityEvent",
        "gg()F": "getTailAngle",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "fE()I": "getMaxSpawnClusterSize",
        "a()I": "getRemainingPersistentAngerTime",
        "a(I)V": "setRemainingPersistentAngerTime",
        "c()V": "startPersistentAngerTimer",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "gh()Lnet/minecraft/world/item/DyeColor;": "getCollarColor",
        "a(Lnet/minecraft/world/item/DyeColor;)V": "setCollarColor",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/Wolf;": "getBreedOffspring",
        "A(Z)V": "setIsInterested",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "gi()Z": "isInterested",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "wantsToAttack",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkWolfSpawnRules",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/allay/Allay": {
      "fields": {
        "e": "LOGGER",
        "bT": "ITEM_PICKUP_REACH",
        "bU": "LIFTING_ITEM_ANIMATION_DURATION",
        "bV": "DANCING_LOOP_DURATION",
        "bW": "SPINNING_ANIMATION_DURATION",
        "bX": "DUPLICATION_ITEM",
        "bY": "DUPLICATION_COOLDOWN_TICKS",
        "bZ": "NUM_OF_DUPLICATION_HEARTS",
        "ca": "RIDING_OFFSET",
        "cb": "DATA_DANCING",
        "cc": "DATA_CAN_DUPLICATE",
        "b": "SENSOR_TYPES",
        "c": "MEMORY_TYPES",
        "d": "THROW_SOUND_PITCHES",
        "cd": "dynamicVibrationListener",
        "ce": "vibrationData",
        "cf": "vibrationUser",
        "cg": "dynamicJukeboxListener",
        "ch": "inventory",
        "ci": "jukeboxPos",
        "cj": "duplicationCooldown",
        "ck": "holdingItemAnimationTicks",
        "cl": "holdingItemAnimationTicks0",
        "cm": "dancingAnimationTicks",
        "cn": "spinningAnimationTicks",
        "co": "spinningAnimationTicks0"
      },
      "methods": {
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "a_()V": "defineSynchedData",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "eR()F": "getSoundVolume",
        "W()V": "customServerAiStep",
        "b_()V": "aiStep",
        "l()V": "tick",
        "fG()Z": "canPickUpLoot",
        "r()Z": "hasItemInHand",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "gd()Z": "isOnPickupCooldown",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(Lnet/minecraft/core/BlockPos;Z)V": "setJukeboxPlaying",
        "w()Lnet/minecraft/world/SimpleContainer;": "getInventory",
        "R()Lnet/minecraft/core/Vec3i;": "getPickupReach",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp",
        "d(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "allayConsidersItemEqual",
        "e(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "hasNonMatchingPotion",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "V()V": "sendDebugPackets",
        "aP()Z": "isFlapping",
        "a(Ljava/util/function/BiConsumer;)V": "updateDynamicGameEventListener",
        "fY()Z": "isDancing",
        "fZ()Z": "isPanicking",
        "w(Z)V": "setDancing",
        "ge()Z": "shouldStopDancing",
        "D(F)F": "getHoldingItemAnimationProgress",
        "ga()Z": "isSpinning",
        "E(F)F": "getSpinningProgress",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "equipmentHasChanged",
        "eu()V": "dropEquipment",
        "h(D)Z": "removeWhenFarAway",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "fW()Z": "shouldStayCloseToLeashHolder",
        "gf()V": "updateDuplicationCooldown",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "isDuplicationItem",
        "gg()V": "duplicateAllay",
        "gh()V": "resetDuplicationCooldown",
        "gi()Z": "canDuplicate",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "removeInteractionItem",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "bw()D": "getMyRidingOffset",
        "b(B)V": "handleEntityEvent",
        "gj()V": "spawnHeartParticle",
        "gb()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;": "getVibrationData",
        "gc()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "getVibrationUser"
      }
    },
    "net/minecraft/world/entity/animal/allay/AllayAi": {
      "fields": {
        "a": "SPEED_MULTIPLIER_WHEN_IDLING",
        "b": "SPEED_MULTIPLIER_WHEN_FOLLOWING_DEPOSIT_TARGET",
        "c": "SPEED_MULTIPLIER_WHEN_RETRIEVING_ITEM",
        "d": "SPEED_MULTIPLIER_WHEN_PANICKING",
        "e": "CLOSE_ENOUGH_TO_TARGET",
        "f": "TOO_FAR_FROM_TARGET",
        "g": "MAX_LOOK_DISTANCE",
        "h": "MIN_WAIT_DURATION",
        "i": "MAX_WAIT_DURATION",
        "j": "TIME_TO_FORGET_NOTEBLOCK",
        "k": "DISTANCE_TO_WANTED_ITEM",
        "l": "GIVE_ITEM_TIMEOUT_DURATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "a(Lnet/minecraft/world/entity/animal/allay/Allay;)V": "updateActivity",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/core/BlockPos;)V": "hearNoteblock",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "getItemDepositPosition",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasWantedItem",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/ai/Brain;Lnet/minecraft/core/GlobalPos;)Z": "shouldDepositItemsAtLikedNoteblock",
        "d(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "getLikedPlayerPositionTracker",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Optional;": "getLikedPlayer",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/world/entity/ai/behavior/PositionTracker;": "lambda$getLikedPlayerPositionTracker$1",
        "b(Lnet/minecraft/world/entity/animal/allay/Allay;)Z": "lambda$initIdleActivity$0"
      }
    },
    "net/minecraft/world/entity/animal/axolotl/Axolotl": {
      "fields": {
        "bT": "TOTAL_PLAYDEAD_TIME",
        "bU": "SENSOR_TYPES",
        "bW": "MEMORY_TYPES",
        "ca": "DATA_VARIANT",
        "cb": "DATA_PLAYING_DEAD",
        "cc": "FROM_BUCKET",
        "bX": "PLAYER_REGEN_DETECTION_RANGE",
        "bY": "RARE_VARIANT_CHANCE",
        "cd": "AXOLOTL_TOTAL_AIR_SUPPLY",
        "bZ": "VARIANT_TAG",
        "ce": "REHYDRATE_AIR_SUPPLY",
        "cf": "REGEN_BUFF_MAX_DURATION",
        "cg": "modelRotationValues",
        "ch": "REGEN_BUFF_BASE_DURATION"
      },
      "methods": {
        "a()Ljava/util/Map;": "getModelRotationValues",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "N()V": "playAmbientSound",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "ao()V": "baseTick",
        "t(I)V": "handleAirSupply",
        "q()V": "rehydrate",
        "ce()I": "getMaxAirSupply",
        "fY()Lnet/minecraft/world/entity/animal/axolotl/Axolotl$Variant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/axolotl/Axolotl$Variant;)V": "setVariant",
        "a(Lnet/minecraft/util/RandomSource;)Z": "useRareVariant",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "dN()Z": "canBreatheUnderwater",
        "cw()Z": "isPushedByFluid",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "x(Z)V": "setPlayingDead",
        "ge()Z": "isPlayingDead",
        "r()Z": "fromBucket",
        "w(Z)V": "setFromBucket",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "i(Lnet/minecraft/world/entity/LivingEntity;)D": "getMeleeAttackRangeSqr",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "W()V": "customServerAiStep",
        "gf()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "X()I": "getMaxHeadXRot",
        "fC()I": "getMaxHeadYRot",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "saveToBucketTag",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "loadFromBucketTag",
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getPickupSound",
        "ek()Z": "canBeSeenAsEnemy",
        "a(Lnet/minecraft/world/entity/animal/axolotl/Axolotl;Lnet/minecraft/world/entity/LivingEntity;)V": "onStopAttacking",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "applySupportingEffects",
        "T()Z": "requiresCustomPersistence",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "aK()Lnet/minecraft/sounds/SoundEvent;": "getSwimSplashSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "V()V": "sendDebugPackets",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)V": "usePlayerItem",
        "h(D)Z": "removeWhenFarAway",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkAxolotlSpawnRules",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/axolotl/Axolotl$Variant": {
      "fields": {
        "a": "LUCY",
        "b": "WILD",
        "c": "GOLD",
        "d": "CYAN",
        "e": "BLUE",
        "g": "BY_ID",
        "f": "CODEC",
        "h": "id",
        "i": "name",
        "j": "common",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "b()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(I)Lnet/minecraft/world/entity/animal/axolotl/Axolotl$Variant;": "byId",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/entity/animal/axolotl/Axolotl$Variant;": "getCommonSpawnVariant",
        "b(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/entity/animal/axolotl/Axolotl$Variant;": "getRareSpawnVariant",
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/world/entity/animal/axolotl/Axolotl$Variant;": "getSpawnVariant"
      }
    },
    "net/minecraft/world/entity/animal/axolotl/AxolotlAi": {
      "fields": {
        "a": "ADULT_FOLLOW_RANGE",
        "b": "SPEED_MULTIPLIER_WHEN_MAKING_LOVE",
        "c": "SPEED_MULTIPLIER_ON_LAND",
        "d": "SPEED_MULTIPLIER_WHEN_IDLING_IN_WATER",
        "e": "SPEED_MULTIPLIER_WHEN_CHASING_IN_WATER",
        "f": "SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT_IN_WATER"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initPlayDeadActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initFightActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "canSetWalkTargetFromLookTarget",
        "a(Lnet/minecraft/world/entity/animal/axolotl/Axolotl;)V": "updateActivity",
        "b(Lnet/minecraft/world/entity/LivingEntity;)F": "getSpeedModifierChasing",
        "c(Lnet/minecraft/world/entity/LivingEntity;)F": "getSpeedModifierFollowingAdult",
        "d(Lnet/minecraft/world/entity/LivingEntity;)F": "getSpeedModifier",
        "b(Lnet/minecraft/world/entity/animal/axolotl/Axolotl;)Ljava/util/Optional;": "findNearestValidAttackTarget",
        "a()Lnet/minecraft/world/item/crafting/Ingredient;": "getTemptations"
      }
    },
    "net/minecraft/world/entity/animal/axolotl/PlayDead": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/axolotl/Axolotl;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/axolotl/Axolotl;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/axolotl/Axolotl;J)V": "start",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/animal/axolotl/ValidatePlayDead": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/animal/camel/Camel": {
      "fields": {
        "bT": "TEMPTATION_ITEM",
        "bU": "DASH_COOLDOWN_TICKS",
        "bW": "MAX_HEAD_Y_ROT",
        "cu": "RUNNING_SPEED_BONUS",
        "cv": "DASH_VERTICAL_MOMENTUM",
        "cw": "DASH_HORIZONTAL_MOMENTUM",
        "cx": "DASH_MINIMUM_DURATION_TICKS",
        "cy": "SITDOWN_DURATION_TICKS",
        "cz": "STANDUP_DURATION_TICKS",
        "cA": "IDLE_MINIMAL_DURATION_TICKS",
        "cB": "SITTING_HEIGHT_DIFFERENCE",
        "bX": "DASH",
        "bY": "LAST_POSE_CHANGE_TICK",
        "bZ": "sitAnimationState",
        "ca": "sitPoseAnimationState",
        "cb": "sitUpAnimationState",
        "cc": "idleAnimationState",
        "cd": "dashAnimationState",
        "cC": "SITTING_DIMENSIONS",
        "cD": "dashCooldown",
        "cE": "idleAnimationTimeout"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "x()V": "registerGoals",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "d()D": "getRiderShieldingHeight",
        "W()V": "customServerAiStep",
        "l()V": "tick",
        "gK()V": "setupAnimationStates",
        "v(F)V": "updateWalkAnimation",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)V": "tickRidden",
        "r()Z": "refuseToMove",
        "e(Lnet/minecraft/world/entity/player/Player;)F": "getRiddenSpeed",
        "l(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec2;": "getRiddenRotation",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getRiddenInput",
        "a()Z": "canJump",
        "b(I)V": "onPlayerJump",
        "dB()Z": "canSprint",
        "b(FLnet/minecraft/world/phys/Vec3;)V": "executeRidersJump",
        "w()Z": "isDashing",
        "w(Z)V": "setDashing",
        "fY()Z": "isPanicking",
        "c(I)V": "handleStartJump",
        "b()V": "handleStopJump",
        "W_()I": "getJumpCooldown",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "C(F)V": "onLeashDistance",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Z": "handleEating",
        "ge()Z": "canPerformRearing",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/camel/Camel;": "getBreedOffspring",
        "gf()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "f(Lnet/minecraft/world/damagesource/DamageSource;F)V": "actuallyHurt",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V": "positionRider",
        "a(ZF)D": "getBodyAnchorAnimationYOffset",
        "p(F)Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "bx()D": "getPassengersRidingOffset",
        "j(Lnet/minecraft/world/entity/Entity;)V": "onPassengerTurned",
        "a(Lnet/minecraft/world/entity/Entity;)V": "clampRotation",
        "a(Lnet/minecraft/world/entity/Entity;F)V": "clampHeadRotationToBody",
        "fC()I": "getMaxHeadYRot",
        "o(Lnet/minecraft/world/entity/Entity;)Z": "canAddPassenger",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "V()V": "sendDebugPackets",
        "gg()Z": "isCamelSitting",
        "gh()Z": "isCamelVisuallySitting",
        "gi()Z": "isInPoseTransition",
        "gL()Z": "isVisuallySittingDown",
        "gj()V": "sitDown",
        "gk()V": "standUp",
        "gl()V": "standUpInstantly",
        "a(J)V": "resetLastPoseChangeTick",
        "b(J)V": "resetLastPoseChangeTickToFullStand",
        "gm()J": "getPoseTime",
        "R_()Lnet/minecraft/sounds/SoundEvent;": "getSaddleSoundEvent",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "D()Lnet/minecraft/world/entity/ai/control/BodyRotationControl;": "createBodyControl",
        "gn()Z": "isTamed",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "openCustomInventoryScreen",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/camel/CamelAi": {
      "fields": {
        "a": "SPEED_MULTIPLIER_WHEN_PANICKING",
        "b": "SPEED_MULTIPLIER_WHEN_IDLING",
        "c": "SPEED_MULTIPLIER_WHEN_TEMPTED",
        "d": "SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT",
        "e": "SPEED_MULTIPLIER_WHEN_MAKING_LOVE",
        "f": "ADULT_FOLLOW_RANGE",
        "g": "SENSOR_TYPES",
        "h": "MEMORY_TYPES"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/animal/camel/Camel;Lnet/minecraft/util/RandomSource;)V": "initMemories",
        "a()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "a(Lnet/minecraft/world/entity/animal/camel/Camel;)V": "updateActivity",
        "b()Lnet/minecraft/world/item/crafting/Ingredient;": "getTemptations",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$initIdleActivity$0"
      }
    },
    "net/minecraft/world/entity/animal/frog/Frog": {
      "fields": {
        "bT": "TEMPTATION_ITEM",
        "bU": "SENSOR_TYPES",
        "bW": "MEMORY_TYPES",
        "cc": "DATA_VARIANT_ID",
        "cd": "DATA_TONGUE_TARGET_ID",
        "ce": "FROG_FALL_DAMAGE_REDUCTION",
        "bX": "VARIANT_KEY",
        "bY": "jumpAnimationState",
        "bZ": "croakAnimationState",
        "ca": "tongueAnimationState",
        "cb": "swimIdleAnimationState"
      },
      "methods": {
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "a_()V": "defineSynchedData",
        "q()V": "eraseTongueTarget",
        "r()Ljava/util/Optional;": "getTongueTarget",
        "a(Lnet/minecraft/world/entity/Entity;)V": "setTongueTarget",
        "fD()I": "getHeadRotSpeed",
        "fC()I": "getMaxHeadYRot",
        "w()Lnet/minecraft/world/entity/animal/FrogVariant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/FrogVariant;)V": "setVariant",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "dN()Z": "canBreatheUnderwater",
        "W()V": "customServerAiStep",
        "l()V": "tick",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "v(F)V": "updateWalkAnimation",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "h_()Z": "isBaby",
        "a(Z)V": "setBaby",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;)V": "spawnChildFromBreeding",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "fY()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "cw()Z": "isPushedByFluid",
        "V()V": "sendDebugPackets",
        "d(FF)I": "calculateFallDamage",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "l(Lnet/minecraft/world/entity/LivingEntity;)Z": "canEat",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkFrogSpawnRules",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/frog/FrogAi": {
      "fields": {
        "a": "SPEED_MULTIPLIER_WHEN_PANICKING",
        "b": "SPEED_MULTIPLIER_WHEN_MAKING_LOVE",
        "c": "SPEED_MULTIPLIER_WHEN_IDLING",
        "d": "SPEED_MULTIPLIER_ON_LAND",
        "e": "SPEED_MULTIPLIER_IN_WATER",
        "f": "TIME_BETWEEN_LONG_JUMPS",
        "g": "MAX_LONG_JUMP_HEIGHT",
        "h": "MAX_LONG_JUMP_WIDTH",
        "i": "MAX_JUMP_VELOCITY",
        "j": "SPEED_MULTIPLIER_WHEN_TEMPTED"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/animal/frog/Frog;Lnet/minecraft/util/RandomSource;)V": "initMemories",
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initSwimActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initLaySpawnActivity",
        "f(Lnet/minecraft/world/entity/ai/Brain;)V": "initJumpActivity",
        "g(Lnet/minecraft/world/entity/ai/Brain;)V": "initTongueActivity",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)Z": "isAcceptableLandingSpot",
        "b(Lnet/minecraft/world/entity/animal/frog/Frog;)Z": "canAttack",
        "a(Lnet/minecraft/world/entity/animal/frog/Frog;)V": "updateActivity",
        "a()Lnet/minecraft/world/item/crafting/Ingredient;": "getTemptations",
        "c(Lnet/minecraft/world/entity/animal/frog/Frog;)Lnet/minecraft/sounds/SoundEvent;": "lambda$initJumpActivity$5",
        "d(Lnet/minecraft/world/entity/animal/frog/Frog;)Ljava/util/Optional;": "lambda$initLaySpawnActivity$4",
        "e(Lnet/minecraft/world/entity/animal/frog/Frog;)Ljava/util/Optional;": "lambda$initSwimActivity$3",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$initSwimActivity$2",
        "f(Lnet/minecraft/world/entity/animal/frog/Frog;)Ljava/util/Optional;": "lambda$initIdleActivity$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$initIdleActivity$0"
      }
    },
    "net/minecraft/world/entity/animal/frog/ShootTongue": {
      "fields": {
        "c": "TIME_OUT_DURATION",
        "d": "CATCH_ANIMATION_DURATION",
        "e": "TONGUE_ANIMATION_DURATION",
        "h": "EATING_DISTANCE",
        "i": "EATING_MOVEMENT_FACTOR",
        "f": "UNREACHABLE_TONGUE_TARGETS_COOLDOWN_DURATION",
        "g": "MAX_UNREACHBLE_TONGUE_TARGETS_IN_MEMORY",
        "j": "eatAnimationTimer",
        "k": "calculatePathCounter",
        "l": "tongueSound",
        "m": "eatSound",
        "n": "itemSpawnPos",
        "o": "state"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)V": "start",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)V": "stop",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;)V": "eatEntity",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/frog/Frog;J)V": "tick",
        "a(Lnet/minecraft/world/entity/animal/frog/Frog;Lnet/minecraft/world/entity/LivingEntity;)Z": "canPathfindToTarget",
        "b(Lnet/minecraft/world/entity/animal/frog/Frog;Lnet/minecraft/world/entity/LivingEntity;)V": "addUnreachableTargetToMemory",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "checkExtraStartConditions",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "canStillUse",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "stop",
        "c(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "tick",
        "d(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)V": "start"
      }
    },
    "net/minecraft/world/entity/animal/frog/Tadpole": {
      "fields": {
        "b": "ticksToBeFrog",
        "c": "HITBOX_WIDTH",
        "d": "HITBOX_HEIGHT",
        "bU": "age",
        "e": "SENSOR_TYPES",
        "bT": "MEMORY_TYPES"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound",
        "W()V": "customServerAiStep",
        "ga()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b_()V": "aiStep",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "V()V": "sendDebugPackets",
        "r()Z": "fromBucket",
        "w(Z)V": "setFromBucket",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "saveToBucketTag",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "loadFromBucketTag",
        "b()Lnet/minecraft/world/item/ItemStack;": "getBucketItemStack",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getPickupSound",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "feed",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "usePlayerItem",
        "gb()I": "getAge",
        "c(I)V": "ageUp",
        "s(I)V": "setAge",
        "gc()V": "ageUp",
        "gd()I": "getTicksLeftUntilAdult",
        "dY()Z": "shouldDropExperience"
      }
    },
    "net/minecraft/world/entity/animal/frog/TadpoleAi": {
      "fields": {
        "a": "SPEED_MULTIPLIER_WHEN_PANICKING",
        "b": "SPEED_MULTIPLIER_WHEN_IDLING_IN_WATER",
        "c": "SPEED_MULTIPLIER_WHEN_TEMPTED"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "a(Lnet/minecraft/world/entity/animal/frog/Tadpole;)V": "updateActivity",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$initIdleActivity$0"
      }
    },
    "net/minecraft/world/entity/animal/goat/Goat": {
      "fields": {
        "bT": "LONG_JUMPING_DIMENSIONS",
        "ca": "ADULT_ATTACK_DAMAGE",
        "cb": "BABY_ATTACK_DAMAGE",
        "bU": "SENSOR_TYPES",
        "bW": "MEMORY_TYPES",
        "bX": "GOAT_FALL_DAMAGE_REDUCTION",
        "bY": "GOAT_SCREAMING_CHANCE",
        "bZ": "UNIHORN_CHANCE",
        "cc": "DATA_IS_SCREAMING_GOAT",
        "cd": "DATA_HAS_LEFT_HORN",
        "ce": "DATA_HAS_RIGHT_HORN",
        "cf": "isLoweringHead",
        "cg": "lowerHeadTick"
      },
      "methods": {
        "q()Lnet/minecraft/world/item/ItemStack;": "createHorn",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "m()V": "ageBoundaryReached",
        "d(FF)I": "calculateFallDamage",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getMilkingSound",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/goat/Goat;": "getBreedOffspring",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "W()V": "customServerAiStep",
        "fC()I": "getMaxHeadYRot",
        "n(F)V": "setYHeadRot",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "V()V": "sendDebugPackets",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(B)V": "handleEntityEvent",
        "b_()V": "aiStep",
        "a_()V": "defineSynchedData",
        "fY()Z": "hasLeftHorn",
        "ge()Z": "hasRightHorn",
        "gf()Z": "dropHorn",
        "gg()V": "addHorns",
        "gh()V": "removeHorns",
        "gi()Z": "isScreamingGoat",
        "w(Z)V": "setScreamingGoat",
        "gj()F": "getRammingXHeadRot",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkGoatSpawnRules",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/goat/GoatAi": {
      "fields": {
        "a": "RAM_PREPARE_TIME",
        "b": "RAM_MAX_DISTANCE",
        "i": "ADULT_FOLLOW_RANGE",
        "j": "SPEED_MULTIPLIER_WHEN_MAKING_LOVE",
        "k": "SPEED_MULTIPLIER_WHEN_IDLING",
        "l": "SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT",
        "m": "SPEED_MULTIPLIER_WHEN_TEMPTED",
        "n": "SPEED_MULTIPLIER_WHEN_PANICKING",
        "o": "SPEED_MULTIPLIER_WHEN_PREPARING_TO_RAM",
        "p": "TIME_BETWEEN_LONG_JUMPS",
        "c": "MAX_LONG_JUMP_HEIGHT",
        "d": "MAX_LONG_JUMP_WIDTH",
        "e": "MAX_JUMP_VELOCITY",
        "q": "TIME_BETWEEN_RAMS",
        "r": "TIME_BETWEEN_RAMS_SCREAMER",
        "s": "RAM_TARGET_CONDITIONS",
        "t": "SPEED_MULTIPLIER_WHEN_RAMMING",
        "f": "RAM_MIN_DISTANCE",
        "g": "ADULT_RAM_KNOCKBACK_FORCE",
        "h": "BABY_RAM_KNOCKBACK_FORCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/animal/goat/Goat;Lnet/minecraft/util/RandomSource;)V": "initMemories",
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initLongJumpActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initRamActivity",
        "a(Lnet/minecraft/world/entity/animal/goat/Goat;)V": "updateActivity",
        "a()Lnet/minecraft/world/item/crafting/Ingredient;": "getTemptations",
        "b(Lnet/minecraft/world/entity/animal/goat/Goat;)Lnet/minecraft/sounds/SoundEvent;": "lambda$initRamActivity$8",
        "c(Lnet/minecraft/world/entity/animal/goat/Goat;)I": "lambda$initRamActivity$7",
        "d(Lnet/minecraft/world/entity/animal/goat/Goat;)Lnet/minecraft/sounds/SoundEvent;": "lambda$initRamActivity$6",
        "e(Lnet/minecraft/world/entity/animal/goat/Goat;)Lnet/minecraft/sounds/SoundEvent;": "lambda$initRamActivity$5",
        "f(Lnet/minecraft/world/entity/animal/goat/Goat;)D": "lambda$initRamActivity$4",
        "g(Lnet/minecraft/world/entity/animal/goat/Goat;)Lnet/minecraft/util/valueproviders/UniformInt;": "lambda$initRamActivity$3",
        "h(Lnet/minecraft/world/entity/animal/goat/Goat;)Lnet/minecraft/sounds/SoundEvent;": "lambda$initLongJumpActivity$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$initIdleActivity$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorseChestedAbstract": {
      "fields": {
        "bU": "DATA_ID_CHEST",
        "bT": "INV_CHEST_COUNT"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)V": "randomizeAttributes",
        "a_()V": "defineSynchedData",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createBaseChestedHorseAttributes",
        "r()Z": "hasChest",
        "w(Z)V": "setChest",
        "V_()I": "getInventorySize",
        "bx()D": "getPassengersRidingOffset",
        "eu()V": "dropEquipment",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "d(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "equipChest",
        "fY()V": "playChestEquipsSound",
        "gg()I": "getInventoryColumns"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorseAbstract": {
      "fields": {
        "ce": "EQUIPMENT_SLOT_OFFSET",
        "cf": "CHEST_SLOT_OFFSET",
        "cg": "INVENTORY_SLOT_OFFSET",
        "ch": "BREEDING_CROSS_FACTOR",
        "bT": "MIN_MOVEMENT_SPEED",
        "bU": "MAX_MOVEMENT_SPEED",
        "bW": "MIN_JUMP_STRENGTH",
        "bX": "MAX_JUMP_STRENGTH",
        "bY": "MIN_HEALTH",
        "bZ": "MAX_HEALTH",
        "ca": "BACKWARDS_MOVE_SPEED_FACTOR",
        "cb": "SIDEWAYS_MOVE_SPEED_FACTOR",
        "cc": "PARENT_HORSE_SELECTOR",
        "cd": "MOMMY_TARGETING",
        "cu": "FOOD_ITEMS",
        "cv": "DATA_ID_FLAGS",
        "cw": "FLAG_TAME",
        "cx": "FLAG_SADDLE",
        "cy": "FLAG_BRED",
        "cz": "FLAG_EATING",
        "cA": "FLAG_STANDING",
        "cB": "FLAG_OPEN_MOUTH",
        "ci": "INV_SLOT_SADDLE",
        "cj": "INV_SLOT_ARMOR",
        "ck": "INV_BASE_COUNT",
        "cC": "eatingCounter",
        "cD": "mouthCounter",
        "cE": "standCounter",
        "cl": "tailCounter",
        "cm": "sprintCounter",
        "cn": "isJumping",
        "co": "inventory",
        "cp": "temper",
        "cq": "playerJumpPendingScale",
        "cr": "allowStandSliding",
        "cF": "eatAnim",
        "cG": "eatAnimO",
        "cH": "standAnim",
        "cI": "standAnimO",
        "cJ": "mouthAnim",
        "cK": "mouthAnimO",
        "cs": "canGallop",
        "ct": "gallopSoundCounter",
        "cL": "owner"
      },
      "methods": {
        "x()V": "registerGoals",
        "go()V": "addBehaviourGoals",
        "a_()V": "defineSynchedData",
        "t(I)Z": "getFlag",
        "d(IZ)V": "setFlag",
        "gn()Z": "isTamed",
        "U_()Ljava/util/UUID;": "getOwnerUUID",
        "b(Ljava/util/UUID;)V": "setOwnerUUID",
        "gp()Z": "isJumping",
        "x(Z)V": "setTamed",
        "y(Z)V": "setIsJumping",
        "C(F)V": "onLeashDistance",
        "gq()Z": "isEating",
        "gr()Z": "isStanding",
        "gs()Z": "isBred",
        "z(Z)V": "setBred",
        "g()Z": "isSaddleable",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "equipSaddle",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "equipArmor",
        "i()Z": "isSaddled",
        "gt()I": "getTemper",
        "u(I)V": "setTemper",
        "v(I)I": "modifyTemper",
        "bp()Z": "isPushable",
        "q()V": "eating",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "d(FF)I": "calculateFallDamage",
        "V_()I": "getInventorySize",
        "gu()V": "createInventory",
        "gv()V": "updateContainerEquipment",
        "a(Lnet/minecraft/world/Container;)V": "containerChanged",
        "gw()D": "getCustomJump",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "ge()Z": "canPerformRearing",
        "gf()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "gx()Lnet/minecraft/sounds/SoundEvent;": "getAngrySound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "b(Lnet/minecraft/world/level/block/SoundType;)Z": "isWoodSoundType",
        "a(Lnet/minecraft/world/level/block/SoundType;)V": "playGallopSound",
        "gy()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createBaseHorseAttributes",
        "fE()I": "getMaxSpawnClusterSize",
        "gz()I": "getMaxTemper",
        "eR()F": "getSoundVolume",
        "M()I": "getAmbientSoundInterval",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "openCustomInventoryScreen",
        "c(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult;": "fedFood",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Z": "handleEating",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "doPlayerRide",
        "eT()Z": "isImmobile",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "r()V": "moveTail",
        "eu()V": "dropEquipment",
        "b_()V": "aiStep",
        "gA()V": "followMommy",
        "gB()Z": "canEatGrass",
        "l()V": "tick",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "fY()V": "openMouth",
        "A(Z)V": "setEating",
        "B(Z)V": "setStanding",
        "gC()Lnet/minecraft/sounds/SoundEvent;": "getAmbientStandSound",
        "gD()V": "standIfPossible",
        "gE()V": "makeMad",
        "h(Lnet/minecraft/world/entity/player/Player;)Z": "tameWithName",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)V": "tickRidden",
        "l(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec2;": "getRiddenRotation",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getRiddenInput",
        "e(Lnet/minecraft/world/entity/player/Player;)F": "getRiddenSpeed",
        "b(FLnet/minecraft/world/phys/Vec3;)V": "executeRidersJump",
        "gF()V": "playJumpSound",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "gG()Z": "canParent",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "a(Lnet/minecraft/world/entity/AgeableMob;Lnet/minecraft/world/entity/animal/horse/AbstractHorse;)V": "setOffspringAttributes",
        "a(Lnet/minecraft/world/entity/AgeableMob;Lnet/minecraft/world/entity/animal/horse/AbstractHorse;Lnet/minecraft/world/entity/ai/attributes/Attribute;DD)V": "setOffspringAttribute",
        "a(DDDDLnet/minecraft/util/RandomSource;)D": "createOffspringAttribute",
        "D(F)F": "getEatAnim",
        "E(F)F": "getStandAnim",
        "F(F)F": "getMouthAnim",
        "b(I)V": "onPlayerJump",
        "a()Z": "canJump",
        "c(I)V": "handleStartJump",
        "b()V": "handleStopJump",
        "C(Z)V": "spawnTamingParticles",
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V": "positionRider",
        "a(Ljava/util/function/IntUnaryOperator;)F": "generateMaxHealth",
        "a(Ljava/util/function/DoubleSupplier;)D": "generateJumpStrength",
        "b(Ljava/util/function/DoubleSupplier;)D": "generateSpeed",
        "i_()Z": "onClimbable",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "gH()Z": "canWearArmor",
        "gI()Z": "isWearingArmor",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "isArmor",
        "a(ILjava/util/function/Predicate;)Lnet/minecraft/world/entity/SlotAccess;": "createEquipmentSlotAccess",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationInDirection",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationForPassenger",
        "a(Lnet/minecraft/util/RandomSource;)V": "randomizeAttributes",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/Container;)Z": "hasInventoryChanged",
        "gJ()I": "getAmbientStandInterval",
        "e()Lnet/minecraft/world/level/EntityGetter;": "level"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorseDonkey": {
      "methods": {
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "gx()Lnet/minecraft/sounds/SoundEvent;": "getAngrySound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "gf()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorse": {
      "fields": {
        "bT": "ARMOR_MODIFIER_UUID",
        "bU": "DATA_ID_TYPE_VARIANT"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)V": "randomizeAttributes",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "q()Lnet/minecraft/world/item/ItemStack;": "getArmor",
        "n(Lnet/minecraft/world/item/ItemStack;)V": "setArmor",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "w(I)V": "setTypeVariant",
        "gg()I": "getTypeVariant",
        "a(Lnet/minecraft/world/entity/animal/horse/Variant;Lnet/minecraft/world/entity/animal/horse/Markings;)V": "setVariantAndMarkings",
        "r()Lnet/minecraft/world/entity/animal/horse/Variant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/horse/Variant;)V": "setVariant",
        "fY()Lnet/minecraft/world/entity/animal/horse/Markings;": "getMarkings",
        "gv()V": "updateContainerEquipment",
        "o(Lnet/minecraft/world/item/ItemStack;)V": "setArmorEquipment",
        "a(Lnet/minecraft/world/Container;)V": "containerChanged",
        "a(Lnet/minecraft/world/level/block/SoundType;)V": "playGallopSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "gf()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "gx()Lnet/minecraft/sounds/SoundEvent;": "getAngrySound",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "gH()Z": "canWearArmor",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "isArmor",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityLlama": {
      "fields": {
        "bU": "MAX_STRENGTH",
        "bW": "FOOD_ITEMS",
        "bX": "DATA_STRENGTH_ID",
        "bY": "DATA_SWAG_ID",
        "bZ": "DATA_VARIANT_ID",
        "ca": "didSpit",
        "cb": "caravanHead",
        "cc": "caravanTail"
      },
      "methods": {
        "gh()Z": "isTraderLlama",
        "w(I)V": "setStrength",
        "b(Lnet/minecraft/util/RandomSource;)V": "setRandomStrength",
        "gi()I": "getStrength",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "x()V": "registerGoals",
        "gj()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "gk()Lnet/minecraft/world/entity/animal/horse/Llama$Variant;": "getVariant",
        "a(Lnet/minecraft/world/entity/animal/horse/Llama$Variant;)V": "setVariant",
        "V_()I": "getInventorySize",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V": "positionRider",
        "bx()D": "getPassengersRidingOffset",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Z": "handleEating",
        "eT()Z": "isImmobile",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "ge()Z": "canPerformRearing",
        "gx()Lnet/minecraft/sounds/SoundEvent;": "getAngrySound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "gf()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "fY()V": "playChestEquipsSound",
        "gg()I": "getInventoryColumns",
        "gH()Z": "canWearArmor",
        "gI()Z": "isWearingArmor",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "isArmor",
        "g()Z": "isSaddleable",
        "a(Lnet/minecraft/world/Container;)V": "containerChanged",
        "gv()V": "updateContainerEquipment",
        "a(Lnet/minecraft/world/item/DyeColor;)V": "setSwag",
        "n(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/DyeColor;": "getDyeColor",
        "gl()Lnet/minecraft/world/item/DyeColor;": "getSwag",
        "gz()I": "getMaxTemper",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/animal/horse/Llama;": "getBreedOffspring",
        "gm()Lnet/minecraft/world/entity/animal/horse/Llama;": "makeNewLlama",
        "m(Lnet/minecraft/world/entity/LivingEntity;)V": "spit",
        "D(Z)V": "setDidSpit",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "gK()V": "leaveCaravan",
        "a(Lnet/minecraft/world/entity/animal/horse/Llama;)V": "joinCaravan",
        "gL()Z": "hasCaravanTail",
        "gM()Z": "inCaravan",
        "gN()Lnet/minecraft/world/entity/animal/horse/Llama;": "getCaravanHead",
        "fX()D": "followLeashSpeed",
        "gA()V": "followMommy",
        "gB()Z": "canEatGrass",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityLlama$Variant": {
      "fields": {
        "a": "CREAMY",
        "b": "WHITE",
        "c": "BROWN",
        "d": "GRAY",
        "e": "CODEC",
        "f": "BY_ID",
        "g": "id",
        "h": "name",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "a(I)Lnet/minecraft/world/entity/animal/horse/Llama$Variant;": "byId",
        "c()Ljava/lang/String;": "getSerializedName"
      }
    },
    "net/minecraft/world/entity/animal/horse/HorseStyle": {
      "fields": {
        "a": "NONE",
        "b": "WHITE",
        "c": "WHITE_FIELD",
        "d": "WHITE_DOTS",
        "e": "BLACK_DOTS",
        "f": "BY_ID",
        "g": "id",
        "h": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "a(I)Lnet/minecraft/world/entity/animal/horse/Markings;": "byId",
        "b()[Lnet/minecraft/world/entity/animal/horse/Markings;": "$values"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorseMule": {
      "methods": {
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "gx()Lnet/minecraft/sounds/SoundEvent;": "getAngrySound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "gf()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "fY()V": "playChestEquipsSound",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorseSkeleton": {
      "fields": {
        "bT": "skeletonTrapGoal",
        "bU": "TRAP_MAX_LIFE",
        "bW": "isTrap",
        "bX": "trapTime"
      },
      "methods": {
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a(Lnet/minecraft/util/RandomSource;)V": "randomizeAttributes",
        "go()V": "addBehaviourGoals",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "e(F)V": "playSwimSound",
        "gF()V": "playJumpSound",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "bx()D": "getPassengersRidingOffset",
        "b_()V": "aiStep",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "eY()F": "getWaterSlowDown",
        "r()Z": "isTrap",
        "w(Z)V": "setTrap",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract"
      }
    },
    "net/minecraft/world/entity/animal/horse/PathfinderGoalHorseTrap": {
      "fields": {
        "a": "horse"
      },
      "methods": {
        "a()Z": "canUse",
        "e()V": "tick",
        "a(Lnet/minecraft/world/DifficultyInstance;)Lnet/minecraft/world/entity/animal/horse/AbstractHorse;": "createHorse",
        "a(Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/animal/horse/AbstractHorse;)Lnet/minecraft/world/entity/monster/Skeleton;": "createSkeleton",
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "disenchant"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityLlamaTrader": {
      "fields": {
        "bU": "despawnDelay"
      },
      "methods": {
        "gh()Z": "isTraderLlama",
        "gm()Lnet/minecraft/world/entity/animal/horse/Llama;": "makeNewLlama",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "x()V": "registerGoals",
        "w(I)V": "setDespawnDelay",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "doPlayerRide",
        "b_()V": "aiStep",
        "gO()V": "maybeDespawn",
        "gP()Z": "canDespawn",
        "gQ()Z": "isLeashedToWanderingTrader",
        "gR()Z": "isLeashedToSomethingOtherThanTheWanderingTrader",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn"
      }
    },
    "net/minecraft/world/entity/animal/horse/HorseColor": {
      "fields": {
        "a": "WHITE",
        "b": "CREAMY",
        "c": "CHESTNUT",
        "d": "BROWN",
        "e": "BLACK",
        "f": "GRAY",
        "g": "DARK_BROWN",
        "h": "CODEC",
        "i": "BY_ID",
        "j": "id",
        "k": "name",
        "l": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "a(I)Lnet/minecraft/world/entity/animal/horse/Variant;": "byId",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()[Lnet/minecraft/world/entity/animal/horse/Variant;": "$values"
      }
    },
    "net/minecraft/world/entity/animal/horse/EntityHorseZombie": {
      "methods": {
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a(Lnet/minecraft/util/RandomSource;)V": "randomizeAttributes",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "go()V": "addBehaviourGoals"
      }
    },
    "net/minecraft/world/entity/animal/sniffer/Sniffer": {
      "fields": {
        "bZ": "DIGGING_PARTICLES_DELAY_TICKS",
        "ca": "DIGGING_PARTICLES_DURATION_TICKS",
        "cb": "DIGGING_PARTICLES_AMOUNT",
        "cc": "DIGGING_DROP_SEED_OFFSET_TICKS",
        "cd": "SNIFFER_BABY_AGE_TICKS",
        "ce": "DIGGING_BB_HEIGHT_OFFSET",
        "cf": "DIGGING_DIMENSIONS",
        "cg": "DATA_STATE",
        "ch": "DATA_DROP_SEED_AT_TICK",
        "bT": "feelingHappyAnimationState",
        "bU": "scentingAnimationState",
        "bW": "sniffingAnimationState",
        "bX": "diggingAnimationState",
        "bY": "risingAnimationState"
      },
      "methods": {
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "A()V": "onPathfindingStart",
        "C()V": "onPathfindingDone",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "r()Z": "isPanicking",
        "w()Z": "isSearching",
        "fY()Z": "isTempted",
        "ge()Z": "canSniff",
        "gf()Z": "canPlayDiggingSound",
        "gi()Lnet/minecraft/core/BlockPos;": "getHeadBlock",
        "gj()Lnet/minecraft/world/phys/Vec3;": "getHeadPosition",
        "gk()Lnet/minecraft/world/entity/animal/sniffer/Sniffer$State;": "getState",
        "b(Lnet/minecraft/world/entity/animal/sniffer/Sniffer$State;)Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "setState",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "gl()V": "resetAnimations",
        "a(Lnet/minecraft/world/entity/animal/sniffer/Sniffer$State;)Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "transitionTo",
        "gm()Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "onScentingStart",
        "gn()Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "onDiggingStart",
        "w(Z)Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "onDiggingComplete",
        "gg()Ljava/util/Optional;": "calculateDigPosition",
        "gh()Z": "canDig",
        "i(Lnet/minecraft/core/BlockPos;)Z": "canDig",
        "go()V": "dropSeed",
        "a(Lnet/minecraft/world/entity/AnimationState;)Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "emitDiggingParticles",
        "j(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "storeExploredPosition",
        "gp()Ljava/util/stream/Stream;": "getExploredPositions",
        "eW()V": "jumpFromGround",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;)V": "spawnChildFromBreeding",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "l()V": "tick",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "bx()D": "getPassengersRidingOffset",
        "df()F": "getNameTagOffsetY",
        "gq()V": "playSearchingSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "fC()I": "getMaxHeadYRot",
        "a(Z)V": "setBaby",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "a(Lnet/minecraft/world/entity/animal/Animal;)Z": "canMate",
        "j_()Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForCulling",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "W()V": "customServerAiStep",
        "V()V": "sendDebugPackets"
      }
    },
    "net/minecraft/world/entity/animal/sniffer/Sniffer$State": {
      "fields": {
        "a": "IDLING",
        "b": "FEELING_HAPPY",
        "c": "SCENTING",
        "d": "SNIFFING",
        "e": "SEARCHING",
        "f": "DIGGING",
        "g": "RISING",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/animal/sniffer/SnifferAi": {
      "fields": {
        "c": "LOGGER",
        "d": "MAX_LOOK_DISTANCE",
        "a": "SENSOR_TYPES",
        "b": "MEMORY_TYPES",
        "e": "SNIFFING_COOLDOWN_TICKS",
        "f": "SPEED_MULTIPLIER_WHEN_IDLING",
        "g": "SPEED_MULTIPLIER_WHEN_PANICKING",
        "h": "SPEED_MULTIPLIER_WHEN_SNIFFING",
        "i": "SPEED_MULTIPLIER_WHEN_TEMPTED"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/crafting/Ingredient;": "getTemptations",
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/animal/sniffer/Sniffer;)Lnet/minecraft/world/entity/animal/sniffer/Sniffer;": "resetSniffing",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initSniffingActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initDigActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "a(Lnet/minecraft/world/entity/animal/sniffer/Sniffer;)V": "updateActivity",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Double;": "lambda$initIdleActivity$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Ljava/lang/Float;": "lambda$initIdleActivity$0"
      }
    },
    "net/minecraft/world/entity/boss/EntityComplexPart": {
      "fields": {
        "b": "parentMob",
        "c": "name",
        "d": "size"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "bo()Z": "isPickable",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "q(Lnet/minecraft/world/entity/Entity;)Z": "is",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "dG()Z": "shouldBeSaved"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/EntityEnderCrystal": {
      "fields": {
        "c": "DATA_BEAM_TARGET",
        "d": "DATA_SHOW_BOTTOM",
        "b": "time"
      },
      "methods": {
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "bo()Z": "isPickable",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "ah()V": "kill",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "onDestroyedBy",
        "a(Lnet/minecraft/core/BlockPos;)V": "setBeamTarget",
        "j()Lnet/minecraft/core/BlockPos;": "getBeamTarget",
        "a(Z)V": "setShowBottom",
        "k()Z": "showsBottom",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/EntityEnderDragon": {
      "fields": {
        "bY": "LOGGER",
        "b": "DATA_PHASE",
        "bZ": "CRYSTAL_DESTROY_TARGETING",
        "ca": "GROWL_INTERVAL_MIN",
        "cb": "GROWL_INTERVAL_MAX",
        "cc": "SITTING_ALLOWED_DAMAGE_PERCENTAGE",
        "cd": "DRAGON_DEATH_TIME_KEY",
        "ce": "DRAGON_PHASE_KEY",
        "c": "positions",
        "d": "posPointer",
        "cf": "subEntities",
        "e": "head",
        "cg": "neck",
        "ch": "body",
        "ci": "tail1",
        "cj": "tail2",
        "ck": "tail3",
        "cl": "wing1",
        "cm": "wing2",
        "bS": "oFlapTime",
        "bT": "flapTime",
        "bU": "inWall",
        "bV": "dragonDeathTime",
        "bW": "yRotA",
        "bX": "nearestCrystal",
        "cn": "dragonFight",
        "co": "fightOrigin",
        "cp": "phaseManager",
        "cq": "growlTime",
        "cr": "sittingDamageReceived",
        "cs": "nodes",
        "ct": "nodeAdjacency",
        "cu": "openSet"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/dimension/end/EndDragonFight;)V": "setDragonFight",
        "h(Lnet/minecraft/core/BlockPos;)V": "setFightOrigin",
        "q()Lnet/minecraft/core/BlockPos;": "getFightOrigin",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "aP()Z": "isFlapping",
        "aO()V": "onFlap",
        "a_()V": "defineSynchedData",
        "a(IF)[D": "getLatencyPos",
        "b_()V": "aiStep",
        "a(Lnet/minecraft/world/entity/boss/EnderDragonPart;DDD)V": "tickPart",
        "fY()F": "getHeadYOffset",
        "fZ()V": "checkCrystals",
        "b(Ljava/util/List;)V": "knockBack",
        "c(Ljava/util/List;)V": "hurt",
        "i(D)F": "rotWrap",
        "b(Lnet/minecraft/world/phys/AABB;)Z": "checkWalls",
        "a(Lnet/minecraft/world/entity/boss/EnderDragonPart;Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "g(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "reallyHurt",
        "ah()V": "kill",
        "dX()V": "tickDeath",
        "w()I": "findClosestNode",
        "r(DDD)I": "findClosestNode",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "du()V": "checkDespawn",
        "fV()[Lnet/minecraft/world/entity/boss/EnderDragonPart;": "getSubEntities",
        "bo()Z": "isPickable",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "eR()F": "getSoundVolume",
        "a(I[D[D)F": "getHeadPartYOffset",
        "C(F)Lnet/minecraft/world/phys/Vec3;": "getHeadLookVector",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EndCrystal;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/damagesource/DamageSource;)V": "onCrystalDestroyed",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "fW()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager;": "getPhaseManager",
        "fX()Lnet/minecraft/world/level/dimension/end/EndDragonFight;": "getDragonFight",
        "b(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;)Z": "addEffect",
        "l(Lnet/minecraft/world/entity/Entity;)Z": "canRide",
        "cq()Z": "canChangeDimensions",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "canAttack",
        "bx()D": "getPassengersRidingOffset"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/AbstractDragonController": {
      "fields": {
        "a": "dragon"
      },
      "methods": {
        "a()Z": "isSitting",
        "b()V": "doClientTick",
        "c()V": "doServerTick",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EndCrystal;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/entity/player/Player;)V": "onCrystalDestroyed",
        "d()V": "begin",
        "e()V": "end",
        "f()F": "getFlySpeed",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)F": "onHurt",
        "h()F": "getTurnSpeed"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/AbstractDragonControllerLanded": {
      "methods": {
        "a()Z": "isSitting",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)F": "onHurt"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerCharge": {
      "fields": {
        "b": "LOGGER",
        "c": "CHARGE_RECOVERY_TIME",
        "d": "targetLocation",
        "e": "timeSinceCharge"
      },
      "methods": {
        "c()V": "doServerTick",
        "d()V": "begin",
        "a(Lnet/minecraft/world/phys/Vec3;)V": "setTarget",
        "f()F": "getFlySpeed",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerDying": {
      "fields": {
        "b": "targetLocation",
        "c": "time"
      },
      "methods": {
        "b()V": "doClientTick",
        "c()V": "doServerTick",
        "d()V": "begin",
        "f()F": "getFlySpeed",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerHold": {
      "fields": {
        "b": "NEW_TARGET_TARGETING",
        "d": "targetLocation",
        "e": "clockwise"
      },
      "methods": {
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase",
        "c()V": "doServerTick",
        "d()V": "begin",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "j()V": "findNewTarget",
        "a(Lnet/minecraft/world/entity/player/Player;)V": "strafePlayer",
        "k()V": "navigateToNextPathNode",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EndCrystal;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/entity/player/Player;)V": "onCrystalDestroyed"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerHover": {
      "fields": {
        "b": "targetLocation"
      },
      "methods": {
        "c()V": "doServerTick",
        "a()Z": "isSitting",
        "d()V": "begin",
        "f()F": "getFlySpeed",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerLandingFly": {
      "fields": {
        "b": "NEAR_EGG_TARGETING",
        "d": "targetLocation"
      },
      "methods": {
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase",
        "d()V": "begin",
        "c()V": "doServerTick",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "j()V": "findNewTarget",
        "k()V": "navigateToNextPathNode"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerLanding": {
      "fields": {
        "b": "targetLocation"
      },
      "methods": {
        "b()V": "doClientTick",
        "c()V": "doServerTick",
        "f()F": "getFlySpeed",
        "h()F": "getTurnSpeed",
        "d()V": "begin",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/IDragonController": {
      "methods": {
        "a()Z": "isSitting",
        "b()V": "doClientTick",
        "c()V": "doServerTick",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EndCrystal;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/entity/player/Player;)V": "onCrystalDestroyed",
        "d()V": "begin",
        "e()V": "end",
        "f()F": "getFlySpeed",
        "h()F": "getTurnSpeed",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)F": "onHurt"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerLandedAttack": {
      "fields": {
        "b": "ROAR_DURATION",
        "c": "attackingTicks"
      },
      "methods": {
        "b()V": "doClientTick",
        "c()V": "doServerTick",
        "d()V": "begin",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerLandedFlame": {
      "fields": {
        "b": "FLAME_DURATION",
        "c": "SITTING_FLAME_ATTACKS_COUNT",
        "d": "WARMUP_TIME",
        "e": "flameTicks",
        "f": "flameCount",
        "g": "flame"
      },
      "methods": {
        "b()V": "doClientTick",
        "c()V": "doServerTick",
        "d()V": "begin",
        "e()V": "end",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase",
        "j()V": "resetFlameCount"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerLandedSearch": {
      "fields": {
        "b": "SITTING_SCANNING_IDLE_TICKS",
        "c": "SITTING_ATTACK_Y_VIEW_RANGE",
        "d": "SITTING_ATTACK_VIEW_RANGE",
        "e": "SITTING_CHARGE_VIEW_RANGE",
        "f": "CHARGE_TARGETING",
        "g": "scanTargeting",
        "h": "scanningTime"
      },
      "methods": {
        "c()V": "doServerTick",
        "d()V": "begin",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EnderDragon;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerStrafe": {
      "fields": {
        "b": "LOGGER",
        "c": "FIREBALL_CHARGE_AMOUNT",
        "d": "fireballCharge",
        "f": "targetLocation",
        "g": "attackTarget",
        "h": "holdingPatternClockwise"
      },
      "methods": {
        "c()V": "doServerTick",
        "j()V": "findNewTarget",
        "k()V": "navigateToNextPathNode",
        "d()V": "begin",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerFly": {
      "fields": {
        "b": "firstTick",
        "d": "targetLocation"
      },
      "methods": {
        "c()V": "doServerTick",
        "d()V": "begin",
        "j()V": "findNewTarget",
        "k()V": "navigateToNextPathNode",
        "g()Lnet/minecraft/world/phys/Vec3;": "getFlyTargetLocation",
        "i()Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerPhase": {
      "fields": {
        "l": "phases",
        "a": "HOLDING_PATTERN",
        "b": "STRAFE_PLAYER",
        "c": "LANDING_APPROACH",
        "d": "LANDING",
        "e": "TAKEOFF",
        "f": "SITTING_FLAMING",
        "g": "SITTING_SCANNING",
        "h": "SITTING_ATTACKING",
        "i": "CHARGING_PLAYER",
        "j": "DYING",
        "k": "HOVERING",
        "m": "instanceClass",
        "n": "id",
        "o": "name"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EnderDragon;)Lnet/minecraft/world/entity/boss/enderdragon/phases/DragonPhaseInstance;": "createInstance",
        "a()Ljava/lang/reflect/Constructor;": "getConstructor",
        "b()I": "getId",
        "a(I)Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "getById",
        "c()I": "getCount",
        "a(Ljava/lang/Class;Ljava/lang/String;)Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;": "create"
      }
    },
    "net/minecraft/world/entity/boss/enderdragon/phases/DragonControllerManager": {
      "fields": {
        "a": "LOGGER",
        "b": "dragon",
        "c": "phases",
        "d": "currentPhase"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;)V": "setPhase",
        "a()Lnet/minecraft/world/entity/boss/enderdragon/phases/DragonPhaseInstance;": "getCurrentPhase",
        "b(Lnet/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhase;)Lnet/minecraft/world/entity/boss/enderdragon/phases/DragonPhaseInstance;": "getPhase"
      }
    },
    "net/minecraft/world/entity/boss/wither/EntityWither": {
      "fields": {
        "b": "DATA_TARGET_A",
        "c": "DATA_TARGET_B",
        "d": "DATA_TARGET_C",
        "e": "DATA_TARGETS",
        "bT": "DATA_ID_INV",
        "bU": "INVULNERABLE_TICKS",
        "bV": "xRotHeads",
        "bW": "yRotHeads",
        "bX": "xRotOHeads",
        "bY": "yRotOHeads",
        "bZ": "nextHeadUpdate",
        "ca": "idleHeadUpdates",
        "cb": "destroyBlocksTick",
        "cc": "bossEvent",
        "cd": "LIVING_ENTITY_SELECTOR",
        "ce": "TARGETING_CONDITIONS"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "x()V": "registerGoals",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b_()V": "aiStep",
        "W()V": "customServerAiStep",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canDestroy",
        "q()V": "makeInvulnerable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;)V": "makeStuckInBlock",
        "c(Lnet/minecraft/server/level/ServerPlayer;)V": "startSeenByPlayer",
        "d(Lnet/minecraft/server/level/ServerPlayer;)V": "stopSeenByPlayer",
        "u(I)D": "getHeadX",
        "v(I)D": "getHeadY",
        "w(I)D": "getHeadZ",
        "a(FFF)F": "rotlerp",
        "a(ILnet/minecraft/world/entity/LivingEntity;)V": "performRangedAttack",
        "a(IDDDZ)V": "performRangedAttack",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "du()V": "checkDespawn",
        "b(Lnet/minecraft/world/effect/MobEffectInstance;Lnet/minecraft/world/entity/Entity;)Z": "addEffect",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(I)F": "getHeadYRot",
        "c(I)F": "getHeadXRot",
        "w()I": "getInvulnerableTicks",
        "s(I)V": "setInvulnerableTicks",
        "t(I)I": "getAlternativeTarget",
        "a(II)V": "setAlternativeTarget",
        "a()Z": "isPowered",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "l(Lnet/minecraft/world/entity/Entity;)Z": "canRide",
        "cq()Z": "canChangeDimensions",
        "c(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "canBeAffected"
      }
    },
    "net/minecraft/world/entity/decoration/EntityArmorStand": {
      "fields": {
        "b": "WOBBLE_TIME",
        "bK": "ENABLE_ARMS",
        "bL": "DEFAULT_HEAD_POSE",
        "bM": "DEFAULT_BODY_POSE",
        "bN": "DEFAULT_LEFT_ARM_POSE",
        "bO": "DEFAULT_RIGHT_ARM_POSE",
        "bP": "DEFAULT_LEFT_LEG_POSE",
        "bQ": "DEFAULT_RIGHT_LEG_POSE",
        "bR": "MARKER_DIMENSIONS",
        "bS": "BABY_DIMENSIONS",
        "bT": "FEET_OFFSET",
        "bU": "CHEST_OFFSET",
        "bV": "LEGS_OFFSET",
        "bW": "HEAD_OFFSET",
        "c": "DISABLE_TAKING_OFFSET",
        "d": "DISABLE_PUTTING_OFFSET",
        "e": "CLIENT_FLAG_SMALL",
        "f": "CLIENT_FLAG_SHOW_ARMS",
        "g": "CLIENT_FLAG_NO_BASEPLATE",
        "bB": "CLIENT_FLAG_MARKER",
        "bC": "DATA_CLIENT_FLAGS",
        "bD": "DATA_HEAD_POSE",
        "bE": "DATA_BODY_POSE",
        "bF": "DATA_LEFT_ARM_POSE",
        "bG": "DATA_RIGHT_ARM_POSE",
        "bH": "DATA_LEFT_LEG_POSE",
        "bI": "DATA_RIGHT_LEG_POSE",
        "bX": "RIDABLE_MINECARTS",
        "bY": "handItems",
        "bZ": "armorItems",
        "ca": "invisible",
        "bJ": "lastHit",
        "cb": "disabledSlots",
        "cc": "headPose",
        "cd": "bodyPose",
        "ce": "leftArmPose",
        "cf": "rightArmPose",
        "cg": "leftLegPose",
        "ch": "rightLegPose"
      },
      "methods": {
        "d_()V": "refreshDimensions",
        "E()Z": "hasPhysics",
        "cV()Z": "isEffectiveAi",
        "a_()V": "defineSynchedData",
        "bI()Ljava/lang/Iterable;": "getHandSlots",
        "bJ()Ljava/lang/Iterable;": "getArmorSlots",
        "c(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getItemBySlot",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlot",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "readPose",
        "G()Lnet/minecraft/nbt/CompoundTag;": "writePose",
        "bp()Z": "isPushable",
        "A(Lnet/minecraft/world/entity/Entity;)V": "doPush",
        "fd()V": "pushEntities",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactAt",
        "j(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/entity/EquipmentSlot;": "getClickedSlot",
        "e(Lnet/minecraft/world/entity/EquipmentSlot;)Z": "isDisabled",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;)Z": "swapItem",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "b(B)V": "handleEntityEvent",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "I()V": "showBreakingParticles",
        "g(Lnet/minecraft/world/damagesource/DamageSource;F)V": "causeDamage",
        "h(Lnet/minecraft/world/damagesource/DamageSource;)V": "brokenByPlayer",
        "i(Lnet/minecraft/world/damagesource/DamageSource;)V": "brokenByAnything",
        "J()V": "playBrokenSound",
        "e(FF)F": "tickHeadTurn",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "bw()D": "getMyRidingOffset",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "o(F)V": "setYBodyRot",
        "n(F)V": "setYHeadRot",
        "l()V": "tick",
        "F()V": "updateInvisibilityStatus",
        "j(Z)V": "setInvisible",
        "h_()Z": "isBaby",
        "ah()V": "kill",
        "cJ()Z": "ignoreExplosion",
        "l_()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "c_()Z": "isIgnoringBlockTriggers",
        "t(Z)V": "setSmall",
        "q()Z": "isSmall",
        "a(Z)V": "setShowArms",
        "r()Z": "isShowArms",
        "s(Z)V": "setNoBasePlate",
        "s()Z": "isNoBasePlate",
        "u(Z)V": "setMarker",
        "w()Z": "isMarker",
        "a(BIZ)B": "setBit",
        "a(Lnet/minecraft/core/Rotations;)V": "setHeadPose",
        "b(Lnet/minecraft/core/Rotations;)V": "setBodyPose",
        "c(Lnet/minecraft/core/Rotations;)V": "setLeftArmPose",
        "d(Lnet/minecraft/core/Rotations;)V": "setRightArmPose",
        "e(Lnet/minecraft/core/Rotations;)V": "setLeftLegPose",
        "f(Lnet/minecraft/core/Rotations;)V": "setRightLegPose",
        "x()Lnet/minecraft/core/Rotations;": "getHeadPose",
        "y()Lnet/minecraft/core/Rotations;": "getBodyPose",
        "z()Lnet/minecraft/core/Rotations;": "getLeftArmPose",
        "A()Lnet/minecraft/core/Rotations;": "getRightArmPose",
        "C()Lnet/minecraft/core/Rotations;": "getLeftLegPose",
        "D()Lnet/minecraft/core/Rotations;": "getRightLegPose",
        "bo()Z": "isPickable",
        "r(Lnet/minecraft/world/entity/Entity;)Z": "skipAttackInteraction",
        "fh()Lnet/minecraft/world/entity/HumanoidArm;": "getMainArm",
        "eC()Lnet/minecraft/world/entity/LivingEntity$Fallsounds;": "getFallSounds",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "ft()Z": "isAffectedByPotions",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "fu()Z": "attackable",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "v(Z)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensionsMarker",
        "k(F)Lnet/minecraft/world/phys/Vec3;": "getLightProbePosition",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "el()Z": "canBeSeenByAnyone"
      }
    },
    "net/minecraft/world/entity/decoration/GlowItemFrame": {
      "methods": {
        "j()Lnet/minecraft/sounds/SoundEvent;": "getRemoveItemSound",
        "k()Lnet/minecraft/sounds/SoundEvent;": "getBreakSound",
        "o()Lnet/minecraft/sounds/SoundEvent;": "getPlaceSound",
        "p()Lnet/minecraft/sounds/SoundEvent;": "getAddItemSound",
        "q()Lnet/minecraft/sounds/SoundEvent;": "getRotateItemSound",
        "r()Lnet/minecraft/world/item/ItemStack;": "getFrameItemStack"
      }
    },
    "net/minecraft/world/entity/decoration/EntityHanging": {
      "fields": {
        "e": "LOGGER",
        "b": "HANGING_ENTITY",
        "f": "checkInterval",
        "c": "pos",
        "d": "direction"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/core/Direction;)V": "setDirection",
        "s()V": "recalculateBoundingBox",
        "b(I)D": "offs",
        "l()V": "tick",
        "t()Z": "survives",
        "bo()Z": "isPickable",
        "r(Lnet/minecraft/world/entity/Entity;)Z": "skipAttackInteraction",
        "cB()Lnet/minecraft/core/Direction;": "getDirection",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V": "move",
        "j(DDD)V": "push",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "v()I": "getWidth",
        "w()I": "getHeight",
        "a(Lnet/minecraft/world/entity/Entity;)V": "dropItem",
        "x()V": "playPlacementSound",
        "a(Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/item/ItemEntity;": "spawnAtLocation",
        "bq()Z": "repositionEntityAfterLoad",
        "e(DDD)V": "setPos",
        "y()Lnet/minecraft/core/BlockPos;": "getPos",
        "a(Lnet/minecraft/world/level/block/Rotation;)F": "rotate",
        "a(Lnet/minecraft/world/level/block/Mirror;)F": "mirror",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "d_()V": "refreshDimensions"
      }
    },
    "net/minecraft/world/entity/decoration/EntityItemFrame": {
      "fields": {
        "f": "LOGGER",
        "g": "DATA_ITEM",
        "h": "DATA_ROTATION",
        "e": "NUM_ROTATIONS",
        "i": "dropChance",
        "j": "fixed"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/core/Direction;)V": "setDirection",
        "s()V": "recalculateBoundingBox",
        "t()Z": "survives",
        "a(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V": "move",
        "j(DDD)V": "push",
        "bC()F": "getPickRadius",
        "ah()V": "kill",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "j()Lnet/minecraft/sounds/SoundEvent;": "getRemoveItemSound",
        "v()I": "getWidth",
        "w()I": "getHeight",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "a(Lnet/minecraft/world/entity/Entity;)V": "dropItem",
        "k()Lnet/minecraft/sounds/SoundEvent;": "getBreakSound",
        "x()V": "playPlacementSound",
        "o()Lnet/minecraft/sounds/SoundEvent;": "getPlaceSound",
        "b(Lnet/minecraft/world/entity/Entity;Z)V": "dropItem",
        "c(Lnet/minecraft/world/item/ItemStack;)V": "removeFramedMap",
        "z()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "A()Ljava/util/OptionalInt;": "getFramedMapId",
        "C()Z": "hasFramedMap",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/item/ItemStack;Z)V": "setItem",
        "p()Lnet/minecraft/sounds/SoundEvent;": "getAddItemSound",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "d(Lnet/minecraft/world/item/ItemStack;)V": "onItemChanged",
        "D()I": "getRotation",
        "b(I)V": "setRotation",
        "a(IZ)V": "setRotation",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "q()Lnet/minecraft/sounds/SoundEvent;": "getRotateItemSound",
        "E()I": "getAnalogOutput",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "r()Lnet/minecraft/world/item/ItemStack;": "getFrameItemStack",
        "dz()F": "getVisualRotationYInDegrees"
      }
    },
    "net/minecraft/world/entity/decoration/EntityLeash": {
      "fields": {
        "e": "OFFSET_Y"
      },
      "methods": {
        "s()V": "recalculateBoundingBox",
        "a(Lnet/minecraft/core/Direction;)V": "setDirection",
        "v()I": "getWidth",
        "w()I": "getHeight",
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "a(Lnet/minecraft/world/entity/Entity;)V": "dropItem",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "t()Z": "survives",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/decoration/LeashFenceKnotEntity;": "getOrCreateKnot",
        "x()V": "playPlacementSound",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "q(F)Lnet/minecraft/world/phys/Vec3;": "getRopeHoldPosition",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult"
      }
    },
    "net/minecraft/world/entity/decoration/EntityPainting": {
      "fields": {
        "f": "DATA_PAINTING_VARIANT_ID",
        "g": "DEFAULT_VARIANT",
        "e": "VARIANT_TAG"
      },
      "methods": {
        "k()Lnet/minecraft/core/Holder;": "getDefaultVariant",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "a(Lnet/minecraft/core/Holder;)V": "setVariant",
        "j()Lnet/minecraft/core/Holder;": "getVariant",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Ljava/util/Optional;": "create",
        "b(Lnet/minecraft/core/Holder;)I": "variantArea",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/core/Holder;)V": "storeVariant",
        "c(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/Optional;": "loadVariant",
        "v()I": "getWidth",
        "w()I": "getHeight",
        "a(Lnet/minecraft/world/entity/Entity;)V": "dropItem",
        "x()V": "playPlacementSound",
        "b(DDDFF)V": "moveTo",
        "a(DDDFFIZ)V": "lerpTo",
        "dh()Lnet/minecraft/world/phys/Vec3;": "trackingPosition",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceKey;": "lambda$loadVariant$2",
        "a(ILnet/minecraft/core/Holder;)Z": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/decoration/Painting;Lnet/minecraft/core/Holder;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/decoration/PaintingVariant": {
      "fields": {
        "a": "width",
        "b": "height"
      },
      "methods": {
        "a()I": "getWidth",
        "b()I": "getHeight"
      }
    },
    "net/minecraft/world/entity/decoration/PaintingVariants": {
      "fields": {
        "a": "KEBAB",
        "b": "AZTEC",
        "c": "ALBAN",
        "d": "AZTEC2",
        "e": "BOMB",
        "f": "PLANT",
        "g": "WASTELAND",
        "h": "POOL",
        "i": "COURBET",
        "j": "SEA",
        "k": "SUNSET",
        "l": "CREEBET",
        "m": "WANDERER",
        "n": "GRAHAM",
        "o": "MATCH",
        "p": "BUST",
        "q": "STAGE",
        "r": "VOID",
        "s": "SKULL_AND_ROSES",
        "t": "WITHER",
        "u": "FIGHTERS",
        "v": "POINTER",
        "w": "PIGSCENE",
        "x": "BURNING_SKULL",
        "y": "SKELETON",
        "z": "DONKEY_KONG",
        "A": "EARTH",
        "B": "WIND",
        "C": "WATER",
        "D": "FIRE"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "create"
      }
    },
    "net/minecraft/world/entity/item/EntityFallingBlock": {
      "fields": {
        "f": "LOGGER",
        "g": "blockState",
        "b": "time",
        "c": "dropItem",
        "h": "cancelDrop",
        "i": "hurtEntities",
        "j": "fallDamageMax",
        "k": "fallDamagePerDistance",
        "d": "blockData",
        "e": "DATA_START_POS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/entity/item/FallingBlockEntity;": "fall",
        "cn()Z": "isAttackable",
        "a(Lnet/minecraft/core/BlockPos;)V": "setStartPos",
        "j()Lnet/minecraft/core/BlockPos;": "getStartPos",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a_()V": "defineSynchedData",
        "bo()Z": "isPickable",
        "l()V": "tick",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "callOnBrokenAfterFall",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(FI)V": "setHurtsEntities",
        "k()V": "disableDrop",
        "cs()Z": "displayFireAnimation",
        "a(Lnet/minecraft/CrashReportCategory;)V": "fillCrashReportCategory",
        "o()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "cl()Lnet/minecraft/network/chat/Component;": "getTypeName",
        "cK()Z": "onlyOpCanSetNbt",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "a(Lnet/minecraft/world/damagesource/DamageSource;FLnet/minecraft/world/entity/Entity;)V": "lambda$causeFallDamage$0"
      }
    },
    "net/minecraft/world/entity/item/EntityItem": {
      "fields": {
        "c": "DATA_ITEM",
        "d": "LIFETIME",
        "e": "INFINITE_PICKUP_DELAY",
        "f": "INFINITE_LIFETIME",
        "g": "age",
        "h": "pickupDelay",
        "i": "health",
        "j": "thrower",
        "k": "target",
        "b": "bobOffs"
      },
      "methods": {
        "aT()Z": "dampensVibrations",
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "aE()Lnet/minecraft/core/BlockPos;": "getBlockPosBelowThatAffectsMyMovement",
        "y()V": "setUnderwaterMovement",
        "z()V": "setUnderLavaMovement",
        "A()V": "mergeWithNeighbours",
        "C()Z": "isMergable",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "tryToMerge",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "areMergable",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;I)Lnet/minecraft/world/item/ItemStack;": "merge",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "merge",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/item/ItemEntity;Lnet/minecraft/world/item/ItemStack;)V": "merge",
        "aU()Z": "fireImmune",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "cn()Z": "isAttackable",
        "b(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "changeDimension",
        "j()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "b(Ljava/util/UUID;)V": "setTarget",
        "c(Ljava/util/UUID;)V": "setThrower",
        "k()I": "getAge",
        "o()V": "setDefaultPickUpDelay",
        "p()V": "setNoPickUpDelay",
        "q()V": "setNeverPickUp",
        "b(I)V": "setPickUpDelay",
        "r()Z": "hasPickUpDelay",
        "s()V": "setUnlimitedLifetime",
        "t()V": "setExtendedLifetime",
        "w()V": "makeFakeItem",
        "a(F)F": "getSpin",
        "x()Lnet/minecraft/world/entity/item/ItemEntity;": "copy",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "dz()F": "getVisualRotationYInDegrees"
      }
    },
    "net/minecraft/world/entity/item/EntityTNTPrimed": {
      "fields": {
        "b": "DATA_FUSE_ID",
        "c": "DEFAULT_FUSE_TIME",
        "d": "owner"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "bo()Z": "isPickable",
        "l()V": "tick",
        "o()V": "explode",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getOwner",
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "b(I)V": "setFuse",
        "k()I": "getFuse",
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner"
      }
    },
    "net/minecraft/world/entity/monster/EntityIllagerAbstract": {
      "methods": {
        "x()V": "registerGoals",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "q()Lnet/minecraft/world/entity/monster/AbstractIllager$IllagerArmPose;": "getArmPose",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "canAttack"
      }
    },
    "net/minecraft/world/entity/monster/EntitySkeletonAbstract": {
      "fields": {
        "b": "bowGoal",
        "c": "meleeGoal"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "r()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "b_()V": "aiStep",
        "bv()V": "rideTick",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "w()V": "reassessWeaponGoal",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "b(Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "getArrow",
        "a(Lnet/minecraft/world/item/ProjectileWeaponItem;)Z": "canFireProjectileWeapon",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlot",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "bw()D": "getMyRidingOffset",
        "fY()Z": "isShaking"
      }
    },
    "net/minecraft/world/entity/monster/EntityBlaze": {
      "fields": {
        "b": "allowedHeightOffset",
        "c": "nextHeightOffsetChangeTick",
        "d": "DATA_FLAGS_ID"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "bj()F": "getLightLevelDependentMagicValue",
        "b_()V": "aiStep",
        "fb()Z": "isSensitiveToWater",
        "W()V": "customServerAiStep",
        "bL()Z": "isOnFire",
        "r()Z": "isCharged",
        "w(Z)V": "setCharged"
      }
    },
    "net/minecraft/world/entity/monster/EntityBlaze$PathfinderGoalBlazeFireball": {
      "fields": {
        "a": "blaze",
        "b": "attackStep",
        "c": "attackTime",
        "d": "lastSeen"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick",
        "h()D": "getFollowDistance"
      }
    },
    "net/minecraft/world/entity/monster/EntityCaveSpider": {
      "methods": {
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createCaveSpider",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight"
      }
    },
    "net/minecraft/world/entity/monster/EntityCreeper": {
      "fields": {
        "b": "DATA_SWELL_DIR",
        "c": "DATA_IS_POWERED",
        "d": "DATA_IS_IGNITED",
        "e": "oldSwell",
        "bT": "swell",
        "bU": "maxSwell",
        "bV": "explosionRadius",
        "bW": "droppedSkulls"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "cr()I": "getMaxFallDistance",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "l()V": "tick",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a()Z": "isPowered",
        "D(F)F": "getSwelling",
        "r()I": "getSwellDir",
        "b(I)V": "setSwellDir",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "gb()V": "explodeCreeper",
        "gc()V": "spawnLingeringCloud",
        "w()Z": "isIgnited",
        "fY()V": "ignite",
        "fZ()Z": "canDropMobsSkull",
        "ga()V": "increaseDroppedSkulls"
      }
    },
    "net/minecraft/world/entity/monster/ICrossbow": {
      "methods": {
        "b(Z)V": "setChargingCrossbow",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/projectile/Projectile;F)V": "shootCrossbowProjectile",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget",
        "a()V": "onCrossbowAttackPerformed",
        "b(Lnet/minecraft/world/entity/LivingEntity;F)V": "performCrossbowAttack",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/projectile/Projectile;FF)V": "shootCrossbowProjectile",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/phys/Vec3;F)Lorg/joml/Vector3f;": "getProjectileShotVector"
      }
    },
    "net/minecraft/world/entity/monster/EntityDrowned": {
      "fields": {
        "b": "NAUTILUS_SHELL_CHANCE",
        "bX": "searchingForLand",
        "c": "waterNavigation",
        "d": "groundNavigation"
      },
      "methods": {
        "q()V": "addBehaviourGoals",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkDrownedSpawnRules",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isDeepEnoughToSpawn",
        "r()Z": "supportsBreakDoorGoal",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "fY()Lnet/minecraft/world/item/ItemStack;": "getSkull",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "canReplaceCurrentItem",
        "fZ()Z": "convertsInWater",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "l(Lnet/minecraft/world/entity/LivingEntity;)Z": "okTarget",
        "cw()Z": "isPushedByFluid",
        "gi()Z": "wantsToSwim",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "ba()V": "updateSwimming",
        "bX()Z": "isVisuallySwimming",
        "ga()Z": "closeToNextPos",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "w(Z)V": "setSearchingForLand"
      }
    },
    "net/minecraft/world/entity/monster/EntityGuardianElder": {
      "fields": {
        "b": "ELDER_SIZE_SCALE",
        "e": "EFFECT_INTERVAL",
        "bT": "EFFECT_RADIUS",
        "bU": "EFFECT_DURATION",
        "bV": "EFFECT_AMPLIFIER",
        "bW": "EFFECT_DISPLAY_LIMIT"
      },
      "methods": {
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "r()I": "getAttackDuration",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound",
        "W()V": "customServerAiStep",
        "b(Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$customServerAiStep$0"
      }
    },
    "net/minecraft/world/entity/monster/EntityEnderman": {
      "fields": {
        "c": "SPEED_MODIFIER_ATTACKING_UUID",
        "d": "SPEED_MODIFIER_ATTACKING",
        "e": "DELAY_BETWEEN_CREEPY_STARE_SOUND",
        "bT": "MIN_DEAGGRESSION_TIME",
        "bU": "DATA_CARRY_STATE",
        "bV": "DATA_CREEPY",
        "bW": "DATA_STARED_AT",
        "bX": "lastStareSound",
        "bY": "targetChangeTime",
        "bZ": "PERSISTENT_ANGER_TIME",
        "ca": "remainingPersistentAngerTime",
        "cb": "persistentAngerTarget"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "a_()V": "defineSynchedData",
        "c()V": "startPersistentAngerTimer",
        "a(I)V": "setRemainingPersistentAngerTime",
        "a()I": "getRemainingPersistentAngerTime",
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "r()V": "playStareSound",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "g(Lnet/minecraft/world/entity/player/Player;)Z": "isLookingAtMe",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "b_()V": "aiStep",
        "fb()Z": "isSensitiveToWater",
        "W()V": "customServerAiStep",
        "w()Z": "teleport",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "teleportTowards",
        "r(DDD)Z": "teleport",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)V": "setCarriedBlock",
        "fY()Lnet/minecraft/world/level/block/state/BlockState;": "getCarriedBlock",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/entity/projectile/ThrownPotion;F)Z": "hurtWithCleanWater",
        "fZ()Z": "isCreepy",
        "ga()Z": "hasBeenStaredAt",
        "gb()V": "setBeingStaredAt",
        "T()Z": "requiresCustomPersistence"
      }
    },
    "net/minecraft/world/entity/monster/EntityEnderman$PathfinderGoalEndermanPlaceBlock": {
      "fields": {
        "a": "enderman"
      },
      "methods": {
        "a()Z": "canUse",
        "e()V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z": "canPlaceBlock"
      }
    },
    "net/minecraft/world/entity/monster/EntityEnderman$PathfinderGoalPlayerWhoLookedAtTarget": {
      "fields": {
        "i": "enderman",
        "j": "pendingTarget",
        "k": "aggroTime",
        "l": "teleportTime",
        "m": "startAggroTargetConditions",
        "n": "continueAggroTargetConditions",
        "o": "isAngerInducing"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop",
        "b()Z": "canContinueToUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityEnderman$PathfinderGoalEndermanPickupBlock": {
      "fields": {
        "a": "enderman"
      },
      "methods": {
        "a()Z": "canUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityEndermite": {
      "fields": {
        "b": "MAX_LIFE",
        "c": "life"
      },
      "methods": {
        "x()V": "registerGoals",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "l()V": "tick",
        "o(F)V": "setYBodyRot",
        "bw()D": "getMyRidingOffset",
        "b_()V": "aiStep",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkEndermiteSpawnRules",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType"
      }
    },
    "net/minecraft/world/entity/monster/IMonster": {
      "fields": {
        "f_": "XP_REWARD_NONE",
        "g_": "XP_REWARD_SMALL",
        "h_": "XP_REWARD_MEDIUM",
        "i_": "XP_REWARD_LARGE",
        "j_": "XP_REWARD_HUGE",
        "k_": "XP_REWARD_BOSS"
      }
    },
    "net/minecraft/world/entity/monster/EntityEvoker": {
      "fields": {
        "e": "wololoTarget"
      },
      "methods": {
        "x()V": "registerGoals",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "W()V": "customServerAiStep",
        "p(Lnet/minecraft/world/entity/Entity;)Z": "isAlliedTo",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "a(Lnet/minecraft/world/entity/animal/Sheep;)V": "setWololoTarget",
        "gr()Lnet/minecraft/world/entity/animal/Sheep;": "getWololoTarget",
        "fY()Lnet/minecraft/sounds/SoundEvent;": "getCastingSoundEvent",
        "a(IZ)V": "applyRaidBuffs"
      }
    },
    "net/minecraft/world/entity/monster/EntityGhast": {
      "fields": {
        "b": "DATA_IS_CHARGING",
        "c": "explosionPower"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()Z": "isCharging",
        "w(Z)V": "setCharging",
        "r()I": "getExplosionPower",
        "U()Z": "shouldDespawnInPeaceful",
        "h(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isReflectedFireball",
        "b(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isInvulnerableTo",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a_()V": "defineSynchedData",
        "w()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "eR()F": "getSoundVolume",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkGhastSpawnRules",
        "fE()I": "getMaxSpawnClusterSize",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight"
      }
    },
    "net/minecraft/world/entity/monster/EntityGhast$PathfinderGoalGhastMoveTowardsTarget": {
      "fields": {
        "a": "ghast"
      },
      "methods": {
        "a()Z": "canUse",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityGhast$ControllerGhast": {
      "fields": {
        "l": "ghast",
        "m": "floatDuration"
      },
      "methods": {
        "a()V": "tick",
        "a(Lnet/minecraft/world/phys/Vec3;I)Z": "canReach"
      }
    },
    "net/minecraft/world/entity/monster/EntityGhast$PathfinderGoalGhastAttackTarget": {
      "fields": {
        "b": "ghast",
        "a": "chargeTime"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityGhast$PathfinderGoalGhastIdleMove": {
      "fields": {
        "a": "ghast"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/monster/EntityGiantZombie": {
      "methods": {
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue"
      }
    },
    "net/minecraft/world/entity/monster/EntityGuardian": {
      "fields": {
        "c": "ATTACK_TIME",
        "b": "DATA_ID_MOVING",
        "e": "DATA_ID_ATTACK_TARGET",
        "bT": "clientSideTailAnimation",
        "bU": "clientSideTailAnimationO",
        "bV": "clientSideTailAnimationSpeed",
        "bW": "clientSideSpikesAnimation",
        "bX": "clientSideSpikesAnimationO",
        "bY": "clientSideCachedAttackTarget",
        "bZ": "clientSideAttackTime",
        "ca": "clientSideTouchedGround",
        "d": "randomStrollGoal"
      },
      "methods": {
        "x()V": "registerGoals",
        "fY()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "a_()V": "defineSynchedData",
        "dN()Z": "canBreatheUnderwater",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "fZ()Z": "isMoving",
        "w(Z)V": "setMoving",
        "r()I": "getAttackDuration",
        "b(I)V": "setActiveAttackTarget",
        "ga()Z": "hasActiveAttackTarget",
        "gb()Lnet/minecraft/world/entity/LivingEntity;": "getActiveAttackTarget",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "M()I": "getAmbientSoundInterval",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "b_()V": "aiStep",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getFlopSound",
        "D(F)F": "getTailAnimation",
        "E(F)F": "getSpikesAnimation",
        "F(F)F": "getAttackAnimationScale",
        "gc()F": "getClientSideAttackTime",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkGuardianSpawnRules",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "X()I": "getMaxHeadXRot",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel"
      }
    },
    "net/minecraft/world/entity/monster/EntityGuardian$PathfinderGoalGuardianAttack": {
      "fields": {
        "a": "guardian",
        "b": "attackTime",
        "c": "elder"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "d()V": "stop",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityGuardian$EntitySelectorGuardianTargetHumanSquid": {
      "fields": {
        "a": "guardian"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "test"
      }
    },
    "net/minecraft/world/entity/monster/EntityGuardian$ControllerMoveGuardian": {
      "fields": {
        "l": "guardian"
      },
      "methods": {
        "a()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityZombieHusk": {
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkHuskSpawnRules",
        "X_()Z": "isSunSensitive",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "fZ()Z": "convertsInWater",
        "gb()V": "doUnderWaterConversion",
        "fY()Lnet/minecraft/world/item/ItemStack;": "getSkull"
      }
    },
    "net/minecraft/world/entity/monster/EntityIllagerIllusioner": {
      "fields": {
        "e": "NUM_ILLUSIONS",
        "bT": "ILLUSION_TRANSITION_TICKS",
        "bU": "ILLUSION_SPREAD",
        "bV": "clientSideIllusionTicks",
        "bW": "clientSideIllusionOffsets"
      },
      "methods": {
        "x()V": "registerGoals",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a_()V": "defineSynchedData",
        "j_()Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForCulling",
        "b_()V": "aiStep",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound",
        "D(F)[Lnet/minecraft/world/phys/Vec3;": "getIllusionOffsets",
        "p(Lnet/minecraft/world/entity/Entity;)Z": "isAlliedTo",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "fY()Lnet/minecraft/sounds/SoundEvent;": "getCastingSoundEvent",
        "a(IZ)V": "applyRaidBuffs",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "q()Lnet/minecraft/world/entity/monster/AbstractIllager$IllagerArmPose;": "getArmPose"
      }
    },
    "net/minecraft/world/entity/monster/EntityMagmaCube": {
      "methods": {
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkMagmaCubeSpawnRules",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "a(IZ)V": "setSize",
        "bj()F": "getLightLevelDependentMagicValue",
        "r()Lnet/minecraft/core/particles/ParticleOptions;": "getParticleType",
        "bL()Z": "isOnFire",
        "w()I": "getJumpDelay",
        "fV()V": "decreaseSquish",
        "eW()V": "jumpFromGround",
        "c(Lnet/minecraft/tags/TagKey;)V": "jumpInLiquid",
        "fW()Z": "isDealsDamage",
        "fX()F": "getAttackDamage",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "fY()Lnet/minecraft/sounds/SoundEvent;": "getSquishSound",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getJumpSound"
      }
    },
    "net/minecraft/world/entity/monster/EntityMonster": {
      "methods": {
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "b_()V": "aiStep",
        "gd()V": "updateNoActionTime",
        "U()Z": "shouldDespawnInPeaceful",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "aK()Lnet/minecraft/sounds/SoundEvent;": "getSwimSplashSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "eC()Lnet/minecraft/world/entity/LivingEntity$Fallsounds;": "getFallSounds",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "isDarkEnoughToSpawn",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkMonsterSpawnRules",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkAnyLightMonsterSpawnRules",
        "ge()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createMonsterAttributes",
        "dY()Z": "shouldDropExperience",
        "dZ()Z": "shouldDropLoot",
        "f(Lnet/minecraft/world/entity/player/Player;)Z": "isPreventingPlayerRest",
        "g(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "getProjectile"
      }
    },
    "net/minecraft/world/entity/monster/EntityMonsterPatrolling": {
      "fields": {
        "b": "patrolTarget",
        "c": "patrolLeader",
        "d": "patrolling"
      },
      "methods": {
        "x()V": "registerGoals",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "bw()D": "getMyRidingOffset",
        "fZ()Z": "canBeLeader",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkPatrollingMonsterSpawnRules",
        "h(D)Z": "removeWhenFarAway",
        "i(Lnet/minecraft/core/BlockPos;)V": "setPatrolTarget",
        "ga()Lnet/minecraft/core/BlockPos;": "getPatrolTarget",
        "gb()Z": "hasPatrolTarget",
        "w(Z)V": "setPatrolLeader",
        "gc()Z": "isPatrolLeader",
        "gf()Z": "canJoinPatrol",
        "gg()V": "findPatrolTarget",
        "gh()Z": "isPatrolling",
        "x(Z)V": "setPatrolling"
      }
    },
    "net/minecraft/world/entity/monster/EntityPhantom": {
      "fields": {
        "b": "FLAP_DEGREES_PER_TICK",
        "c": "TICKS_PER_FLAP",
        "d": "ID_SIZE",
        "e": "moveTargetPoint",
        "bS": "anchorPoint",
        "bT": "attackPhase"
      },
      "methods": {
        "aP()Z": "isFlapping",
        "D()Lnet/minecraft/world/entity/ai/control/BodyRotationControl;": "createBodyControl",
        "x()V": "registerGoals",
        "a_()V": "defineSynchedData",
        "b(I)V": "setPhantomSize",
        "w()V": "updatePhantomSizeInfo",
        "q()I": "getPhantomSize",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "r()I": "getUniqueFlapTickOffset",
        "U()Z": "shouldDespawnInPeaceful",
        "l()V": "tick",
        "b_()V": "aiStep",
        "W()V": "customServerAiStep",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "eR()F": "getSoundVolume",
        "a(Lnet/minecraft/world/entity/EntityType;)Z": "canAttackType",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "bx()D": "getPassengersRidingOffset"
      }
    },
    "net/minecraft/world/entity/monster/EntityPhantom$AttackPhase": {
      "fields": {
        "a": "CIRCLE",
        "b": "SWOOP",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/monster/EntityPillager": {
      "fields": {
        "b": "IS_CHARGING_CROSSBOW",
        "e": "INVENTORY_SIZE",
        "bT": "SLOT_OFFSET",
        "bU": "CROSSBOW_POWER",
        "bV": "inventory"
      },
      "methods": {
        "x()V": "registerGoals",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/world/item/ProjectileWeaponItem;)Z": "canFireProjectileWeapon",
        "fY()Z": "isChargingCrossbow",
        "b(Z)V": "setChargingCrossbow",
        "a()V": "onCrossbowAttackPerformed",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "q()Lnet/minecraft/world/entity/monster/AbstractIllager$IllagerArmPose;": "getArmPose",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "fE()I": "getMaxSpawnClusterSize",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "a(Lnet/minecraft/util/RandomSource;F)V": "enchantSpawnedWeapon",
        "p(Lnet/minecraft/world/entity/Entity;)Z": "isAlliedTo",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/projectile/Projectile;F)V": "shootCrossbowProjectile",
        "w()Lnet/minecraft/world/SimpleContainer;": "getInventory",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "wantsItem",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "a(IZ)V": "applyRaidBuffs",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound"
      }
    },
    "net/minecraft/world/entity/monster/IRangedEntity": {
      "methods": {
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack"
      }
    },
    "net/minecraft/world/entity/monster/EntityRavager": {
      "fields": {
        "e": "NO_RAVAGER_AND_ALIVE",
        "bT": "BASE_MOVEMENT_SPEED",
        "bU": "ATTACK_MOVEMENT_SPEED",
        "bV": "STUNNED_COLOR",
        "bW": "STUNNED_COLOR_BLUE",
        "bX": "STUNNED_COLOR_GREEN",
        "bY": "STUNNED_COLOR_RED",
        "bZ": "ATTACK_DURATION",
        "b": "STUN_DURATION",
        "ca": "attackTick",
        "cb": "stunnedTick",
        "cc": "roarTick"
      },
      "methods": {
        "x()V": "registerGoals",
        "P()V": "updateControlFlags",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound",
        "fC()I": "getMaxHeadYRot",
        "bx()D": "getPassengersRidingOffset",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "b_()V": "aiStep",
        "gj()V": "stunEffect",
        "eT()Z": "isImmobile",
        "B(Lnet/minecraft/world/entity/Entity;)Z": "hasLineOfSight",
        "e(Lnet/minecraft/world/entity/LivingEntity;)V": "blockedByShield",
        "gk()V": "roar",
        "a(Lnet/minecraft/world/entity/Entity;)V": "strongKnockback",
        "b(B)V": "handleEntityEvent",
        "r()I": "getAttackTick",
        "fY()I": "getStunnedTick",
        "gi()I": "getRoarTick",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "a(IZ)V": "applyRaidBuffs",
        "fZ()Z": "canBeLeader"
      }
    },
    "net/minecraft/world/entity/monster/EntityShulker": {
      "fields": {
        "e": "COVERED_ARMOR_MODIFIER_UUID",
        "bT": "COVERED_ARMOR_MODIFIER",
        "b": "DATA_ATTACH_FACE_ID",
        "c": "DATA_PEEK_ID",
        "d": "DATA_COLOR_ID",
        "bU": "TELEPORT_STEPS",
        "bV": "NO_COLOR",
        "bW": "DEFAULT_COLOR",
        "bX": "MAX_TELEPORT_DISTANCE",
        "bY": "OTHER_SHULKER_SCAN_RADIUS",
        "bZ": "OTHER_SHULKER_LIMIT",
        "ca": "PEEK_PER_TICK",
        "cb": "FORWARD",
        "cc": "currentPeekAmountO",
        "cd": "currentPeekAmount",
        "ce": "clientOldAttachPosition",
        "cf": "clientSideTeleportInterpolation",
        "cg": "MAX_LID_OPEN"
      },
      "methods": {
        "x()V": "registerGoals",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "N()V": "playAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "a_()V": "defineSynchedData",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "D()Lnet/minecraft/world/entity/ai/control/BodyRotationControl;": "createBodyControl",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "l()V": "tick",
        "ga()V": "findNewAttachment",
        "am()Lnet/minecraft/world/phys/AABB;": "makeBoundingBox",
        "F(F)F": "getPhysicalPeek",
        "gb()Z": "updatePeekAmount",
        "gc()V": "onPeekAmountChange",
        "a(Lnet/minecraft/core/Direction;F)Lnet/minecraft/world/phys/AABB;": "getProgressAabb",
        "a(Lnet/minecraft/core/Direction;FF)Lnet/minecraft/world/phys/AABB;": "getProgressDeltaAabb",
        "bw()D": "getMyRidingOffset",
        "a(Lnet/minecraft/world/entity/Entity;Z)Z": "startRiding",
        "Y()V": "stopRiding",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V": "move",
        "dl()Lnet/minecraft/world/phys/Vec3;": "getDeltaMovement",
        "f(Lnet/minecraft/world/phys/Vec3;)V": "setDeltaMovement",
        "e(DDD)V": "setPos",
        "i(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/Direction;": "findAttachableSurface",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canStayAt",
        "j(Lnet/minecraft/core/BlockPos;)Z": "isPositionBlocked",
        "r()Z": "teleportSomewhere",
        "a(DDDFFIZ)V": "lerpTo",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "gd()Z": "isClosed",
        "ge()V": "hitByShulkerBullet",
        "bu()Z": "canBeCollidedWith",
        "w()Lnet/minecraft/core/Direction;": "getAttachFace",
        "a(Lnet/minecraft/core/Direction;)V": "setAttachFace",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "gf()I": "getRawPeekAmount",
        "b(I)V": "setRawPeekAmount",
        "D(F)F": "getClientPeekAmount",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "X()I": "getMaxHeadXRot",
        "fC()I": "getMaxHeadYRot",
        "g(Lnet/minecraft/world/entity/Entity;)V": "push",
        "bC()F": "getPickRadius",
        "E(F)Ljava/util/Optional;": "getRenderPosition",
        "a(Ljava/util/Optional;)V": "setVariant",
        "fY()Ljava/util/Optional;": "getVariant",
        "fZ()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/monster/EntitySilverfish": {
      "fields": {
        "b": "friendsGoal"
      },
      "methods": {
        "x()V": "registerGoals",
        "bw()D": "getMyRidingOffset",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "l()V": "tick",
        "o(F)V": "setYBodyRot",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkSilverfishSpawnRules",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType"
      }
    },
    "net/minecraft/world/entity/monster/EntitySilverfish$PathfinderGoalSilverfishHideInBlock": {
      "fields": {
        "i": "selectedDirection",
        "j": "doMerge"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start"
      }
    },
    "net/minecraft/world/entity/monster/EntitySilverfish$PathfinderGoalSilverfishWakeOthers": {
      "fields": {
        "a": "silverfish",
        "b": "lookForFriends"
      },
      "methods": {
        "h()V": "notifyHurt",
        "a()Z": "canUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntitySkeleton": {
      "fields": {
        "c": "TOTAL_CONVERSION_TIME",
        "d": "DATA_STRAY_CONVERSION_ID",
        "b": "CONVERSION_TAG",
        "e": "inPowderSnowTime",
        "bT": "conversionTime"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "fZ()Z": "isFreezeConverting",
        "w(Z)V": "setFreezeConverting",
        "fY()Z": "isShaking",
        "l()V": "tick",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(I)V": "startFreezeConversion",
        "ga()V": "doFreezeConversion",
        "dw()Z": "canFreeze",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "r()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot"
      }
    },
    "net/minecraft/world/entity/monster/EntitySlime": {
      "fields": {
        "bT": "ID_SIZE",
        "b": "MIN_SIZE",
        "c": "MAX_SIZE",
        "d": "targetSquish",
        "e": "squish",
        "bS": "oSquish",
        "bU": "wasOnGround"
      },
      "methods": {
        "x()V": "registerGoals",
        "a_()V": "defineSynchedData",
        "a(IZ)V": "setSize",
        "ga()I": "getSize",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "gb()Z": "isTiny",
        "r()Lnet/minecraft/core/particles/ParticleOptions;": "getParticleType",
        "U()Z": "shouldDespawnInPeaceful",
        "l()V": "tick",
        "fV()V": "decreaseSquish",
        "w()I": "getJumpDelay",
        "d_()V": "refreshDimensions",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "ae()Lnet/minecraft/world/entity/EntityType;": "getType",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "g(Lnet/minecraft/world/entity/Entity;)V": "push",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "l(Lnet/minecraft/world/entity/LivingEntity;)V": "dealDamage",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "fW()Z": "isDealsDamage",
        "fX()F": "getAttackDamage",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "fY()Lnet/minecraft/sounds/SoundEvent;": "getSquishSound",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkSlimeSpawnRules",
        "eR()F": "getSoundVolume",
        "X()I": "getMaxHeadXRot",
        "gc()Z": "doPlayJumpSound",
        "eW()V": "jumpFromGround",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "q()F": "getSoundPitch",
        "fZ()Lnet/minecraft/sounds/SoundEvent;": "getJumpSound",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions"
      }
    },
    "net/minecraft/world/entity/monster/EntitySlime$PathfinderGoalSlimeNearestPlayer": {
      "fields": {
        "a": "slime",
        "b": "growTiredTimer"
      },
      "methods": {
        "a()Z": "canUse",
        "c()V": "start",
        "b()Z": "canContinueToUse",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntitySlime$PathfinderGoalSlimeRandomJump": {
      "fields": {
        "a": "slime"
      },
      "methods": {
        "a()Z": "canUse",
        "K_()Z": "requiresUpdateEveryTick",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntitySlime$PathfinderGoalSlimeIdle": {
      "fields": {
        "a": "slime"
      },
      "methods": {
        "a()Z": "canUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntitySlime$ControllerMoveSlime": {
      "fields": {
        "l": "yRot",
        "m": "jumpDelay",
        "n": "slime",
        "o": "isAggressive"
      },
      "methods": {
        "a(FZ)V": "setDirection",
        "a(D)V": "setWantedMovement",
        "a()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntitySlime$PathfinderGoalSlimeRandomDirection": {
      "fields": {
        "a": "slime",
        "b": "chosenDegrees",
        "c": "nextRandomizeTime"
      },
      "methods": {
        "a()Z": "canUse",
        "e()V": "tick"
      }
    },
    "net/minecraft/world/entity/monster/EntityIllagerWizard": {
      "fields": {
        "e": "DATA_SPELL_CASTING_ID",
        "b": "spellCastingTickCount",
        "bT": "currentSpell"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "q()Lnet/minecraft/world/entity/monster/AbstractIllager$IllagerArmPose;": "getArmPose",
        "gi()Z": "isCastingSpell",
        "a(Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;)V": "setIsCastingSpell",
        "gj()Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;": "getCurrentSpell",
        "W()V": "customServerAiStep",
        "l()V": "tick",
        "gk()I": "getSpellCastingTime",
        "fY()Lnet/minecraft/sounds/SoundEvent;": "getCastingSoundEvent"
      }
    },
    "net/minecraft/world/entity/monster/EntityIllagerWizard$Spell": {
      "fields": {
        "a": "NONE",
        "b": "SUMMON_VEX",
        "c": "FANGS",
        "d": "WOLOLO",
        "e": "DISAPPEAR",
        "f": "BLINDNESS",
        "g": "BY_ID",
        "h": "id",
        "i": "spellColor",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;": "byId"
      }
    },
    "net/minecraft/world/entity/monster/EntityIllagerWizard$PathfinderGoalCastSpell": {
      "fields": {
        "b": "attackWarmupDelay",
        "c": "nextAttackTickCount",
        "this$0": "this$0"
      },
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "c()V": "start",
        "e()V": "tick",
        "k()V": "performSpellCasting",
        "n()I": "getCastWarmupTime",
        "h()I": "getCastingTime",
        "i()I": "getCastingInterval",
        "l()Lnet/minecraft/sounds/SoundEvent;": "getSpellPrepareSound",
        "m()Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;": "getSpell"
      }
    },
    "net/minecraft/world/entity/monster/EntitySpider": {
      "fields": {
        "b": "DATA_FLAGS_ID",
        "c": "SPIDER_SPECIAL_EFFECT_CHANCE"
      },
      "methods": {
        "x()V": "registerGoals",
        "bx()D": "getPassengersRidingOffset",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "i_()Z": "onClimbable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;)V": "makeStuckInBlock",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "c(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "canBeAffected",
        "w()Z": "isClimbing",
        "w(Z)V": "setClimbing",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight"
      }
    },
    "net/minecraft/world/entity/monster/EntitySpider$PathfinderGoalSpiderMeleeAttack": {
      "methods": {
        "a()Z": "canUse",
        "b()Z": "canContinueToUse",
        "a(Lnet/minecraft/world/entity/LivingEntity;)D": "getAttackReachSqr"
      }
    },
    "net/minecraft/world/entity/monster/EntitySpider$GroupDataSpider": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)V": "setRandomEffect"
      }
    },
    "net/minecraft/world/entity/monster/EntitySpider$PathfinderGoalSpiderNearestAttackableTarget": {
      "methods": {
        "a()Z": "canUse"
      }
    },
    "net/minecraft/world/entity/monster/EntitySkeletonStray": {
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkStraySpawnRules",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "r()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "b(Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "getArrow"
      }
    },
    "net/minecraft/world/entity/monster/EntityStrider": {
      "fields": {
        "bT": "SUFFOCATING_MODIFIER_UUID",
        "bU": "SUFFOCATING_MODIFIER",
        "bW": "SUFFOCATE_STEERING_MODIFIER",
        "bX": "STEERING_MODIFIER",
        "bY": "FOOD_ITEMS",
        "bZ": "TEMPT_ITEMS",
        "ca": "DATA_BOOST_TIME",
        "cb": "DATA_SUFFOCATING",
        "cc": "DATA_SADDLE_ID",
        "cd": "steering",
        "ce": "temptGoal",
        "cf": "panicGoal"
      },
      "methods": {
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkStriderSpawnRules",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "i()Z": "isSaddled",
        "g()Z": "isSaddleable",
        "a(Lnet/minecraft/sounds/SoundSource;)V": "equipSaddle",
        "x()V": "registerGoals",
        "w(Z)V": "setSuffocating",
        "q()Z": "isSuffocating",
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "canStandOnFluid",
        "bx()D": "getPassengersRidingOffset",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationForPassenger",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)V": "tickRidden",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "getRiddenInput",
        "e(Lnet/minecraft/world/entity/player/Player;)F": "getRiddenSpeed",
        "aI()F": "nextStep",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "a()Z": "boost",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "l()V": "tick",
        "w()Z": "isPanicking",
        "fY()Z": "isBeingTempted",
        "z()Z": "shouldPassengersInheritMalus",
        "ge()V": "floatStrider",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "o(Lnet/minecraft/world/entity/Entity;)Z": "canAddPassenger",
        "fb()Z": "isSensitiveToWater",
        "bL()Z": "isOnFire",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/monster/Strider;": "getBreedOffspring",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "eu()V": "dropEquipment",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "cG()Lnet/minecraft/world/phys/Vec3;": "getLeashOffset",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/SpawnGroupData;)Lnet/minecraft/world/entity/SpawnGroupData;": "spawnJockey",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/monster/EntityVex": {
      "fields": {
        "b": "FLAP_DEGREES_PER_TICK",
        "c": "TICKS_PER_FLAP",
        "d": "DATA_FLAGS_ID",
        "e": "FLAG_IS_CHARGING",
        "bT": "RIDING_OFFSET",
        "bU": "owner",
        "bV": "boundOrigin",
        "bW": "hasLimitedLife",
        "bX": "limitedLifeTicks"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "aP()Z": "isFlapping",
        "a(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V": "move",
        "l()V": "tick",
        "x()V": "registerGoals",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "r()Lnet/minecraft/world/entity/Mob;": "getOwner",
        "w()Lnet/minecraft/core/BlockPos;": "getBoundOrigin",
        "i(Lnet/minecraft/core/BlockPos;)V": "setBoundOrigin",
        "c(I)Z": "getVexFlag",
        "a(IZ)V": "setVexFlag",
        "fY()Z": "isCharging",
        "w(Z)V": "setIsCharging",
        "a(Lnet/minecraft/world/entity/Mob;)V": "setOwner",
        "b(I)V": "setLimitedLife",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "bj()F": "getLightLevelDependentMagicValue",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "bw()D": "getMyRidingOffset",
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner"
      }
    },
    "net/minecraft/world/entity/monster/EntityVindicator": {
      "fields": {
        "b": "TAG_JOHNNY",
        "e": "DOOR_BREAKING_PREDICATE",
        "bT": "isJohnny"
      },
      "methods": {
        "x()V": "registerGoals",
        "W()V": "customServerAiStep",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "q()Lnet/minecraft/world/entity/monster/AbstractIllager$IllagerArmPose;": "getArmPose",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "p(Lnet/minecraft/world/entity/Entity;)Z": "isAlliedTo",
        "b(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "a(IZ)V": "applyRaidBuffs",
        "a(Lnet/minecraft/world/Difficulty;)Z": "lambda$static$0",
        "a(Lnet/minecraft/world/entity/monster/Vindicator;)Lnet/minecraft/util/RandomSource;": "access$000"
      }
    },
    "net/minecraft/world/entity/monster/EntityWitch": {
      "fields": {
        "b": "SPEED_MODIFIER_DRINKING_UUID",
        "e": "SPEED_MODIFIER_DRINKING",
        "bT": "DATA_USING_ITEM",
        "bU": "usingTime",
        "bV": "healRaidersGoal",
        "bW": "attackPlayersGoal"
      },
      "methods": {
        "x()V": "registerGoals",
        "a_()V": "defineSynchedData",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "y(Z)V": "setUsingItem",
        "q()Z": "isDrinkingPotion",
        "r()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b_()V": "aiStep",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound",
        "b(B)V": "handleEntityEvent",
        "e(Lnet/minecraft/world/damagesource/DamageSource;F)F": "getDamageAfterMagicAbsorb",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a(IZ)V": "applyRaidBuffs",
        "fZ()Z": "canBeLeader"
      }
    },
    "net/minecraft/world/entity/monster/EntitySkeletonWither": {
      "methods": {
        "x()V": "registerGoals",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "r()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentEnchantments",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "b(Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "getArrow",
        "c(Lnet/minecraft/world/effect/MobEffectInstance;)Z": "canBeAffected"
      }
    },
    "net/minecraft/world/entity/monster/EntityZoglin": {
      "fields": {
        "d": "DATA_BABY_ID",
        "e": "MAX_HEALTH",
        "bT": "ATTACK_KNOCKBACK",
        "bU": "KNOCKBACK_RESISTANCE",
        "bV": "ATTACK_DAMAGE",
        "bW": "BABY_ATTACK_DAMAGE",
        "bX": "ATTACK_INTERVAL",
        "bY": "BABY_ATTACK_INTERVAL",
        "bZ": "ATTACK_DURATION",
        "ca": "MOVEMENT_SPEED_WHEN_FIGHTING",
        "cb": "SPEED_MULTIPLIER_WHEN_IDLING",
        "cc": "attackAnimationRemainingTicks",
        "b": "SENSOR_TYPES",
        "c": "MEMORY_TYPES"
      },
      "methods": {
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "a(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initFightActivity",
        "ga()Ljava/util/Optional;": "findNearestValidAttackTarget",
        "l(Lnet/minecraft/world/entity/LivingEntity;)Z": "isTargetable",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "r()Z": "isAdult",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "e(Lnet/minecraft/world/entity/LivingEntity;)V": "blockedByShield",
        "bx()D": "getPassengersRidingOffset",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "m(Lnet/minecraft/world/entity/LivingEntity;)V": "setAttackTarget",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "w()V": "updateActivity",
        "W()V": "customServerAiStep",
        "a(Z)V": "setBaby",
        "h_()Z": "isBaby",
        "b_()V": "aiStep",
        "b(B)V": "handleEntityEvent",
        "fY()I": "getAttackAnimationRemainingTicks",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "fZ()V": "playAngrySound",
        "V()V": "sendDebugPackets",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData"
      }
    },
    "net/minecraft/world/entity/monster/EntityZombie": {
      "fields": {
        "b": "SPEED_MODIFIER_BABY_UUID",
        "c": "SPEED_MODIFIER_BABY",
        "d": "DATA_BABY_ID",
        "bX": "DATA_SPECIAL_TYPE_ID",
        "bY": "DATA_DROWNED_CONVERSION_ID",
        "e": "ZOMBIE_LEADER_CHANCE",
        "bT": "REINFORCEMENT_ATTEMPTS",
        "bU": "REINFORCEMENT_RANGE_MAX",
        "bV": "REINFORCEMENT_RANGE_MIN",
        "bW": "BABY_EYE_HEIGHT_ADJUSTMENT",
        "bZ": "BREAK_DOOR_CHANCE",
        "ca": "DOOR_BREAKING_PREDICATE",
        "cb": "breakDoorGoal",
        "cc": "canBreakDoors",
        "cd": "inWaterTime",
        "ce": "conversionTime"
      },
      "methods": {
        "x()V": "registerGoals",
        "q()V": "addBehaviourGoals",
        "gc()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "gf()Z": "isUnderWaterConverting",
        "gg()Z": "canBreakDoors",
        "x(Z)V": "setCanBreakDoors",
        "r()Z": "supportsBreakDoorGoal",
        "h_()Z": "isBaby",
        "ea()I": "getExperienceReward",
        "a(Z)V": "setBaby",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "fZ()Z": "convertsInWater",
        "l()V": "tick",
        "b_()V": "aiStep",
        "b(I)V": "startUnderWaterConversion",
        "gb()V": "doUnderWaterConversion",
        "b(Lnet/minecraft/world/entity/EntityType;)V": "convertToZombieType",
        "X_()Z": "isSunSensitive",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "eN()Lnet/minecraft/world/entity/MobType;": "getMobType",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "killedEntity",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "j(Lnet/minecraft/world/item/ItemStack;)Z": "canHoldItem",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/util/RandomSource;)Z": "getSpawnAsBabyOdds",
        "D(F)V": "handleAttributes",
        "gh()V": "randomizeReinforcementsChance",
        "bw()D": "getMyRidingOffset",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "fY()Lnet/minecraft/world/item/ItemStack;": "getSkull"
      }
    },
    "net/minecraft/world/entity/monster/EntityZombie$GroupDataZombie": {
      "fields": {
        "a": "isBaby",
        "b": "canSpawnJockey"
      }
    },
    "net/minecraft/world/entity/monster/EntityZombieVillager": {
      "fields": {
        "b": "LOGGER",
        "c": "DATA_CONVERTING_ID",
        "d": "DATA_VILLAGER_DATA",
        "bX": "VILLAGER_CONVERSION_WAIT_MIN",
        "bY": "VILLAGER_CONVERSION_WAIT_MAX",
        "bZ": "MAX_SPECIAL_BLOCKS_COUNT",
        "ca": "SPECIAL_BLOCK_RADIUS",
        "cb": "villagerConversionTime",
        "cc": "conversionStarter",
        "cd": "gossips",
        "ce": "tradeOffers",
        "cf": "villagerXp"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "l()V": "tick",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "fZ()Z": "convertsInWater",
        "h(D)Z": "removeWhenFarAway",
        "gi()Z": "isConverting",
        "a(Ljava/util/UUID;I)V": "startConverting",
        "b(B)V": "handleEntityEvent",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "finishConversion",
        "gl()I": "getConversionProgress",
        "eS()F": "getVoicePitch",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "w()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "fY()Lnet/minecraft/world/item/ItemStack;": "getSkull",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "setTradeOffers",
        "a(Lnet/minecraft/nbt/Tag;)V": "setGossips",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/entity/npc/VillagerData;)V": "setVillagerData",
        "gj()Lnet/minecraft/world/entity/npc/VillagerData;": "getVillagerData",
        "gk()I": "getVillagerXp",
        "b(I)V": "setVillagerXp"
      }
    },
    "net/minecraft/world/entity/monster/EntityPigZombie": {
      "fields": {
        "c": "SPEED_MODIFIER_ATTACKING_UUID",
        "d": "SPEED_MODIFIER_ATTACKING",
        "bX": "FIRST_ANGER_SOUND_DELAY",
        "bY": "playFirstAngerSoundIn",
        "bZ": "PERSISTENT_ANGER_TIME",
        "ca": "remainingPersistentAngerTime",
        "cb": "persistentAngerTarget",
        "cc": "ALERT_RANGE_Y",
        "cd": "ALERT_INTERVAL",
        "ce": "ticksUntilNextAlert",
        "cf": "ZOMBIFIED_PIGLIN_EYE_HEIGHT",
        "cg": "ZOMBIFIED_PIGLIN_BABY_EYE_HEIGHT_ADJUSTMENT"
      },
      "methods": {
        "a(Ljava/util/UUID;)V": "setPersistentAngerTarget",
        "bw()D": "getMyRidingOffset",
        "q()V": "addBehaviourGoals",
        "gi()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "fZ()Z": "convertsInWater",
        "W()V": "customServerAiStep",
        "gj()V": "maybePlayFirstAngerSound",
        "gk()V": "maybeAlertOthers",
        "gl()V": "alertOthers",
        "gm()V": "playAngerSound",
        "h(Lnet/minecraft/world/entity/LivingEntity;)V": "setTarget",
        "c()V": "startPersistentAngerTimer",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkZombifiedPiglinSpawnRules",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(I)V": "setRemainingPersistentAngerTime",
        "a()I": "getRemainingPersistentAngerTime",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "fY()Lnet/minecraft/world/item/ItemStack;": "getSkull",
        "gh()V": "randomizeReinforcementsChance",
        "b()Ljava/util/UUID;": "getPersistentAngerTarget",
        "f(Lnet/minecraft/world/entity/player/Player;)Z": "isPreventingPlayerRest",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp"
      }
    },
    "net/minecraft/world/entity/monster/hoglin/EntityHoglin": {
      "fields": {
        "bW": "DATA_IMMUNE_TO_ZOMBIFICATION",
        "bX": "PROBABILITY_OF_SPAWNING_AS_BABY",
        "bY": "MAX_HEALTH",
        "bZ": "MOVEMENT_SPEED_WHEN_FIGHTING",
        "ca": "ATTACK_KNOCKBACK",
        "cb": "KNOCKBACK_RESISTANCE",
        "cc": "ATTACK_DAMAGE",
        "cd": "BABY_ATTACK_DAMAGE",
        "ce": "CONVERSION_TIME",
        "cf": "attackAnimationRemainingTicks",
        "cg": "timeInOverworld",
        "ch": "cannotBeHunted",
        "bT": "SENSOR_TYPES",
        "bU": "MEMORY_TYPES"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "e(Lnet/minecraft/world/entity/LivingEntity;)V": "blockedByShield",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "W()V": "customServerAiStep",
        "b_()V": "aiStep",
        "m()V": "ageBoundaryReached",
        "c(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkHoglinSpawnRules",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "h(D)Z": "removeWhenFarAway",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "bx()D": "getPassengersRidingOffset",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(B)V": "handleEntityEvent",
        "fY()I": "getAttackAnimationRemainingTicks",
        "dY()Z": "shouldDropExperience",
        "ea()I": "getExperienceReward",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "finishConversion",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "r()Z": "isAdult",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "w(Z)V": "setImmuneToZombification",
        "gf()Z": "isImmuneToZombification",
        "w()Z": "isConverting",
        "x(Z)V": "setCannotBeHunted",
        "ge()Z": "canBeHunted",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "fZ()Z": "canFallInLove",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "aK()Lnet/minecraft/sounds/SoundEvent;": "getSwimSplashSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "b(Lnet/minecraft/sounds/SoundEvent;)V": "playSoundEvent",
        "V()V": "sendDebugPackets"
      }
    },
    "net/minecraft/world/entity/monster/hoglin/HoglinAI": {
      "fields": {
        "a": "REPELLENT_DETECTION_RANGE_HORIZONTAL",
        "b": "REPELLENT_DETECTION_RANGE_VERTICAL",
        "c": "RETREAT_DURATION",
        "d": "ATTACK_DURATION",
        "e": "DESIRED_DISTANCE_FROM_PIGLIN_WHEN_IDLING",
        "f": "DESIRED_DISTANCE_FROM_PIGLIN_WHEN_RETREATING",
        "g": "ATTACK_INTERVAL",
        "h": "BABY_ATTACK_INTERVAL",
        "i": "REPELLENT_PACIFY_TIME",
        "j": "ADULT_FOLLOW_RANGE",
        "k": "SPEED_MULTIPLIER_WHEN_AVOIDING_REPELLENT",
        "l": "SPEED_MULTIPLIER_WHEN_RETREATING",
        "m": "SPEED_MULTIPLIER_WHEN_MAKING_LOVE",
        "n": "SPEED_MULTIPLIER_WHEN_IDLING",
        "o": "SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initFightActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initRetreatActivity",
        "a()Lnet/minecraft/world/entity/ai/behavior/RunOne;": "createIdleMovementBehaviors",
        "a(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)V": "updateActivity",
        "a(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "onHitTarget",
        "c(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "broadcastRetreat",
        "d(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "retreatFromNearestTarget",
        "e(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAvoidTarget",
        "d(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Ljava/util/Optional;": "findNearestValidAttackTarget",
        "a(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/core/BlockPos;)Z": "isPosNearNearestRepellent",
        "e(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Z": "wantsToStopFleeing",
        "f(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Z": "piglinsOutnumberHoglins",
        "b(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "wasHurtBy",
        "f(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "maybeRetaliate",
        "g(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAttackTarget",
        "h(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "broadcastAttackTarget",
        "i(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAttackTargetIfCloserThanCurrent",
        "b(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Ljava/util/Optional;": "getSoundForCurrentActivity",
        "a(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/schedule/Activity;)Lnet/minecraft/sounds/SoundEvent;": "getSoundForActivity",
        "g(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Ljava/util/List;": "getVisibleAdultHoglins",
        "h(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Z": "isNearRepellent",
        "i(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Z": "isBreeding",
        "c(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)Z": "isPacified",
        "b(Lnet/minecraft/world/entity/monster/hoglin/Hoglin;Lnet/minecraft/world/entity/schedule/Activity;)Lnet/minecraft/sounds/SoundEvent;": "lambda$getSoundForCurrentActivity$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)V": "lambda$broadcastAttackTarget$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/monster/hoglin/Hoglin;)V": "lambda$broadcastRetreat$0"
      }
    },
    "net/minecraft/world/entity/monster/hoglin/IOglin": {
      "fields": {
        "l_": "ATTACK_ANIMATION_DURATION"
      },
      "methods": {
        "fY()I": "getAttackAnimationRemainingTicks",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "hurtAndThrowTarget",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)V": "throwTarget"
      }
    },
    "net/minecraft/world/entity/monster/piglin/EntityPiglinAbstract": {
      "fields": {
        "b": "DATA_IMMUNE_TO_ZOMBIFICATION",
        "c": "CONVERSION_TIME",
        "d": "PIGLIN_EYE_HEIGHT",
        "e": "timeInOverworld"
      },
      "methods": {
        "w()V": "applyOpenDoorsAbility",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "q()Z": "canHunt",
        "w(Z)V": "setImmuneToZombification",
        "r()Z": "isImmuneToZombification",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "bw()D": "getMyRidingOffset",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "W()V": "customServerAiStep",
        "fY()Z": "isConverting",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "finishConversion",
        "fZ()Z": "isAdult",
        "ga()Lnet/minecraft/world/entity/monster/piglin/PiglinArmPose;": "getArmPose",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget",
        "gb()Z": "isHoldingMeleeWeapon",
        "N()V": "playAmbientSound",
        "V()V": "sendDebugPackets",
        "gc()V": "playConvertedSound"
      }
    },
    "net/minecraft/world/entity/monster/piglin/EntityPiglin": {
      "fields": {
        "bV": "DATA_BABY_ID",
        "bW": "DATA_IS_CHARGING_CROSSBOW",
        "bX": "DATA_IS_DANCING",
        "bY": "SPEED_MODIFIER_BABY_UUID",
        "bZ": "SPEED_MODIFIER_BABY",
        "ca": "MAX_HEALTH",
        "cb": "MOVEMENT_SPEED_WHEN_FIGHTING",
        "cc": "ATTACK_DAMAGE",
        "cd": "CROSSBOW_POWER",
        "ce": "CHANCE_OF_WEARING_EACH_ARMOUR_ITEM",
        "cf": "MAX_PASSENGERS_ON_ONE_HOGLIN",
        "cg": "PROBABILITY_OF_SPAWNING_AS_BABY",
        "ch": "BABY_EYE_HEIGHT_ADJUSTMENT",
        "ci": "PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD",
        "cj": "inventory",
        "ck": "cannotHunt",
        "bT": "SENSOR_TYPES",
        "bU": "MEMORY_TYPES"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "w()Lnet/minecraft/world/SimpleContainer;": "getInventory",
        "a(Lnet/minecraft/world/damagesource/DamageSource;IZ)V": "dropCustomDeathLoot",
        "l(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "addToInventory",
        "m(Lnet/minecraft/world/item/ItemStack;)Z": "canAddToInventory",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "gf()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "b(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "checkPiglinSpawnRules",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "U()Z": "shouldDespawnInPeaceful",
        "h(D)Z": "removeWhenFarAway",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/util/RandomSource;)V": "maybeWearArmor",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "bx()D": "getPassengersRidingOffset",
        "a(Z)V": "setBaby",
        "h_()Z": "isBaby",
        "y(Z)V": "setCannotHunt",
        "q()Z": "canHunt",
        "W()V": "customServerAiStep",
        "ea()I": "getExperienceReward",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "finishConversion",
        "gh()Lnet/minecraft/world/item/ItemStack;": "createSpawnWeapon",
        "gi()Z": "isChargingCrossbow",
        "b(Z)V": "setChargingCrossbow",
        "a()V": "onCrossbowAttackPerformed",
        "ga()Lnet/minecraft/world/entity/monster/piglin/PiglinArmPose;": "getArmPose",
        "gg()Z": "isDancing",
        "x(Z)V": "setDancing",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "performRangedAttack",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/projectile/Projectile;F)V": "shootCrossbowProjectile",
        "a(Lnet/minecraft/world/item/ProjectileWeaponItem;)Z": "canFireProjectileWeapon",
        "n(Lnet/minecraft/world/item/ItemStack;)V": "holdInMainHand",
        "o(Lnet/minecraft/world/item/ItemStack;)V": "holdInOffHand",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp",
        "p(Lnet/minecraft/world/item/ItemStack;)Z": "canReplaceCurrentItem",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "canReplaceCurrentItem",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "a(Lnet/minecraft/world/entity/Entity;Z)Z": "startRiding",
        "b(Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/world/entity/Entity;": "getTopPassenger",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "b(Lnet/minecraft/sounds/SoundEvent;)V": "playSoundEvent",
        "gc()V": "playConvertedSound"
      }
    },
    "net/minecraft/world/entity/monster/piglin/PiglinAI": {
      "fields": {
        "a": "REPELLENT_DETECTION_RANGE_HORIZONTAL",
        "b": "REPELLENT_DETECTION_RANGE_VERTICAL",
        "c": "BARTERING_ITEM",
        "e": "PLAYER_ANGER_RANGE",
        "f": "ANGER_DURATION",
        "g": "ADMIRE_DURATION",
        "h": "MAX_DISTANCE_TO_WALK_TO_ITEM",
        "i": "MAX_TIME_TO_WALK_TO_ITEM",
        "j": "HOW_LONG_TIME_TO_DISABLE_ADMIRE_WALKING_IF_CANT_REACH_ITEM",
        "k": "CELEBRATION_TIME",
        "d": "TIME_BETWEEN_HUNTS",
        "l": "BABY_FLEE_DURATION_AFTER_GETTING_HIT",
        "m": "HIT_BY_PLAYER_MEMORY_TIMEOUT",
        "n": "MAX_WALK_DISTANCE_TO_START_RIDING",
        "o": "RIDE_START_INTERVAL",
        "p": "RIDE_DURATION",
        "q": "RETREAT_DURATION",
        "r": "MELEE_ATTACK_COOLDOWN",
        "s": "EAT_COOLDOWN",
        "t": "DESIRED_DISTANCE_FROM_ENTITY_WHEN_AVOIDING",
        "u": "MAX_LOOK_DIST",
        "v": "MAX_LOOK_DIST_FOR_PLAYER_HOLDING_LOVED_ITEM",
        "w": "INTERACTION_RANGE",
        "x": "MIN_DESIRED_DIST_FROM_TARGET_WHEN_HOLDING_CROSSBOW",
        "y": "SPEED_WHEN_STRAFING_BACK_FROM_TARGET",
        "z": "DESIRED_DISTANCE_FROM_ZOMBIFIED",
        "A": "AVOID_ZOMBIFIED_DURATION",
        "B": "BABY_AVOID_NEMESIS_DURATION",
        "C": "PROBABILITY_OF_CELEBRATION_DANCE",
        "D": "SPEED_MULTIPLIER_WHEN_AVOIDING",
        "E": "SPEED_MULTIPLIER_WHEN_RETREATING",
        "F": "SPEED_MULTIPLIER_WHEN_MOUNTING",
        "G": "SPEED_MULTIPLIER_WHEN_GOING_TO_WANTED_ITEM",
        "H": "SPEED_MULTIPLIER_WHEN_GOING_TO_CELEBRATE_LOCATION",
        "I": "SPEED_MULTIPLIER_WHEN_DANCING",
        "J": "SPEED_MULTIPLIER_WHEN_IDLING"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/util/RandomSource;)V": "initMemories",
        "a(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "b(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/ai/Brain;)V": "initFightActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initCelebrateActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initAdmireItemActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initRetreatActivity",
        "f(Lnet/minecraft/world/entity/ai/Brain;)V": "initRideHoglinActivity",
        "a()Lcom/google/common/collect/ImmutableList;": "createLookBehaviors",
        "b()Lnet/minecraft/world/entity/ai/behavior/RunOne;": "createIdleLookBehaviors",
        "c()Lnet/minecraft/world/entity/ai/behavior/RunOne;": "createIdleMovementBehaviors",
        "d()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "avoidRepellent",
        "e()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "babyAvoidNemesis",
        "f()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "avoidZombified",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;)V": "updateActivity",
        "f(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isBabyRidingBaby",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "c(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/item/ItemStack;)V": "holdInOffhand",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)Lnet/minecraft/world/item/ItemStack;": "removeOneItemFromItemEntity",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Z)V": "stopHoldingOffHandItem",
        "b(Lnet/minecraft/world/entity/monster/piglin/Piglin;)V": "cancelAdmiring",
        "d(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/item/ItemStack;)V": "putInInventory",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Ljava/util/List;)V": "throwItems",
        "b(Lnet/minecraft/world/entity/monster/piglin/Piglin;Ljava/util/List;)V": "throwItemsTowardRandomPos",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/player/Player;Ljava/util/List;)V": "throwItemsTowardPlayer",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Ljava/util/List;Lnet/minecraft/world/phys/Vec3;)V": "throwItemsTowardPos",
        "g(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Ljava/util/List;": "getBarterResponseItems",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "wantsToDance",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickup",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isLovedItem",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/Entity;)Z": "wantsToStopRiding",
        "b(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/LivingEntity;)Z": "isNearestValidAttackTarget",
        "h(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isNearZombified",
        "i(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Ljava/util/Optional;": "findNearestValidAttackTarget",
        "a(Lnet/minecraft/world/entity/player/Player;Z)V": "angerNearbyPiglins",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "b(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/item/ItemStack;)Z": "canAdmire",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/LivingEntity;)V": "wasHurtBy",
        "a(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)V": "maybeRetaliate",
        "c(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Ljava/util/Optional;": "getSoundForCurrentActivity",
        "a(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/schedule/Activity;)Lnet/minecraft/sounds/SoundEvent;": "getSoundForActivity",
        "j(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isNearAvoidTarget",
        "d(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Ljava/util/List;": "getVisibleAdultPiglins",
        "e(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Ljava/util/List;": "getAdultPiglins",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "isWearingGold",
        "k(Lnet/minecraft/world/entity/monster/piglin/Piglin;)V": "stopWalking",
        "g()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "babySometimesRideBabyHoglin",
        "b(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)V": "broadcastAngerTarget",
        "a(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)V": "broadcastUniversalAnger",
        "c(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAngerTarget",
        "d(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAngerTargetToNearestTargetablePlayerIfFound",
        "e(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAngerTargetIfCloserThanCurrent",
        "f(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Ljava/util/Optional;": "getAngerTarget",
        "e(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Ljava/util/Optional;": "getAvoidTarget",
        "b(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Ljava/util/Optional;": "getNearestVisibleTargetablePlayer",
        "c(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/LivingEntity;)V": "broadcastRetreat",
        "d(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/LivingEntity;)V": "retreatFromNearestTarget",
        "l(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "wantsToStopFleeing",
        "m(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "piglinsEqualOrOutnumberHoglins",
        "n(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "hoglinsOutnumberPiglins",
        "e(Lnet/minecraft/world/entity/monster/piglin/Piglin;Lnet/minecraft/world/entity/LivingEntity;)V": "setAvoidTargetAndDontHuntForAWhile",
        "c(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)V": "dontKillAnyMoreHoglinsForAWhile",
        "o(Lnet/minecraft/world/entity/monster/piglin/Piglin;)V": "eat",
        "p(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Lnet/minecraft/world/phys/Vec3;": "getRandomNearbyPos",
        "q(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "hasEatenRecently",
        "d(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Z": "isIdle",
        "c(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasCrossbow",
        "d(Lnet/minecraft/world/entity/LivingEntity;)V": "admireGoldItem",
        "r(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isAdmiringItem",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "isBarterCurrency",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "isFood",
        "s(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isNearRepellent",
        "e(Lnet/minecraft/world/entity/LivingEntity;)Z": "seesPlayerHoldingLovedItem",
        "f(Lnet/minecraft/world/entity/LivingEntity;)Z": "doesntSeeAnyPlayerHoldingLovedItem",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "isPlayerHoldingLovedItem",
        "t(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isAdmiringDisabled",
        "g(Lnet/minecraft/world/entity/LivingEntity;)Z": "wasHurtRecently",
        "u(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isHoldingItemInOffHand",
        "v(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "isNotHoldingLovedItemInOffHand",
        "a(Lnet/minecraft/world/entity/EntityType;)Z": "isZombified",
        "w(Lnet/minecraft/world/entity/monster/piglin/Piglin;)Z": "lambda$initRideHoglinActivity$2"
      }
    },
    "net/minecraft/world/entity/monster/piglin/EntityPiglinArmPose": {
      "fields": {
        "a": "ATTACKING_WITH_MELEE_WEAPON",
        "b": "CROSSBOW_HOLD",
        "c": "CROSSBOW_CHARGE",
        "d": "ADMIRING_ITEM",
        "e": "DANCING",
        "f": "DEFAULT",
        "g": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/entity/monster/piglin/PiglinArmPose;": "$values"
      }
    },
    "net/minecraft/world/entity/monster/piglin/EntityPiglinBrute": {
      "fields": {
        "bV": "MAX_HEALTH",
        "bW": "MOVEMENT_SPEED_WHEN_FIGHTING",
        "bX": "ATTACK_DAMAGE",
        "bT": "SENSOR_TYPES",
        "bU": "MEMORY_TYPES"
      },
      "methods": {
        "w()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/DifficultyInstance;)V": "populateDefaultEquipmentSlots",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "q()Z": "canHunt",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp",
        "W()V": "customServerAiStep",
        "ga()Lnet/minecraft/world/entity/monster/piglin/PiglinArmPose;": "getArmPose",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "gf()V": "playAngrySound",
        "gc()V": "playConvertedSound"
      }
    },
    "net/minecraft/world/entity/monster/piglin/PiglinBruteAI": {
      "fields": {
        "a": "ANGER_DURATION",
        "b": "MELEE_ATTACK_COOLDOWN",
        "c": "ACTIVITY_SOUND_LIKELIHOOD_PER_TICK",
        "d": "MAX_LOOK_DIST",
        "e": "INTERACTION_RANGE",
        "f": "TARGETING_RANGE",
        "g": "SPEED_MULTIPLIER_WHEN_IDLING",
        "h": "HOME_CLOSE_ENOUGH_DISTANCE",
        "i": "HOME_TOO_FAR_DISTANCE",
        "j": "HOME_STROLL_AROUND_DISTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/ai/Brain;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "a(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;)V": "initMemories",
        "b(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "c(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "d(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/ai/Brain;)V": "initFightActivity",
        "a()Lnet/minecraft/world/entity/ai/behavior/RunOne;": "createIdleLookBehaviors",
        "b()Lnet/minecraft/world/entity/ai/behavior/RunOne;": "createIdleMovementBehaviors",
        "b(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;)V": "updateActivity",
        "a(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)Z": "isNearestValidAttackTarget",
        "a(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Ljava/util/Optional;": "findNearestValidAttackTarget",
        "a(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)Ljava/util/Optional;": "getTargetIfWithinRange",
        "a(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/LivingEntity;)V": "wasHurtBy",
        "b(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/LivingEntity;)V": "setAngerTarget",
        "c(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;)V": "maybePlayActivitySound",
        "d(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;)V": "playActivitySound",
        "a(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/schedule/Activity;)V": "lambda$playActivitySound$3",
        "b(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$getTargetIfWithinRange$2",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$isNearestValidAttackTarget$1",
        "c(Lnet/minecraft/world/entity/monster/piglin/PiglinBrute;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$initFightActivity$0"
      }
    },
    "net/minecraft/world/entity/monster/piglin/BehaviorRememberHuntedHoglin": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/monster/piglin/BehaviorStartAdmiringItem": {
      "methods": {
        "a(I)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(ILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/monster/piglin/BehaviorHuntHoglin": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/OneShot;": "create",
        "a(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Z": "hasHuntedRecently",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$4",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/piglin/Piglin;J)Z": "lambda$create$2",
        "a(Ljava/util/List;)V": "lambda$create$1",
        "b(Ljava/util/List;)Ljava/lang/Boolean;": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/monster/piglin/BehaviorStopAdmiringItem": {
      "methods": {
        "a(I)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(ILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/monster/piglin/BehaviorAdmireTimeout": {
      "methods": {
        "a(II)Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(IILnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;IILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;ILnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/monster/piglin/BehaviorStopAdmiring": {
      "methods": {
        "a()Lnet/minecraft/world/entity/ai/behavior/BehaviorControl;": "create",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$create$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$create$1",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/piglin/Piglin;J)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/entity/monster/warden/AngerLevel": {
      "fields": {
        "a": "CALM",
        "b": "AGITATED",
        "c": "ANGRY",
        "d": "SORTED_LEVELS",
        "e": "minimumAnger",
        "f": "ambientSound",
        "g": "listeningSound",
        "h": "$VALUES"
      },
      "methods": {
        "a()I": "getMinimumAnger",
        "b()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "c()Lnet/minecraft/sounds/SoundEvent;": "getListeningSound",
        "a(I)Lnet/minecraft/world/entity/monster/warden/AngerLevel;": "byAnger",
        "d()Z": "isAngry",
        "a([Lnet/minecraft/world/entity/monster/warden/AngerLevel;)V": "lambda$static$1",
        "a(Lnet/minecraft/world/entity/monster/warden/AngerLevel;Lnet/minecraft/world/entity/monster/warden/AngerLevel;)I": "lambda$static$0",
        "e()[Lnet/minecraft/world/entity/monster/warden/AngerLevel;": "$values"
      }
    },
    "net/minecraft/world/entity/monster/warden/AngerManagement": {
      "fields": {
        "a": "CONVERSION_DELAY",
        "b": "MAX_ANGER",
        "f": "DEFAULT_ANGER_DECREASE",
        "g": "conversionDelay",
        "h": "highestAnger",
        "i": "SUSPECT_ANGER_PAIR",
        "j": "filter",
        "c": "suspects",
        "k": "suspectSorter",
        "d": "angerBySuspect",
        "e": "angerByUuid"
      },
      "methods": {
        "a(Ljava/util/function/Predicate;)Lcom/mojang/serialization/Codec;": "codec",
        "b()Ljava/util/List;": "createUuidAngerPairs",
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/util/function/Predicate;)V": "tick",
        "c()V": "sortAndUpdateHighestAnger",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "convertFromUuids",
        "a(Lnet/minecraft/world/entity/Entity;I)I": "increaseAnger",
        "a(Lnet/minecraft/world/entity/Entity;)V": "clearAnger",
        "d()Lnet/minecraft/world/entity/Entity;": "getTopSuspect",
        "b(Lnet/minecraft/world/entity/Entity;)I": "getActiveAnger",
        "a()Ljava/util/Optional;": "getActiveEntity",
        "c(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/LivingEntity;": "lambda$getActiveEntity$8",
        "d(Lnet/minecraft/world/entity/Entity;)Z": "lambda$getActiveEntity$7",
        "a(ILnet/minecraft/world/entity/Entity;Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$increaseAnger$6",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$createUuidAngerPairs$5",
        "e(Lnet/minecraft/world/entity/Entity;)Lcom/mojang/datafixers/util/Pair;": "lambda$createUuidAngerPairs$4",
        "a(Lcom/mojang/datafixers/util/Pair;)V": "lambda$new$3",
        "a(Ljava/util/function/Predicate;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$2",
        "a(Ljava/util/function/Predicate;Ljava/util/List;)Lnet/minecraft/world/entity/monster/warden/AngerManagement;": "lambda$codec$1",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/monster/warden/Warden": {
      "fields": {
        "bV": "LOGGER",
        "bW": "VIBRATION_COOLDOWN_TICKS",
        "bX": "TIME_TO_USE_MELEE_UNTIL_SONIC_BOOM",
        "bY": "MAX_HEALTH",
        "bZ": "MOVEMENT_SPEED_WHEN_FIGHTING",
        "ca": "KNOCKBACK_RESISTANCE",
        "cb": "ATTACK_KNOCKBACK",
        "cc": "ATTACK_DAMAGE",
        "cd": "CLIENT_ANGER_LEVEL",
        "ce": "DARKNESS_DISPLAY_LIMIT",
        "cf": "DARKNESS_DURATION",
        "cg": "DARKNESS_RADIUS",
        "ch": "DARKNESS_INTERVAL",
        "ci": "ANGERMANAGEMENT_TICK_DELAY",
        "cj": "DEFAULT_ANGER",
        "ck": "PROJECTILE_ANGER",
        "cl": "ON_HURT_ANGER_BOOST",
        "cm": "RECENT_PROJECTILE_TICK_THRESHOLD",
        "cn": "TOUCH_COOLDOWN_TICKS",
        "co": "DIGGING_PARTICLES_AMOUNT",
        "cp": "DIGGING_PARTICLES_DURATION",
        "cq": "DIGGING_PARTICLES_OFFSET",
        "cr": "PROJECTILE_ANGER_DISTANCE",
        "cs": "tendrilAnimation",
        "ct": "tendrilAnimationO",
        "cu": "heartAnimation",
        "cv": "heartAnimationO",
        "b": "roarAnimationState",
        "c": "sniffAnimationState",
        "d": "emergeAnimationState",
        "e": "diggingAnimationState",
        "bT": "attackAnimationState",
        "bU": "sonicBoomAnimationState",
        "cw": "dynamicGameEventListener",
        "cx": "vibrationUser",
        "cy": "vibrationData",
        "cz": "angerManagement"
      },
      "methods": {
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "a(Lnet/minecraft/world/level/LevelReader;)Z": "checkSpawnObstruction",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F": "getWalkTargetValue",
        "b(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isInvulnerableTo",
        "ga()Z": "isDiggingOrEmerging",
        "l(Lnet/minecraft/world/entity/Entity;)Z": "canRide",
        "fB()Z": "canDisableShield",
        "aI()F": "nextStep",
        "q()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "aT()Z": "dampensVibrations",
        "eR()F": "getSoundVolume",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "z(Lnet/minecraft/world/entity/Entity;)Z": "doHurtTarget",
        "a_()V": "defineSynchedData",
        "r()I": "getClientAngerLevel",
        "gf()V": "syncClientAngerLevel",
        "l()V": "tick",
        "W()V": "customServerAiStep",
        "b(B)V": "handleEntityEvent",
        "gg()I": "getHeartBeatDelay",
        "D(F)F": "getTendrilAnimation",
        "E(F)F": "getHeartAnimation",
        "a(Lnet/minecraft/world/entity/AnimationState;)V": "clientDiggingParticles",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "cJ()Z": "ignoreExplosion",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "V()V": "sendDebugPackets",
        "a(Ljava/util/function/BiConsumer;)V": "updateDynamicGameEventListener",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canTargetEntity",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;I)V": "applyDarknessAround",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "gh()V": "playListeningSound",
        "w()Lnet/minecraft/world/entity/monster/warden/AngerLevel;": "getAngerLevel",
        "gi()I": "getActiveAnger",
        "b(Lnet/minecraft/world/entity/Entity;)V": "clearAnger",
        "c(Lnet/minecraft/world/entity/Entity;)V": "increaseAngerAt",
        "a(Lnet/minecraft/world/entity/Entity;IZ)V": "increaseAngerAt",
        "fY()Ljava/util/Optional;": "getEntityAngryAt",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getTarget",
        "h(D)Z": "removeWhenFarAway",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "l(Lnet/minecraft/world/entity/LivingEntity;)V": "setAttackTarget",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "bp()Z": "isPushable",
        "A(Lnet/minecraft/world/entity/Entity;)V": "doPush",
        "fZ()Lnet/minecraft/world/entity/monster/warden/AngerManagement;": "getAngerManagement",
        "b(Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/entity/ai/navigation/PathNavigation;": "createNavigation",
        "gb()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;": "getVibrationData",
        "gc()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "getVibrationUser"
      }
    },
    "net/minecraft/world/entity/monster/warden/WardenAi": {
      "fields": {
        "d": "SPEED_MULTIPLIER_WHEN_IDLING",
        "e": "SPEED_MULTIPLIER_WHEN_INVESTIGATING",
        "f": "SPEED_MULTIPLIER_WHEN_FIGHTING",
        "g": "MELEE_ATTACK_COOLDOWN",
        "h": "DIGGING_DURATION",
        "a": "EMERGE_DURATION",
        "b": "ROAR_DURATION",
        "i": "SNIFFING_DURATION",
        "c": "DIGGING_COOLDOWN",
        "j": "DISTURBANCE_LOCATION_EXPIRY_TIME",
        "k": "SENSOR_TYPES",
        "l": "MEMORY_TYPES",
        "m": "DIG_COOLDOWN_SETTER"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;)V": "updateActivity",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "a(Lnet/minecraft/world/entity/ai/Brain;)V": "initCoreActivity",
        "b(Lnet/minecraft/world/entity/ai/Brain;)V": "initEmergeActivity",
        "c(Lnet/minecraft/world/entity/ai/Brain;)V": "initDiggingActivity",
        "d(Lnet/minecraft/world/entity/ai/Brain;)V": "initIdleActivity",
        "e(Lnet/minecraft/world/entity/ai/Brain;)V": "initInvestigateActivity",
        "f(Lnet/minecraft/world/entity/ai/Brain;)V": "initSniffingActivity",
        "g(Lnet/minecraft/world/entity/ai/Brain;)V": "initRoarActivity",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/ai/Brain;)V": "initFightActivity",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)Z": "isTarget",
        "b(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)V": "onTargetInvalid",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setDigCooldown",
        "a(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/core/BlockPos;)V": "setDisturbanceLocation",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$isTarget$5",
        "c(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$initFightActivity$4",
        "d(Lnet/minecraft/world/entity/monster/warden/Warden;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$initFightActivity$3",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;)Lnet/minecraft/world/entity/ai/behavior/declarative/Trigger;": "lambda$static$1",
        "a(Lnet/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder$Instance;Lnet/minecraft/world/entity/ai/behavior/declarative/MemoryAccessor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/monster/warden/Warden;J)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/monster/warden/WardenSpawnTracker": {
      "fields": {
        "a": "CODEC",
        "b": "MAX_WARNING_LEVEL",
        "c": "PLAYER_SEARCH_RADIUS",
        "d": "WARNING_CHECK_DIAMETER",
        "e": "DECREASE_WARNING_LEVEL_EVERY_INTERVAL",
        "f": "WARNING_LEVEL_INCREASE_COOLDOWN",
        "g": "ticksSinceLastWarning",
        "h": "warningLevel",
        "i": "cooldownTicks"
      },
      "methods": {
        "a()V": "tick",
        "b()V": "reset",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerPlayer;)Ljava/util/OptionalInt;": "tryWarn",
        "d()Z": "onCooldown",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "hasNearbyWarden",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Ljava/util/List;": "getNearbyPlayers",
        "e()V": "increaseWarningLevel",
        "f()V": "decreaseWarningLevel",
        "a(I)V": "setWarningLevel",
        "c()I": "getWarningLevel",
        "a(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;)V": "copyData",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$getNearbyPlayers$8",
        "a(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;Lnet/minecraft/server/level/ServerPlayer;)V": "lambda$tryWarn$7",
        "a(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;)V": "lambda$tryWarn$6",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Ljava/util/stream/Stream;": "lambda$tryWarn$5",
        "b(Lnet/minecraft/server/level/ServerPlayer;)Z": "lambda$tryWarn$4",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "b(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;)Ljava/lang/Integer;": "lambda$static$2",
        "c(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;)Ljava/lang/Integer;": "lambda$static$1",
        "d(Lnet/minecraft/world/entity/monster/warden/WardenSpawnTracker;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/npc/EntityVillagerAbstract": {
      "fields": {
        "bV": "DATA_UNHAPPY_COUNTER",
        "bT": "VILLAGER_SLOT_OFFSET",
        "bW": "VILLAGER_INVENTORY_SIZE",
        "bX": "tradingPlayer",
        "bU": "offers",
        "bY": "inventory"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "q()I": "getUnhappyCounter",
        "s(I)V": "setUnhappyCounter",
        "r()I": "getVillagerXp",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "a_()V": "defineSynchedData",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "setTradingPlayer",
        "fY()Lnet/minecraft/world/entity/player/Player;": "getTradingPlayer",
        "fZ()Z": "isTrading",
        "ga()Lnet/minecraft/world/item/trading/MerchantOffers;": "getOffers",
        "a(Lnet/minecraft/world/item/trading/MerchantOffers;)V": "overrideOffers",
        "t(I)V": "overrideXp",
        "a(Lnet/minecraft/world/item/trading/MerchantOffer;)V": "notifyTrade",
        "b(Lnet/minecraft/world/item/trading/MerchantOffer;)V": "rewardTradeXp",
        "gb()Z": "showProgressBar",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "notifyTradeUpdated",
        "gc()Lnet/minecraft/sounds/SoundEvent;": "getNotifyTradeSound",
        "w(Z)Lnet/minecraft/sounds/SoundEvent;": "getTradeUpdatedSound",
        "gd()V": "playCelebrateSound",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "changeDimension",
        "ge()V": "stopTrading",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "a(Lnet/minecraft/core/particles/ParticleOptions;)V": "addParticlesAroundSelf",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canBeLeashed",
        "w()Lnet/minecraft/world/SimpleContainer;": "getInventory",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "gf()V": "updateTrades",
        "a(Lnet/minecraft/world/item/trading/MerchantOffers;[Lnet/minecraft/world/entity/npc/VillagerTrades$ItemListing;I)V": "addOffersFromItemListings",
        "q(F)Lnet/minecraft/world/phys/Vec3;": "getRopeHoldPosition",
        "gg()Z": "isClientSide"
      }
    },
    "net/minecraft/world/entity/npc/MobSpawnerCat": {
      "fields": {
        "a": "TICK_DELAY",
        "b": "nextTick"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;ZZ)I": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)I": "spawnInVillage",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)I": "spawnInHut",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;)I": "spawnCat",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$spawnInVillage$0"
      }
    },
    "net/minecraft/world/entity/npc/MerchantWrapper": {
      "fields": {
        "a": "source",
        "b": "offers",
        "c": "xp"
      },
      "methods": {
        "fY()Lnet/minecraft/world/entity/player/Player;": "getTradingPlayer",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "setTradingPlayer",
        "ga()Lnet/minecraft/world/item/trading/MerchantOffers;": "getOffers",
        "a(Lnet/minecraft/world/item/trading/MerchantOffers;)V": "overrideOffers",
        "a(Lnet/minecraft/world/item/trading/MerchantOffer;)V": "notifyTrade",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "notifyTradeUpdated",
        "gg()Z": "isClientSide",
        "r()I": "getVillagerXp",
        "t(I)V": "overrideXp",
        "gb()Z": "showProgressBar",
        "gc()Lnet/minecraft/sounds/SoundEvent;": "getNotifyTradeSound"
      }
    },
    "net/minecraft/world/entity/npc/InventoryCarrier": {
      "fields": {
        "c_": "TAG_INVENTORY"
      },
      "methods": {
        "w()Lnet/minecraft/world/SimpleContainer;": "getInventory",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/npc/InventoryCarrier;Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "readInventoryFromTag",
        "a_(Lnet/minecraft/nbt/CompoundTag;)V": "writeInventoryToTag"
      }
    },
    "net/minecraft/world/entity/npc/NPC": {},
    "net/minecraft/world/entity/npc/EntityVillager": {
      "fields": {
        "bZ": "LOGGER",
        "ca": "DATA_VILLAGER_DATA",
        "bV": "BREEDING_FOOD_THRESHOLD",
        "bW": "FOOD_POINTS",
        "cb": "TRADES_PER_LEVEL",
        "cc": "WANTED_ITEMS",
        "cd": "MAX_GOSSIP_TOPICS",
        "ce": "GOSSIP_COOLDOWN",
        "cf": "GOSSIP_DECAY_INTERVAL",
        "cg": "REPUTATION_CHANGE_PER_EVENT",
        "ch": "HOW_FAR_AWAY_TO_TALK_TO_OTHER_VILLAGERS_ABOUT_GOLEMS",
        "ci": "HOW_MANY_VILLAGERS_NEED_TO_AGREE_TO_SPAWN_A_GOLEM",
        "cj": "TIME_SINCE_SLEEPING_FOR_GOLEM_SPAWNING",
        "bX": "SPEED_MODIFIER",
        "ck": "updateMerchantTimer",
        "cl": "increaseProfessionLevelOnUpdate",
        "cm": "lastTradedPlayer",
        "cn": "chasing",
        "co": "foodLevel",
        "cp": "gossips",
        "cq": "lastGossipTime",
        "cr": "lastGossipDecayTime",
        "cs": "villagerXp",
        "ct": "lastRestockGameTime",
        "cu": "numberOfRestocksToday",
        "cv": "lastRestockCheckDayTime",
        "cw": "assignProfessionWhenSpawned",
        "cx": "MEMORY_TYPES",
        "cy": "SENSOR_TYPES",
        "bY": "POI_MEMORIES"
      },
      "methods": {
        "dK()Lnet/minecraft/world/entity/ai/Brain;": "getBrain",
        "dL()Lnet/minecraft/world/entity/ai/Brain$Provider;": "brainProvider",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/entity/ai/Brain;": "makeBrain",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "refreshBrain",
        "a(Lnet/minecraft/world/entity/ai/Brain;)V": "registerBrainGoals",
        "m()V": "ageBoundaryReached",
        "gh()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "gi()Z": "assignProfessionWhenSpawned",
        "W()V": "customServerAiStep",
        "l()V": "tick",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "gu()V": "setUnhappy",
        "h(Lnet/minecraft/world/entity/player/Player;)V": "startTrading",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "setTradingPlayer",
        "ge()V": "stopTrading",
        "gv()V": "resetSpecialPrices",
        "gk()Z": "canRestock",
        "gg()Z": "isClientSide",
        "gl()V": "restock",
        "gw()V": "resendOffersToTradingPlayer",
        "gx()Z": "needsToRestock",
        "gy()Z": "allowedToRestock",
        "gm()Z": "shouldRestock",
        "gz()V": "catchUpDemand",
        "gA()V": "updateDemand",
        "i(Lnet/minecraft/world/entity/player/Player;)V": "updateSpecialPrices",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "h(D)Z": "removeWhenFarAway",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "gn()V": "playWorkSound",
        "a(Lnet/minecraft/world/entity/npc/VillagerData;)V": "setVillagerData",
        "gj()Lnet/minecraft/world/entity/npc/VillagerData;": "getVillagerData",
        "b(Lnet/minecraft/world/item/trading/MerchantOffer;)V": "rewardTradeXp",
        "x(Z)V": "setChasing",
        "go()Z": "isChasing",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setLastHurtByMob",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "gB()V": "releaseAllPois",
        "a(Lnet/minecraft/world/entity/Entity;)V": "tellWitnessesThatIWasMurdered",
        "a(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;)V": "releasePoi",
        "P_()Z": "canBreed",
        "gC()Z": "hungry",
        "gD()V": "eatUntilFull",
        "g(Lnet/minecraft/world/entity/player/Player;)I": "getPlayerReputation",
        "v(I)V": "digestFood",
        "gp()V": "eatAndDigestFood",
        "b(Lnet/minecraft/world/item/trading/MerchantOffers;)V": "setOffers",
        "gE()Z": "shouldIncreaseLevel",
        "gF()V": "increaseMerchantCareer",
        "cl()Lnet/minecraft/network/chat/Component;": "getTypeName",
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/npc/Villager;": "getBreedOffspring",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V": "thunderHit",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "wantsToPickUp",
        "gq()Z": "hasExcessFood",
        "gr()Z": "wantsMoreFood",
        "gG()I": "countFoodPointsInInventory",
        "gs()Z": "hasFarmSeeds",
        "gf()V": "updateTrades",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/Villager;J)V": "gossip",
        "gH()V": "maybeDecayGossip",
        "a(Lnet/minecraft/server/level/ServerLevel;JI)V": "spawnGolemIfNeeded",
        "a(J)Z": "wantsToSpawnGolem",
        "a(Lnet/minecraft/world/entity/ai/village/ReputationEventType;Lnet/minecraft/world/entity/Entity;)V": "onReputationEventFrom",
        "r()I": "getVillagerXp",
        "u(I)V": "setVillagerXp",
        "gI()V": "resetNumberOfRestocks",
        "gt()Lnet/minecraft/world/entity/ai/gossip/GossipContainer;": "getGossips",
        "a(Lnet/minecraft/nbt/Tag;)V": "setGossips",
        "V()V": "sendDebugPackets",
        "b(Lnet/minecraft/core/BlockPos;)V": "startSleeping",
        "fz()V": "stopSleeping",
        "b(J)Z": "golemSpawnConditionsMet",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring"
      }
    },
    "net/minecraft/world/entity/npc/VillagerData": {
      "fields": {
        "a": "MIN_VILLAGER_LEVEL",
        "b": "MAX_VILLAGER_LEVEL",
        "d": "NEXT_LEVEL_XP_THRESHOLDS",
        "c": "CODEC",
        "e": "type",
        "f": "profession",
        "g": "level"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/npc/VillagerType;": "getType",
        "b()Lnet/minecraft/world/entity/npc/VillagerProfession;": "getProfession",
        "c()I": "getLevel",
        "a(Lnet/minecraft/world/entity/npc/VillagerType;)Lnet/minecraft/world/entity/npc/VillagerData;": "setType",
        "a(Lnet/minecraft/world/entity/npc/VillagerProfession;)Lnet/minecraft/world/entity/npc/VillagerData;": "setProfession",
        "a(I)Lnet/minecraft/world/entity/npc/VillagerData;": "setLevel",
        "b(I)I": "getMinXpPerLevel",
        "c(I)I": "getMaxXpPerLevel",
        "d(I)Z": "canLevelUp",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/entity/npc/VillagerData;)Ljava/lang/Integer;": "lambda$static$4",
        "b(Lnet/minecraft/world/entity/npc/VillagerData;)Lnet/minecraft/world/entity/npc/VillagerProfession;": "lambda$static$3",
        "d()Lnet/minecraft/world/entity/npc/VillagerProfession;": "lambda$static$2",
        "c(Lnet/minecraft/world/entity/npc/VillagerData;)Lnet/minecraft/world/entity/npc/VillagerType;": "lambda$static$1",
        "e()Lnet/minecraft/world/entity/npc/VillagerType;": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/npc/VillagerDataHolder": {
      "methods": {
        "gj()Lnet/minecraft/world/entity/npc/VillagerData;": "getVillagerData",
        "a(Lnet/minecraft/world/entity/npc/VillagerData;)V": "setVillagerData",
        "a()Lnet/minecraft/world/entity/npc/VillagerType;": "getVariant",
        "a(Lnet/minecraft/world/entity/npc/VillagerType;)V": "setVariant",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/npc/VillagerProfession": {
      "fields": {
        "q": "name",
        "r": "heldJobSite",
        "s": "acquirableJobSite",
        "t": "requestedItems",
        "u": "secondaryPoi",
        "v": "workSound",
        "a": "ALL_ACQUIRABLE_JOBS",
        "b": "NONE",
        "c": "ARMORER",
        "d": "BUTCHER",
        "e": "CARTOGRAPHER",
        "f": "CLERIC",
        "g": "FARMER",
        "h": "FISHERMAN",
        "i": "FLETCHER",
        "j": "LEATHERWORKER",
        "k": "LIBRARIAN",
        "l": "MASON",
        "m": "NITWIT",
        "n": "SHEPHERD",
        "o": "TOOLSMITH",
        "p": "WEAPONSMITH"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/entity/npc/VillagerProfession;": "register",
        "a(Ljava/lang/String;Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/entity/npc/VillagerProfession;": "register",
        "a(Ljava/lang/String;Lnet/minecraft/resources/ResourceKey;Lcom/google/common/collect/ImmutableSet;Lcom/google/common/collect/ImmutableSet;Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/entity/npc/VillagerProfession;": "register",
        "a(Ljava/lang/String;Ljava/util/function/Predicate;Ljava/util/function/Predicate;Lcom/google/common/collect/ImmutableSet;Lcom/google/common/collect/ImmutableSet;Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/entity/npc/VillagerProfession;": "register",
        "a()Ljava/lang/String;": "name",
        "b()Ljava/util/function/Predicate;": "heldJobSite",
        "c()Ljava/util/function/Predicate;": "acquirableJobSite",
        "d()Lcom/google/common/collect/ImmutableSet;": "requestedItems",
        "e()Lcom/google/common/collect/ImmutableSet;": "secondaryPoi",
        "f()Lnet/minecraft/sounds/SoundEvent;": "workSound",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;)Z": "lambda$register$4",
        "b(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;)Z": "lambda$register$3",
        "c(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;)Z": "lambda$register$2",
        "d(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/Holder;)Z": "lambda$register$1",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/npc/VillagerTrades": {
      "fields": {
        "c": "DEFAULT_SUPPLY",
        "d": "COMMON_ITEMS_SUPPLY",
        "e": "UNCOMMON_ITEMS_SUPPLY",
        "f": "XP_LEVEL_1_SELL",
        "g": "XP_LEVEL_1_BUY",
        "h": "XP_LEVEL_2_SELL",
        "i": "XP_LEVEL_2_BUY",
        "j": "XP_LEVEL_3_SELL",
        "k": "XP_LEVEL_3_BUY",
        "l": "XP_LEVEL_4_SELL",
        "m": "XP_LEVEL_4_BUY",
        "n": "XP_LEVEL_5_TRADE",
        "o": "LOW_TIER_PRICE_MULTIPLIER",
        "p": "HIGH_TIER_PRICE_MULTIPLIER",
        "a": "TRADES",
        "b": "WANDERING_TRADER_TRADES"
      },
      "methods": {
        "a(Lcom/google/common/collect/ImmutableMap;)Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;": "toIntMap",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/npc/VillagerTrades$IMerchantRecipeOption": {
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/item/trading/MerchantOffer;": "getOffer"
      }
    },
    "net/minecraft/world/entity/npc/VillagerType": {
      "fields": {
        "a": "DESERT",
        "b": "JUNGLE",
        "c": "PLAINS",
        "d": "SAVANNA",
        "e": "SNOW",
        "f": "SWAMP",
        "g": "TAIGA",
        "h": "name",
        "i": "BY_BIOME"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/npc/VillagerType;": "register",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/entity/npc/VillagerType;": "byBiome",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/entity/npc/EntityVillagerTrader": {
      "fields": {
        "bV": "NUMBER_OF_TRADE_OFFERS",
        "bW": "wanderTarget",
        "bX": "despawnDelay"
      },
      "methods": {
        "x()V": "registerGoals",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/AgeableMob;)Lnet/minecraft/world/entity/AgeableMob;": "getBreedOffspring",
        "gb()Z": "showProgressBar",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "mobInteract",
        "gf()V": "updateTrades",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "h(D)Z": "removeWhenFarAway",
        "b(Lnet/minecraft/world/item/trading/MerchantOffer;)V": "rewardTradeXp",
        "s()Lnet/minecraft/sounds/SoundEvent;": "getAmbientSound",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/sounds/SoundEvent;": "getDrinkingSound",
        "w(Z)Lnet/minecraft/sounds/SoundEvent;": "getTradeUpdatedSound",
        "gc()Lnet/minecraft/sounds/SoundEvent;": "getNotifyTradeSound",
        "u(I)V": "setDespawnDelay",
        "gh()I": "getDespawnDelay",
        "b_()V": "aiStep",
        "gi()V": "maybeDespawn",
        "i(Lnet/minecraft/core/BlockPos;)V": "setWanderTarget",
        "gj()Lnet/minecraft/core/BlockPos;": "getWanderTarget"
      }
    },
    "net/minecraft/world/entity/npc/MobSpawnerTrader": {
      "fields": {
        "b": "DEFAULT_TICK_DELAY",
        "a": "DEFAULT_SPAWN_DELAY",
        "c": "MIN_SPAWN_CHANCE",
        "d": "MAX_SPAWN_CHANCE",
        "e": "SPAWN_CHANCE_INCREASE",
        "f": "SPAWN_ONE_IN_X_CHANCE",
        "g": "NUMBER_OF_SPAWN_ATTEMPTS",
        "h": "random",
        "i": "serverLevelData",
        "j": "tickDelay",
        "k": "spawnDelay",
        "l": "spawnChance"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;ZZ)I": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;)Z": "spawn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/npc/WanderingTrader;I)V": "tryToSpawnLlamaFor",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;I)Lnet/minecraft/core/BlockPos;": "findSpawnPositionNear",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "hasEnoughSpace"
      }
    },
    "net/minecraft/world/entity/player/PlayerAbilities": {
      "fields": {
        "a": "invulnerable",
        "b": "flying",
        "c": "mayfly",
        "d": "instabuild",
        "e": "mayBuild",
        "f": "flyingSpeed",
        "g": "walkingSpeed"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "addSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "loadSaveData",
        "a()F": "getFlyingSpeed",
        "a(F)V": "setFlyingSpeed",
        "b()F": "getWalkingSpeed",
        "b(F)V": "setWalkingSpeed"
      }
    },
    "net/minecraft/world/entity/player/EnumChatVisibility": {
      "fields": {
        "a": "FULL",
        "b": "SYSTEM",
        "c": "HIDDEN",
        "d": "BY_ID",
        "e": "id",
        "f": "key",
        "g": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "b()Ljava/lang/String;": "getKey",
        "a(I)Lnet/minecraft/world/entity/player/ChatVisiblity;": "byId",
        "d()[Lnet/minecraft/world/entity/player/ChatVisiblity;": "$values"
      }
    },
    "net/minecraft/world/entity/player/PlayerInventory": {
      "fields": {
        "c": "POP_TIME_DURATION",
        "d": "INVENTORY_SIZE",
        "n": "SELECTION_SIZE",
        "e": "SLOT_OFFHAND",
        "f": "NOT_FOUND_INDEX",
        "g": "ALL_ARMOR_SLOTS",
        "h": "HELMET_SLOT_ONLY",
        "i": "items",
        "j": "armor",
        "k": "offhand",
        "o": "compartments",
        "l": "selected",
        "m": "player",
        "p": "timesChanged"
      },
      "methods": {
        "f()Lnet/minecraft/world/item/ItemStack;": "getSelected",
        "g()I": "getSelectionSize",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "hasRemainingSpaceForItem",
        "h()I": "getFreeSlot",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setPickedItem",
        "c(I)V": "pickSlot",
        "d(I)Z": "isHotbarSlot",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "findSlotMatchingItem",
        "c(Lnet/minecraft/world/item/ItemStack;)I": "findSlotMatchingUnusedItem",
        "i()I": "getSuitableHotbarSlot",
        "a(D)V": "swapPaint",
        "a(Ljava/util/function/Predicate;ILnet/minecraft/world/Container;)I": "clearOrCountMatchingItems",
        "i(Lnet/minecraft/world/item/ItemStack;)I": "addResource",
        "d(ILnet/minecraft/world/item/ItemStack;)I": "addResource",
        "d(Lnet/minecraft/world/item/ItemStack;)I": "getSlotWithRemainingSpace",
        "j()V": "tick",
        "e(Lnet/minecraft/world/item/ItemStack;)Z": "add",
        "c(ILnet/minecraft/world/item/ItemStack;)Z": "add",
        "f(Lnet/minecraft/world/item/ItemStack;)V": "placeItemBackInInventory",
        "a(Lnet/minecraft/world/item/ItemStack;Z)V": "placeItemBackInInventory",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "g(Lnet/minecraft/world/item/ItemStack;)V": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "a(Lnet/minecraft/nbt/ListTag;)Lnet/minecraft/nbt/ListTag;": "save",
        "b(Lnet/minecraft/nbt/ListTag;)V": "load",
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "e(I)Lnet/minecraft/world/item/ItemStack;": "getArmor",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F[I)V": "hurtArmor",
        "k()V": "dropAll",
        "e()V": "setChanged",
        "l()I": "getTimesChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "h(Lnet/minecraft/world/item/ItemStack;)Z": "contains",
        "a(Lnet/minecraft/tags/TagKey;)Z": "contains",
        "a(Lnet/minecraft/world/entity/player/Inventory;)V": "replaceWith",
        "a()V": "clearContent",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillStackedContents",
        "a(Z)Lnet/minecraft/world/item/ItemStack;": "removeFromSelected"
      }
    },
    "net/minecraft/world/entity/player/EntityHuman": {
      "fields": {
        "b": "LOGGER",
        "bB": "MAX_NAME_LENGTH",
        "bC": "MAX_HEALTH",
        "bD": "SLEEP_DURATION",
        "bE": "WAKE_UP_DURATION",
        "bF": "ENDER_SLOT_OFFSET",
        "bG": "CROUCH_BB_HEIGHT",
        "bH": "SWIMMING_BB_WIDTH",
        "bI": "SWIMMING_BB_HEIGHT",
        "bJ": "DEFAULT_EYE_HEIGHT",
        "bK": "STANDING_DIMENSIONS",
        "c": "POSES",
        "d": "FLY_ACHIEVEMENT_SPEED",
        "e": "DATA_PLAYER_ABSORPTION_ID",
        "f": "DATA_SCORE_ID",
        "bL": "DATA_PLAYER_MODE_CUSTOMISATION",
        "bM": "DATA_PLAYER_MAIN_HAND",
        "bN": "DATA_SHOULDER_LEFT",
        "bO": "DATA_SHOULDER_RIGHT",
        "g": "timeEntitySatOnShoulder",
        "cl": "inventory",
        "bP": "enderChestInventory",
        "bQ": "inventoryMenu",
        "bR": "containerMenu",
        "bS": "foodData",
        "bT": "jumpTriggerTime",
        "bU": "oBob",
        "bV": "bob",
        "bW": "takeXpDelay",
        "bX": "xCloakO",
        "bY": "yCloakO",
        "bZ": "zCloakO",
        "ca": "xCloak",
        "cb": "yCloak",
        "cc": "zCloak",
        "cm": "sleepCounter",
        "cd": "wasUnderwater",
        "cn": "abilities",
        "ce": "experienceLevel",
        "cf": "totalExperience",
        "cg": "experienceProgress",
        "ch": "enchantmentSeed",
        "ci": "defaultFlySpeed",
        "co": "lastLevelUpTime",
        "cp": "gameProfile",
        "cq": "reducedDebugInfo",
        "cr": "lastItemInMainHand",
        "cs": "cooldowns",
        "ct": "lastDeathLocation",
        "cj": "fishing",
        "ck": "hurtDir"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/GameType;)Z": "blockActionRestricted",
        "fC()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;": "createAttributes",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "fD()Z": "isSecondaryUseActive",
        "fE()Z": "wantsToStopRiding",
        "fF()Z": "isStayingOnGroundSurface",
        "fG()Z": "updateIsUnderwater",
        "s()V": "turtleHelmetTick",
        "k()Lnet/minecraft/world/item/ItemCooldowns;": "createItemCooldowns",
        "x()V": "moveCloak",
        "fH()V": "updatePlayerPose",
        "at()I": "getPortalWaitTime",
        "aJ()Lnet/minecraft/sounds/SoundEvent;": "getSwimSound",
        "aK()Lnet/minecraft/sounds/SoundEvent;": "getSwimSplashSound",
        "aL()Lnet/minecraft/sounds/SoundEvent;": "getSwimHighSpeedSplashSound",
        "bH()I": "getDimensionChangingDelay",
        "a(Lnet/minecraft/sounds/SoundEvent;FF)V": "playSound",
        "a(Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playNotifySound",
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "cZ()I": "getFireImmuneTicks",
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/core/particles/ParticleOptions;)V": "addParticlesAroundSelf",
        "q()V": "closeContainer",
        "r()V": "doCloseContainer",
        "bv()V": "rideTick",
        "fc()V": "serverAiStep",
        "b_()V": "aiStep",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "playShoulderEntityAmbientSound",
        "c(Lnet/minecraft/world/entity/Entity;)V": "touch",
        "fI()I": "getScore",
        "r(I)V": "setScore",
        "s(I)V": "increaseScore",
        "t(I)V": "startAutoSpinAttack",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "eu()V": "dropEquipment",
        "fJ()V": "destroyVanishingCursedItems",
        "d(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;": "getHurtSound",
        "g_()Lnet/minecraft/sounds/SoundEvent;": "getDeathSound",
        "a(Lnet/minecraft/world/item/ItemStack;Z)Lnet/minecraft/world/entity/item/ItemEntity;": "drop",
        "a(Lnet/minecraft/world/item/ItemStack;ZZ)Lnet/minecraft/world/entity/item/ItemEntity;": "drop",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "e(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasCorrectToolForDrops",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "b(Lnet/minecraft/world/damagesource/DamageSource;)Z": "isInvulnerableTo",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "d(Lnet/minecraft/world/entity/LivingEntity;)V": "blockUsingShield",
        "ek()Z": "canBeSeenAsEnemy",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "canHarmPlayer",
        "b(Lnet/minecraft/world/damagesource/DamageSource;F)V": "hurtArmor",
        "c(Lnet/minecraft/world/damagesource/DamageSource;F)V": "hurtHelmet",
        "u(F)V": "hurtCurrentlyUsedShield",
        "f(Lnet/minecraft/world/damagesource/DamageSource;F)V": "actuallyHurt",
        "dQ()Z": "onSoulSpeedBlock",
        "U()Z": "isTextFilteringEnabled",
        "a(Lnet/minecraft/world/level/block/entity/SignBlockEntity;Z)V": "openTextEdit",
        "a(Lnet/minecraft/world/level/BaseCommandBlock;)V": "openMinecartCommandBlock",
        "a(Lnet/minecraft/world/level/block/entity/CommandBlockEntity;)V": "openCommandBlock",
        "a(Lnet/minecraft/world/level/block/entity/StructureBlockEntity;)V": "openStructureBlock",
        "a(Lnet/minecraft/world/level/block/entity/JigsawBlockEntity;)V": "openJigsawBlock",
        "a(Lnet/minecraft/world/entity/animal/horse/AbstractHorse;Lnet/minecraft/world/Container;)V": "openHorseInventory",
        "a(Lnet/minecraft/world/MenuProvider;)Ljava/util/OptionalInt;": "openMenu",
        "a(ILnet/minecraft/world/item/trading/MerchantOffers;IIZZ)V": "sendMerchantOffers",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;)V": "openItemGui",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactOn",
        "bw()D": "getMyRidingOffset",
        "bA()V": "removeVehicle",
        "eT()Z": "isImmobile",
        "dW()Z": "isAffectedByFluids",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/MoverType;)Lnet/minecraft/world/phys/Vec3;": "maybeBackOffFromEdge",
        "y()Z": "isAboveGround",
        "d(Lnet/minecraft/world/entity/Entity;)V": "attack",
        "g(Lnet/minecraft/world/entity/LivingEntity;)V": "doAutoAttackOnTouch",
        "s(Z)V": "disableShield",
        "a(Lnet/minecraft/world/entity/Entity;)V": "crit",
        "b(Lnet/minecraft/world/entity/Entity;)V": "magicCrit",
        "fK()V": "sweepAttack",
        "fL()V": "respawn",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "g()Z": "isLocalPlayer",
        "fM()Lcom/mojang/authlib/GameProfile;": "getGameProfile",
        "fN()Lnet/minecraft/world/entity/player/Inventory;": "getInventory",
        "fO()Lnet/minecraft/world/entity/player/Abilities;": "getAbilities",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/ClickAction;)V": "updateTutorialInventoryAction",
        "fP()Z": "hasContainerOpen",
        "a(Lnet/minecraft/core/BlockPos;)Lcom/mojang/datafixers/util/Either;": "startSleepInBed",
        "a(ZZ)V": "stopSleepInBed",
        "fz()V": "stopSleeping",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;FZZ)Ljava/util/Optional;": "findRespawnPositionAndUseSpawnBlock",
        "fQ()Z": "isSleepingLongEnough",
        "fR()I": "getSleepTimer",
        "a(Lnet/minecraft/network/chat/Component;Z)V": "displayClientMessage",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "awardStat",
        "a(Lnet/minecraft/resources/ResourceLocation;I)V": "awardStat",
        "b(Lnet/minecraft/stats/Stat;)V": "awardStat",
        "a(Lnet/minecraft/stats/Stat;I)V": "awardStat",
        "a(Lnet/minecraft/stats/Stat;)V": "resetStat",
        "a(Ljava/util/Collection;)I": "awardRecipes",
        "a(Lnet/minecraft/world/item/crafting/Recipe;Ljava/util/List;)V": "triggerRecipeCrafted",
        "a([Lnet/minecraft/resources/ResourceLocation;)V": "awardRecipesByKey",
        "b(Ljava/util/Collection;)I": "resetRecipes",
        "eW()V": "jumpFromGround",
        "h(Lnet/minecraft/world/phys/Vec3;)V": "travel",
        "ba()V": "updateSwimming",
        "h(Lnet/minecraft/core/BlockPos;)Z": "freeAt",
        "fa()F": "getSpeed",
        "r(DDD)V": "checkMovementStatistics",
        "s(DDD)V": "checkRidingStatistics",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "fS()Z": "tryToStartFallFlying",
        "fT()V": "startFallFlying",
        "fU()V": "stopFallFlying",
        "bd()V": "doWaterSplashEffect",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "playStepSound",
        "eC()Lnet/minecraft/world/entity/LivingEntity$Fallsounds;": "getFallSounds",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)Z": "killedEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;)V": "makeStuckInBlock",
        "d(I)V": "giveExperiencePoints",
        "fV()I": "getEnchantmentSeed",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "onEnchantmentPerformed",
        "c(I)V": "giveExperienceLevels",
        "fW()I": "getXpNeededForNextLevel",
        "z(F)V": "causeFoodExhaustion",
        "W()Ljava/util/Optional;": "getWardenSpawnTracker",
        "fX()Lnet/minecraft/world/food/FoodData;": "getFoodData",
        "t(Z)Z": "canEat",
        "fY()Z": "isHurt",
        "fZ()Z": "mayBuild",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/world/item/ItemStack;)Z": "mayUseItemAt",
        "ea()I": "getExperienceReward",
        "eb()Z": "isAlwaysExperienceDropper",
        "cz()Z": "shouldShowName",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "w()V": "onUpdateAbilities",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "ga()Lnet/minecraft/world/inventory/PlayerEnderChestContainer;": "getEnderChestInventory",
        "c(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;": "getItemBySlot",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Z": "doesEmitEquipEvent",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V": "setItemSlot",
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "addItem",
        "bI()Ljava/lang/Iterable;": "getHandSlots",
        "bJ()Ljava/lang/Iterable;": "getArmorSlots",
        "h(Lnet/minecraft/nbt/CompoundTag;)Z": "setEntityOnShoulder",
        "gb()V": "removeEntitiesOnShoulder",
        "k(Lnet/minecraft/nbt/CompoundTag;)V": "respawnEntityOnShoulder",
        "G_()Z": "isSpectator",
        "bn()Z": "canBeHitByProjectile",
        "bW()Z": "isSwimming",
        "f()Z": "isCreative",
        "cw()Z": "isPushedByFluid",
        "gc()Lnet/minecraft/world/scores/Scoreboard;": "getScoreboard",
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a(Lnet/minecraft/network/chat/MutableComponent;)Lnet/minecraft/network/chat/MutableComponent;": "decorateDisplayNameComponent",
        "cv()Ljava/lang/String;": "getScoreboardName",
        "b(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getStandingEyeHeight",
        "y(F)V": "setAbsorptionAmount",
        "ff()F": "getAbsorptionAmount",
        "a(Lnet/minecraft/world/entity/player/PlayerModelPart;)Z": "isModelPartShown",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "gd()Z": "isReducedDebugInfo",
        "u(Z)V": "setReducedDebugInfo",
        "h(I)V": "setRemainingFireTicks",
        "fh()Lnet/minecraft/world/entity/HumanoidArm;": "getMainArm",
        "a(Lnet/minecraft/world/entity/HumanoidArm;)V": "setMainArm",
        "ge()Lnet/minecraft/nbt/CompoundTag;": "getShoulderEntityLeft",
        "i(Lnet/minecraft/nbt/CompoundTag;)V": "setShoulderEntityLeft",
        "gf()Lnet/minecraft/nbt/CompoundTag;": "getShoulderEntityRight",
        "j(Lnet/minecraft/nbt/CompoundTag;)V": "setShoulderEntityRight",
        "gg()F": "getCurrentItemAttackStrengthDelay",
        "A(F)F": "getAttackStrengthScale",
        "gh()V": "resetAttackStrengthTicker",
        "gi()Lnet/minecraft/world/item/ItemCooldowns;": "getCooldowns",
        "aH()F": "getBlockSpeedFactor",
        "gj()F": "getLuck",
        "gk()Z": "canUseGameMasterBlocks",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "a(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;": "getDimensions",
        "fv()Lcom/google/common/collect/ImmutableList;": "getDismountPoses",
        "g(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "getProjectile",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "eat",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldRemoveSoulSpeed",
        "q(F)Lnet/minecraft/world/phys/Vec3;": "getRopeHoldPosition",
        "dH()Z": "isAlwaysTicking",
        "gl()Z": "isScoping",
        "dG()Z": "shouldBeSaved",
        "gm()Ljava/util/Optional;": "getLastDeathLocation",
        "a(Ljava/util/Optional;)V": "setLastDeathLocation",
        "eB()F": "getHurtDir",
        "m(F)V": "animateHurt",
        "dB()Z": "canSprint",
        "eZ()F": "getFlyingSpeed",
        "C(Lnet/minecraft/world/entity/Entity;)V": "lambda$respawnEntityOnShoulder$5"
      }
    },
    "net/minecraft/world/entity/player/EntityHuman$EnumBedResult": {
      "fields": {
        "a": "NOT_POSSIBLE_HERE",
        "b": "NOT_POSSIBLE_NOW",
        "c": "TOO_FAR_AWAY",
        "d": "OBSTRUCTED",
        "e": "OTHER_PROBLEM",
        "f": "NOT_SAFE",
        "g": "message",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/Component;": "getMessage"
      }
    },
    "net/minecraft/world/entity/player/PlayerModelPart": {
      "fields": {
        "a": "CAPE",
        "b": "JACKET",
        "c": "LEFT_SLEEVE",
        "d": "RIGHT_SLEEVE",
        "e": "LEFT_PANTS_LEG",
        "f": "RIGHT_PANTS_LEG",
        "g": "HAT",
        "h": "bit",
        "i": "mask",
        "j": "id",
        "k": "name",
        "l": "$VALUES"
      },
      "methods": {
        "a()I": "getMask",
        "b()I": "getBit",
        "c()Ljava/lang/String;": "getId",
        "d()Lnet/minecraft/network/chat/Component;": "getName",
        "e()[Lnet/minecraft/world/entity/player/PlayerModelPart;": "$values"
      }
    },
    "net/minecraft/world/entity/player/ProfilePublicKey": {
      "fields": {
        "d": "data",
        "a": "EXPIRED_PROFILE_PUBLIC_KEY",
        "e": "INVALID_SIGNATURE",
        "b": "EXPIRY_GRACE_PERIOD",
        "c": "TRUSTED_CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/SignatureValidator;Ljava/util/UUID;Lnet/minecraft/world/entity/player/ProfilePublicKey$Data;Ljava/time/Duration;)Lnet/minecraft/world/entity/player/ProfilePublicKey;": "createValidated",
        "a()Lnet/minecraft/util/SignatureValidator;": "createSignatureValidator",
        "b()Lnet/minecraft/world/entity/player/ProfilePublicKey$Data;": "data"
      }
    },
    "net/minecraft/world/entity/player/AutoRecipeStackManager": {
      "fields": {
        "b": "EMPTY",
        "a": "contents"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)V": "accountSimpleStack",
        "b(Lnet/minecraft/world/item/ItemStack;)V": "accountStack",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "accountStack",
        "c(Lnet/minecraft/world/item/ItemStack;)I": "getStackingIndex",
        "b(I)Z": "has",
        "a(II)I": "take",
        "b(II)V": "put",
        "a(Lnet/minecraft/world/item/crafting/Recipe;Lit/unimi/dsi/fastutil/ints/IntList;)Z": "canCraft",
        "a(Lnet/minecraft/world/item/crafting/Recipe;Lit/unimi/dsi/fastutil/ints/IntList;I)Z": "canCraft",
        "b(Lnet/minecraft/world/item/crafting/Recipe;Lit/unimi/dsi/fastutil/ints/IntList;)I": "getBiggestCraftableStack",
        "a(Lnet/minecraft/world/item/crafting/Recipe;ILit/unimi/dsi/fastutil/ints/IntList;)I": "getBiggestCraftableStack",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "fromStackingIndex",
        "a()V": "clear"
      }
    },
    "net/minecraft/world/entity/projectile/EntityArrow": {
      "fields": {
        "f": "ARROW_BASE_DAMAGE",
        "g": "ID_FLAGS",
        "h": "PIERCE_LEVEL",
        "i": "FLAG_CRIT",
        "j": "FLAG_NOPHYSICS",
        "k": "FLAG_CROSSBOW",
        "l": "lastState",
        "b": "inGround",
        "c": "inGroundTime",
        "d": "pickup",
        "e": "shakeTime",
        "m": "life",
        "n": "baseDamage",
        "o": "knockback",
        "p": "soundEvent",
        "q": "piercingIgnoreEntityIds",
        "r": "piercedAndKilledEntities"
      },
      "methods": {
        "b(Lnet/minecraft/sounds/SoundEvent;)V": "setSoundEvent",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "a_()V": "defineSynchedData",
        "c(DDDFF)V": "shoot",
        "a(DDDFFIZ)V": "lerpTo",
        "l(DDD)V": "lerpMotion",
        "l()V": "tick",
        "z()Z": "shouldFall",
        "D()V": "startFalling",
        "a(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V": "move",
        "j()V": "tickDespawn",
        "E()V": "resetPiercedEntities",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "k()Lnet/minecraft/sounds/SoundEvent;": "getDefaultHitGroundSoundEvent",
        "o()Lnet/minecraft/sounds/SoundEvent;": "getHitGroundSoundEvent",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "doPostHurtEffects",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/EntityHitResult;": "findHitEntity",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canHitEntity",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/world/entity/Entity;)V": "setOwner",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "tryPickup",
        "p()Lnet/minecraft/world/item/ItemStack;": "getPickupItem",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "h(D)V": "setBaseDamage",
        "q()D": "getBaseDamage",
        "b(I)V": "setKnockback",
        "r()I": "getKnockback",
        "cn()Z": "isAttackable",
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "a(Z)V": "setCritArrow",
        "a(B)V": "setPierceLevel",
        "a(IZ)V": "setFlag",
        "s()Z": "isCritArrow",
        "t()Z": "shotFromCrossbow",
        "w()B": "getPierceLevel",
        "a(Lnet/minecraft/world/entity/LivingEntity;F)V": "setEnchantmentEffectsFromEntity",
        "x()F": "getWaterInertia",
        "p(Z)V": "setNoPhysics",
        "y()Z": "isNoPhysics",
        "q(Z)V": "setShotFromCrossbow"
      }
    },
    "net/minecraft/world/entity/projectile/EntityArrow$PickupStatus": {
      "fields": {
        "a": "DISALLOWED",
        "b": "ALLOWED",
        "c": "CREATIVE_ONLY",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/entity/projectile/AbstractArrow$Pickup;": "byOrdinal"
      }
    },
    "net/minecraft/world/entity/projectile/EntityFireball": {
      "fields": {
        "b": "xPower",
        "c": "yPower",
        "d": "zPower"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "l()V": "tick",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canHitEntity",
        "aa_()Z": "shouldBurn",
        "k()Lnet/minecraft/core/particles/ParticleOptions;": "getTrailParticle",
        "o()F": "getInertia",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "bo()Z": "isPickable",
        "bC()F": "getPickRadius",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "bj()F": "getLightLevelDependentMagicValue",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket"
      }
    },
    "net/minecraft/world/entity/projectile/EntityTippedArrow": {
      "fields": {
        "f": "EXPOSED_POTION_DECAY_TIME",
        "g": "NO_EFFECT_COLOR",
        "h": "ID_EFFECT_COLOR",
        "i": "EVENT_POTION_PUFF",
        "j": "potion",
        "k": "effects",
        "l": "fixedColor"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setEffectsFromItem",
        "c(Lnet/minecraft/world/item/ItemStack;)I": "getCustomColor",
        "D()V": "updateColor",
        "a(Lnet/minecraft/world/effect/MobEffectInstance;)V": "addEffect",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "c(I)V": "makeParticle",
        "z()I": "getColor",
        "d(I)V": "setFixedColor",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "doPostHurtEffects",
        "p()Lnet/minecraft/world/item/ItemStack;": "getPickupItem",
        "b(B)V": "handleEntityEvent"
      }
    },
    "net/minecraft/world/entity/projectile/EntityDragonFireball": {
      "fields": {
        "e": "SPLASH_RANGE"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "bo()Z": "isPickable",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "k()Lnet/minecraft/core/particles/ParticleOptions;": "getTrailParticle",
        "aa_()Z": "shouldBurn"
      }
    },
    "net/minecraft/world/entity/projectile/EntityEvokerFangs": {
      "fields": {
        "b": "ATTACK_DURATION",
        "c": "LIFE_OFFSET",
        "d": "ATTACK_TRIGGER_TICKS",
        "e": "warmupDelayTicks",
        "f": "sentSpikeEvent",
        "g": "lifeTicks",
        "h": "clientSideAttackStarted",
        "i": "owner",
        "j": "ownerUUID"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "setOwner",
        "j()Lnet/minecraft/world/entity/LivingEntity;": "getOwner",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "l()V": "tick",
        "c(Lnet/minecraft/world/entity/LivingEntity;)V": "dealDamageTo",
        "b(B)V": "handleEntityEvent",
        "a(F)F": "getAnimationProgress",
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner"
      }
    },
    "net/minecraft/world/entity/projectile/EntityEnderSignal": {
      "fields": {
        "b": "DATA_ITEM_STACK",
        "c": "tx",
        "d": "ty",
        "e": "tz",
        "f": "life",
        "g": "surviveAfterDeath"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setItem",
        "k()Lnet/minecraft/world/item/ItemStack;": "getItemRaw",
        "j()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a_()V": "defineSynchedData",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "a(Lnet/minecraft/core/BlockPos;)V": "signalTo",
        "l(DDD)V": "lerpMotion",
        "l()V": "tick",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "bj()F": "getLightLevelDependentMagicValue",
        "cn()Z": "isAttackable"
      }
    },
    "net/minecraft/world/entity/projectile/EntityFireballFireball": {
      "fields": {
        "e": "DATA_ITEM_STACK"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setItem",
        "p()Lnet/minecraft/world/item/ItemStack;": "getItemRaw",
        "j()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData"
      }
    },
    "net/minecraft/world/entity/projectile/EntityFireworks": {
      "fields": {
        "b": "DATA_ID_FIREWORKS_ITEM",
        "c": "DATA_ATTACHED_TO_TARGET",
        "d": "DATA_SHOT_AT_ANGLE",
        "e": "life",
        "f": "lifetime",
        "g": "attachedToEntity"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "k(DDD)Z": "shouldRender",
        "l()V": "tick",
        "o()V": "explode",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "p()Z": "hasExplosion",
        "q()V": "dealExplosionDamage",
        "r()Z": "isAttachedToEntity",
        "k()Z": "isShotAtAngle",
        "b(B)V": "handleEntityEvent",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "j()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "cn()Z": "isAttackable"
      }
    },
    "net/minecraft/world/entity/projectile/EntityFishingHook": {
      "fields": {
        "b": "LOGGER",
        "c": "syncronizedRandom",
        "d": "biting",
        "e": "outOfWaterTime",
        "f": "MAX_OUT_OF_WATER_TIME",
        "g": "DATA_HOOKED_ENTITY",
        "h": "DATA_BITING",
        "i": "life",
        "j": "nibble",
        "k": "timeUntilLured",
        "l": "timeUntilHooked",
        "m": "fishAngle",
        "n": "openWater",
        "o": "hookedIn",
        "p": "currentState",
        "q": "luck",
        "r": "lureSpeed"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "a(DDDFFIZ)V": "lerpTo",
        "l()V": "tick",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "shouldStopFishing",
        "p()V": "checkCollision",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canHitEntity",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "x(Lnet/minecraft/world/entity/Entity;)V": "setHookedEntity",
        "a(Lnet/minecraft/core/BlockPos;)V": "catchingFish",
        "b(Lnet/minecraft/core/BlockPos;)Z": "calculateOpenWater",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/projectile/FishingHook$OpenWaterType;": "getOpenWaterTypeForArea",
        "c(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/projectile/FishingHook$OpenWaterType;": "getOpenWaterTypeForBlock",
        "j()Z": "isOpenWaterFishing",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/item/ItemStack;)I": "retrieve",
        "b(B)V": "handleEntityEvent",
        "c(Lnet/minecraft/world/entity/Entity;)V": "pullEntity",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "ak()V": "onClientRemoval",
        "b(Lnet/minecraft/world/entity/Entity;)V": "setOwner",
        "a(Lnet/minecraft/world/entity/projectile/FishingHook;)V": "updateOwnerInfo",
        "k()Lnet/minecraft/world/entity/player/Player;": "getPlayerOwner",
        "o()Lnet/minecraft/world/entity/Entity;": "getHookedIn",
        "cq()Z": "canChangeDimensions",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket"
      }
    },
    "net/minecraft/world/entity/projectile/EntityFishingHook$HookState": {
      "fields": {
        "a": "FLYING",
        "b": "HOOKED_IN_ENTITY",
        "c": "BOBBING",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/projectile/EntityFishingHook$WaterPosition": {
      "fields": {
        "a": "ABOVE_WATER",
        "b": "INSIDE_WATER",
        "c": "INVALID",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/projectile/ItemSupplier": {
      "methods": {
        "j()Lnet/minecraft/world/item/ItemStack;": "getItem"
      }
    },
    "net/minecraft/world/entity/projectile/EntityLargeFireball": {
      "fields": {
        "e": "explosionPower"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData"
      }
    },
    "net/minecraft/world/entity/projectile/EntityLlamaSpit": {
      "methods": {
        "l()V": "tick",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket"
      }
    },
    "net/minecraft/world/entity/projectile/IProjectile": {
      "fields": {
        "b": "ownerUUID",
        "c": "cachedOwner",
        "d": "leftOwner",
        "e": "hasBeenShot"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/Entity;)V": "setOwner",
        "v()Lnet/minecraft/world/entity/Entity;": "getOwner",
        "A()Lnet/minecraft/world/entity/Entity;": "getEffectSource",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "d(Lnet/minecraft/world/entity/Entity;)Z": "ownedBy",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "l()V": "tick",
        "k()Z": "checkLeftOwner",
        "c(DDDFF)V": "shoot",
        "a(Lnet/minecraft/world/entity/Entity;FFFFF)V": "shootFromRotation",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "l(DDD)V": "lerpMotion",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canHitEntity",
        "C()V": "updateRotation",
        "d(FF)F": "lerpRotation",
        "S()Lnet/minecraft/network/protocol/Packet;": "getAddEntityPacket",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "mayInteract"
      }
    },
    "net/minecraft/world/entity/projectile/ProjectileHelper": {
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/function/Predicate;)Lnet/minecraft/world/phys/HitResult;": "getHitResultOnMoveVector",
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/function/Predicate;D)Lnet/minecraft/world/phys/HitResult;": "getHitResultOnViewVector",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;Ljava/util/function/Predicate;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/phys/HitResult;": "getHitResult",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;D)Lnet/minecraft/world/phys/EntityHitResult;": "getEntityHitResult",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Lnet/minecraft/world/phys/EntityHitResult;": "getEntityHitResult",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;F)Lnet/minecraft/world/phys/EntityHitResult;": "getEntityHitResult",
        "a(Lnet/minecraft/world/entity/Entity;F)V": "rotateTowardsMovement",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/InteractionHand;": "getWeaponHoldingHand",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "getMobArrow"
      }
    },
    "net/minecraft/world/entity/projectile/EntityShulkerBullet": {
      "fields": {
        "b": "SPEED",
        "c": "finalTarget",
        "d": "currentMoveDirection",
        "e": "flightSteps",
        "f": "targetDeltaX",
        "g": "targetDeltaY",
        "h": "targetDeltaZ",
        "i": "targetId"
      },
      "methods": {
        "cY()Lnet/minecraft/sounds/SoundSource;": "getSoundSource",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a_()V": "defineSynchedData",
        "j()Lnet/minecraft/core/Direction;": "getMoveDirection",
        "a(Lnet/minecraft/core/Direction;)V": "setMoveDirection",
        "a(Lnet/minecraft/core/Direction$Axis;)V": "selectNextMoveDirection",
        "du()V": "checkDespawn",
        "l()V": "tick",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canHitEntity",
        "bL()Z": "isOnFire",
        "a(D)Z": "shouldRenderAtSqrDistance",
        "bj()F": "getLightLevelDependentMagicValue",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "k()V": "destroy",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "bo()Z": "isPickable",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V": "recreateFromPacket"
      }
    },
    "net/minecraft/world/entity/projectile/EntitySmallFireball": {
      "methods": {
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "bo()Z": "isPickable",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt"
      }
    },
    "net/minecraft/world/entity/projectile/EntitySnowball": {
      "methods": {
        "k()Lnet/minecraft/world/item/Item;": "getDefaultItem",
        "q()Lnet/minecraft/core/particles/ParticleOptions;": "getParticle",
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit"
      }
    },
    "net/minecraft/world/entity/projectile/EntitySpectralArrow": {
      "fields": {
        "f": "duration"
      },
      "methods": {
        "l()V": "tick",
        "p()Lnet/minecraft/world/item/ItemStack;": "getPickupItem",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "doPostHurtEffects",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData"
      }
    },
    "net/minecraft/world/entity/projectile/EntityProjectileThrowable": {
      "fields": {
        "b": "DATA_ITEM_STACK"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setItem",
        "k()Lnet/minecraft/world/item/Item;": "getDefaultItem",
        "o()Lnet/minecraft/world/item/ItemStack;": "getItemRaw",
        "j()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a_()V": "defineSynchedData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData"
      }
    },
    "net/minecraft/world/entity/projectile/EntityProjectile": {
      "methods": {
        "a(D)Z": "shouldRenderAtSqrDistance",
        "l()V": "tick",
        "p()F": "getGravity"
      }
    },
    "net/minecraft/world/entity/projectile/EntityEgg": {
      "methods": {
        "b(B)V": "handleEntityEvent",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "k()Lnet/minecraft/world/item/Item;": "getDefaultItem"
      }
    },
    "net/minecraft/world/entity/projectile/EntityEnderPearl": {
      "methods": {
        "k()Lnet/minecraft/world/item/Item;": "getDefaultItem",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "l()V": "tick",
        "b(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;": "changeDimension"
      }
    },
    "net/minecraft/world/entity/projectile/EntityThrownExpBottle": {
      "methods": {
        "k()Lnet/minecraft/world/item/Item;": "getDefaultItem",
        "p()F": "getGravity",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit"
      }
    },
    "net/minecraft/world/entity/projectile/EntityPotion": {
      "fields": {
        "b": "SPLASH_RANGE",
        "d": "SPLASH_RANGE_SQ",
        "c": "WATER_SENSITIVE_OR_ON_FIRE"
      },
      "methods": {
        "k()Lnet/minecraft/world/item/Item;": "getDefaultItem",
        "p()F": "getGravity",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)V": "onHitBlock",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "q()V": "applyWater",
        "a(Ljava/util/List;Lnet/minecraft/world/entity/Entity;)V": "applySplash",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/alchemy/Potion;)V": "makeAreaOfEffectCloud",
        "r()Z": "isLingering",
        "a(Lnet/minecraft/core/BlockPos;)V": "dowseFire"
      }
    },
    "net/minecraft/world/entity/projectile/EntityThrownTrident": {
      "fields": {
        "g": "ID_LOYALTY",
        "h": "ID_FOIL",
        "i": "tridentItem",
        "j": "dealtDamage",
        "f": "clientSideReturnTridentTickCount"
      },
      "methods": {
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "E()Z": "isAcceptibleReturnOwner",
        "p()Lnet/minecraft/world/item/ItemStack;": "getPickupItem",
        "z()Z": "isFoil",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/EntityHitResult;": "findHitEntity",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "D()Z": "isChanneling",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "tryPickup",
        "k()Lnet/minecraft/sounds/SoundEvent;": "getDefaultHitGroundSoundEvent",
        "b_(Lnet/minecraft/world/entity/player/Player;)V": "playerTouch",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "j()V": "tickDespawn",
        "x()F": "getWaterInertia",
        "k(DDD)Z": "shouldRender"
      }
    },
    "net/minecraft/world/entity/projectile/EntityWitherSkull": {
      "fields": {
        "e": "DATA_DANGEROUS"
      },
      "methods": {
        "o()F": "getInertia",
        "bL()Z": "isOnFire",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;F)F": "getBlockExplosionResistance",
        "a(Lnet/minecraft/world/phys/EntityHitResult;)V": "onHitEntity",
        "a(Lnet/minecraft/world/phys/HitResult;)V": "onHit",
        "bo()Z": "isPickable",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a_()V": "defineSynchedData",
        "p()Z": "isDangerous",
        "a(Z)V": "setDangerous",
        "aa_()Z": "shouldBurn"
      }
    },
    "net/minecraft/world/entity/raid/Raid": {
      "fields": {
        "h": "SECTION_RADIUS_FOR_FINDING_NEW_VILLAGE_CENTER",
        "i": "ATTEMPT_RAID_FARTHEST",
        "j": "ATTEMPT_RAID_CLOSE",
        "k": "ATTEMPT_RAID_INSIDE",
        "l": "VILLAGE_SEARCH_RADIUS",
        "m": "RAID_TIMEOUT_TICKS",
        "n": "NUM_SPAWN_ATTEMPTS",
        "o": "OMINOUS_BANNER_PATTERN_NAME",
        "p": "RAIDERS_REMAINING",
        "a": "VILLAGE_RADIUS_BUFFER",
        "q": "POST_RAID_TICK_LIMIT",
        "r": "DEFAULT_PRE_RAID_TICKS",
        "b": "MAX_NO_ACTION_TIME",
        "c": "MAX_CELEBRATION_TICKS",
        "s": "OUTSIDE_RAID_BOUNDS_TIMEOUT",
        "d": "TICKS_PER_DAY",
        "e": "DEFAULT_MAX_BAD_OMEN_LEVEL",
        "t": "LOW_MOB_THRESHOLD",
        "u": "RAID_NAME_COMPONENT",
        "v": "VICTORY",
        "w": "DEFEAT",
        "x": "RAID_BAR_VICTORY_COMPONENT",
        "y": "RAID_BAR_DEFEAT_COMPONENT",
        "z": "HERO_OF_THE_VILLAGE_DURATION",
        "f": "VALID_RAID_RADIUS_SQR",
        "g": "RAID_REMOVAL_THRESHOLD_SQR",
        "A": "groupToLeaderMap",
        "B": "groupRaiderMap",
        "C": "heroesOfTheVillage",
        "D": "ticksActive",
        "E": "center",
        "F": "level",
        "G": "started",
        "H": "id",
        "I": "totalHealth",
        "J": "badOmenLevel",
        "K": "active",
        "L": "groupsSpawned",
        "M": "raidEvent",
        "N": "postRaidTicks",
        "O": "raidCooldownTicks",
        "P": "random",
        "Q": "numGroups",
        "R": "status",
        "S": "celebrationTicks",
        "T": "waveSpawnPos"
      },
      "methods": {
        "a()Z": "isOver",
        "b()Z": "isBetweenWaves",
        "c()Z": "hasFirstWaveSpawned",
        "d()Z": "isStopped",
        "e()Z": "isVictory",
        "f()Z": "isLoss",
        "g()F": "getTotalHealth",
        "h()Ljava/util/Set;": "getAllRaiders",
        "i()Lnet/minecraft/world/level/Level;": "getLevel",
        "j()Z": "isStarted",
        "k()I": "getGroupsSpawned",
        "x()Ljava/util/function/Predicate;": "validPlayer",
        "y()V": "updatePlayers",
        "l()I": "getMaxBadOmenLevel",
        "m()I": "getBadOmenLevel",
        "a(I)V": "setBadOmenLevel",
        "a(Lnet/minecraft/world/entity/player/Player;)V": "absorbBadOmen",
        "n()V": "stop",
        "o()V": "tick",
        "z()V": "moveRaidCenterToNearbyVillageSection",
        "d(I)Ljava/util/Optional;": "getValidSpawnPos",
        "A()Z": "hasMoreWaves",
        "B()Z": "isFinalWave",
        "C()Z": "hasBonusWave",
        "D()Z": "hasSpawnedBonusWave",
        "E()Z": "shouldSpawnBonusGroup",
        "F()V": "updateRaiders",
        "a(Lnet/minecraft/core/BlockPos;)V": "playSound",
        "b(Lnet/minecraft/core/BlockPos;)V": "spawnGroup",
        "a(ILnet/minecraft/world/entity/raid/Raider;Lnet/minecraft/core/BlockPos;Z)V": "joinRaid",
        "p()V": "updateBossbar",
        "q()F": "getHealthOfLivingRaiders",
        "G()Z": "shouldSpawnGroup",
        "r()I": "getTotalRaidersAlive",
        "a(Lnet/minecraft/world/entity/raid/Raider;Z)V": "removeFromRaid",
        "H()V": "setDirty",
        "s()Lnet/minecraft/world/item/ItemStack;": "getLeaderBannerInstance",
        "b(I)Lnet/minecraft/world/entity/raid/Raider;": "getLeader",
        "a(II)Lnet/minecraft/core/BlockPos;": "findRandomSpawnPos",
        "b(ILnet/minecraft/world/entity/raid/Raider;)Z": "addWaveMob",
        "a(ILnet/minecraft/world/entity/raid/Raider;Z)Z": "addWaveMob",
        "a(ILnet/minecraft/world/entity/raid/Raider;)V": "setLeader",
        "c(I)V": "removeLeader",
        "t()Lnet/minecraft/core/BlockPos;": "getCenter",
        "c(Lnet/minecraft/core/BlockPos;)V": "setCenter",
        "u()I": "getId",
        "a(Lnet/minecraft/world/entity/raid/Raid$RaiderType;IZ)I": "getDefaultNumSpawns",
        "a(Lnet/minecraft/world/entity/raid/Raid$RaiderType;Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/DifficultyInstance;Z)I": "getPotentialBonusSpawns",
        "v()Z": "isActive",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/world/Difficulty;)I": "getNumGroups",
        "w()F": "getEnchantOdds",
        "a(Lnet/minecraft/world/entity/Entity;)V": "addHeroOfTheVillage"
      }
    },
    "net/minecraft/world/entity/raid/Raid$Status": {
      "fields": {
        "a": "ONGOING",
        "b": "VICTORY",
        "c": "LOSS",
        "d": "STOPPED",
        "e": "VALUES",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/raid/Raid$RaidStatus;": "getByName",
        "a()Ljava/lang/String;": "getName"
      }
    },
    "net/minecraft/world/entity/raid/Raid$Wave": {
      "fields": {
        "a": "VINDICATOR",
        "b": "EVOKER",
        "c": "PILLAGER",
        "d": "WITCH",
        "e": "RAVAGER",
        "f": "VALUES",
        "g": "entityType",
        "h": "spawnsPerWaveBeforeBonus",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/raid/EntityRaider": {
      "fields": {
        "c": "IS_CELEBRATING",
        "b": "ALLOWED_ITEMS",
        "d": "raid",
        "e": "wave",
        "bT": "canJoinRaid",
        "bU": "ticksOutsideRaid"
      },
      "methods": {
        "x()V": "registerGoals",
        "a_()V": "defineSynchedData",
        "a(IZ)V": "applyRaidBuffs",
        "gl()Z": "canJoinRaid",
        "z(Z)V": "setCanJoinRaid",
        "b_()V": "aiStep",
        "gd()V": "updateNoActionTime",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "die",
        "gf()Z": "canJoinPatrol",
        "a(Lnet/minecraft/world/entity/raid/Raid;)V": "setCurrentRaid",
        "gm()Lnet/minecraft/world/entity/raid/Raid;": "getCurrentRaid",
        "gn()Z": "hasActiveRaid",
        "b(I)V": "setWave",
        "go()I": "getWave",
        "gp()Z": "isCelebrating",
        "A(Z)V": "setCelebrating",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/world/entity/item/ItemEntity;)V": "pickUpItem",
        "h(D)Z": "removeWhenFarAway",
        "T()Z": "requiresCustomPersistence",
        "gq()I": "getTicksOutsideRaid",
        "c(I)V": "setTicksOutsideRaid",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;": "finalizeSpawn",
        "Y_()Lnet/minecraft/sounds/SoundEvent;": "getCelebrateSound",
        "b(Lnet/minecraft/world/entity/raid/Raider;)F": "access$100",
        "f(Lnet/minecraft/world/entity/raid/Raider;)Lnet/minecraft/util/RandomSource;": "access$500"
      }
    },
    "net/minecraft/world/entity/raid/PersistentRaid": {
      "fields": {
        "a": "RAID_FILE_ID",
        "b": "raidMap",
        "c": "level",
        "d": "nextAvailableID",
        "e": "tick"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/entity/raid/Raid;": "get",
        "a()V": "tick",
        "a(Lnet/minecraft/world/entity/raid/Raider;Lnet/minecraft/world/entity/raid/Raid;)Z": "canJoinRaid",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/world/entity/raid/Raid;": "createOrExtendRaid",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/raid/Raid;": "getOrCreateRaid",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/raid/Raids;": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/core/Holder;)Ljava/lang/String;": "getFileId",
        "d()I": "getUniqueId",
        "a(Lnet/minecraft/core/BlockPos;I)Lnet/minecraft/world/entity/raid/Raid;": "getNearbyRaid"
      }
    },
    "net/minecraft/world/entity/schedule/Activity": {
      "fields": {
        "a": "CORE",
        "b": "IDLE",
        "c": "WORK",
        "d": "PLAY",
        "e": "REST",
        "f": "MEET",
        "g": "PANIC",
        "h": "RAID",
        "i": "PRE_RAID",
        "j": "HIDE",
        "k": "FIGHT",
        "l": "CELEBRATE",
        "m": "ADMIRE_ITEM",
        "n": "AVOID",
        "o": "RIDE",
        "p": "PLAY_DEAD",
        "q": "LONG_JUMP",
        "r": "RAM",
        "s": "TONGUE",
        "t": "SWIM",
        "u": "LAY_SPAWN",
        "v": "SNIFF",
        "w": "INVESTIGATE",
        "x": "ROAR",
        "y": "EMERGE",
        "z": "DIG",
        "A": "name",
        "B": "hashCode"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/schedule/Activity;": "register"
      }
    },
    "net/minecraft/world/entity/schedule/ActivityFrame": {
      "fields": {
        "a": "timeStamp",
        "b": "value"
      },
      "methods": {
        "a()I": "getTimeStamp",
        "b()F": "getValue"
      }
    },
    "net/minecraft/world/entity/schedule/Schedule": {
      "fields": {
        "a": "WORK_START_TIME",
        "b": "TOTAL_WORK_TIME",
        "c": "EMPTY",
        "d": "SIMPLE",
        "e": "VILLAGER_BABY",
        "f": "VILLAGER_DEFAULT",
        "g": "timelines"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/schedule/ScheduleBuilder;": "register",
        "a(Lnet/minecraft/world/entity/schedule/Activity;)V": "ensureTimelineExistsFor",
        "b(Lnet/minecraft/world/entity/schedule/Activity;)Lnet/minecraft/world/entity/schedule/Timeline;": "getTimelineFor",
        "c(Lnet/minecraft/world/entity/schedule/Activity;)Ljava/util/List;": "getAllTimelinesExceptFor",
        "a(I)Lnet/minecraft/world/entity/schedule/Activity;": "getActivityAt",
        "a(ILjava/util/Map$Entry;)D": "lambda$getActivityAt$1",
        "a(Lnet/minecraft/world/entity/schedule/Activity;Ljava/util/Map$Entry;)Z": "lambda$getAllTimelinesExceptFor$0"
      }
    },
    "net/minecraft/world/entity/schedule/ScheduleBuilder": {
      "fields": {
        "a": "schedule",
        "b": "transitions"
      },
      "methods": {
        "a(ILnet/minecraft/world/entity/schedule/Activity;)Lnet/minecraft/world/entity/schedule/ScheduleBuilder;": "changeActivityAt",
        "a()Lnet/minecraft/world/entity/schedule/Schedule;": "build",
        "a(Lnet/minecraft/world/entity/schedule/ScheduleBuilder$ActivityTransition;)V": "lambda$build$1",
        "a(Lnet/minecraft/world/entity/schedule/ScheduleBuilder$ActivityTransition;Lnet/minecraft/world/entity/schedule/Timeline;)V": "lambda$build$0"
      }
    },
    "net/minecraft/world/entity/schedule/ScheduleActivity": {
      "fields": {
        "a": "keyframes",
        "b": "previousIndex"
      },
      "methods": {
        "a()Lcom/google/common/collect/ImmutableList;": "getKeyframes",
        "a(IF)Lnet/minecraft/world/entity/schedule/Timeline;": "addKeyframe",
        "a(Ljava/util/Collection;)Lnet/minecraft/world/entity/schedule/Timeline;": "addKeyframes",
        "b()V": "sortAndDeduplicateKeyframes",
        "a(I)F": "getValueAt",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectSortedMap;Lnet/minecraft/world/entity/schedule/Keyframe;)V": "lambda$sortAndDeduplicateKeyframes$0"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartAbstract": {
      "fields": {
        "c": "DATA_ID_HURT",
        "d": "DATA_ID_HURTDIR",
        "e": "DATA_ID_DAMAGE",
        "f": "DATA_ID_DISPLAY_BLOCK",
        "g": "DATA_ID_DISPLAY_OFFSET",
        "h": "DATA_ID_CUSTOM_DISPLAY",
        "i": "POSE_DISMOUNT_HEIGHTS",
        "b": "WATER_SLOWDOWN_FACTOR",
        "j": "flipped",
        "k": "onRails",
        "l": "EXITS",
        "m": "lSteps",
        "n": "lx",
        "o": "ly",
        "p": "lz",
        "q": "lyr",
        "r": "lxr",
        "s": "lxd",
        "t": "lyd",
        "u": "lzd"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;DDDLnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;)Lnet/minecraft/world/entity/vehicle/AbstractMinecart;": "createMinecart",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a_()V": "defineSynchedData",
        "h(Lnet/minecraft/world/entity/Entity;)Z": "canCollideWith",
        "bp()Z": "isPushable",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/BlockUtil$FoundRectangle;)Lnet/minecraft/world/phys/Vec3;": "getRelativePortalPosition",
        "bx()D": "getPassengersRidingOffset",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationForPassenger",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "aH()F": "getBlockSpeedFactor",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "destroy",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "m(F)V": "animateHurt",
        "bo()Z": "isPickable",
        "a(Lnet/minecraft/world/level/block/state/properties/RailShape;)Lcom/mojang/datafixers/util/Pair;": "exits",
        "cC()Lnet/minecraft/core/Direction;": "getMotionDirection",
        "l()V": "tick",
        "k()D": "getMaxSpeed",
        "a(IIIZ)V": "activateMinecart",
        "o()V": "comeOffTrack",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "moveAlongTrack",
        "cc()Z": "isOnRails",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isRedstoneConductor",
        "p()V": "applyNaturalSlowdown",
        "a(DDDD)Lnet/minecraft/world/phys/Vec3;": "getPosOffs",
        "q(DDD)Lnet/minecraft/world/phys/Vec3;": "getPos",
        "j_()Lnet/minecraft/world/phys/AABB;": "getBoundingBoxForCulling",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "g(Lnet/minecraft/world/entity/Entity;)V": "push",
        "a(DDDFFIZ)V": "lerpTo",
        "l(DDD)V": "lerpMotion",
        "a(F)V": "setDamage",
        "q()F": "getDamage",
        "c(I)V": "setHurtTime",
        "r()I": "getHurtTime",
        "d(I)V": "setHurtDir",
        "s()I": "getHurtDir",
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "v()Lnet/minecraft/world/level/block/state/BlockState;": "getDisplayBlockState",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState",
        "x()I": "getDisplayOffset",
        "y()I": "getDefaultDisplayOffset",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)V": "setDisplayBlockState",
        "m(I)V": "setDisplayOffset",
        "z()Z": "hasCustomDisplay",
        "a(Z)V": "setCustomDisplay",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "a(Ljava/util/EnumMap;)V": "lambda$static$2",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$getDismountLocationForPassenger$1",
        "a(Lnet/minecraft/core/BlockPos$MutableBlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$getDismountLocationForPassenger$0"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartAbstract$EnumMinecartType": {
      "fields": {
        "a": "RIDEABLE",
        "b": "CHEST",
        "c": "FURNACE",
        "d": "TNT",
        "e": "SPAWNER",
        "f": "HOPPER",
        "g": "COMMAND_BLOCK",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartContainer": {
      "fields": {
        "c": "itemStacks",
        "d": "lootTable",
        "e": "lootTableSeed"
      },
      "methods": {
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "destroy",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "p()V": "applyNaturalSlowdown",
        "a()V": "clearContent",
        "a(Lnet/minecraft/resources/ResourceLocation;J)V": "setLootTable",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu",
        "A()Lnet/minecraft/resources/ResourceLocation;": "getLootTable",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "setLootTable",
        "C()J": "getLootTableSeed",
        "a(J)V": "setLootTableSeed",
        "D()Lnet/minecraft/core/NonNullList;": "getItemStacks",
        "E()V": "clearItemStacks"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityBoat": {
      "fields": {
        "f": "DATA_ID_HURT",
        "g": "DATA_ID_HURTDIR",
        "h": "DATA_ID_DAMAGE",
        "i": "DATA_ID_TYPE",
        "j": "DATA_ID_PADDLE_LEFT",
        "k": "DATA_ID_PADDLE_RIGHT",
        "l": "DATA_ID_BUBBLE_TIME",
        "b": "PADDLE_LEFT",
        "c": "PADDLE_RIGHT",
        "m": "TIME_TO_EJECT",
        "n": "PADDLE_SPEED",
        "d": "PADDLE_SOUND_TIME",
        "e": "BUBBLE_TIME",
        "o": "paddlePositions",
        "p": "invFriction",
        "q": "outOfControlTicks",
        "r": "deltaRotation",
        "s": "lerpSteps",
        "t": "lerpX",
        "u": "lerpY",
        "aD": "lerpZ",
        "aE": "lerpYRot",
        "aF": "lerpXRot",
        "aG": "inputLeft",
        "aH": "inputRight",
        "aI": "inputUp",
        "aJ": "inputDown",
        "aK": "waterLevel",
        "aL": "landFriction",
        "aM": "status",
        "aN": "oldStatus",
        "aO": "lastYd",
        "aP": "isAboveBubbleColumn",
        "aQ": "bubbleColumnDirectionIsDown",
        "aR": "bubbleMultiplier",
        "aS": "bubbleAngle",
        "aT": "bubbleAngleO"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F": "getEyeHeight",
        "aS()Lnet/minecraft/world/entity/Entity$MovementEmission;": "getMovementEmission",
        "a_()V": "defineSynchedData",
        "h(Lnet/minecraft/world/entity/Entity;)Z": "canCollideWith",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Z": "canVehicleCollide",
        "bu()Z": "canBeCollidedWith",
        "bp()Z": "isPushable",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/BlockUtil$FoundRectangle;)Lnet/minecraft/world/phys/Vec3;": "getRelativePortalPosition",
        "bx()D": "getPassengersRidingOffset",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "destroy",
        "k(Z)V": "onAboveBubbleCol",
        "g(Lnet/minecraft/world/entity/Entity;)V": "push",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "m(F)V": "animateHurt",
        "bo()Z": "isPickable",
        "a(DDDFFIZ)V": "lerpTo",
        "cC()Lnet/minecraft/core/Direction;": "getMotionDirection",
        "l()V": "tick",
        "x()V": "tickBubbleColumn",
        "k()Lnet/minecraft/sounds/SoundEvent;": "getPaddleSound",
        "y()V": "tickLerp",
        "a(ZZ)V": "setPaddleState",
        "a(IF)F": "getRowingTime",
        "z()Lnet/minecraft/world/entity/vehicle/Boat$Status;": "getStatus",
        "o()F": "getWaterLevelAbove",
        "p()F": "getGroundFriction",
        "A()Z": "checkInWater",
        "C()Lnet/minecraft/world/entity/vehicle/Boat$Status;": "isUnderwater",
        "D()V": "floatBoat",
        "E()V": "controlBoat",
        "q()F": "getSinglePassengerXOffset",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "hasEnoughSpaceFor",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V": "positionRider",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;": "getDismountLocationForPassenger",
        "b(Lnet/minecraft/world/entity/Entity;)V": "clampRotation",
        "j(Lnet/minecraft/world/entity/Entity;)V": "onPassengerTurned",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "a(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "checkFallDamage",
        "c(I)Z": "getPaddleState",
        "a(F)V": "setDamage",
        "r()F": "getDamage",
        "d(I)V": "setHurtTime",
        "s()I": "getHurtTime",
        "b(I)V": "setBubbleTime",
        "F()I": "getBubbleTime",
        "s(F)F": "getBubbleAngle",
        "m(I)V": "setHurtDir",
        "t()I": "getHurtDir",
        "a(Lnet/minecraft/world/entity/vehicle/Boat$Type;)V": "setVariant",
        "v()Lnet/minecraft/world/entity/vehicle/Boat$Type;": "getVariant",
        "o(Lnet/minecraft/world/entity/Entity;)Z": "canAddPassenger",
        "w()I": "getMaxPassengers",
        "cL()Lnet/minecraft/world/entity/LivingEntity;": "getControllingPassenger",
        "a(ZZZZ)V": "setInput",
        "aZ()Z": "isUnderWater",
        "dv()Lnet/minecraft/world/item/ItemStack;": "getPickResult",
        "c()Ljava/lang/Object;": "getVariant",
        "a(Ljava/lang/Object;)V": "setVariant"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityBoat$EnumStatus": {
      "fields": {
        "a": "IN_WATER",
        "b": "UNDER_WATER",
        "c": "UNDER_FLOWING_WATER",
        "d": "ON_LAND",
        "e": "IN_AIR",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityBoat$EnumBoatType": {
      "fields": {
        "a": "OAK",
        "b": "SPRUCE",
        "c": "BIRCH",
        "d": "JUNGLE",
        "e": "ACACIA",
        "f": "CHERRY",
        "g": "DARK_OAK",
        "h": "MANGROVE",
        "i": "BAMBOO",
        "k": "name",
        "l": "planks",
        "j": "CODEC",
        "m": "BY_ID",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Ljava/lang/String;": "getName",
        "b()Lnet/minecraft/world/level/block/Block;": "getPlanks",
        "a(I)Lnet/minecraft/world/entity/vehicle/Boat$Type;": "byId",
        "a(Ljava/lang/String;)Lnet/minecraft/world/entity/vehicle/Boat$Type;": "byName"
      }
    },
    "net/minecraft/world/entity/vehicle/ChestBoat": {
      "fields": {
        "f": "CONTAINER_SIZE",
        "g": "itemStacks",
        "h": "lootTable",
        "i": "lootTableSeed"
      },
      "methods": {
        "q()F": "getSinglePassengerXOffset",
        "w()I": "getMaxPassengers",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "destroy",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "remove",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "openCustomInventoryScreen",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "a()V": "clearContent",
        "b()I": "getContainerSize",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a_(I)Lnet/minecraft/world/entity/SlotAccess;": "getSlot",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "e(Lnet/minecraft/world/entity/player/Player;)V": "unpackLootTable",
        "A()Lnet/minecraft/resources/ResourceLocation;": "getLootTable",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "setLootTable",
        "C()J": "getLootTableSeed",
        "a(J)V": "setLootTableSeed",
        "D()Lnet/minecraft/core/NonNullList;": "getItemStacks",
        "E()V": "clearItemStacks",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen"
      }
    },
    "net/minecraft/world/entity/vehicle/ContainerEntity": {
      "methods": {
        "dg()Lnet/minecraft/world/phys/Vec3;": "position",
        "A()Lnet/minecraft/resources/ResourceLocation;": "getLootTable",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "setLootTable",
        "C()J": "getLootTableSeed",
        "a(J)V": "setLootTableSeed",
        "D()Lnet/minecraft/core/NonNullList;": "getItemStacks",
        "E()V": "clearItemStacks",
        "dI()Lnet/minecraft/world/level/Level;": "level",
        "dD()Z": "isRemoved",
        "ab_()Z": "isEmpty",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "addChestVehicleSaveData",
        "b_(Lnet/minecraft/nbt/CompoundTag;)V": "readChestVehicleSaveData",
        "a(Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;)V": "chestVehicleDestroyed",
        "c_(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/InteractionResult;": "interactWithContainerVehicle",
        "f(Lnet/minecraft/world/entity/player/Player;)V": "unpackChestVehicleLootTable",
        "f()V": "clearChestVehicleContent",
        "g()Z": "isChestVehicleEmpty",
        "e_(I)Lnet/minecraft/world/item/ItemStack;": "removeChestVehicleItemNoUpdate",
        "f_(I)Lnet/minecraft/world/item/ItemStack;": "getChestVehicleItem",
        "b(II)Lnet/minecraft/world/item/ItemStack;": "removeChestVehicleItem",
        "c(ILnet/minecraft/world/item/ItemStack;)V": "setChestVehicleItem",
        "g_(I)Lnet/minecraft/world/entity/SlotAccess;": "getChestVehicleSlot",
        "g(Lnet/minecraft/world/entity/player/Player;)Z": "isChestVehicleStillValid"
      }
    },
    "net/minecraft/world/entity/vehicle/DismountUtil": {
      "methods": {
        "a(Lnet/minecraft/core/Direction;)[[I": "offsetsForDirection",
        "a(D)Z": "isBlockFloorValid",
        "a(Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/phys/AABB;)Z": "canDismountTo",
        "a(Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Pose;)Z": "canDismountTo",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "nonClimbableShape",
        "a(Lnet/minecraft/core/BlockPos;ILjava/util/function/Function;)D": "findCeilingFrom",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/phys/Vec3;": "findSafeDismountLocation",
        "a(Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$findSafeDismountLocation$0"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartRideable": {
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "a(IIIZ)V": "activateMinecart",
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartChest": {
      "methods": {
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "b()I": "getContainerSize",
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState",
        "y()I": "getDefaultDisplayOffset",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartCommandBlock": {
      "fields": {
        "c": "DATA_ID_COMMAND_NAME",
        "d": "DATA_ID_LAST_OUTPUT",
        "e": "commandBlock",
        "f": "ACTIVATION_DELAY",
        "g": "lastActivated"
      },
      "methods": {
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "a_()V": "defineSynchedData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState",
        "A()Lnet/minecraft/world/level/BaseCommandBlock;": "getCommandBlock",
        "a(IIIZ)V": "activateMinecart",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "a(Lnet/minecraft/network/syncher/EntityDataAccessor;)V": "onSyncedDataUpdated",
        "cK()Z": "onlyOpCanSetNbt"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartFurnace": {
      "fields": {
        "e": "DATA_ID_FUEL",
        "f": "fuel",
        "c": "xPush",
        "d": "zPush",
        "g": "INGREDIENT"
      },
      "methods": {
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "a_()V": "defineSynchedData",
        "l()V": "tick",
        "k()D": "getMaxSpeed",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "moveAlongTrack",
        "p()V": "applyNaturalSlowdown",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interact",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "A()Z": "hasFuel",
        "p(Z)V": "setHasFuel",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartHopper": {
      "fields": {
        "f": "enabled"
      },
      "methods": {
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState",
        "y()I": "getDefaultDisplayOffset",
        "b()I": "getContainerSize",
        "a(IIIZ)V": "activateMinecart",
        "F()Z": "isEnabled",
        "p(Z)V": "setEnabled",
        "G()D": "getLevelX",
        "I()D": "getLevelY",
        "J()D": "getLevelZ",
        "l()V": "tick",
        "K()Z": "suckInItems",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartMobSpawner": {
      "fields": {
        "c": "spawner",
        "d": "ticker"
      },
      "methods": {
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "b(Lnet/minecraft/world/level/Level;)Ljava/lang/Runnable;": "createTicker",
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "b(B)V": "handleEntityEvent",
        "l()V": "tick",
        "A()Lnet/minecraft/world/level/BaseSpawner;": "getSpawner",
        "cK()Z": "onlyOpCanSetNbt",
        "c(Lnet/minecraft/world/level/Level;)V": "lambda$createTicker$1",
        "d(Lnet/minecraft/world/level/Level;)V": "lambda$createTicker$0"
      }
    },
    "net/minecraft/world/entity/vehicle/EntityMinecartTNT": {
      "fields": {
        "c": "EVENT_PRIME",
        "d": "fuse"
      },
      "methods": {
        "t()Lnet/minecraft/world/entity/vehicle/AbstractMinecart$Type;": "getMinecartType",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultDisplayBlockState",
        "l()V": "tick",
        "a(Lnet/minecraft/world/damagesource/DamageSource;F)Z": "hurt",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)V": "destroy",
        "j()Lnet/minecraft/world/item/Item;": "getDropItem",
        "h(D)V": "explode",
        "a(Lnet/minecraft/world/damagesource/DamageSource;D)V": "explode",
        "a(FFLnet/minecraft/world/damagesource/DamageSource;)Z": "causeFallDamage",
        "a(IIIZ)V": "activateMinecart",
        "b(B)V": "handleEntityEvent",
        "A()V": "primeFuse",
        "C()I": "getFuse",
        "D()Z": "isPrimed",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;F)F": "getBlockExplosionResistance",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;F)Z": "shouldBlockExplode",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData"
      }
    },
    "net/minecraft/world/flag/FeatureElement": {
      "fields": {
        "bv": "FILTERED_REGISTRIES"
      },
      "methods": {
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;)Z": "isEnabled"
      }
    },
    "net/minecraft/world/flag/FeatureFlag": {
      "fields": {
        "a": "universe",
        "b": "mask"
      }
    },
    "net/minecraft/world/flag/FeatureFlagRegistry": {
      "fields": {
        "a": "LOGGER",
        "b": "universe",
        "c": "names",
        "d": "allFlags"
      },
      "methods": {
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;)Z": "isSubset",
        "a()Lnet/minecraft/world/flag/FeatureFlagSet;": "allFlags",
        "a(Ljava/lang/Iterable;)Lnet/minecraft/world/flag/FeatureFlagSet;": "fromNames",
        "a([Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/flag/FeatureFlagSet;": "subset",
        "a(Ljava/lang/Iterable;Ljava/util/function/Consumer;)Lnet/minecraft/world/flag/FeatureFlagSet;": "fromNames",
        "b(Lnet/minecraft/world/flag/FeatureFlagSet;)Ljava/util/Set;": "toNames",
        "b()Lcom/mojang/serialization/Codec;": "codec",
        "c(Lnet/minecraft/world/flag/FeatureFlagSet;)Ljava/util/List;": "lambda$codec$4",
        "a(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$codec$3",
        "a(Ljava/util/Set;)Ljava/lang/String;": "lambda$codec$2",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;Ljava/util/Set;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/flag/FeatureFlag;)V": "lambda$toNames$1",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "lambda$fromNames$0"
      }
    },
    "net/minecraft/world/flag/FeatureFlagSet": {
      "fields": {
        "b": "EMPTY",
        "a": "MAX_CONTAINER_SIZE",
        "c": "universe",
        "d": "mask"
      },
      "methods": {
        "a(Lnet/minecraft/world/flag/FeatureFlagUniverse;Ljava/util/Collection;)Lnet/minecraft/world/flag/FeatureFlagSet;": "create",
        "a()Lnet/minecraft/world/flag/FeatureFlagSet;": "of",
        "a(Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/flag/FeatureFlagSet;": "of",
        "a(Lnet/minecraft/world/flag/FeatureFlag;[Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/flag/FeatureFlagSet;": "of",
        "a(Lnet/minecraft/world/flag/FeatureFlagUniverse;JLjava/lang/Iterable;)J": "computeMask",
        "b(Lnet/minecraft/world/flag/FeatureFlag;)Z": "contains",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;)Z": "isSubsetOf",
        "b(Lnet/minecraft/world/flag/FeatureFlagSet;)Lnet/minecraft/world/flag/FeatureFlagSet;": "join"
      }
    },
    "net/minecraft/world/flag/FeatureFlagUniverse": {
      "fields": {
        "a": "id"
      }
    },
    "net/minecraft/world/flag/FeatureFlags": {
      "fields": {
        "a": "VANILLA",
        "b": "BUNDLE",
        "c": "REGISTRY",
        "d": "CODEC",
        "e": "VANILLA_SET",
        "f": "DEFAULT_FLAGS"
      },
      "methods": {
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;Lnet/minecraft/world/flag/FeatureFlagSet;)Ljava/lang/String;": "printMissingFlags",
        "a(Lnet/minecraft/world/flag/FeatureFlagRegistry;Lnet/minecraft/world/flag/FeatureFlagSet;Lnet/minecraft/world/flag/FeatureFlagSet;)Ljava/lang/String;": "printMissingFlags",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;)Z": "isExperimental",
        "a(Ljava/util/Set;Lnet/minecraft/resources/ResourceLocation;)Z": "lambda$printMissingFlags$0"
      }
    },
    "net/minecraft/world/food/FoodMetaData": {
      "fields": {
        "a": "foodLevel",
        "b": "saturationLevel",
        "c": "exhaustionLevel",
        "d": "tickTimer",
        "e": "lastFoodLevel"
      },
      "methods": {
        "a(IF)V": "eat",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/ItemStack;)V": "eat",
        "a(Lnet/minecraft/world/entity/player/Player;)V": "tick",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "readAdditionalSaveData",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a()I": "getFoodLevel",
        "b()I": "getLastFoodLevel",
        "c()Z": "needsFood",
        "a(F)V": "addExhaustion",
        "d()F": "getExhaustionLevel",
        "e()F": "getSaturationLevel",
        "a(I)V": "setFoodLevel",
        "b(F)V": "setSaturation",
        "c(F)V": "setExhaustion"
      }
    },
    "net/minecraft/world/food/FoodInfo": {
      "fields": {
        "a": "nutrition",
        "b": "saturationModifier",
        "c": "isMeat",
        "d": "canAlwaysEat",
        "e": "fastFood",
        "f": "effects"
      },
      "methods": {
        "a()I": "getNutrition",
        "b()F": "getSaturationModifier",
        "c()Z": "isMeat",
        "d()Z": "canAlwaysEat",
        "e()Z": "isFastFood",
        "f()Ljava/util/List;": "getEffects"
      }
    },
    "net/minecraft/world/food/Foods": {
      "fields": {
        "a": "APPLE",
        "b": "BAKED_POTATO",
        "c": "BEEF",
        "d": "BEETROOT",
        "e": "BEETROOT_SOUP",
        "f": "BREAD",
        "g": "CARROT",
        "h": "CHICKEN",
        "i": "CHORUS_FRUIT",
        "j": "COD",
        "k": "COOKED_BEEF",
        "l": "COOKED_CHICKEN",
        "m": "COOKED_COD",
        "n": "COOKED_MUTTON",
        "o": "COOKED_PORKCHOP",
        "p": "COOKED_RABBIT",
        "q": "COOKED_SALMON",
        "r": "COOKIE",
        "s": "DRIED_KELP",
        "t": "ENCHANTED_GOLDEN_APPLE",
        "u": "GOLDEN_APPLE",
        "v": "GOLDEN_CARROT",
        "w": "HONEY_BOTTLE",
        "x": "MELON_SLICE",
        "y": "MUSHROOM_STEW",
        "z": "MUTTON",
        "A": "POISONOUS_POTATO",
        "B": "PORKCHOP",
        "C": "POTATO",
        "D": "PUFFERFISH",
        "E": "PUMPKIN_PIE",
        "F": "RABBIT",
        "G": "RABBIT_STEW",
        "H": "ROTTEN_FLESH",
        "I": "SALMON",
        "J": "SPIDER_EYE",
        "K": "SUSPICIOUS_STEW",
        "L": "SWEET_BERRIES",
        "M": "GLOW_BERRIES",
        "N": "TROPICAL_FISH"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/food/FoodProperties$Builder;": "stew"
      }
    },
    "net/minecraft/world/inventory/Container": {
      "fields": {
        "k": "LOGGER",
        "a": "SLOT_CLICKED_OUTSIDE",
        "b": "QUICKCRAFT_TYPE_CHARITABLE",
        "c": "QUICKCRAFT_TYPE_GREEDY",
        "d": "QUICKCRAFT_TYPE_CLONE",
        "e": "QUICKCRAFT_HEADER_START",
        "f": "QUICKCRAFT_HEADER_CONTINUE",
        "g": "QUICKCRAFT_HEADER_END",
        "h": "CARRIED_SLOT_SIZE",
        "l": "lastSlots",
        "i": "slots",
        "m": "dataSlots",
        "n": "carried",
        "o": "remoteSlots",
        "p": "remoteDataSlots",
        "q": "remoteCarried",
        "r": "stateId",
        "s": "menuType",
        "j": "containerId",
        "t": "quickcraftType",
        "u": "quickcraftStatus",
        "v": "quickcraftSlots",
        "w": "containerListeners",
        "x": "synchronizer",
        "y": "suppressRemoteUpdates"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/ContainerLevelAccess;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/Block;)Z": "stillValid",
        "a()Lnet/minecraft/world/inventory/MenuType;": "getType",
        "a(Lnet/minecraft/world/Container;I)V": "checkContainerSize",
        "a(Lnet/minecraft/world/inventory/ContainerData;I)V": "checkContainerDataCount",
        "a(I)Z": "isValidSlotIndex",
        "a(Lnet/minecraft/world/inventory/Slot;)Lnet/minecraft/world/inventory/Slot;": "addSlot",
        "a(Lnet/minecraft/world/inventory/DataSlot;)Lnet/minecraft/world/inventory/DataSlot;": "addDataSlot",
        "a(Lnet/minecraft/world/inventory/ContainerData;)V": "addDataSlots",
        "a(Lnet/minecraft/world/inventory/ContainerListener;)V": "addSlotListener",
        "a(Lnet/minecraft/world/inventory/ContainerSynchronizer;)V": "setSynchronizer",
        "b()V": "sendAllDataToRemote",
        "b(Lnet/minecraft/world/inventory/ContainerListener;)V": "removeSlotListener",
        "c()Lnet/minecraft/core/NonNullList;": "getItems",
        "d()V": "broadcastChanges",
        "e()V": "broadcastFullState",
        "c(II)V": "updateDataSlotListeners",
        "a(ILnet/minecraft/world/item/ItemStack;Ljava/util/function/Supplier;)V": "triggerSlotListeners",
        "b(ILnet/minecraft/world/item/ItemStack;Ljava/util/function/Supplier;)V": "synchronizeSlotToRemote",
        "d(II)V": "synchronizeDataSlotToRemote",
        "l()V": "synchronizeCarriedToRemote",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setRemoteSlot",
        "b(ILnet/minecraft/world/item/ItemStack;)V": "setRemoteSlotNoCopy",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setRemoteCarried",
        "b(Lnet/minecraft/world/entity/player/Player;I)Z": "clickMenuButton",
        "b(I)Lnet/minecraft/world/inventory/Slot;": "getSlot",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "a(IILnet/minecraft/world/inventory/ClickType;Lnet/minecraft/world/entity/player/Player;)V": "clicked",
        "b(IILnet/minecraft/world/inventory/ClickType;Lnet/minecraft/world/entity/player/Player;)V": "doClick",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "tryItemClickBehaviourOverride",
        "m()Lnet/minecraft/world/entity/SlotAccess;": "createCarriedSlotAccess",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/Container;)V": "clearContainer",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "a(IILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(ILjava/util/List;Lnet/minecraft/world/item/ItemStack;)V": "initializeContents",
        "a(II)V": "setData",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/item/ItemStack;IIZ)Z": "moveItemStackTo",
        "c(I)I": "getQuickcraftType",
        "d(I)I": "getQuickcraftHeader",
        "b(II)I": "getQuickcraftMask",
        "a(ILnet/minecraft/world/entity/player/Player;)Z": "isValidQuickcraftType",
        "f()V": "resetQuickCraft",
        "a(Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/item/ItemStack;Z)Z": "canItemQuickReplace",
        "a(Ljava/util/Set;ILnet/minecraft/world/item/ItemStack;)I": "getQuickCraftPlaceCount",
        "b(Lnet/minecraft/world/inventory/Slot;)Z": "canDragTo",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)I": "getRedstoneSignalFromBlockEntity",
        "b(Lnet/minecraft/world/Container;)I": "getRedstoneSignalFromContainer",
        "b(Lnet/minecraft/world/item/ItemStack;)V": "setCarried",
        "g()Lnet/minecraft/world/item/ItemStack;": "getCarried",
        "h()V": "suppressRemoteUpdates",
        "i()V": "resumeRemoteUpdates",
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;)V": "transferState",
        "b(Lnet/minecraft/world/Container;I)Ljava/util/OptionalInt;": "findSlot",
        "j()I": "getStateId",
        "k()I": "incrementStateId"
      }
    },
    "net/minecraft/world/inventory/ContainerFurnace": {
      "fields": {
        "k": "INGREDIENT_SLOT",
        "l": "FUEL_SLOT",
        "m": "RESULT_SLOT",
        "n": "SLOT_COUNT",
        "o": "DATA_COUNT",
        "q": "INV_SLOT_START",
        "r": "INV_SLOT_END",
        "s": "USE_ROW_SLOT_START",
        "t": "USE_ROW_SLOT_END",
        "u": "container",
        "v": "data",
        "p": "level",
        "w": "recipeType",
        "x": "recipeBookType"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillCraftSlotsStackedContents",
        "l()V": "clearCraftingContent",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)Z": "recipeMatches",
        "m()I": "getResultSlotIndex",
        "n()I": "getGridWidth",
        "o()I": "getGridHeight",
        "p()I": "getSize",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "canSmelt",
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "isFuel",
        "q()I": "getBurnProgress",
        "r()I": "getLitProgress",
        "s()Z": "isLit",
        "t()Lnet/minecraft/world/inventory/RecipeBookType;": "getRecipeBookType",
        "e(I)Z": "shouldMoveToInventory"
      }
    },
    "net/minecraft/world/inventory/ContainerAnvil": {
      "fields": {
        "k": "INPUT_SLOT",
        "l": "ADDITIONAL_SLOT",
        "m": "RESULT_SLOT",
        "s": "LOGGER",
        "t": "DEBUG_COST",
        "n": "MAX_NAME_LENGTH",
        "u": "repairItemCountCost",
        "v": "itemName",
        "w": "cost",
        "x": "COST_FAIL",
        "y": "COST_BASE",
        "z": "COST_ADDED_BASE",
        "A": "COST_REPAIR_MATERIAL",
        "B": "COST_REPAIR_SACRIFICE",
        "C": "COST_INCOMPATIBLE_PENALTY",
        "D": "COST_RENAME",
        "E": "INPUT_SLOT_X_PLACEMENT",
        "F": "ADDITIONAL_SLOT_X_PLACEMENT",
        "G": "RESULT_SLOT_X_PLACEMENT",
        "H": "SLOT_Y_PLACEMENT"
      },
      "methods": {
        "l()Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition;": "createInputSlotDefinitions",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isValidBlock",
        "a(Lnet/minecraft/world/entity/player/Player;Z)Z": "mayPickup",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake",
        "m()V": "createResult",
        "e(I)I": "calculateIncreasedRepairCost",
        "a(Ljava/lang/String;)Z": "setItemName",
        "b(Ljava/lang/String;)Ljava/lang/String;": "validateName",
        "n()I": "getCost"
      }
    },
    "net/minecraft/world/inventory/ContainerBeacon": {
      "fields": {
        "k": "PAYMENT_SLOT",
        "l": "SLOT_COUNT",
        "m": "DATA_COUNT",
        "n": "INV_SLOT_START",
        "o": "INV_SLOT_END",
        "p": "USE_ROW_SLOT_START",
        "q": "USE_ROW_SLOT_END",
        "r": "beacon",
        "s": "paymentSlot",
        "t": "access",
        "u": "beaconData"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(II)V": "setData",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "l()I": "getLevels",
        "a(Ljava/util/Optional;Ljava/util/Optional;)V": "updateEffects",
        "o()Z": "hasPayment"
      }
    },
    "net/minecraft/world/inventory/ContainerBeacon$SlotBeacon": {
      "fields": {
        "this$0": "this$0"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a()I": "getMaxStackSize"
      }
    },
    "net/minecraft/world/inventory/ContainerBlastFurnace": {},
    "net/minecraft/world/inventory/ContainerBrewingStand": {
      "fields": {
        "k": "BOTTLE_SLOT_START",
        "l": "BOTTLE_SLOT_END",
        "m": "INGREDIENT_SLOT",
        "n": "FUEL_SLOT",
        "o": "SLOT_COUNT",
        "p": "DATA_COUNT",
        "q": "INV_SLOT_START",
        "r": "INV_SLOT_END",
        "s": "USE_ROW_SLOT_START",
        "t": "USE_ROW_SLOT_END",
        "u": "brewingStand",
        "v": "brewingStandData",
        "w": "ingredientSlot"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "l()I": "getFuel",
        "m()I": "getBrewingTicks"
      }
    },
    "net/minecraft/world/inventory/ContainerBrewingStand$SlotBrewing": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a()I": "getMaxStackSize"
      }
    },
    "net/minecraft/world/inventory/ContainerBrewingStand$SlotPotionBottle": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a()I": "getMaxStackSize",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlaceItem"
      }
    },
    "net/minecraft/world/inventory/ContainerCartography": {
      "fields": {
        "k": "MAP_SLOT",
        "l": "ADDITIONAL_SLOT",
        "m": "RESULT_SLOT",
        "o": "INV_SLOT_START",
        "p": "INV_SLOT_END",
        "q": "USE_ROW_SLOT_START",
        "r": "USE_ROW_SLOT_END",
        "s": "access",
        "t": "lastSoundTime",
        "n": "container",
        "u": "resultContainer"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "setupResultSlot",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed"
      }
    },
    "net/minecraft/world/inventory/ContainerChest": {
      "fields": {
        "k": "SLOTS_PER_ROW",
        "l": "container",
        "m": "containerRows"
      },
      "methods": {
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/ChestMenu;": "oneRow",
        "b(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/ChestMenu;": "twoRows",
        "c(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/ChestMenu;": "threeRows",
        "d(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/ChestMenu;": "fourRows",
        "e(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/ChestMenu;": "fiveRows",
        "f(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/ChestMenu;": "sixRows",
        "a(ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/Container;)Lnet/minecraft/world/inventory/ChestMenu;": "threeRows",
        "b(ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/Container;)Lnet/minecraft/world/inventory/ChestMenu;": "sixRows",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "l()Lnet/minecraft/world/Container;": "getContainer",
        "m()I": "getRowCount"
      }
    },
    "net/minecraft/world/inventory/ClickAction": {
      "fields": {
        "a": "PRIMARY",
        "b": "SECONDARY",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/inventory/ClickAction;": "$values"
      }
    },
    "net/minecraft/world/inventory/InventoryClickType": {
      "fields": {
        "a": "PICKUP",
        "b": "QUICK_MOVE",
        "c": "SWAP",
        "d": "CLONE",
        "e": "THROW",
        "f": "QUICK_CRAFT",
        "g": "PICKUP_ALL",
        "h": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/inventory/ClickType;": "$values"
      }
    },
    "net/minecraft/world/inventory/IContainerProperties": {
      "methods": {
        "a(I)I": "get",
        "a(II)V": "set",
        "a()I": "getCount"
      }
    },
    "net/minecraft/world/inventory/ContainerAccess": {
      "fields": {
        "a": "NULL"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/inventory/ContainerLevelAccess;": "create",
        "a(Ljava/util/function/BiFunction;)Ljava/util/Optional;": "evaluate",
        "a(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/lang/Object;": "evaluate",
        "a(Ljava/util/function/BiConsumer;)V": "execute"
      }
    },
    "net/minecraft/world/inventory/ICrafting": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;ILnet/minecraft/world/item/ItemStack;)V": "slotChanged",
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;II)V": "dataChanged"
      }
    },
    "net/minecraft/world/inventory/ContainerSynchronizer": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;Lnet/minecraft/core/NonNullList;Lnet/minecraft/world/item/ItemStack;[I)V": "sendInitialData",
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;ILnet/minecraft/world/item/ItemStack;)V": "sendSlotChange",
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;Lnet/minecraft/world/item/ItemStack;)V": "sendCarriedChange",
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;II)V": "sendDataChange"
      }
    },
    "net/minecraft/world/inventory/InventoryCrafting": {
      "methods": {
        "f()I": "getWidth",
        "g()I": "getHeight",
        "h()Ljava/util/List;": "getItems"
      }
    },
    "net/minecraft/world/inventory/ContainerWorkbench": {
      "fields": {
        "k": "RESULT_SLOT",
        "l": "CRAFT_SLOT_START",
        "m": "CRAFT_SLOT_END",
        "n": "INV_SLOT_START",
        "o": "INV_SLOT_END",
        "p": "USE_ROW_SLOT_START",
        "q": "USE_ROW_SLOT_END",
        "r": "craftSlots",
        "s": "resultSlots",
        "t": "access",
        "u": "player"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/AbstractContainerMenu;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/inventory/ResultContainer;)V": "slotChangedCraftingGrid",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillCraftSlotsStackedContents",
        "l()V": "clearCraftingContent",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)Z": "recipeMatches",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "m()I": "getResultSlotIndex",
        "n()I": "getGridWidth",
        "o()I": "getGridHeight",
        "p()I": "getSize",
        "t()Lnet/minecraft/world/inventory/RecipeBookType;": "getRecipeBookType",
        "e(I)Z": "shouldMoveToInventory"
      }
    },
    "net/minecraft/world/inventory/ContainerProperty": {
      "fields": {
        "a": "prevValue"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/ContainerData;I)Lnet/minecraft/world/inventory/DataSlot;": "forContainer",
        "a([II)Lnet/minecraft/world/inventory/DataSlot;": "shared",
        "a()Lnet/minecraft/world/inventory/DataSlot;": "standalone",
        "b()I": "get",
        "a(I)V": "set",
        "c()Z": "checkAndClearUpdateFlag"
      }
    },
    "net/minecraft/world/inventory/ContainerDispenser": {
      "fields": {
        "k": "SLOT_COUNT",
        "l": "INV_SLOT_START",
        "m": "INV_SLOT_END",
        "n": "USE_ROW_SLOT_START",
        "o": "USE_ROW_SLOT_END",
        "p": "dispenser"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed"
      }
    },
    "net/minecraft/world/inventory/ContainerEnchantTable": {
      "fields": {
        "n": "enchantSlots",
        "o": "access",
        "p": "random",
        "q": "enchantmentSeed",
        "k": "costs",
        "l": "enchantClue",
        "m": "levelClue"
      },
      "methods": {
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "b(Lnet/minecraft/world/entity/player/Player;I)Z": "clickMenuButton",
        "a(Lnet/minecraft/world/item/ItemStack;II)Ljava/util/List;": "getEnchantmentList",
        "l()I": "getGoldCount",
        "m()I": "getEnchantmentSeed",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack"
      }
    },
    "net/minecraft/world/inventory/SlotFurnaceFuel": {
      "fields": {
        "a": "menu"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a_(Lnet/minecraft/world/item/ItemStack;)I": "getMaxStackSize",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "isBucket"
      }
    },
    "net/minecraft/world/inventory/ContainerFurnaceFurnace": {},
    "net/minecraft/world/inventory/SlotFurnaceResult": {
      "fields": {
        "a": "player",
        "b": "removeCount"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "remove",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "onQuickCraft",
        "b_(Lnet/minecraft/world/item/ItemStack;)V": "checkTakeAchievements"
      }
    },
    "net/minecraft/world/inventory/ContainerGrindstone": {
      "fields": {
        "k": "MAX_NAME_LENGTH",
        "l": "INPUT_SLOT",
        "m": "ADDITIONAL_SLOT",
        "n": "RESULT_SLOT",
        "o": "INV_SLOT_START",
        "p": "INV_SLOT_END",
        "q": "USE_ROW_SLOT_START",
        "r": "USE_ROW_SLOT_END",
        "s": "resultSlots",
        "t": "repairSlots",
        "u": "access"
      },
      "methods": {
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "l()V": "createResult",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "mergeEnchants",
        "a(Lnet/minecraft/world/item/ItemStack;II)Lnet/minecraft/world/item/ItemStack;": "removeNonCurses",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack"
      }
    },
    "net/minecraft/world/inventory/ContainerHopper": {
      "fields": {
        "k": "CONTAINER_SIZE",
        "l": "hopper"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed"
      }
    },
    "net/minecraft/world/inventory/ContainerHorse": {
      "fields": {
        "k": "horseContainer",
        "l": "horse"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/animal/horse/AbstractHorse;)Z": "hasChest",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed"
      }
    },
    "net/minecraft/world/inventory/ContainerPlayer": {
      "fields": {
        "k": "CONTAINER_ID",
        "l": "RESULT_SLOT",
        "m": "CRAFT_SLOT_START",
        "n": "CRAFT_SLOT_END",
        "o": "ARMOR_SLOT_START",
        "p": "ARMOR_SLOT_END",
        "q": "INV_SLOT_START",
        "r": "INV_SLOT_END",
        "s": "USE_ROW_SLOT_START",
        "t": "USE_ROW_SLOT_END",
        "u": "SHIELD_SLOT",
        "v": "BLOCK_ATLAS",
        "w": "EMPTY_ARMOR_SLOT_HELMET",
        "x": "EMPTY_ARMOR_SLOT_CHESTPLATE",
        "y": "EMPTY_ARMOR_SLOT_LEGGINGS",
        "z": "EMPTY_ARMOR_SLOT_BOOTS",
        "A": "EMPTY_ARMOR_SLOT_SHIELD",
        "C": "TEXTURE_EMPTY_SLOTS",
        "D": "SLOT_IDS",
        "E": "craftSlots",
        "F": "resultSlots",
        "B": "active",
        "G": "owner"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "onEquipItem",
        "f(I)Z": "isHotbarSlot",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillCraftSlotsStackedContents",
        "l()V": "clearCraftingContent",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)Z": "recipeMatches",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "m()I": "getResultSlotIndex",
        "n()I": "getGridWidth",
        "o()I": "getGridHeight",
        "p()I": "getSize",
        "q()Lnet/minecraft/world/inventory/CraftingContainer;": "getCraftSlots",
        "t()Lnet/minecraft/world/inventory/RecipeBookType;": "getRecipeBookType",
        "e(I)Z": "shouldMoveToInventory"
      }
    },
    "net/minecraft/world/inventory/ContainerAnvilAbstract": {
      "fields": {
        "k": "INVENTORY_SLOTS_PER_ROW",
        "l": "INVENTORY_SLOTS_PER_COLUMN",
        "o": "access",
        "p": "player",
        "q": "inputSlots",
        "m": "inputSlotIndexes",
        "r": "resultSlots",
        "n": "resultSlotIndex"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;Z)Z": "mayPickup",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isValidBlock",
        "a(Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition;)V": "createInputSlots",
        "b(Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition;)V": "createResultSlot",
        "a(Lnet/minecraft/world/entity/player/Inventory;)V": "createInventorySlots",
        "m()V": "createResult",
        "l()Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition;": "createInputSlotDefinitions",
        "e(I)Lnet/minecraft/world/SimpleContainer;": "createContainer",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "canMoveIntoInputSlots",
        "d(Lnet/minecraft/world/item/ItemStack;)I": "getSlotToQuickMoveTo",
        "o()I": "getResultSlot",
        "n()I": "getInventorySlotStart",
        "p()I": "getInventorySlotEnd",
        "q()I": "getUseRowStart",
        "r()I": "getUseRowEnd"
      }
    },
    "net/minecraft/world/inventory/ItemCombinerMenuSlotDefinition": {
      "fields": {
        "a": "slots",
        "b": "resultSlot"
      },
      "methods": {
        "a()Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition$Builder;": "create",
        "a(I)Z": "hasSlot",
        "b(I)Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition$SlotDefinition;": "getSlot",
        "b()Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition$SlotDefinition;": "getResultSlot",
        "c()Ljava/util/List;": "getSlots",
        "d()I": "getNumOfInputSlots",
        "e()I": "getResultSlotIndex",
        "f()Ljava/util/List;": "getInputSlotIndexes"
      }
    },
    "net/minecraft/world/inventory/ContainerLectern": {
      "fields": {
        "o": "DATA_COUNT",
        "p": "SLOT_COUNT",
        "k": "BUTTON_PREV_PAGE",
        "l": "BUTTON_NEXT_PAGE",
        "m": "BUTTON_TAKE_BOOK",
        "n": "BUTTON_PAGE_JUMP_RANGE_START",
        "q": "lectern",
        "r": "lecternData"
      },
      "methods": {
        "b(Lnet/minecraft/world/entity/player/Player;I)Z": "clickMenuButton",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "a(II)V": "setData",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "l()Lnet/minecraft/world/item/ItemStack;": "getBook",
        "m()I": "getPage"
      }
    },
    "net/minecraft/world/inventory/ContainerLoom": {
      "fields": {
        "k": "PATTERN_NOT_SET",
        "l": "INV_SLOT_START",
        "m": "INV_SLOT_END",
        "n": "USE_ROW_SLOT_START",
        "o": "USE_ROW_SLOT_END",
        "p": "access",
        "q": "selectedBannerPatternIndex",
        "r": "selectablePatterns",
        "s": "slotUpdateListener",
        "t": "bannerSlot",
        "u": "dyeSlot",
        "v": "patternSlot",
        "w": "resultSlot",
        "x": "lastSoundTime",
        "y": "inputContainer",
        "z": "outputContainer"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "b(Lnet/minecraft/world/entity/player/Player;I)Z": "clickMenuButton",
        "c(Lnet/minecraft/world/item/ItemStack;)Ljava/util/List;": "getSelectablePatterns",
        "e(I)Z": "isValidPatternIndex",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "l()Ljava/util/List;": "getSelectablePatterns",
        "m()I": "getSelectedBannerPatternIndex",
        "a(Ljava/lang/Runnable;)V": "registerUpdateListener",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "a(Lnet/minecraft/core/Holder;)V": "setupResultSlot",
        "n()Lnet/minecraft/world/inventory/Slot;": "getBannerSlot",
        "o()Lnet/minecraft/world/inventory/Slot;": "getDyeSlot",
        "p()Lnet/minecraft/world/inventory/Slot;": "getPatternSlot",
        "q()Lnet/minecraft/world/inventory/Slot;": "getResultSlot"
      }
    },
    "net/minecraft/world/inventory/ITileEntityContainer": {},
    "net/minecraft/world/inventory/Containers": {
      "fields": {
        "a": "GENERIC_9x1",
        "b": "GENERIC_9x2",
        "c": "GENERIC_9x3",
        "d": "GENERIC_9x4",
        "e": "GENERIC_9x5",
        "f": "GENERIC_9x6",
        "g": "GENERIC_3x3",
        "h": "ANVIL",
        "i": "BEACON",
        "j": "BLAST_FURNACE",
        "k": "BREWING_STAND",
        "l": "CRAFTING",
        "m": "ENCHANTMENT",
        "n": "FURNACE",
        "o": "GRINDSTONE",
        "p": "HOPPER",
        "q": "LECTERN",
        "r": "LOOM",
        "s": "MERCHANT",
        "t": "SHULKER_BOX",
        "u": "SMITHING",
        "v": "SMOKER",
        "w": "CARTOGRAPHY_TABLE",
        "x": "STONECUTTER",
        "y": "requiredFeatures",
        "z": "constructor"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/inventory/MenuType$MenuSupplier;)Lnet/minecraft/world/inventory/MenuType;": "register",
        "a(Ljava/lang/String;Lnet/minecraft/world/inventory/MenuType$MenuSupplier;[Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/inventory/MenuType;": "register",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "create",
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures"
      }
    },
    "net/minecraft/world/inventory/Containers$Supplier": {},
    "net/minecraft/world/inventory/InventoryMerchant": {
      "fields": {
        "c": "merchant",
        "d": "itemStacks",
        "e": "activeOffer",
        "f": "selectionHint",
        "g": "futureXp"
      },
      "methods": {
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "d(I)Z": "isPaymentSlot",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "e()V": "setChanged",
        "f()V": "updateSellItem",
        "g()Lnet/minecraft/world/item/trading/MerchantOffer;": "getActiveOffer",
        "c(I)V": "setSelectionHint",
        "a()V": "clearContent",
        "h()I": "getFutureXp"
      }
    },
    "net/minecraft/world/inventory/ContainerMerchant": {
      "fields": {
        "k": "PAYMENT1_SLOT",
        "l": "PAYMENT2_SLOT",
        "m": "RESULT_SLOT",
        "n": "INV_SLOT_START",
        "o": "INV_SLOT_END",
        "p": "USE_ROW_SLOT_START",
        "q": "USE_ROW_SLOT_END",
        "r": "SELLSLOT1_X",
        "s": "SELLSLOT2_X",
        "t": "BUYSLOT_X",
        "u": "ROW_Y",
        "v": "trader",
        "w": "tradeContainer",
        "x": "merchantLevel",
        "y": "showProgressBar",
        "z": "canRestock"
      },
      "methods": {
        "a(Z)V": "setShowProgressBar",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "e(I)V": "setSelectionHint",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "l()I": "getTraderXp",
        "m()I": "getFutureTraderXp",
        "f(I)V": "setXp",
        "n()I": "getTraderLevel",
        "g(I)V": "setMerchantLevel",
        "b(Z)V": "setCanRestock",
        "o()Z": "canRestock",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "r()V": "playTradeSound",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed",
        "h(I)V": "tryMoveItems",
        "c(ILnet/minecraft/world/item/ItemStack;)V": "moveFromInventoryToPaymentSlot",
        "a(Lnet/minecraft/world/item/trading/MerchantOffers;)V": "setOffers",
        "p()Lnet/minecraft/world/item/trading/MerchantOffers;": "getOffers",
        "q()Z": "showProgressBar"
      }
    },
    "net/minecraft/world/inventory/SlotMerchantResult": {
      "fields": {
        "a": "slots",
        "b": "player",
        "c": "removeCount",
        "h": "merchant"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "remove",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "onQuickCraft",
        "b_(Lnet/minecraft/world/item/ItemStack;)V": "checkTakeAchievements",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake"
      }
    },
    "net/minecraft/world/inventory/InventoryEnderChest": {
      "fields": {
        "c": "activeChest"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/entity/EnderChestBlockEntity;)V": "setActiveChest",
        "b(Lnet/minecraft/world/level/block/entity/EnderChestBlockEntity;)Z": "isActiveChest",
        "a(Lnet/minecraft/nbt/ListTag;)V": "fromTag",
        "g()Lnet/minecraft/nbt/ListTag;": "createTag",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "d_(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen"
      }
    },
    "net/minecraft/world/inventory/ContainerRecipeBook": {
      "methods": {
        "a(ZLnet/minecraft/world/item/crafting/Recipe;Lnet/minecraft/server/level/ServerPlayer;)V": "handlePlacement",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillCraftSlotsStackedContents",
        "l()V": "clearCraftingContent",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)Z": "recipeMatches",
        "m()I": "getResultSlotIndex",
        "n()I": "getGridWidth",
        "o()I": "getGridHeight",
        "p()I": "getSize",
        "t()Lnet/minecraft/world/inventory/RecipeBookType;": "getRecipeBookType",
        "e(I)Z": "shouldMoveToInventory"
      }
    },
    "net/minecraft/world/inventory/RecipeBookType": {
      "fields": {
        "a": "CRAFTING",
        "b": "FURNACE",
        "c": "BLAST_FURNACE",
        "d": "SMOKER",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/inventory/RecipeBookType;": "$values"
      }
    },
    "net/minecraft/world/inventory/RecipeHolder": {
      "methods": {
        "a(Lnet/minecraft/world/item/crafting/Recipe;)V": "setRecipeUsed",
        "d()Lnet/minecraft/world/item/crafting/Recipe;": "getRecipeUsed",
        "a(Lnet/minecraft/world/entity/player/Player;Ljava/util/List;)V": "awardUsedRecipes",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/server/level/ServerPlayer;Lnet/minecraft/world/item/crafting/Recipe;)Z": "setRecipeUsed"
      }
    },
    "net/minecraft/world/inventory/InventoryCraftResult": {
      "fields": {
        "c": "itemStacks",
        "d": "recipeUsed"
      },
      "methods": {
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a()V": "clearContent",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)V": "setRecipeUsed",
        "d()Lnet/minecraft/world/item/crafting/Recipe;": "getRecipeUsed"
      }
    },
    "net/minecraft/world/inventory/SlotResult": {
      "fields": {
        "a": "craftSlots",
        "b": "player",
        "c": "removeCount"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "remove",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "onQuickCraft",
        "b(I)V": "onSwapCraft",
        "b_(Lnet/minecraft/world/item/ItemStack;)V": "checkTakeAchievements",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake"
      }
    },
    "net/minecraft/world/inventory/ContainerShulkerBox": {
      "fields": {
        "k": "CONTAINER_SIZE",
        "l": "container"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed"
      }
    },
    "net/minecraft/world/inventory/SlotShulkerBox": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace"
      }
    },
    "net/minecraft/world/inventory/ContainerProperties": {
      "fields": {
        "a": "ints"
      },
      "methods": {
        "a(I)I": "get",
        "a(II)V": "set",
        "a()I": "getCount"
      }
    },
    "net/minecraft/world/inventory/Slot": {
      "fields": {
        "a": "slot",
        "d": "container",
        "e": "index",
        "f": "x",
        "g": "y"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "onQuickCraft",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "onQuickCraft",
        "b(I)V": "onSwapCraft",
        "b_(Lnet/minecraft/world/item/ItemStack;)V": "checkTakeAchievements",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "mayPlace",
        "e()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "f()Z": "hasItem",
        "d(Lnet/minecraft/world/item/ItemStack;)V": "setByPlayer",
        "e(Lnet/minecraft/world/item/ItemStack;)V": "set",
        "d()V": "setChanged",
        "a()I": "getMaxStackSize",
        "a_(Lnet/minecraft/world/item/ItemStack;)I": "getMaxStackSize",
        "c()Lcom/mojang/datafixers/util/Pair;": "getNoItemIcon",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "remove",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "mayPickup",
        "b()Z": "isActive",
        "a(IILnet/minecraft/world/entity/player/Player;)Ljava/util/Optional;": "tryRemove",
        "b(IILnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/item/ItemStack;": "safeTake",
        "f(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "safeInsert",
        "b(Lnet/minecraft/world/item/ItemStack;I)Lnet/minecraft/world/item/ItemStack;": "safeInsert",
        "b(Lnet/minecraft/world/entity/player/Player;)Z": "allowModification",
        "g()I": "getContainerSlot",
        "h()Z": "isHighlightable",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "lambda$safeTake$0"
      }
    },
    "net/minecraft/world/inventory/ContainerSmithing": {
      "fields": {
        "k": "TEMPLATE_SLOT",
        "l": "BASE_SLOT",
        "m": "ADDITIONAL_SLOT",
        "n": "RESULT_SLOT",
        "s": "TEMPLATE_SLOT_X_PLACEMENT",
        "t": "BASE_SLOT_X_PLACEMENT",
        "u": "ADDITIONAL_SLOT_X_PLACEMENT",
        "w": "RESULT_SLOT_X_PLACEMENT",
        "v": "SLOT_Y_PLACEMENT",
        "x": "level",
        "y": "selectedRecipe",
        "z": "recipes"
      },
      "methods": {
        "l()Lnet/minecraft/world/inventory/ItemCombinerMenuSlotDefinition;": "createInputSlotDefinitions",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isValidBlock",
        "a(Lnet/minecraft/world/entity/player/Player;Z)Z": "mayPickup",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "onTake",
        "n()Ljava/util/List;": "getRelevantItems",
        "e(I)V": "shrinkStackInSlot",
        "m()V": "createResult",
        "d(Lnet/minecraft/world/item/ItemStack;)I": "getSlotToQuickMoveTo",
        "a(Lnet/minecraft/world/item/crafting/SmithingRecipe;Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "findSlotMatchingIngredient",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "canMoveIntoInputSlots"
      }
    },
    "net/minecraft/world/inventory/ContainerSmoker": {},
    "net/minecraft/world/inventory/AutoRecipeOutput": {
      "methods": {
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillStackedContents"
      }
    },
    "net/minecraft/world/inventory/ContainerStonecutter": {
      "fields": {
        "k": "INPUT_SLOT",
        "l": "RESULT_SLOT",
        "p": "INV_SLOT_START",
        "q": "INV_SLOT_END",
        "r": "USE_ROW_SLOT_START",
        "s": "USE_ROW_SLOT_END",
        "t": "access",
        "u": "selectedRecipeIndex",
        "v": "level",
        "w": "recipes",
        "x": "input",
        "y": "lastSoundTime",
        "m": "inputSlot",
        "n": "resultSlot",
        "z": "slotUpdateListener",
        "o": "container",
        "A": "resultContainer"
      },
      "methods": {
        "l()I": "getSelectedRecipeIndex",
        "m()Ljava/util/List;": "getRecipes",
        "n()I": "getNumRecipes",
        "o()Z": "hasInputItem",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "b(Lnet/minecraft/world/entity/player/Player;I)Z": "clickMenuButton",
        "e(I)Z": "isValidRecipeIndex",
        "a(Lnet/minecraft/world/Container;)V": "slotsChanged",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/item/ItemStack;)V": "setupRecipeList",
        "p()V": "setupResultSlot",
        "a()Lnet/minecraft/world/inventory/MenuType;": "getType",
        "a(Ljava/lang/Runnable;)V": "registerUpdateListener",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;)Z": "canTakeItemForPickAll",
        "a(Lnet/minecraft/world/entity/player/Player;I)Lnet/minecraft/world/item/ItemStack;": "quickMoveStack",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "removed"
      }
    },
    "net/minecraft/world/inventory/TransientCraftingContainer": {
      "fields": {
        "c": "items",
        "d": "width",
        "e": "height",
        "f": "menu"
      },
      "methods": {
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a()V": "clearContent",
        "g()I": "getHeight",
        "f()I": "getWidth",
        "h()Ljava/util/List;": "getItems",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillStackedContents"
      }
    },
    "net/minecraft/world/inventory/tooltip/BundleTooltip": {
      "fields": {
        "a": "items",
        "b": "weight"
      },
      "methods": {
        "a()Lnet/minecraft/core/NonNullList;": "getItems",
        "b()I": "getWeight"
      }
    },
    "net/minecraft/world/inventory/tooltip/TooltipComponent": {},
    "net/minecraft/world/item/AdventureModeCheck": {
      "fields": {
        "a": "tagName",
        "b": "lastCheckedBlock",
        "c": "lastResult",
        "d": "checksBlockEntity"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;Z)Z": "areSameBlocks"
      }
    },
    "net/minecraft/world/item/ItemAir": {
      "fields": {
        "a": "block"
      },
      "methods": {
        "a()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText"
      }
    },
    "net/minecraft/world/item/ItemArmor": {
      "fields": {
        "e": "ARMOR_MODIFIER_UUID_PER_TYPE",
        "a": "DISPENSE_ITEM_BEHAVIOR",
        "b": "type",
        "f": "defense",
        "g": "toughness",
        "c": "knockbackResistance",
        "d": "material",
        "h": "defaultModifiers"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockSource;Lnet/minecraft/world/item/ItemStack;)Z": "dispenseArmor",
        "b()Lnet/minecraft/world/item/ArmorItem$Type;": "getType",
        "c()I": "getEnchantmentValue",
        "d()Lnet/minecraft/world/item/ArmorMaterial;": "getMaterial",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isValidRepairItem",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Lcom/google/common/collect/Multimap;": "getDefaultAttributeModifiers",
        "e()I": "getDefense",
        "f()F": "getToughness",
        "g()Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot",
        "ak_()Lnet/minecraft/sounds/SoundEvent;": "getEquipSound"
      }
    },
    "net/minecraft/world/item/ArmorMaterial": {
      "methods": {
        "a(Lnet/minecraft/world/item/ArmorItem$Type;)I": "getDurabilityForType",
        "b(Lnet/minecraft/world/item/ArmorItem$Type;)I": "getDefenseForType",
        "a()I": "getEnchantmentValue",
        "b()Lnet/minecraft/sounds/SoundEvent;": "getEquipSound",
        "d()Lnet/minecraft/world/item/crafting/Ingredient;": "getRepairIngredient",
        "e()Ljava/lang/String;": "getName",
        "f()F": "getToughness",
        "g()F": "getKnockbackResistance"
      }
    },
    "net/minecraft/world/item/EnumArmorMaterial": {
      "fields": {
        "a": "LEATHER",
        "b": "CHAIN",
        "c": "IRON",
        "d": "GOLD",
        "e": "DIAMOND",
        "f": "TURTLE",
        "g": "NETHERITE",
        "h": "CODEC",
        "i": "HEALTH_FUNCTION_FOR_TYPE",
        "j": "name",
        "k": "durabilityMultiplier",
        "l": "protectionFunctionForType",
        "m": "enchantmentValue",
        "n": "sound",
        "o": "toughness",
        "p": "knockbackResistance",
        "q": "repairIngredient",
        "r": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ArmorItem$Type;)I": "getDurabilityForType",
        "b(Lnet/minecraft/world/item/ArmorItem$Type;)I": "getDefenseForType",
        "a()I": "getEnchantmentValue",
        "b()Lnet/minecraft/sounds/SoundEvent;": "getEquipSound",
        "d()Lnet/minecraft/world/item/crafting/Ingredient;": "getRepairIngredient",
        "e()Ljava/lang/String;": "getName",
        "f()F": "getToughness",
        "g()F": "getKnockbackResistance",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Ljava/util/EnumMap;)V": "lambda$static$14",
        "h()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$13",
        "b(Ljava/util/EnumMap;)V": "lambda$static$12",
        "i()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$11",
        "c(Ljava/util/EnumMap;)V": "lambda$static$10",
        "j()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$9",
        "d(Ljava/util/EnumMap;)V": "lambda$static$8",
        "k()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$7",
        "e(Ljava/util/EnumMap;)V": "lambda$static$6",
        "l()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$5",
        "f(Ljava/util/EnumMap;)V": "lambda$static$4",
        "m()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$3",
        "g(Ljava/util/EnumMap;)V": "lambda$static$2",
        "n()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$1",
        "h(Ljava/util/EnumMap;)V": "lambda$static$0",
        "o()[Lnet/minecraft/world/item/ArmorMaterials;": "$values"
      }
    },
    "net/minecraft/world/item/ItemArmorStand": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn"
      }
    },
    "net/minecraft/world/item/ItemArrow": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "createArrow"
      }
    },
    "net/minecraft/world/item/ItemAxe": {
      "fields": {
        "a": "STRIPPABLES"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "getStripped",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$getStripped$2",
        "a(Lnet/minecraft/world/item/context/UseOnContext;Lnet/minecraft/world/entity/player/Player;)V": "lambda$useOn$1",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$useOn$0"
      }
    },
    "net/minecraft/world/item/ItemBanner": {
      "fields": {
        "c": "PATTERN_PREFIX"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Ljava/util/List;)V": "appendHoverTextFromBannerBlockEntityTag",
        "b()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Ljava/util/List;Lnet/minecraft/world/item/DyeColor;Ljava/lang/String;)V": "lambda$appendHoverTextFromBannerBlockEntityTag$1",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$appendHoverTextFromBannerBlockEntityTag$0"
      }
    },
    "net/minecraft/world/item/ItemBannerPattern": {
      "fields": {
        "a": "bannerPattern"
      },
      "methods": {
        "b()Lnet/minecraft/tags/TagKey;": "getBannerPattern",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "d()Lnet/minecraft/network/chat/MutableComponent;": "getDisplayName"
      }
    },
    "net/minecraft/world/item/ItemBed": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeBlock"
      }
    },
    "net/minecraft/world/item/ItemBlock": {
      "fields": {
        "a": "BLOCK_ENTITY_TAG",
        "b": "BLOCK_STATE_TAG",
        "c": "block"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/InteractionResult;": "place",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/sounds/SoundEvent;": "getPlaceSound",
        "b(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/item/context/BlockPlaceContext;": "updatePlacementContext",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)Z": "updateCustomBlockEntityTag",
        "c(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getPlacementState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "updateBlockStateFromTag",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/String;)Lnet/minecraft/world/level/block/state/BlockState;": "updateState",
        "b(Lnet/minecraft/world/item/context/BlockPlaceContext;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canPlace",
        "d()Z": "mustSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeBlock",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)Z": "updateCustomBlockEntityTag",
        "a()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "e()Lnet/minecraft/world/level/block/Block;": "getBlock",
        "a(Ljava/util/Map;Lnet/minecraft/world/item/Item;)V": "registerBlocks",
        "ah_()Z": "canFitInsideContainerItems",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "onDestroyed",
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityData",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/nbt/CompoundTag;)V": "setBlockEntityData",
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures"
      }
    },
    "net/minecraft/world/item/ItemBoat": {
      "fields": {
        "a": "ENTITY_PREDICATE",
        "b": "type",
        "c": "hasChest"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/phys/HitResult;)Lnet/minecraft/world/entity/vehicle/Boat;": "getBoat"
      }
    },
    "net/minecraft/world/item/ItemBoneMeal": {
      "fields": {
        "a": "GRASS_SPREAD_WIDTH",
        "b": "GRASS_SPREAD_HEIGHT",
        "c": "GRASS_COUNT_MULTIPLIER"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "growCrop",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "growWaterPlant",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;I)V": "addGrowthParticles"
      }
    },
    "net/minecraft/world/item/ItemBook": {
      "methods": {
        "d_(Lnet/minecraft/world/item/ItemStack;)Z": "isEnchantable",
        "c()I": "getEnchantmentValue"
      }
    },
    "net/minecraft/world/item/ItemGlassBottle": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "turnBottleIntoItem",
        "a(Lnet/minecraft/world/entity/AreaEffectCloud;)Z": "lambda$use$0"
      }
    },
    "net/minecraft/world/item/ItemBow": {
      "fields": {
        "a": "MAX_DRAW_DURATION",
        "b": "DEFAULT_RANGE"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "releaseUsing",
        "a(I)F": "getPowerForTime",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "b()Ljava/util/function/Predicate;": "getAllSupportedProjectiles",
        "d()I": "getDefaultProjectileRange"
      }
    },
    "net/minecraft/world/item/ItemSoup": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem"
      }
    },
    "net/minecraft/world/item/BrushItem": {
      "fields": {
        "a": "ANIMATION_DURATION",
        "b": "USE_DURATION",
        "c": "MAX_BRUSH_DISTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;I)V": "onUseTick",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/HitResult;": "calculateHitResult",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/HumanoidArm;)V": "spawnDustParticles",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "lambda$calculateHitResult$1",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$onUseTick$0"
      }
    },
    "net/minecraft/world/item/ItemBucket": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/item/ItemStack;": "getEmptySuccessItem",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)V": "checkExtraContent",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/BlockHitResult;)Z": "emptyContents",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "playEmptySound"
      }
    },
    "net/minecraft/world/item/BundleItem": {
      "fields": {
        "b": "TAG_ITEMS",
        "a": "MAX_WEIGHT",
        "c": "BUNDLE_IN_BUNDLE_WEIGHT",
        "d": "BAR_COLOR"
      },
      "methods": {
        "d(Lnet/minecraft/world/item/ItemStack;)F": "getFullnessDisplay",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/entity/player/Player;)Z": "overrideStackedOnOther",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/SlotAccess;)Z": "overrideOtherStackedOnMe",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "e(Lnet/minecraft/world/item/ItemStack;)Z": "isBarVisible",
        "f(Lnet/minecraft/world/item/ItemStack;)I": "getBarWidth",
        "g(Lnet/minecraft/world/item/ItemStack;)I": "getBarColor",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)I": "add",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/nbt/ListTag;)Ljava/util/Optional;": "getMatchingItem",
        "k(Lnet/minecraft/world/item/ItemStack;)I": "getWeight",
        "o(Lnet/minecraft/world/item/ItemStack;)I": "getContentWeight",
        "p(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "removeOne",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)Z": "dropContents",
        "q(Lnet/minecraft/world/item/ItemStack;)Ljava/util/stream/Stream;": "getContents",
        "h(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getTooltipImage",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "onDestroyed",
        "a(Lnet/minecraft/world/entity/Entity;)V": "playRemoveOneSound",
        "b(Lnet/minecraft/world/entity/Entity;)V": "playInsertSound",
        "c(Lnet/minecraft/world/entity/Entity;)V": "playDropContentsSound",
        "r(Lnet/minecraft/world/item/ItemStack;)I": "lambda$getContentWeight$3",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/nbt/CompoundTag;)Z": "lambda$getMatchingItem$2",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/SlotAccess;Lnet/minecraft/world/item/ItemStack;)V": "lambda$overrideOtherStackedOnMe$1",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/item/ItemStack;)V": "lambda$overrideStackedOnOther$0"
      }
    },
    "net/minecraft/world/item/ItemChorusFruit": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem"
      }
    },
    "net/minecraft/world/item/ItemCompass": {
      "fields": {
        "d": "LOGGER",
        "a": "TAG_LODESTONE_POS",
        "b": "TAG_LODESTONE_DIMENSION",
        "c": "TAG_LODESTONE_TRACKED"
      },
      "methods": {
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "isLodestoneCompass",
        "c(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/Optional;": "getLodestoneDimension",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/core/GlobalPos;": "getLodestonePosition",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/core/GlobalPos;": "getSpawnPosition",
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;IZ)V": "inventoryTick",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/BlockPos;Lnet/minecraft/nbt/CompoundTag;)V": "addLodestoneTags",
        "j(Lnet/minecraft/world/item/ItemStack;)Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$addLodestoneTags$0"
      }
    },
    "net/minecraft/world/item/ItemWorldMapBase": {
      "methods": {
        "ad_()Z": "isComplex",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/item/CreativeModeTab": {
      "fields": {
        "a": "displayName",
        "b": "backgroundSuffix",
        "c": "canScroll",
        "d": "showTitle",
        "e": "alignedRight",
        "f": "row",
        "g": "column",
        "h": "type",
        "i": "iconItemStack",
        "j": "displayItems",
        "k": "displayItemsSearchTab",
        "l": "searchTreeBuilder",
        "m": "iconGenerator",
        "n": "displayItemsGenerator"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/CreativeModeTab$Row;I)Lnet/minecraft/world/item/CreativeModeTab$Builder;": "builder",
        "a()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "b()Lnet/minecraft/world/item/ItemStack;": "getIconItem",
        "c()Ljava/lang/String;": "getBackgroundSuffix",
        "d()Z": "showTitle",
        "e()Z": "canScroll",
        "f()I": "column",
        "g()Lnet/minecraft/world/item/CreativeModeTab$Row;": "row",
        "h()Z": "hasAnyItems",
        "i()Z": "shouldDisplay",
        "j()Z": "isAlignedRight",
        "k()Lnet/minecraft/world/item/CreativeModeTab$Type;": "getType",
        "a(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;)V": "buildContents",
        "l()Ljava/util/Collection;": "getDisplayItems",
        "m()Ljava/util/Collection;": "getSearchTabDisplayItems",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "contains",
        "a(Ljava/util/function/Consumer;)V": "setSearchTreeBuilder",
        "n()V": "rebuildSearchTree",
        "o()Ljava/lang/IllegalStateException;": "lambda$buildContents$0"
      }
    },
    "net/minecraft/world/item/CreativeModeTabs": {
      "fields": {
        "a": "BUILDING_BLOCKS",
        "b": "COLORED_BLOCKS",
        "c": "NATURAL_BLOCKS",
        "d": "FUNCTIONAL_BLOCKS",
        "e": "REDSTONE_BLOCKS",
        "f": "HOTBAR",
        "g": "SEARCH",
        "h": "TOOLS_AND_UTILITIES",
        "i": "COMBAT",
        "j": "FOOD_AND_DRINKS",
        "k": "INGREDIENTS",
        "l": "SPAWN_EGGS",
        "m": "OP_BLOCKS",
        "n": "INVENTORY",
        "o": "PAINTING_COMPARATOR",
        "p": "CACHED_PARAMETERS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a()V": "validate",
        "b()Lnet/minecraft/world/item/CreativeModeTab;": "getDefaultTab",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup;Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generatePotionEffectTypes",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup;Ljava/util/Set;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generateEnchantmentBookTypesOnlyMaxLevel",
        "b(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup;Ljava/util/Set;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generateEnchantmentBookTypesAllLevels",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup;Lnet/minecraft/world/item/Item;Lnet/minecraft/tags/TagKey;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generateInstrumentTypes",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generateSuspiciousStews",
        "b(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generateFireworksAllDurations",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup$RegistryLookup;Ljava/util/function/Predicate;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;)V": "generatePresetPaintings",
        "c()Ljava/util/List;": "tabs",
        "d()Ljava/util/List;": "allTabs",
        "f()Ljava/util/stream/Stream;": "streamAllTabs",
        "e()Lnet/minecraft/world/item/CreativeModeTab;": "searchTab",
        "a(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;)V": "buildAllTabContents",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;ZLnet/minecraft/core/HolderLookup$Provider;)Z": "tryRebuildTabContents",
        "a(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab;)V": "lambda$buildAllTabContents$52",
        "a(Lnet/minecraft/world/item/CreativeModeTab;)Z": "lambda$buildAllTabContents$51",
        "b(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab;)V": "lambda$buildAllTabContents$50",
        "b(Lnet/minecraft/world/item/CreativeModeTab;)Z": "lambda$buildAllTabContents$49",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;Lnet/minecraft/core/Holder$Reference;)V": "lambda$generatePresetPaintings$48",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;Lnet/minecraft/core/HolderSet$Named;)V": "lambda$generateInstrumentTypes$47",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;Lnet/minecraft/world/item/ItemStack;)V": "lambda$generateInstrumentTypes$46",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/Holder;)Lnet/minecraft/world/item/ItemStack;": "lambda$generateInstrumentTypes$45",
        "b(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;Lnet/minecraft/world/item/ItemStack;)V": "lambda$generateEnchantmentBookTypesAllLevels$44",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Ljava/util/stream/Stream;": "lambda$generateEnchantmentBookTypesAllLevels$43",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;I)Lnet/minecraft/world/item/ItemStack;": "lambda$generateEnchantmentBookTypesAllLevels$42",
        "a(Ljava/util/Set;Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "lambda$generateEnchantmentBookTypesAllLevels$41",
        "c(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;Lnet/minecraft/world/item/ItemStack;)V": "lambda$generateEnchantmentBookTypesOnlyMaxLevel$40",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;)Lnet/minecraft/world/item/ItemStack;": "lambda$generateEnchantmentBookTypesOnlyMaxLevel$39",
        "b(Ljava/util/Set;Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "lambda$generateEnchantmentBookTypesOnlyMaxLevel$38",
        "d(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/world/item/CreativeModeTab$TabVisibility;Lnet/minecraft/world/item/ItemStack;)V": "lambda$generatePotionEffectTypes$37",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/Holder$Reference;)Lnet/minecraft/world/item/ItemStack;": "lambda$generatePotionEffectTypes$36",
        "a(Lnet/minecraft/core/Holder$Reference;)Z": "lambda$generatePotionEffectTypes$35",
        "a(Lnet/minecraft/world/entity/decoration/PaintingVariant;)I": "lambda$static$34",
        "g()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$33",
        "a(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$32",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup$RegistryLookup;)V": "lambda$bootstrap$31",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$bootstrap$30",
        "h()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$29",
        "b(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$28",
        "i()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$27",
        "c(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$26",
        "a(Lnet/minecraft/world/item/CreativeModeTab$Output;Ljava/util/Set;Lnet/minecraft/core/HolderLookup$RegistryLookup;)V": "lambda$bootstrap$25",
        "j()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$24",
        "d(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$23",
        "b(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup$RegistryLookup;)V": "lambda$bootstrap$22",
        "k()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$21",
        "e(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$20",
        "c(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup$RegistryLookup;)V": "lambda$bootstrap$19",
        "l()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$18",
        "f(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$17",
        "d(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup$RegistryLookup;)V": "lambda$bootstrap$16",
        "m()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$15",
        "n()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$13",
        "o()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$12",
        "g(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$11",
        "p()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$10",
        "h(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$9",
        "e(Lnet/minecraft/world/item/CreativeModeTab$Output;Lnet/minecraft/core/HolderLookup$RegistryLookup;)V": "lambda$bootstrap$8",
        "b(Lnet/minecraft/core/Holder;)Z": "lambda$bootstrap$7",
        "q()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$6",
        "i(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$5",
        "r()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$4",
        "j(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$3",
        "s()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$2",
        "k(Lnet/minecraft/world/item/CreativeModeTab$ItemDisplayParameters;Lnet/minecraft/world/item/CreativeModeTab$Output;)V": "lambda$bootstrap$1",
        "t()Lnet/minecraft/world/item/ItemStack;": "lambda$bootstrap$0"
      }
    },
    "net/minecraft/world/item/ItemCrossbow": {
      "fields": {
        "b": "TAG_CHARGED",
        "e": "TAG_CHARGED_PROJECTILES",
        "f": "MAX_CHARGE_DURATION",
        "a": "DEFAULT_RANGE",
        "g": "startSoundPlayed",
        "h": "midLoadSoundPlayed",
        "i": "START_SOUND_PERCENT",
        "j": "MID_SOUND_PERCENT",
        "k": "ARROW_POWER",
        "r": "FIREWORK_POWER"
      },
      "methods": {
        "e()Ljava/util/function/Predicate;": "getSupportedHeldProjectiles",
        "b()Ljava/util/function/Predicate;": "getAllSupportedProjectiles",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "o(Lnet/minecraft/world/item/ItemStack;)F": "getShootingPower",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "releaseUsing",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)Z": "tryLoadProjectiles",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;ZZ)Z": "loadProjectile",
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "isCharged",
        "a(Lnet/minecraft/world/item/ItemStack;Z)V": "setCharged",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)V": "addChargedProjectile",
        "p(Lnet/minecraft/world/item/ItemStack;)Ljava/util/List;": "getChargedProjectiles",
        "q(Lnet/minecraft/world/item/ItemStack;)V": "clearChargedProjectiles",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/Item;)Z": "containsChargedProjectile",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;FZFFF)V": "shootProjectile",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "getArrow",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;FF)V": "performShooting",
        "a(Lnet/minecraft/util/RandomSource;)[F": "getShotPitches",
        "a(ZLnet/minecraft/util/RandomSource;)F": "getRandomShotPitch",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "onCrossbowShot",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;I)V": "onUseTick",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "k(Lnet/minecraft/world/item/ItemStack;)I": "getChargeDuration",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(I)Lnet/minecraft/sounds/SoundEvent;": "getStartSound",
        "a(ILnet/minecraft/world/item/ItemStack;)F": "getPowerForTime",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "useOnRelease",
        "d()I": "getDefaultProjectileRange"
      }
    },
    "net/minecraft/world/item/ItemDebugStick": {
      "methods": {
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z": "canAttackBlock",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/item/ItemStack;)Z": "handleInteraction",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;Z)Lnet/minecraft/world/level/block/state/BlockState;": "cycleState",
        "a(Ljava/lang/Iterable;Ljava/lang/Object;Z)Ljava/lang/Object;": "getRelative",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/network/chat/Component;)V": "message",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;)Ljava/lang/String;": "getNameHelper"
      }
    },
    "net/minecraft/world/item/ItemTool": {
      "fields": {
        "a": "blocks",
        "b": "speed",
        "c": "attackDamageBaseline",
        "d": "defaultModifiers"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "hurtEnemy",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "mineBlock",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Lcom/google/common/collect/Multimap;": "getDefaultAttributeModifiers",
        "d()F": "getAttackDamage",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCorrectToolForDrops",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$mineBlock$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$hurtEnemy$0"
      }
    },
    "net/minecraft/world/item/DiscFragmentItem": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "d()Lnet/minecraft/network/chat/MutableComponent;": "getDisplayName"
      }
    },
    "net/minecraft/world/item/DispensibleContainerItem": {
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)V": "checkExtraContent",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/BlockHitResult;)Z": "emptyContents"
      }
    },
    "net/minecraft/world/item/ItemBisected": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeBlock"
      }
    },
    "net/minecraft/world/item/EnumColor": {
      "fields": {
        "a": "WHITE",
        "b": "ORANGE",
        "c": "MAGENTA",
        "d": "LIGHT_BLUE",
        "e": "YELLOW",
        "f": "LIME",
        "g": "PINK",
        "h": "GRAY",
        "i": "LIGHT_GRAY",
        "j": "CYAN",
        "k": "PURPLE",
        "l": "BLUE",
        "m": "BROWN",
        "n": "GREEN",
        "o": "RED",
        "p": "BLACK",
        "r": "BY_ID",
        "s": "BY_FIREWORK_COLOR",
        "q": "CODEC",
        "t": "id",
        "u": "name",
        "v": "mapColor",
        "w": "textureDiffuseColors",
        "x": "fireworkColor",
        "y": "textColor",
        "z": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "b()Ljava/lang/String;": "getName",
        "d()[F": "getTextureDiffuseColors",
        "e()Lnet/minecraft/world/level/material/MapColor;": "getMapColor",
        "f()I": "getFireworkColor",
        "g()I": "getTextColor",
        "a(I)Lnet/minecraft/world/item/DyeColor;": "byId",
        "a(Ljava/lang/String;Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/item/DyeColor;": "byName",
        "b(I)Lnet/minecraft/world/item/DyeColor;": "byFireworkColor",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/item/DyeColor;": "lambda$static$1",
        "b(Lnet/minecraft/world/item/DyeColor;)Ljava/lang/Integer;": "lambda$static$0",
        "h()[Lnet/minecraft/world/item/DyeColor;": "$values"
      }
    },
    "net/minecraft/world/item/ItemDye": {
      "fields": {
        "a": "ITEM_BY_COLOR",
        "b": "dyeColor"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactLivingEntity",
        "d()Lnet/minecraft/world/item/DyeColor;": "getDyeColor",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/item/DyeItem;": "byColor",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/SignBlockEntity;ZLnet/minecraft/world/entity/player/Player;)Z": "tryApplyToSign"
      }
    },
    "net/minecraft/world/item/ItemArmorColorable": {},
    "net/minecraft/world/item/ItemHorseArmorDyeable": {},
    "net/minecraft/world/item/IDyeable": {
      "fields": {
        "o_": "TAG_COLOR",
        "p_": "TAG_DISPLAY",
        "q_": "DEFAULT_LEATHER_COLOR"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "hasCustomColor",
        "e_(Lnet/minecraft/world/item/ItemStack;)I": "getColor",
        "f_(Lnet/minecraft/world/item/ItemStack;)V": "clearColor",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "setColor",
        "a(Lnet/minecraft/world/item/ItemStack;Ljava/util/List;)Lnet/minecraft/world/item/ItemStack;": "dyeArmor"
      }
    },
    "net/minecraft/world/item/ItemEgg": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemElytra": {
      "methods": {
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "isFlyEnabled",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isValidRepairItem",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "ak_()Lnet/minecraft/sounds/SoundEvent;": "getEquipSound",
        "g()Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot"
      }
    },
    "net/minecraft/world/item/ItemMapEmpty": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemEnchantedBook": {
      "fields": {
        "a": "TAG_STORED_ENCHANTMENTS"
      },
      "methods": {
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil",
        "d_(Lnet/minecraft/world/item/ItemStack;)Z": "isEnchantable",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/nbt/ListTag;": "getEnchantments",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/enchantment/EnchantmentInstance;)V": "addEnchantment",
        "a(Lnet/minecraft/world/item/enchantment/EnchantmentInstance;)Lnet/minecraft/world/item/ItemStack;": "createForEnchantment"
      }
    },
    "net/minecraft/world/item/ItemGoldenAppleEnchanted": {
      "methods": {
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil"
      }
    },
    "net/minecraft/world/item/ItemEndCrystal": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil"
      }
    },
    "net/minecraft/world/item/ItemEnderEye": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemEnderPearl": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/Equipable": {
      "methods": {
        "g()Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot",
        "ak_()Lnet/minecraft/sounds/SoundEvent;": "getEquipSound",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "swapWithEquipmentSlot",
        "c_(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/Equipable;": "get"
      }
    },
    "net/minecraft/world/item/ItemExpBottle": {
      "methods": {
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemFireball": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "playSound"
      }
    },
    "net/minecraft/world/item/ItemFireworks": {
      "fields": {
        "a": "CRAFTABLE_DURATIONS",
        "b": "TAG_FIREWORKS",
        "c": "TAG_EXPLOSION",
        "d": "TAG_EXPLOSIONS",
        "e": "TAG_FLIGHT",
        "f": "TAG_EXPLOSION_TYPE",
        "g": "TAG_EXPLOSION_TRAIL",
        "h": "TAG_EXPLOSION_FLICKER",
        "i": "TAG_EXPLOSION_COLORS",
        "j": "TAG_EXPLOSION_FADECOLORS",
        "k": "ROCKET_PLACEMENT_OFFSET"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/item/ItemStack;B)V": "setDuration",
        "ae_()Lnet/minecraft/world/item/ItemStack;": "getDefaultInstance"
      }
    },
    "net/minecraft/world/item/ItemFireworks$EffectType": {
      "fields": {
        "a": "SMALL_BALL",
        "b": "LARGE_BALL",
        "c": "STAR",
        "d": "CREEPER",
        "e": "BURST",
        "f": "BY_ID",
        "g": "id",
        "h": "name",
        "i": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "b()Ljava/lang/String;": "getName",
        "a(I)Lnet/minecraft/world/item/FireworkRocketItem$Shape;": "byId",
        "c()[Lnet/minecraft/world/item/FireworkRocketItem$Shape;": "$values"
      }
    },
    "net/minecraft/world/item/ItemFireworksCharge": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/util/List;)V": "appendHoverText",
        "a(Lnet/minecraft/network/chat/MutableComponent;[I)Lnet/minecraft/network/chat/Component;": "appendColors",
        "a(I)Lnet/minecraft/network/chat/Component;": "getColorName"
      }
    },
    "net/minecraft/world/item/ItemFishingRod": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "c()I": "getEnchantmentValue"
      }
    },
    "net/minecraft/world/item/ItemFlintAndSteel": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn"
      }
    },
    "net/minecraft/world/item/ItemCarrotStick": {
      "fields": {
        "a": "canInteractWith",
        "b": "consumeItemDamage"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/entity/player/Player;)V": "lambda$use$0"
      }
    },
    "net/minecraft/world/item/ItemRestricted": {
      "methods": {
        "c(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getPlacementState"
      }
    },
    "net/minecraft/world/item/GlowInkSacItem": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/SignBlockEntity;ZLnet/minecraft/world/entity/player/Player;)Z": "tryApplyToSign",
        "a(Lnet/minecraft/world/level/block/entity/SignText;)Lnet/minecraft/world/level/block/entity/SignText;": "lambda$tryApplyToSign$0"
      }
    },
    "net/minecraft/world/item/ItemHanging": {
      "fields": {
        "a": "TOOLTIP_RANDOM_VARIANT",
        "b": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/Direction;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)Z": "mayPlace",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText"
      }
    },
    "net/minecraft/world/item/HangingSignItem": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z": "canPlace"
      }
    },
    "net/minecraft/world/item/ItemHoe": {
      "fields": {
        "a": "TILLABLES"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/function/Consumer;": "changeIntoState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/ItemLike;)Ljava/util/function/Consumer;": "changeIntoStateAndDropItem",
        "b(Lnet/minecraft/world/item/context/UseOnContext;)Z": "onlyIfAirAbove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/ItemLike;Lnet/minecraft/world/item/context/UseOnContext;)V": "lambda$changeIntoStateAndDropItem$3",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/UseOnContext;)V": "lambda$changeIntoState$2",
        "a(Lnet/minecraft/world/item/context/UseOnContext;Lnet/minecraft/world/entity/player/Player;)V": "lambda$useOn$1",
        "c(Lnet/minecraft/world/item/context/UseOnContext;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/ItemHoneyBottle": {
      "fields": {
        "a": "DRINK_DURATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "af_()Lnet/minecraft/sounds/SoundEvent;": "getDrinkingSound",
        "ag_()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/HoneycombItem": {
      "fields": {
        "a": "WAXABLES",
        "b": "WAX_OFF_BY_BLOCK"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "getWaxed",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/SignBlockEntity;ZLnet/minecraft/world/entity/player/Player;)Z": "tryApplyToSign",
        "a(Lnet/minecraft/world/level/block/entity/SignText;Lnet/minecraft/world/entity/player/Player;)Z": "canApplyToSign",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$getWaxed$3",
        "a(Lnet/minecraft/world/item/context/UseOnContext;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/InteractionResult;": "lambda$useOn$2",
        "h()Lcom/google/common/collect/BiMap;": "lambda$static$1",
        "i()Lcom/google/common/collect/BiMap;": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/ItemHorseArmor": {
      "fields": {
        "a": "TEX_FOLDER",
        "b": "protection",
        "c": "texture"
      },
      "methods": {
        "h()Lnet/minecraft/resources/ResourceLocation;": "getTexture",
        "i()I": "getProtection"
      }
    },
    "net/minecraft/world/item/InkSacItem": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/SignBlockEntity;ZLnet/minecraft/world/entity/player/Player;)Z": "tryApplyToSign",
        "a(Lnet/minecraft/world/level/block/entity/SignText;)Lnet/minecraft/world/level/block/entity/SignText;": "lambda$tryApplyToSign$0"
      }
    },
    "net/minecraft/world/item/Instrument": {
      "fields": {
        "b": "soundEvent",
        "c": "useDuration",
        "d": "range",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/core/Holder;": "soundEvent",
        "b()I": "useDuration",
        "c()F": "range",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/InstrumentItem": {
      "fields": {
        "a": "TAG_INSTRUMENT",
        "b": "instruments"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/core/Holder;)Lnet/minecraft/world/item/ItemStack;": "create",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/tags/TagKey;Lnet/minecraft/util/RandomSource;)V": "setRandom",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Holder;)V": "setSoundVariantId",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "d(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getInstrument",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/Instrument;)V": "play",
        "a(Lnet/minecraft/core/Holder;)Ljava/lang/Integer;": "lambda$getUseDuration$3",
        "h()Ljava/lang/IllegalStateException;": "lambda$setSoundVariantId$2",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Holder;)V": "lambda$setRandom$1",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/HolderSet$Named;)Ljava/util/Optional;": "lambda$setRandom$0"
      }
    },
    "net/minecraft/world/item/Instruments": {
      "fields": {
        "a": "GOAT_HORN_RANGE_BLOCKS",
        "b": "GOAT_HORN_DURATION",
        "c": "PONDER_GOAT_HORN",
        "d": "SING_GOAT_HORN",
        "e": "SEEK_GOAT_HORN",
        "f": "FEEL_GOAT_HORN",
        "g": "ADMIRE_GOAT_HORN",
        "h": "CALL_GOAT_HORN",
        "i": "YEARN_GOAT_HORN",
        "j": "DREAM_GOAT_HORN"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "create"
      }
    },
    "net/minecraft/world/item/Item": {
      "fields": {
        "a": "LOGGER",
        "l": "BY_BLOCK",
        "m": "BASE_ATTACK_DAMAGE_UUID",
        "n": "BASE_ATTACK_SPEED_UUID",
        "o": "MAX_STACK_SIZE",
        "p": "EAT_DURATION",
        "q": "MAX_BAR_WIDTH",
        "b": "builtInRegistryHolder",
        "c": "rarity",
        "d": "maxStackSize",
        "e": "maxDamage",
        "f": "isFireResistant",
        "g": "craftingRemainingItem",
        "h": "descriptionId",
        "i": "foodProperties",
        "j": "requiredFeatures"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/Item;)I": "getId",
        "b(I)Lnet/minecraft/world/item/Item;": "byId",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/item/Item;": "byBlock",
        "j()Lnet/minecraft/core/Holder$Reference;": "builtInRegistryHolder",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;I)V": "onUseTick",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "onDestroyed",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "verifyTagAfterLoad",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z": "canAttackBlock",
        "k()Lnet/minecraft/world/item/Item;": "asItem",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem",
        "l()I": "getMaxStackSize",
        "n()I": "getMaxDamage",
        "o()Z": "canBeDepleted",
        "e(Lnet/minecraft/world/item/ItemStack;)Z": "isBarVisible",
        "f(Lnet/minecraft/world/item/ItemStack;)I": "getBarWidth",
        "g(Lnet/minecraft/world/item/ItemStack;)I": "getBarColor",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/entity/player/Player;)Z": "overrideStackedOnOther",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/SlotAccess;)Z": "overrideOtherStackedOnMe",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "hurtEnemy",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "mineBlock",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCorrectToolForDrops",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactLivingEntity",
        "p()Lnet/minecraft/network/chat/Component;": "getDescription",
        "q()Ljava/lang/String;": "getOrCreateDescriptionId",
        "a()Ljava/lang/String;": "getDescriptionId",
        "j(Lnet/minecraft/world/item/ItemStack;)Ljava/lang/String;": "getDescriptionId",
        "r()Z": "shouldOverrideMultiplayerNbt",
        "s()Lnet/minecraft/world/item/Item;": "getCraftingRemainingItem",
        "t()Z": "hasCraftingRemainingItem",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;IZ)V": "inventoryTick",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;)V": "onCraftedBy",
        "ad_()Z": "isComplex",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "releaseUsing",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "h(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getTooltipImage",
        "m(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "getName",
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil",
        "n(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/Rarity;": "getRarity",
        "d_(Lnet/minecraft/world/item/ItemStack;)Z": "isEnchantable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/ClipContext$Fluid;)Lnet/minecraft/world/phys/BlockHitResult;": "getPlayerPOVHitResult",
        "c()I": "getEnchantmentValue",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isValidRepairItem",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Lcom/google/common/collect/Multimap;": "getDefaultAttributeModifiers",
        "l(Lnet/minecraft/world/item/ItemStack;)Z": "useOnRelease",
        "ae_()Lnet/minecraft/world/item/ItemStack;": "getDefaultInstance",
        "u()Z": "isEdible",
        "v()Lnet/minecraft/world/food/FoodProperties;": "getFoodProperties",
        "af_()Lnet/minecraft/sounds/SoundEvent;": "getDrinkingSound",
        "ag_()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "w()Z": "isFireResistant",
        "a(Lnet/minecraft/world/damagesource/DamageSource;)Z": "canBeHurtBy",
        "ah_()Z": "canFitInsideContainerItems",
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures"
      }
    },
    "net/minecraft/world/item/Item$Info": {
      "fields": {
        "a": "maxStackSize",
        "b": "maxDamage",
        "c": "craftingRemainingItem",
        "d": "rarity",
        "e": "foodProperties",
        "f": "isFireResistant",
        "g": "requiredFeatures"
      },
      "methods": {
        "a(Lnet/minecraft/world/food/FoodProperties;)Lnet/minecraft/world/item/Item$Properties;": "food",
        "a(I)Lnet/minecraft/world/item/Item$Properties;": "stacksTo",
        "b(I)Lnet/minecraft/world/item/Item$Properties;": "defaultDurability",
        "c(I)Lnet/minecraft/world/item/Item$Properties;": "durability",
        "a(Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/Item$Properties;": "craftRemainder",
        "a(Lnet/minecraft/world/item/Rarity;)Lnet/minecraft/world/item/Item$Properties;": "rarity",
        "a()Lnet/minecraft/world/item/Item$Properties;": "fireResistant",
        "a([Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/item/Item$Properties;": "requiredFeatures"
      }
    },
    "net/minecraft/world/item/ItemCooldown": {
      "fields": {
        "a": "cooldowns",
        "b": "tickCount"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/Item;)Z": "isOnCooldown",
        "a(Lnet/minecraft/world/item/Item;F)F": "getCooldownPercent",
        "a()V": "tick",
        "a(Lnet/minecraft/world/item/Item;I)V": "addCooldown",
        "b(Lnet/minecraft/world/item/Item;)V": "removeCooldown",
        "b(Lnet/minecraft/world/item/Item;I)V": "onCooldownStarted",
        "c(Lnet/minecraft/world/item/Item;)V": "onCooldownEnded"
      }
    },
    "net/minecraft/world/item/ItemCooldown$Info": {
      "fields": {
        "a": "startTime",
        "b": "endTime"
      }
    },
    "net/minecraft/world/item/ItemDisplayContext": {
      "fields": {
        "a": "NONE",
        "b": "THIRD_PERSON_LEFT_HAND",
        "c": "THIRD_PERSON_RIGHT_HAND",
        "d": "FIRST_PERSON_LEFT_HAND",
        "e": "FIRST_PERSON_RIGHT_HAND",
        "f": "HEAD",
        "g": "GUI",
        "h": "GROUND",
        "i": "FIXED",
        "j": "CODEC",
        "k": "BY_ID",
        "l": "id",
        "m": "name",
        "n": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()B": "getId",
        "b()Z": "firstPerson",
        "d()[Lnet/minecraft/world/item/ItemDisplayContext;": "$values"
      }
    },
    "net/minecraft/world/item/ItemItemFrame": {
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/Direction;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)Z": "mayPlace"
      }
    },
    "net/minecraft/world/item/ItemNamedBlock": {
      "methods": {
        "a()Ljava/lang/String;": "getDescriptionId"
      }
    },
    "net/minecraft/world/item/ItemStack": {
      "fields": {
        "a": "CODEC",
        "j": "LOGGER",
        "b": "EMPTY",
        "c": "ATTRIBUTE_MODIFIER_FORMAT",
        "d": "TAG_ENCH",
        "e": "TAG_DISPLAY",
        "f": "TAG_DISPLAY_NAME",
        "g": "TAG_LORE",
        "h": "TAG_DAMAGE",
        "i": "TAG_COLOR",
        "k": "TAG_UNBREAKABLE",
        "l": "TAG_REPAIR_COST",
        "m": "TAG_CAN_DESTROY_BLOCK_LIST",
        "n": "TAG_CAN_PLACE_ON_BLOCK_LIST",
        "o": "TAG_HIDE_FLAGS",
        "p": "DISABLED_ITEM_TOOLTIP",
        "q": "DONT_HIDE_TOOLTIP",
        "r": "LORE_STYLE",
        "s": "count",
        "t": "popTime",
        "u": "item",
        "v": "tag",
        "w": "entityRepresentation",
        "x": "adventureBreakCheck",
        "y": "adventurePlaceCheck"
      },
      "methods": {
        "a()Ljava/util/Optional;": "getTooltipImage",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/item/ItemStack;": "of",
        "b()Z": "isEmpty",
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;)Z": "isItemEnabled",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "split",
        "c()Lnet/minecraft/world/item/ItemStack;": "copyAndClear",
        "d()Lnet/minecraft/world/item/Item;": "getItem",
        "e()Lnet/minecraft/core/Holder;": "getItemHolder",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "a(Lnet/minecraft/world/item/Item;)Z": "is",
        "a(Ljava/util/function/Predicate;)Z": "is",
        "a(Lnet/minecraft/core/Holder;)Z": "is",
        "f()Ljava/util/stream/Stream;": "getTags",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "g()I": "getMaxStackSize",
        "h()Z": "isStackable",
        "i()Z": "isDamageableItem",
        "j()Z": "isDamaged",
        "k()I": "getDamageValue",
        "b(I)V": "setDamageValue",
        "l()I": "getMaxDamage",
        "a(ILnet/minecraft/util/RandomSource;Lnet/minecraft/server/level/ServerPlayer;)Z": "hurt",
        "a(ILnet/minecraft/world/entity/LivingEntity;Ljava/util/function/Consumer;)V": "hurtAndBreak",
        "m()Z": "isBarVisible",
        "n()I": "getBarWidth",
        "o()I": "getBarColor",
        "a(Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/entity/player/Player;)Z": "overrideStackedOnOther",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/inventory/Slot;Lnet/minecraft/world/inventory/ClickAction;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/SlotAccess;)Z": "overrideOtherStackedOnMe",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/player/Player;)V": "hurtEnemy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "mineBlock",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCorrectToolForDrops",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactLivingEntity",
        "p()Lnet/minecraft/world/item/ItemStack;": "copy",
        "c(I)Lnet/minecraft/world/item/ItemStack;": "copyWithCount",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "matches",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isSameItem",
        "c(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isSameItemSameTags",
        "q()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;IZ)V": "inventoryTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;I)V": "onCraftedBy",
        "r()I": "getUseDuration",
        "s()Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "releaseUsing",
        "t()Z": "useOnRelease",
        "u()Z": "hasTag",
        "v()Lnet/minecraft/nbt/CompoundTag;": "getTag",
        "w()Lnet/minecraft/nbt/CompoundTag;": "getOrCreateTag",
        "a(Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "getOrCreateTagElement",
        "b(Ljava/lang/String;)Lnet/minecraft/nbt/CompoundTag;": "getTagElement",
        "c(Ljava/lang/String;)V": "removeTagKey",
        "x()Lnet/minecraft/nbt/ListTag;": "getEnchantmentTags",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "setTag",
        "y()Lnet/minecraft/network/chat/Component;": "getHoverName",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/world/item/ItemStack;": "setHoverName",
        "z()V": "resetHoverName",
        "A()Z": "hasCustomHoverName",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/TooltipFlag;)Ljava/util/List;": "getTooltipLines",
        "a(ILnet/minecraft/world/item/ItemStack$TooltipPart;)Z": "shouldShowInTooltip",
        "P()I": "getHideFlags",
        "a(Lnet/minecraft/world/item/ItemStack$TooltipPart;)V": "hideTooltipPart",
        "a(Ljava/util/List;Lnet/minecraft/nbt/ListTag;)V": "appendEnchantmentNames",
        "d(Ljava/lang/String;)Ljava/util/Collection;": "expandBlockState",
        "B()Z": "hasFoil",
        "C()Lnet/minecraft/world/item/Rarity;": "getRarity",
        "D()Z": "isEnchantable",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;I)V": "enchant",
        "E()Z": "isEnchanted",
        "a(Ljava/lang/String;Lnet/minecraft/nbt/Tag;)V": "addTagElement",
        "F()Z": "isFramed",
        "a(Lnet/minecraft/world/entity/Entity;)V": "setEntityRepresentation",
        "G()Lnet/minecraft/world/entity/decoration/ItemFrame;": "getFrame",
        "H()Lnet/minecraft/world/entity/Entity;": "getEntityRepresentation",
        "I()I": "getBaseRepairCost",
        "d(I)V": "setRepairCost",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Lcom/google/common/collect/Multimap;": "getAttributeModifiers",
        "a(Lnet/minecraft/world/entity/ai/attributes/Attribute;Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;Lnet/minecraft/world/entity/EquipmentSlot;)V": "addAttributeModifier",
        "J()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "K()I": "getPopTime",
        "e(I)V": "setPopTime",
        "L()I": "getCount",
        "f(I)V": "setCount",
        "g(I)V": "grow",
        "h(I)V": "shrink",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "onUseTick",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;)V": "onDestroyed",
        "M()Z": "isEdible",
        "N()Lnet/minecraft/sounds/SoundEvent;": "getDrinkingSound",
        "O()Lnet/minecraft/sounds/SoundEvent;": "getEatingSound",
        "a(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$getDisplayName$7",
        "a(Lnet/minecraft/commands/arguments/blocks/BlockStateParser$TagResult;)Ljava/util/List;": "lambda$expandBlockState$6",
        "b(Lnet/minecraft/core/Holder;)Lnet/minecraft/network/chat/MutableComponent;": "lambda$expandBlockState$5",
        "a(Lnet/minecraft/commands/arguments/blocks/BlockStateParser$BlockResult;)Ljava/util/List;": "lambda$expandBlockState$4",
        "a(Ljava/util/List;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/item/enchantment/Enchantment;)V": "lambda$appendEnchantmentNames$3"
      }
    },
    "net/minecraft/world/item/ItemStack$HideFlags": {
      "fields": {
        "a": "ENCHANTMENTS",
        "b": "MODIFIERS",
        "c": "UNBREAKABLE",
        "d": "CAN_DESTROY",
        "e": "CAN_PLACE",
        "f": "ADDITIONAL",
        "g": "DYE",
        "h": "UPGRADES",
        "i": "mask",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()I": "getMask"
      }
    },
    "net/minecraft/world/item/ItemStackLinkedSet": {
      "fields": {
        "a": "TYPE_AND_TAG"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)I": "hashStackAndTag",
        "a()Ljava/util/Set;": "createTypeAndTagSet"
      }
    },
    "net/minecraft/world/item/ItemLiquidUtil": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "startUsingInstantly",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;Z)Lnet/minecraft/world/item/ItemStack;": "createFilledResult",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "createFilledResult",
        "a(Lnet/minecraft/world/entity/item/ItemEntity;Ljava/util/stream/Stream;)V": "onContainerDestroyed",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/item/ItemEntity;Lnet/minecraft/world/item/ItemStack;)V": "lambda$onContainerDestroyed$0"
      }
    },
    "net/minecraft/world/item/Items": {
      "fields": {
        "a": "AIR",
        "b": "STONE",
        "c": "GRANITE",
        "d": "POLISHED_GRANITE",
        "e": "DIORITE",
        "f": "POLISHED_DIORITE",
        "g": "ANDESITE",
        "h": "POLISHED_ANDESITE",
        "i": "DEEPSLATE",
        "j": "COBBLED_DEEPSLATE",
        "k": "POLISHED_DEEPSLATE",
        "l": "CALCITE",
        "m": "TUFF",
        "n": "DRIPSTONE_BLOCK",
        "o": "GRASS_BLOCK",
        "p": "DIRT",
        "q": "COARSE_DIRT",
        "r": "PODZOL",
        "s": "ROOTED_DIRT",
        "t": "MUD",
        "u": "CRIMSON_NYLIUM",
        "v": "WARPED_NYLIUM",
        "w": "COBBLESTONE",
        "x": "OAK_PLANKS",
        "y": "SPRUCE_PLANKS",
        "z": "BIRCH_PLANKS",
        "A": "JUNGLE_PLANKS",
        "B": "ACACIA_PLANKS",
        "C": "CHERRY_PLANKS",
        "D": "DARK_OAK_PLANKS",
        "E": "MANGROVE_PLANKS",
        "F": "BAMBOO_PLANKS",
        "G": "CRIMSON_PLANKS",
        "H": "WARPED_PLANKS",
        "I": "BAMBOO_MOSAIC",
        "J": "OAK_SAPLING",
        "K": "SPRUCE_SAPLING",
        "L": "BIRCH_SAPLING",
        "M": "JUNGLE_SAPLING",
        "N": "ACACIA_SAPLING",
        "O": "CHERRY_SAPLING",
        "P": "DARK_OAK_SAPLING",
        "Q": "MANGROVE_PROPAGULE",
        "R": "BEDROCK",
        "S": "SAND",
        "T": "SUSPICIOUS_SAND",
        "U": "SUSPICIOUS_GRAVEL",
        "V": "RED_SAND",
        "W": "GRAVEL",
        "X": "COAL_ORE",
        "Y": "DEEPSLATE_COAL_ORE",
        "Z": "IRON_ORE",
        "aa": "DEEPSLATE_IRON_ORE",
        "ab": "COPPER_ORE",
        "ac": "DEEPSLATE_COPPER_ORE",
        "ad": "GOLD_ORE",
        "ae": "DEEPSLATE_GOLD_ORE",
        "af": "REDSTONE_ORE",
        "ag": "DEEPSLATE_REDSTONE_ORE",
        "ah": "EMERALD_ORE",
        "ai": "DEEPSLATE_EMERALD_ORE",
        "aj": "LAPIS_ORE",
        "ak": "DEEPSLATE_LAPIS_ORE",
        "al": "DIAMOND_ORE",
        "am": "DEEPSLATE_DIAMOND_ORE",
        "an": "NETHER_GOLD_ORE",
        "ao": "NETHER_QUARTZ_ORE",
        "ap": "ANCIENT_DEBRIS",
        "aq": "COAL_BLOCK",
        "ar": "RAW_IRON_BLOCK",
        "as": "RAW_COPPER_BLOCK",
        "at": "RAW_GOLD_BLOCK",
        "au": "AMETHYST_BLOCK",
        "av": "BUDDING_AMETHYST",
        "aw": "IRON_BLOCK",
        "ax": "COPPER_BLOCK",
        "ay": "GOLD_BLOCK",
        "az": "DIAMOND_BLOCK",
        "aA": "NETHERITE_BLOCK",
        "aB": "EXPOSED_COPPER",
        "aC": "WEATHERED_COPPER",
        "aD": "OXIDIZED_COPPER",
        "aE": "CUT_COPPER",
        "aF": "EXPOSED_CUT_COPPER",
        "aG": "WEATHERED_CUT_COPPER",
        "aH": "OXIDIZED_CUT_COPPER",
        "aI": "CUT_COPPER_STAIRS",
        "aJ": "EXPOSED_CUT_COPPER_STAIRS",
        "aK": "WEATHERED_CUT_COPPER_STAIRS",
        "aL": "OXIDIZED_CUT_COPPER_STAIRS",
        "aM": "CUT_COPPER_SLAB",
        "aN": "EXPOSED_CUT_COPPER_SLAB",
        "aO": "WEATHERED_CUT_COPPER_SLAB",
        "aP": "OXIDIZED_CUT_COPPER_SLAB",
        "aQ": "WAXED_COPPER_BLOCK",
        "aR": "WAXED_EXPOSED_COPPER",
        "aS": "WAXED_WEATHERED_COPPER",
        "aT": "WAXED_OXIDIZED_COPPER",
        "aU": "WAXED_CUT_COPPER",
        "aV": "WAXED_EXPOSED_CUT_COPPER",
        "aW": "WAXED_WEATHERED_CUT_COPPER",
        "aX": "WAXED_OXIDIZED_CUT_COPPER",
        "aY": "WAXED_CUT_COPPER_STAIRS",
        "aZ": "WAXED_EXPOSED_CUT_COPPER_STAIRS",
        "ba": "WAXED_WEATHERED_CUT_COPPER_STAIRS",
        "bb": "WAXED_OXIDIZED_CUT_COPPER_STAIRS",
        "bc": "WAXED_CUT_COPPER_SLAB",
        "bd": "WAXED_EXPOSED_CUT_COPPER_SLAB",
        "be": "WAXED_WEATHERED_CUT_COPPER_SLAB",
        "bf": "WAXED_OXIDIZED_CUT_COPPER_SLAB",
        "bg": "OAK_LOG",
        "bh": "SPRUCE_LOG",
        "bi": "BIRCH_LOG",
        "bj": "JUNGLE_LOG",
        "bk": "ACACIA_LOG",
        "bl": "CHERRY_LOG",
        "bm": "DARK_OAK_LOG",
        "bn": "MANGROVE_LOG",
        "bo": "MANGROVE_ROOTS",
        "bp": "MUDDY_MANGROVE_ROOTS",
        "bq": "CRIMSON_STEM",
        "br": "WARPED_STEM",
        "bs": "BAMBOO_BLOCK",
        "bt": "STRIPPED_OAK_LOG",
        "bu": "STRIPPED_SPRUCE_LOG",
        "bv": "STRIPPED_BIRCH_LOG",
        "bw": "STRIPPED_JUNGLE_LOG",
        "bx": "STRIPPED_ACACIA_LOG",
        "by": "STRIPPED_CHERRY_LOG",
        "bz": "STRIPPED_DARK_OAK_LOG",
        "bA": "STRIPPED_MANGROVE_LOG",
        "bB": "STRIPPED_CRIMSON_STEM",
        "bC": "STRIPPED_WARPED_STEM",
        "bD": "STRIPPED_OAK_WOOD",
        "bE": "STRIPPED_SPRUCE_WOOD",
        "bF": "STRIPPED_BIRCH_WOOD",
        "bG": "STRIPPED_JUNGLE_WOOD",
        "bH": "STRIPPED_ACACIA_WOOD",
        "bI": "STRIPPED_CHERRY_WOOD",
        "bJ": "STRIPPED_DARK_OAK_WOOD",
        "bK": "STRIPPED_MANGROVE_WOOD",
        "bL": "STRIPPED_CRIMSON_HYPHAE",
        "bM": "STRIPPED_WARPED_HYPHAE",
        "bN": "STRIPPED_BAMBOO_BLOCK",
        "bO": "OAK_WOOD",
        "bP": "SPRUCE_WOOD",
        "bQ": "BIRCH_WOOD",
        "bR": "JUNGLE_WOOD",
        "bS": "ACACIA_WOOD",
        "bT": "CHERRY_WOOD",
        "bU": "DARK_OAK_WOOD",
        "bV": "MANGROVE_WOOD",
        "bW": "CRIMSON_HYPHAE",
        "bX": "WARPED_HYPHAE",
        "bY": "OAK_LEAVES",
        "bZ": "SPRUCE_LEAVES",
        "ca": "BIRCH_LEAVES",
        "cb": "JUNGLE_LEAVES",
        "cc": "ACACIA_LEAVES",
        "cd": "CHERRY_LEAVES",
        "ce": "DARK_OAK_LEAVES",
        "cf": "MANGROVE_LEAVES",
        "cg": "AZALEA_LEAVES",
        "ch": "FLOWERING_AZALEA_LEAVES",
        "ci": "SPONGE",
        "cj": "WET_SPONGE",
        "ck": "GLASS",
        "cl": "TINTED_GLASS",
        "cm": "LAPIS_BLOCK",
        "cn": "SANDSTONE",
        "co": "CHISELED_SANDSTONE",
        "cp": "CUT_SANDSTONE",
        "cq": "COBWEB",
        "cr": "GRASS",
        "cs": "FERN",
        "ct": "AZALEA",
        "cu": "FLOWERING_AZALEA",
        "cv": "DEAD_BUSH",
        "cw": "SEAGRASS",
        "cx": "SEA_PICKLE",
        "cy": "WHITE_WOOL",
        "cz": "ORANGE_WOOL",
        "cA": "MAGENTA_WOOL",
        "cB": "LIGHT_BLUE_WOOL",
        "cC": "YELLOW_WOOL",
        "cD": "LIME_WOOL",
        "cE": "PINK_WOOL",
        "cF": "GRAY_WOOL",
        "cG": "LIGHT_GRAY_WOOL",
        "cH": "CYAN_WOOL",
        "cI": "PURPLE_WOOL",
        "cJ": "BLUE_WOOL",
        "cK": "BROWN_WOOL",
        "cL": "GREEN_WOOL",
        "cM": "RED_WOOL",
        "cN": "BLACK_WOOL",
        "cO": "DANDELION",
        "cP": "POPPY",
        "cQ": "BLUE_ORCHID",
        "cR": "ALLIUM",
        "cS": "AZURE_BLUET",
        "cT": "RED_TULIP",
        "cU": "ORANGE_TULIP",
        "cV": "WHITE_TULIP",
        "cW": "PINK_TULIP",
        "cX": "OXEYE_DAISY",
        "cY": "CORNFLOWER",
        "cZ": "LILY_OF_THE_VALLEY",
        "da": "WITHER_ROSE",
        "db": "TORCHFLOWER",
        "dc": "PITCHER_PLANT",
        "dd": "SPORE_BLOSSOM",
        "de": "BROWN_MUSHROOM",
        "df": "RED_MUSHROOM",
        "dg": "CRIMSON_FUNGUS",
        "dh": "WARPED_FUNGUS",
        "di": "CRIMSON_ROOTS",
        "dj": "WARPED_ROOTS",
        "dk": "NETHER_SPROUTS",
        "dl": "WEEPING_VINES",
        "dm": "TWISTING_VINES",
        "dn": "SUGAR_CANE",
        "do": "KELP",
        "dp": "MOSS_CARPET",
        "dq": "PINK_PETALS",
        "dr": "MOSS_BLOCK",
        "ds": "HANGING_ROOTS",
        "dt": "BIG_DRIPLEAF",
        "du": "SMALL_DRIPLEAF",
        "dv": "BAMBOO",
        "dw": "OAK_SLAB",
        "dx": "SPRUCE_SLAB",
        "dy": "BIRCH_SLAB",
        "dz": "JUNGLE_SLAB",
        "dA": "ACACIA_SLAB",
        "dB": "CHERRY_SLAB",
        "dC": "DARK_OAK_SLAB",
        "dD": "MANGROVE_SLAB",
        "dE": "BAMBOO_SLAB",
        "dF": "BAMBOO_MOSAIC_SLAB",
        "dG": "CRIMSON_SLAB",
        "dH": "WARPED_SLAB",
        "dI": "STONE_SLAB",
        "dJ": "SMOOTH_STONE_SLAB",
        "dK": "SANDSTONE_SLAB",
        "dL": "CUT_STANDSTONE_SLAB",
        "dM": "PETRIFIED_OAK_SLAB",
        "dN": "COBBLESTONE_SLAB",
        "dO": "BRICK_SLAB",
        "dP": "STONE_BRICK_SLAB",
        "dQ": "MUD_BRICK_SLAB",
        "dR": "NETHER_BRICK_SLAB",
        "dS": "QUARTZ_SLAB",
        "dT": "RED_SANDSTONE_SLAB",
        "dU": "CUT_RED_SANDSTONE_SLAB",
        "dV": "PURPUR_SLAB",
        "dW": "PRISMARINE_SLAB",
        "dX": "PRISMARINE_BRICK_SLAB",
        "dY": "DARK_PRISMARINE_SLAB",
        "dZ": "SMOOTH_QUARTZ",
        "ea": "SMOOTH_RED_SANDSTONE",
        "eb": "SMOOTH_SANDSTONE",
        "ec": "SMOOTH_STONE",
        "ed": "BRICKS",
        "ee": "BOOKSHELF",
        "ef": "CHISELED_BOOKSHELF",
        "eg": "DECORATED_POT",
        "eh": "MOSSY_COBBLESTONE",
        "ei": "OBSIDIAN",
        "ej": "TORCH",
        "ek": "END_ROD",
        "el": "CHORUS_PLANT",
        "em": "CHORUS_FLOWER",
        "en": "PURPUR_BLOCK",
        "eo": "PURPUR_PILLAR",
        "ep": "PURPUR_STAIRS",
        "eq": "SPAWNER",
        "er": "CHEST",
        "es": "CRAFTING_TABLE",
        "et": "FARMLAND",
        "eu": "FURNACE",
        "ev": "LADDER",
        "ew": "COBBLESTONE_STAIRS",
        "ex": "SNOW",
        "ey": "ICE",
        "ez": "SNOW_BLOCK",
        "eA": "CACTUS",
        "eB": "CLAY",
        "eC": "JUKEBOX",
        "eD": "OAK_FENCE",
        "eE": "SPRUCE_FENCE",
        "eF": "BIRCH_FENCE",
        "eG": "JUNGLE_FENCE",
        "eH": "ACACIA_FENCE",
        "eI": "CHERRY_FENCE",
        "eJ": "DARK_OAK_FENCE",
        "eK": "MANGROVE_FENCE",
        "eL": "BAMBOO_FENCE",
        "eM": "CRIMSON_FENCE",
        "eN": "WARPED_FENCE",
        "eO": "PUMPKIN",
        "eP": "CARVED_PUMPKIN",
        "eQ": "JACK_O_LANTERN",
        "eR": "NETHERRACK",
        "eS": "SOUL_SAND",
        "eT": "SOUL_SOIL",
        "eU": "BASALT",
        "eV": "POLISHED_BASALT",
        "eW": "SMOOTH_BASALT",
        "eX": "SOUL_TORCH",
        "eY": "GLOWSTONE",
        "eZ": "INFESTED_STONE",
        "fa": "INFESTED_COBBLESTONE",
        "fb": "INFESTED_STONE_BRICKS",
        "fc": "INFESTED_MOSSY_STONE_BRICKS",
        "fd": "INFESTED_CRACKED_STONE_BRICKS",
        "fe": "INFESTED_CHISELED_STONE_BRICKS",
        "ff": "INFESTED_DEEPSLATE",
        "fg": "STONE_BRICKS",
        "fh": "MOSSY_STONE_BRICKS",
        "fi": "CRACKED_STONE_BRICKS",
        "fj": "CHISELED_STONE_BRICKS",
        "fk": "PACKED_MUD",
        "fl": "MUD_BRICKS",
        "fm": "DEEPSLATE_BRICKS",
        "fn": "CRACKED_DEEPSLATE_BRICKS",
        "fo": "DEEPSLATE_TILES",
        "fp": "CRACKED_DEEPSLATE_TILES",
        "fq": "CHISELED_DEEPSLATE",
        "fr": "REINFORCED_DEEPSLATE",
        "fs": "BROWN_MUSHROOM_BLOCK",
        "ft": "RED_MUSHROOM_BLOCK",
        "fu": "MUSHROOM_STEM",
        "fv": "IRON_BARS",
        "fw": "CHAIN",
        "fx": "GLASS_PANE",
        "fy": "MELON",
        "fz": "VINE",
        "fA": "GLOW_LICHEN",
        "fB": "BRICK_STAIRS",
        "fC": "STONE_BRICK_STAIRS",
        "fD": "MUD_BRICK_STAIRS",
        "fE": "MYCELIUM",
        "fF": "LILY_PAD",
        "fG": "NETHER_BRICKS",
        "fH": "CRACKED_NETHER_BRICKS",
        "fI": "CHISELED_NETHER_BRICKS",
        "fJ": "NETHER_BRICK_FENCE",
        "fK": "NETHER_BRICK_STAIRS",
        "fL": "SCULK",
        "fM": "SCULK_VEIN",
        "fN": "SCULK_CATALYST",
        "fO": "SCULK_SHRIEKER",
        "fP": "ENCHANTING_TABLE",
        "fQ": "END_PORTAL_FRAME",
        "fR": "END_STONE",
        "fS": "END_STONE_BRICKS",
        "fT": "DRAGON_EGG",
        "fU": "SANDSTONE_STAIRS",
        "fV": "ENDER_CHEST",
        "fW": "EMERALD_BLOCK",
        "fX": "OAK_STAIRS",
        "fY": "SPRUCE_STAIRS",
        "fZ": "BIRCH_STAIRS",
        "ga": "JUNGLE_STAIRS",
        "gb": "ACACIA_STAIRS",
        "gc": "CHERRY_STAIRS",
        "gd": "DARK_OAK_STAIRS",
        "ge": "MANGROVE_STAIRS",
        "gf": "BAMBOO_STAIRS",
        "gg": "BAMBOO_MOSAIC_STAIRS",
        "gh": "CRIMSON_STAIRS",
        "gi": "WARPED_STAIRS",
        "gj": "COMMAND_BLOCK",
        "gk": "BEACON",
        "gl": "COBBLESTONE_WALL",
        "gm": "MOSSY_COBBLESTONE_WALL",
        "gn": "BRICK_WALL",
        "go": "PRISMARINE_WALL",
        "gp": "RED_SANDSTONE_WALL",
        "gq": "MOSSY_STONE_BRICK_WALL",
        "gr": "GRANITE_WALL",
        "gs": "STONE_BRICK_WALL",
        "gt": "MUD_BRICK_WALL",
        "gu": "NETHER_BRICK_WALL",
        "gv": "ANDESITE_WALL",
        "gw": "RED_NETHER_BRICK_WALL",
        "gx": "SANDSTONE_WALL",
        "gy": "END_STONE_BRICK_WALL",
        "gz": "DIORITE_WALL",
        "gA": "BLACKSTONE_WALL",
        "gB": "POLISHED_BLACKSTONE_WALL",
        "gC": "POLISHED_BLACKSTONE_BRICK_WALL",
        "gD": "COBBLED_DEEPSLATE_WALL",
        "gE": "POLISHED_DEEPSLATE_WALL",
        "gF": "DEEPSLATE_BRICK_WALL",
        "gG": "DEEPSLATE_TILE_WALL",
        "gH": "ANVIL",
        "gI": "CHIPPED_ANVIL",
        "gJ": "DAMAGED_ANVIL",
        "gK": "CHISELED_QUARTZ_BLOCK",
        "gL": "QUARTZ_BLOCK",
        "gM": "QUARTZ_BRICKS",
        "gN": "QUARTZ_PILLAR",
        "gO": "QUARTZ_STAIRS",
        "gP": "WHITE_TERRACOTTA",
        "gQ": "ORANGE_TERRACOTTA",
        "gR": "MAGENTA_TERRACOTTA",
        "gS": "LIGHT_BLUE_TERRACOTTA",
        "gT": "YELLOW_TERRACOTTA",
        "gU": "LIME_TERRACOTTA",
        "gV": "PINK_TERRACOTTA",
        "gW": "GRAY_TERRACOTTA",
        "gX": "LIGHT_GRAY_TERRACOTTA",
        "gY": "CYAN_TERRACOTTA",
        "gZ": "PURPLE_TERRACOTTA",
        "ha": "BLUE_TERRACOTTA",
        "hb": "BROWN_TERRACOTTA",
        "hc": "GREEN_TERRACOTTA",
        "hd": "RED_TERRACOTTA",
        "he": "BLACK_TERRACOTTA",
        "hf": "BARRIER",
        "hg": "LIGHT",
        "hh": "HAY_BLOCK",
        "hi": "WHITE_CARPET",
        "hj": "ORANGE_CARPET",
        "hk": "MAGENTA_CARPET",
        "hl": "LIGHT_BLUE_CARPET",
        "hm": "YELLOW_CARPET",
        "hn": "LIME_CARPET",
        "ho": "PINK_CARPET",
        "hp": "GRAY_CARPET",
        "hq": "LIGHT_GRAY_CARPET",
        "hr": "CYAN_CARPET",
        "hs": "PURPLE_CARPET",
        "ht": "BLUE_CARPET",
        "hu": "BROWN_CARPET",
        "hv": "GREEN_CARPET",
        "hw": "RED_CARPET",
        "hx": "BLACK_CARPET",
        "hy": "TERRACOTTA",
        "hz": "PACKED_ICE",
        "hA": "DIRT_PATH",
        "hB": "SUNFLOWER",
        "hC": "LILAC",
        "hD": "ROSE_BUSH",
        "hE": "PEONY",
        "hF": "TALL_GRASS",
        "hG": "LARGE_FERN",
        "hH": "WHITE_STAINED_GLASS",
        "hI": "ORANGE_STAINED_GLASS",
        "hJ": "MAGENTA_STAINED_GLASS",
        "hK": "LIGHT_BLUE_STAINED_GLASS",
        "hL": "YELLOW_STAINED_GLASS",
        "hM": "LIME_STAINED_GLASS",
        "hN": "PINK_STAINED_GLASS",
        "hO": "GRAY_STAINED_GLASS",
        "hP": "LIGHT_GRAY_STAINED_GLASS",
        "hQ": "CYAN_STAINED_GLASS",
        "hR": "PURPLE_STAINED_GLASS",
        "hS": "BLUE_STAINED_GLASS",
        "hT": "BROWN_STAINED_GLASS",
        "hU": "GREEN_STAINED_GLASS",
        "hV": "RED_STAINED_GLASS",
        "hW": "BLACK_STAINED_GLASS",
        "hX": "WHITE_STAINED_GLASS_PANE",
        "hY": "ORANGE_STAINED_GLASS_PANE",
        "hZ": "MAGENTA_STAINED_GLASS_PANE",
        "ia": "LIGHT_BLUE_STAINED_GLASS_PANE",
        "ib": "YELLOW_STAINED_GLASS_PANE",
        "ic": "LIME_STAINED_GLASS_PANE",
        "id": "PINK_STAINED_GLASS_PANE",
        "ie": "GRAY_STAINED_GLASS_PANE",
        "if": "LIGHT_GRAY_STAINED_GLASS_PANE",
        "ig": "CYAN_STAINED_GLASS_PANE",
        "ih": "PURPLE_STAINED_GLASS_PANE",
        "ii": "BLUE_STAINED_GLASS_PANE",
        "ij": "BROWN_STAINED_GLASS_PANE",
        "ik": "GREEN_STAINED_GLASS_PANE",
        "il": "RED_STAINED_GLASS_PANE",
        "im": "BLACK_STAINED_GLASS_PANE",
        "in": "PRISMARINE",
        "io": "PRISMARINE_BRICKS",
        "ip": "DARK_PRISMARINE",
        "iq": "PRISMARINE_STAIRS",
        "ir": "PRISMARINE_BRICK_STAIRS",
        "is": "DARK_PRISMARINE_STAIRS",
        "it": "SEA_LANTERN",
        "iu": "RED_SANDSTONE",
        "iv": "CHISELED_RED_SANDSTONE",
        "iw": "CUT_RED_SANDSTONE",
        "ix": "RED_SANDSTONE_STAIRS",
        "iy": "REPEATING_COMMAND_BLOCK",
        "iz": "CHAIN_COMMAND_BLOCK",
        "iA": "MAGMA_BLOCK",
        "iB": "NETHER_WART_BLOCK",
        "iC": "WARPED_WART_BLOCK",
        "iD": "RED_NETHER_BRICKS",
        "iE": "BONE_BLOCK",
        "iF": "STRUCTURE_VOID",
        "iG": "SHULKER_BOX",
        "iH": "WHITE_SHULKER_BOX",
        "iI": "ORANGE_SHULKER_BOX",
        "iJ": "MAGENTA_SHULKER_BOX",
        "iK": "LIGHT_BLUE_SHULKER_BOX",
        "iL": "YELLOW_SHULKER_BOX",
        "iM": "LIME_SHULKER_BOX",
        "iN": "PINK_SHULKER_BOX",
        "iO": "GRAY_SHULKER_BOX",
        "iP": "LIGHT_GRAY_SHULKER_BOX",
        "iQ": "CYAN_SHULKER_BOX",
        "iR": "PURPLE_SHULKER_BOX",
        "iS": "BLUE_SHULKER_BOX",
        "iT": "BROWN_SHULKER_BOX",
        "iU": "GREEN_SHULKER_BOX",
        "iV": "RED_SHULKER_BOX",
        "iW": "BLACK_SHULKER_BOX",
        "iX": "WHITE_GLAZED_TERRACOTTA",
        "iY": "ORANGE_GLAZED_TERRACOTTA",
        "iZ": "MAGENTA_GLAZED_TERRACOTTA",
        "ja": "LIGHT_BLUE_GLAZED_TERRACOTTA",
        "jb": "YELLOW_GLAZED_TERRACOTTA",
        "jc": "LIME_GLAZED_TERRACOTTA",
        "jd": "PINK_GLAZED_TERRACOTTA",
        "je": "GRAY_GLAZED_TERRACOTTA",
        "jf": "LIGHT_GRAY_GLAZED_TERRACOTTA",
        "jg": "CYAN_GLAZED_TERRACOTTA",
        "jh": "PURPLE_GLAZED_TERRACOTTA",
        "ji": "BLUE_GLAZED_TERRACOTTA",
        "jj": "BROWN_GLAZED_TERRACOTTA",
        "jk": "GREEN_GLAZED_TERRACOTTA",
        "jl": "RED_GLAZED_TERRACOTTA",
        "jm": "BLACK_GLAZED_TERRACOTTA",
        "jn": "WHITE_CONCRETE",
        "jo": "ORANGE_CONCRETE",
        "jp": "MAGENTA_CONCRETE",
        "jq": "LIGHT_BLUE_CONCRETE",
        "jr": "YELLOW_CONCRETE",
        "js": "LIME_CONCRETE",
        "jt": "PINK_CONCRETE",
        "ju": "GRAY_CONCRETE",
        "jv": "LIGHT_GRAY_CONCRETE",
        "jw": "CYAN_CONCRETE",
        "jx": "PURPLE_CONCRETE",
        "jy": "BLUE_CONCRETE",
        "jz": "BROWN_CONCRETE",
        "jA": "GREEN_CONCRETE",
        "jB": "RED_CONCRETE",
        "jC": "BLACK_CONCRETE",
        "jD": "WHITE_CONCRETE_POWDER",
        "jE": "ORANGE_CONCRETE_POWDER",
        "jF": "MAGENTA_CONCRETE_POWDER",
        "jG": "LIGHT_BLUE_CONCRETE_POWDER",
        "jH": "YELLOW_CONCRETE_POWDER",
        "jI": "LIME_CONCRETE_POWDER",
        "jJ": "PINK_CONCRETE_POWDER",
        "jK": "GRAY_CONCRETE_POWDER",
        "jL": "LIGHT_GRAY_CONCRETE_POWDER",
        "jM": "CYAN_CONCRETE_POWDER",
        "jN": "PURPLE_CONCRETE_POWDER",
        "jO": "BLUE_CONCRETE_POWDER",
        "jP": "BROWN_CONCRETE_POWDER",
        "jQ": "GREEN_CONCRETE_POWDER",
        "jR": "RED_CONCRETE_POWDER",
        "jS": "BLACK_CONCRETE_POWDER",
        "jT": "TURTLE_EGG",
        "jU": "SNIFFER_EGG",
        "jV": "DEAD_TUBE_CORAL_BLOCK",
        "jW": "DEAD_BRAIN_CORAL_BLOCK",
        "jX": "DEAD_BUBBLE_CORAL_BLOCK",
        "jY": "DEAD_FIRE_CORAL_BLOCK",
        "jZ": "DEAD_HORN_CORAL_BLOCK",
        "ka": "TUBE_CORAL_BLOCK",
        "kb": "BRAIN_CORAL_BLOCK",
        "kc": "BUBBLE_CORAL_BLOCK",
        "kd": "FIRE_CORAL_BLOCK",
        "ke": "HORN_CORAL_BLOCK",
        "kf": "TUBE_CORAL",
        "kg": "BRAIN_CORAL",
        "kh": "BUBBLE_CORAL",
        "ki": "FIRE_CORAL",
        "kj": "HORN_CORAL",
        "kk": "DEAD_BRAIN_CORAL",
        "kl": "DEAD_BUBBLE_CORAL",
        "km": "DEAD_FIRE_CORAL",
        "kn": "DEAD_HORN_CORAL",
        "ko": "DEAD_TUBE_CORAL",
        "kp": "TUBE_CORAL_FAN",
        "kq": "BRAIN_CORAL_FAN",
        "kr": "BUBBLE_CORAL_FAN",
        "ks": "FIRE_CORAL_FAN",
        "kt": "HORN_CORAL_FAN",
        "ku": "DEAD_TUBE_CORAL_FAN",
        "kv": "DEAD_BRAIN_CORAL_FAN",
        "kw": "DEAD_BUBBLE_CORAL_FAN",
        "kx": "DEAD_FIRE_CORAL_FAN",
        "ky": "DEAD_HORN_CORAL_FAN",
        "kz": "BLUE_ICE",
        "kA": "CONDUIT",
        "kB": "POLISHED_GRANITE_STAIRS",
        "kC": "SMOOTH_RED_SANDSTONE_STAIRS",
        "kD": "MOSSY_STONE_BRICK_STAIRS",
        "kE": "POLISHED_DIORITE_STAIRS",
        "kF": "MOSSY_COBBLESTONE_STAIRS",
        "kG": "END_STONE_BRICK_STAIRS",
        "kH": "STONE_STAIRS",
        "kI": "SMOOTH_SANDSTONE_STAIRS",
        "kJ": "SMOOTH_QUARTZ_STAIRS",
        "kK": "GRANITE_STAIRS",
        "kL": "ANDESITE_STAIRS",
        "kM": "RED_NETHER_BRICK_STAIRS",
        "kN": "POLISHED_ANDESITE_STAIRS",
        "kO": "DIORITE_STAIRS",
        "kP": "COBBLED_DEEPSLATE_STAIRS",
        "kQ": "POLISHED_DEEPSLATE_STAIRS",
        "kR": "DEEPSLATE_BRICK_STAIRS",
        "kS": "DEEPSLATE_TILE_STAIRS",
        "kT": "POLISHED_GRANITE_SLAB",
        "kU": "SMOOTH_RED_SANDSTONE_SLAB",
        "kV": "MOSSY_STONE_BRICK_SLAB",
        "kW": "POLISHED_DIORITE_SLAB",
        "kX": "MOSSY_COBBLESTONE_SLAB",
        "kY": "END_STONE_BRICK_SLAB",
        "kZ": "SMOOTH_SANDSTONE_SLAB",
        "la": "SMOOTH_QUARTZ_SLAB",
        "lb": "GRANITE_SLAB",
        "lc": "ANDESITE_SLAB",
        "ld": "RED_NETHER_BRICK_SLAB",
        "le": "POLISHED_ANDESITE_SLAB",
        "lf": "DIORITE_SLAB",
        "lg": "COBBLED_DEEPSLATE_SLAB",
        "lh": "POLISHED_DEEPSLATE_SLAB",
        "li": "DEEPSLATE_BRICK_SLAB",
        "lj": "DEEPSLATE_TILE_SLAB",
        "lk": "SCAFFOLDING",
        "ll": "REDSTONE",
        "lm": "REDSTONE_TORCH",
        "ln": "REDSTONE_BLOCK",
        "lo": "REPEATER",
        "lp": "COMPARATOR",
        "lq": "PISTON",
        "lr": "STICKY_PISTON",
        "ls": "SLIME_BLOCK",
        "lt": "HONEY_BLOCK",
        "lu": "OBSERVER",
        "lv": "HOPPER",
        "lw": "DISPENSER",
        "lx": "DROPPER",
        "ly": "LECTERN",
        "lz": "TARGET",
        "lA": "LEVER",
        "lB": "LIGHTNING_ROD",
        "lC": "DAYLIGHT_DETECTOR",
        "lD": "SCULK_SENSOR",
        "lE": "CALIBRATED_SCULK_SENSOR",
        "lF": "TRIPWIRE_HOOK",
        "lG": "TRAPPED_CHEST",
        "lH": "TNT",
        "lI": "REDSTONE_LAMP",
        "lJ": "NOTE_BLOCK",
        "lK": "STONE_BUTTON",
        "lL": "POLISHED_BLACKSTONE_BUTTON",
        "lM": "OAK_BUTTON",
        "lN": "SPRUCE_BUTTON",
        "lO": "BIRCH_BUTTON",
        "lP": "JUNGLE_BUTTON",
        "lQ": "ACACIA_BUTTON",
        "lR": "CHERRY_BUTTON",
        "lS": "DARK_OAK_BUTTON",
        "lT": "MANGROVE_BUTTON",
        "lU": "BAMBOO_BUTTON",
        "lV": "CRIMSON_BUTTON",
        "lW": "WARPED_BUTTON",
        "lX": "STONE_PRESSURE_PLATE",
        "lY": "POLISHED_BLACKSTONE_PRESSURE_PLATE",
        "lZ": "LIGHT_WEIGHTED_PRESSURE_PLATE",
        "ma": "HEAVY_WEIGHTED_PRESSURE_PLATE",
        "mb": "OAK_PRESSURE_PLATE",
        "mc": "SPRUCE_PRESSURE_PLATE",
        "md": "BIRCH_PRESSURE_PLATE",
        "me": "JUNGLE_PRESSURE_PLATE",
        "mf": "ACACIA_PRESSURE_PLATE",
        "mg": "CHERRY_PRESSURE_PLATE",
        "mh": "DARK_OAK_PRESSURE_PLATE",
        "mi": "MANGROVE_PRESSURE_PLATE",
        "mj": "BAMBOO_PRESSURE_PLATE",
        "mk": "CRIMSON_PRESSURE_PLATE",
        "ml": "WARPED_PRESSURE_PLATE",
        "mm": "IRON_DOOR",
        "mn": "OAK_DOOR",
        "mo": "SPRUCE_DOOR",
        "mp": "BIRCH_DOOR",
        "mq": "JUNGLE_DOOR",
        "mr": "ACACIA_DOOR",
        "ms": "CHERRY_DOOR",
        "mt": "DARK_OAK_DOOR",
        "mu": "MANGROVE_DOOR",
        "mv": "BAMBOO_DOOR",
        "mw": "CRIMSON_DOOR",
        "mx": "WARPED_DOOR",
        "my": "IRON_TRAPDOOR",
        "mz": "OAK_TRAPDOOR",
        "mA": "SPRUCE_TRAPDOOR",
        "mB": "BIRCH_TRAPDOOR",
        "mC": "JUNGLE_TRAPDOOR",
        "mD": "ACACIA_TRAPDOOR",
        "mE": "CHERRY_TRAPDOOR",
        "mF": "DARK_OAK_TRAPDOOR",
        "mG": "MANGROVE_TRAPDOOR",
        "mH": "BAMBOO_TRAPDOOR",
        "mI": "CRIMSON_TRAPDOOR",
        "mJ": "WARPED_TRAPDOOR",
        "mK": "OAK_FENCE_GATE",
        "mL": "SPRUCE_FENCE_GATE",
        "mM": "BIRCH_FENCE_GATE",
        "mN": "JUNGLE_FENCE_GATE",
        "mO": "ACACIA_FENCE_GATE",
        "mP": "CHERRY_FENCE_GATE",
        "mQ": "DARK_OAK_FENCE_GATE",
        "mR": "MANGROVE_FENCE_GATE",
        "mS": "BAMBOO_FENCE_GATE",
        "mT": "CRIMSON_FENCE_GATE",
        "mU": "WARPED_FENCE_GATE",
        "mV": "POWERED_RAIL",
        "mW": "DETECTOR_RAIL",
        "mX": "RAIL",
        "mY": "ACTIVATOR_RAIL",
        "mZ": "SADDLE",
        "na": "MINECART",
        "nb": "CHEST_MINECART",
        "nc": "FURNACE_MINECART",
        "nd": "TNT_MINECART",
        "ne": "HOPPER_MINECART",
        "nf": "CARROT_ON_A_STICK",
        "ng": "WARPED_FUNGUS_ON_A_STICK",
        "nh": "ELYTRA",
        "ni": "OAK_BOAT",
        "nj": "OAK_CHEST_BOAT",
        "nk": "SPRUCE_BOAT",
        "nl": "SPRUCE_CHEST_BOAT",
        "nm": "BIRCH_BOAT",
        "nn": "BIRCH_CHEST_BOAT",
        "no": "JUNGLE_BOAT",
        "np": "JUNGLE_CHEST_BOAT",
        "nq": "ACACIA_BOAT",
        "nr": "ACACIA_CHEST_BOAT",
        "ns": "CHERRY_BOAT",
        "nt": "CHERRY_CHEST_BOAT",
        "nu": "DARK_OAK_BOAT",
        "nv": "DARK_OAK_CHEST_BOAT",
        "nw": "MANGROVE_BOAT",
        "nx": "MANGROVE_CHEST_BOAT",
        "ny": "BAMBOO_RAFT",
        "nz": "BAMBOO_CHEST_RAFT",
        "nA": "STRUCTURE_BLOCK",
        "nB": "JIGSAW",
        "nC": "TURTLE_HELMET",
        "nD": "SCUTE",
        "nE": "FLINT_AND_STEEL",
        "nF": "APPLE",
        "nG": "BOW",
        "nH": "ARROW",
        "nI": "COAL",
        "nJ": "CHARCOAL",
        "nK": "DIAMOND",
        "nL": "EMERALD",
        "nM": "LAPIS_LAZULI",
        "nN": "QUARTZ",
        "nO": "AMETHYST_SHARD",
        "nP": "RAW_IRON",
        "nQ": "IRON_INGOT",
        "nR": "RAW_COPPER",
        "nS": "COPPER_INGOT",
        "nT": "RAW_GOLD",
        "nU": "GOLD_INGOT",
        "nV": "NETHERITE_INGOT",
        "nW": "NETHERITE_SCRAP",
        "nX": "WOODEN_SWORD",
        "nY": "WOODEN_SHOVEL",
        "nZ": "WOODEN_PICKAXE",
        "oa": "WOODEN_AXE",
        "ob": "WOODEN_HOE",
        "oc": "STONE_SWORD",
        "od": "STONE_SHOVEL",
        "oe": "STONE_PICKAXE",
        "of": "STONE_AXE",
        "og": "STONE_HOE",
        "oh": "GOLDEN_SWORD",
        "oi": "GOLDEN_SHOVEL",
        "oj": "GOLDEN_PICKAXE",
        "ok": "GOLDEN_AXE",
        "ol": "GOLDEN_HOE",
        "om": "IRON_SWORD",
        "on": "IRON_SHOVEL",
        "oo": "IRON_PICKAXE",
        "op": "IRON_AXE",
        "oq": "IRON_HOE",
        "or": "DIAMOND_SWORD",
        "os": "DIAMOND_SHOVEL",
        "ot": "DIAMOND_PICKAXE",
        "ou": "DIAMOND_AXE",
        "ov": "DIAMOND_HOE",
        "ow": "NETHERITE_SWORD",
        "ox": "NETHERITE_SHOVEL",
        "oy": "NETHERITE_PICKAXE",
        "oz": "NETHERITE_AXE",
        "oA": "NETHERITE_HOE",
        "oB": "STICK",
        "oC": "BOWL",
        "oD": "MUSHROOM_STEW",
        "oE": "STRING",
        "oF": "FEATHER",
        "oG": "GUNPOWDER",
        "oH": "WHEAT_SEEDS",
        "oI": "WHEAT",
        "oJ": "BREAD",
        "oK": "LEATHER_HELMET",
        "oL": "LEATHER_CHESTPLATE",
        "oM": "LEATHER_LEGGINGS",
        "oN": "LEATHER_BOOTS",
        "oO": "CHAINMAIL_HELMET",
        "oP": "CHAINMAIL_CHESTPLATE",
        "oQ": "CHAINMAIL_LEGGINGS",
        "oR": "CHAINMAIL_BOOTS",
        "oS": "IRON_HELMET",
        "oT": "IRON_CHESTPLATE",
        "oU": "IRON_LEGGINGS",
        "oV": "IRON_BOOTS",
        "oW": "DIAMOND_HELMET",
        "oX": "DIAMOND_CHESTPLATE",
        "oY": "DIAMOND_LEGGINGS",
        "oZ": "DIAMOND_BOOTS",
        "pa": "GOLDEN_HELMET",
        "pb": "GOLDEN_CHESTPLATE",
        "pc": "GOLDEN_LEGGINGS",
        "pd": "GOLDEN_BOOTS",
        "pe": "NETHERITE_HELMET",
        "pf": "NETHERITE_CHESTPLATE",
        "pg": "NETHERITE_LEGGINGS",
        "ph": "NETHERITE_BOOTS",
        "pi": "FLINT",
        "pj": "PORKCHOP",
        "pk": "COOKED_PORKCHOP",
        "pl": "PAINTING",
        "pm": "GOLDEN_APPLE",
        "pn": "ENCHANTED_GOLDEN_APPLE",
        "po": "OAK_SIGN",
        "pp": "SPRUCE_SIGN",
        "pq": "BIRCH_SIGN",
        "pr": "JUNGLE_SIGN",
        "ps": "ACACIA_SIGN",
        "pt": "CHERRY_SIGN",
        "pu": "DARK_OAK_SIGN",
        "pv": "MANGROVE_SIGN",
        "pw": "BAMBOO_SIGN",
        "px": "CRIMSON_SIGN",
        "py": "WARPED_SIGN",
        "pz": "OAK_HANGING_SIGN",
        "pA": "SPRUCE_HANGING_SIGN",
        "pB": "BIRCH_HANGING_SIGN",
        "pC": "JUNGLE_HANGING_SIGN",
        "pD": "ACACIA_HANGING_SIGN",
        "pE": "CHERRY_HANGING_SIGN",
        "pF": "DARK_OAK_HANGING_SIGN",
        "pG": "MANGROVE_HANGING_SIGN",
        "pH": "BAMBOO_HANGING_SIGN",
        "pI": "CRIMSON_HANGING_SIGN",
        "pJ": "WARPED_HANGING_SIGN",
        "pK": "BUCKET",
        "pL": "WATER_BUCKET",
        "pM": "LAVA_BUCKET",
        "pN": "POWDER_SNOW_BUCKET",
        "pO": "SNOWBALL",
        "pP": "LEATHER",
        "pQ": "MILK_BUCKET",
        "pR": "PUFFERFISH_BUCKET",
        "pS": "SALMON_BUCKET",
        "pT": "COD_BUCKET",
        "pU": "TROPICAL_FISH_BUCKET",
        "pV": "AXOLOTL_BUCKET",
        "pW": "TADPOLE_BUCKET",
        "pX": "BRICK",
        "pY": "CLAY_BALL",
        "pZ": "DRIED_KELP_BLOCK",
        "qa": "PAPER",
        "qb": "BOOK",
        "qc": "SLIME_BALL",
        "qd": "EGG",
        "qe": "COMPASS",
        "qf": "RECOVERY_COMPASS",
        "qg": "BUNDLE",
        "qh": "FISHING_ROD",
        "qi": "CLOCK",
        "qj": "SPYGLASS",
        "qk": "GLOWSTONE_DUST",
        "ql": "COD",
        "qm": "SALMON",
        "qn": "TROPICAL_FISH",
        "qo": "PUFFERFISH",
        "qp": "COOKED_COD",
        "qq": "COOKED_SALMON",
        "qr": "INK_SAC",
        "qs": "GLOW_INK_SAC",
        "qt": "COCOA_BEANS",
        "qu": "WHITE_DYE",
        "qv": "ORANGE_DYE",
        "qw": "MAGENTA_DYE",
        "qx": "LIGHT_BLUE_DYE",
        "qy": "YELLOW_DYE",
        "qz": "LIME_DYE",
        "qA": "PINK_DYE",
        "qB": "GRAY_DYE",
        "qC": "LIGHT_GRAY_DYE",
        "qD": "CYAN_DYE",
        "qE": "PURPLE_DYE",
        "qF": "BLUE_DYE",
        "qG": "BROWN_DYE",
        "qH": "GREEN_DYE",
        "qI": "RED_DYE",
        "qJ": "BLACK_DYE",
        "qK": "BONE_MEAL",
        "qL": "BONE",
        "qM": "SUGAR",
        "qN": "CAKE",
        "qO": "WHITE_BED",
        "qP": "ORANGE_BED",
        "qQ": "MAGENTA_BED",
        "qR": "LIGHT_BLUE_BED",
        "qS": "YELLOW_BED",
        "qT": "LIME_BED",
        "qU": "PINK_BED",
        "qV": "GRAY_BED",
        "qW": "LIGHT_GRAY_BED",
        "qX": "CYAN_BED",
        "qY": "PURPLE_BED",
        "qZ": "BLUE_BED",
        "ra": "BROWN_BED",
        "rb": "GREEN_BED",
        "rc": "RED_BED",
        "rd": "BLACK_BED",
        "re": "COOKIE",
        "rf": "FILLED_MAP",
        "rg": "SHEARS",
        "rh": "MELON_SLICE",
        "ri": "DRIED_KELP",
        "rj": "PUMPKIN_SEEDS",
        "rk": "MELON_SEEDS",
        "rl": "BEEF",
        "rm": "COOKED_BEEF",
        "rn": "CHICKEN",
        "ro": "COOKED_CHICKEN",
        "rp": "ROTTEN_FLESH",
        "rq": "ENDER_PEARL",
        "rr": "BLAZE_ROD",
        "rs": "GHAST_TEAR",
        "rt": "GOLD_NUGGET",
        "ru": "NETHER_WART",
        "rv": "POTION",
        "rw": "GLASS_BOTTLE",
        "rx": "SPIDER_EYE",
        "ry": "FERMENTED_SPIDER_EYE",
        "rz": "BLAZE_POWDER",
        "rA": "MAGMA_CREAM",
        "rB": "BREWING_STAND",
        "rC": "CAULDRON",
        "rD": "ENDER_EYE",
        "rE": "GLISTERING_MELON_SLICE",
        "rF": "ALLAY_SPAWN_EGG",
        "rG": "AXOLOTL_SPAWN_EGG",
        "rH": "BAT_SPAWN_EGG",
        "rI": "BEE_SPAWN_EGG",
        "rJ": "BLAZE_SPAWN_EGG",
        "rK": "CAT_SPAWN_EGG",
        "rL": "CAMEL_SPAWN_EGG",
        "rM": "CAVE_SPIDER_SPAWN_EGG",
        "rN": "CHICKEN_SPAWN_EGG",
        "rO": "COD_SPAWN_EGG",
        "rP": "COW_SPAWN_EGG",
        "rQ": "CREEPER_SPAWN_EGG",
        "rR": "DOLPHIN_SPAWN_EGG",
        "rS": "DONKEY_SPAWN_EGG",
        "rT": "DROWNED_SPAWN_EGG",
        "rU": "ELDER_GUARDIAN_SPAWN_EGG",
        "rV": "ENDER_DRAGON_SPAWN_EGG",
        "rW": "ENDERMAN_SPAWN_EGG",
        "rX": "ENDERMITE_SPAWN_EGG",
        "rY": "EVOKER_SPAWN_EGG",
        "rZ": "FOX_SPAWN_EGG",
        "sa": "FROG_SPAWN_EGG",
        "sb": "GHAST_SPAWN_EGG",
        "sc": "GLOW_SQUID_SPAWN_EGG",
        "sd": "GOAT_SPAWN_EGG",
        "se": "GUARDIAN_SPAWN_EGG",
        "sf": "HOGLIN_SPAWN_EGG",
        "sg": "HORSE_SPAWN_EGG",
        "sh": "HUSK_SPAWN_EGG",
        "si": "IRON_GOLEM_SPAWN_EGG",
        "sj": "LLAMA_SPAWN_EGG",
        "sk": "MAGMA_CUBE_SPAWN_EGG",
        "sl": "MOOSHROOM_SPAWN_EGG",
        "sm": "MULE_SPAWN_EGG",
        "sn": "OCELOT_SPAWN_EGG",
        "so": "PANDA_SPAWN_EGG",
        "sp": "PARROT_SPAWN_EGG",
        "sq": "PHANTOM_SPAWN_EGG",
        "sr": "PIG_SPAWN_EGG",
        "ss": "PIGLIN_SPAWN_EGG",
        "st": "PIGLIN_BRUTE_SPAWN_EGG",
        "su": "PILLAGER_SPAWN_EGG",
        "sv": "POLAR_BEAR_SPAWN_EGG",
        "sw": "PUFFERFISH_SPAWN_EGG",
        "sx": "RABBIT_SPAWN_EGG",
        "sy": "RAVAGER_SPAWN_EGG",
        "sz": "SALMON_SPAWN_EGG",
        "sA": "SHEEP_SPAWN_EGG",
        "sB": "SHULKER_SPAWN_EGG",
        "sC": "SILVERFISH_SPAWN_EGG",
        "sD": "SKELETON_SPAWN_EGG",
        "sE": "SKELETON_HORSE_SPAWN_EGG",
        "sF": "SLIME_SPAWN_EGG",
        "sG": "SNIFFER_SPAWN_EGG",
        "sH": "SNOW_GOLEM_SPAWN_EGG",
        "sI": "SPIDER_SPAWN_EGG",
        "sJ": "SQUID_SPAWN_EGG",
        "sK": "STRAY_SPAWN_EGG",
        "sL": "STRIDER_SPAWN_EGG",
        "sM": "TADPOLE_SPAWN_EGG",
        "sN": "TRADER_LLAMA_SPAWN_EGG",
        "sO": "TROPICAL_FISH_SPAWN_EGG",
        "sP": "TURTLE_SPAWN_EGG",
        "sQ": "VEX_SPAWN_EGG",
        "sR": "VILLAGER_SPAWN_EGG",
        "sS": "VINDICATOR_SPAWN_EGG",
        "sT": "WANDERING_TRADER_SPAWN_EGG",
        "sU": "WARDEN_SPAWN_EGG",
        "sV": "WITCH_SPAWN_EGG",
        "sW": "WITHER_SPAWN_EGG",
        "sX": "WITHER_SKELETON_SPAWN_EGG",
        "sY": "WOLF_SPAWN_EGG",
        "sZ": "ZOGLIN_SPAWN_EGG",
        "ta": "ZOMBIE_SPAWN_EGG",
        "tb": "ZOMBIE_HORSE_SPAWN_EGG",
        "tc": "ZOMBIE_VILLAGER_SPAWN_EGG",
        "td": "ZOMBIFIED_PIGLIN_SPAWN_EGG",
        "te": "EXPERIENCE_BOTTLE",
        "tf": "FIRE_CHARGE",
        "tg": "WRITABLE_BOOK",
        "th": "WRITTEN_BOOK",
        "ti": "ITEM_FRAME",
        "tj": "GLOW_ITEM_FRAME",
        "tk": "FLOWER_POT",
        "tl": "CARROT",
        "tm": "POTATO",
        "tn": "BAKED_POTATO",
        "to": "POISONOUS_POTATO",
        "tp": "MAP",
        "tq": "GOLDEN_CARROT",
        "tr": "SKELETON_SKULL",
        "ts": "WITHER_SKELETON_SKULL",
        "tt": "PLAYER_HEAD",
        "tu": "ZOMBIE_HEAD",
        "tv": "CREEPER_HEAD",
        "tw": "DRAGON_HEAD",
        "tx": "PIGLIN_HEAD",
        "ty": "NETHER_STAR",
        "tz": "PUMPKIN_PIE",
        "tA": "FIREWORK_ROCKET",
        "tB": "FIREWORK_STAR",
        "tC": "ENCHANTED_BOOK",
        "tD": "NETHER_BRICK",
        "tE": "PRISMARINE_SHARD",
        "tF": "PRISMARINE_CRYSTALS",
        "tG": "RABBIT",
        "tH": "COOKED_RABBIT",
        "tI": "RABBIT_STEW",
        "tJ": "RABBIT_FOOT",
        "tK": "RABBIT_HIDE",
        "tL": "ARMOR_STAND",
        "tM": "IRON_HORSE_ARMOR",
        "tN": "GOLDEN_HORSE_ARMOR",
        "tO": "DIAMOND_HORSE_ARMOR",
        "tP": "LEATHER_HORSE_ARMOR",
        "tQ": "LEAD",
        "tR": "NAME_TAG",
        "tS": "COMMAND_BLOCK_MINECART",
        "tT": "MUTTON",
        "tU": "COOKED_MUTTON",
        "tV": "WHITE_BANNER",
        "tW": "ORANGE_BANNER",
        "tX": "MAGENTA_BANNER",
        "tY": "LIGHT_BLUE_BANNER",
        "tZ": "YELLOW_BANNER",
        "ua": "LIME_BANNER",
        "ub": "PINK_BANNER",
        "uc": "GRAY_BANNER",
        "ud": "LIGHT_GRAY_BANNER",
        "ue": "CYAN_BANNER",
        "uf": "PURPLE_BANNER",
        "ug": "BLUE_BANNER",
        "uh": "BROWN_BANNER",
        "ui": "GREEN_BANNER",
        "uj": "RED_BANNER",
        "uk": "BLACK_BANNER",
        "ul": "END_CRYSTAL",
        "um": "CHORUS_FRUIT",
        "un": "POPPED_CHORUS_FRUIT",
        "uo": "TORCHFLOWER_SEEDS",
        "up": "PITCHER_POD",
        "uq": "BEETROOT",
        "ur": "BEETROOT_SEEDS",
        "us": "BEETROOT_SOUP",
        "ut": "DRAGON_BREATH",
        "uu": "SPLASH_POTION",
        "uv": "SPECTRAL_ARROW",
        "uw": "TIPPED_ARROW",
        "ux": "LINGERING_POTION",
        "uy": "SHIELD",
        "uz": "TOTEM_OF_UNDYING",
        "uA": "SHULKER_SHELL",
        "uB": "IRON_NUGGET",
        "uC": "KNOWLEDGE_BOOK",
        "uD": "DEBUG_STICK",
        "uE": "MUSIC_DISC_13",
        "uF": "MUSIC_DISC_CAT",
        "uG": "MUSIC_DISC_BLOCKS",
        "uH": "MUSIC_DISC_CHIRP",
        "uI": "MUSIC_DISC_FAR",
        "uJ": "MUSIC_DISC_MALL",
        "uK": "MUSIC_DISC_MELLOHI",
        "uL": "MUSIC_DISC_STAL",
        "uM": "MUSIC_DISC_STRAD",
        "uN": "MUSIC_DISC_WARD",
        "uO": "MUSIC_DISC_11",
        "uP": "MUSIC_DISC_WAIT",
        "uQ": "MUSIC_DISC_OTHERSIDE",
        "uR": "MUSIC_DISC_RELIC",
        "uS": "MUSIC_DISC_5",
        "uT": "MUSIC_DISC_PIGSTEP",
        "uU": "DISC_FRAGMENT_5",
        "uV": "TRIDENT",
        "uW": "PHANTOM_MEMBRANE",
        "uX": "NAUTILUS_SHELL",
        "uY": "HEART_OF_THE_SEA",
        "uZ": "CROSSBOW",
        "va": "SUSPICIOUS_STEW",
        "vb": "LOOM",
        "vc": "FLOWER_BANNER_PATTERN",
        "vd": "CREEPER_BANNER_PATTERN",
        "ve": "SKULL_BANNER_PATTERN",
        "vf": "MOJANG_BANNER_PATTERN",
        "vg": "GLOBE_BANNER_PATTERN",
        "vh": "PIGLIN_BANNER_PATTERN",
        "vi": "GOAT_HORN",
        "vj": "COMPOSTER",
        "vk": "BARREL",
        "vl": "SMOKER",
        "vm": "BLAST_FURNACE",
        "vn": "CARTOGRAPHY_TABLE",
        "vo": "FLETCHING_TABLE",
        "vp": "GRINDSTONE",
        "vq": "SMITHING_TABLE",
        "vr": "STONECUTTER",
        "vs": "BELL",
        "vt": "LANTERN",
        "vu": "SOUL_LANTERN",
        "vv": "SWEET_BERRIES",
        "vw": "GLOW_BERRIES",
        "vx": "CAMPFIRE",
        "vy": "SOUL_CAMPFIRE",
        "vz": "SHROOMLIGHT",
        "vA": "HONEYCOMB",
        "vB": "BEE_NEST",
        "vC": "BEEHIVE",
        "vD": "HONEY_BOTTLE",
        "vE": "HONEYCOMB_BLOCK",
        "vF": "LODESTONE",
        "vG": "CRYING_OBSIDIAN",
        "vH": "BLACKSTONE",
        "vI": "BLACKSTONE_SLAB",
        "vJ": "BLACKSTONE_STAIRS",
        "vK": "GILDED_BLACKSTONE",
        "vL": "POLISHED_BLACKSTONE",
        "vM": "POLISHED_BLACKSTONE_SLAB",
        "vN": "POLISHED_BLACKSTONE_STAIRS",
        "vO": "CHISELED_POLISHED_BLACKSTONE",
        "vP": "POLISHED_BLACKSTONE_BRICKS",
        "vQ": "POLISHED_BLACKSTONE_BRICK_SLAB",
        "vR": "POLISHED_BLACKSTONE_BRICK_STAIRS",
        "vS": "CRACKED_POLISHED_BLACKSTONE_BRICKS",
        "vT": "RESPAWN_ANCHOR",
        "vU": "CANDLE",
        "vV": "WHITE_CANDLE",
        "vW": "ORANGE_CANDLE",
        "vX": "MAGENTA_CANDLE",
        "vY": "LIGHT_BLUE_CANDLE",
        "vZ": "YELLOW_CANDLE",
        "wa": "LIME_CANDLE",
        "wb": "PINK_CANDLE",
        "wc": "GRAY_CANDLE",
        "wd": "LIGHT_GRAY_CANDLE",
        "we": "CYAN_CANDLE",
        "wf": "PURPLE_CANDLE",
        "wg": "BLUE_CANDLE",
        "wh": "BROWN_CANDLE",
        "wi": "GREEN_CANDLE",
        "wj": "RED_CANDLE",
        "wk": "BLACK_CANDLE",
        "wl": "SMALL_AMETHYST_BUD",
        "wm": "MEDIUM_AMETHYST_BUD",
        "wn": "LARGE_AMETHYST_BUD",
        "wo": "AMETHYST_CLUSTER",
        "wp": "POINTED_DRIPSTONE",
        "wq": "OCHRE_FROGLIGHT",
        "wr": "VERDANT_FROGLIGHT",
        "ws": "PEARLESCENT_FROGLIGHT",
        "wt": "FROGSPAWN",
        "wu": "ECHO_SHARD",
        "wv": "BRUSH",
        "ww": "NETHERITE_UPGRADE_SMITHING_TEMPLATE",
        "wx": "SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wy": "DUNE_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wz": "COAST_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wA": "WILD_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wB": "WARD_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wC": "EYE_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wD": "VEX_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wE": "TIDE_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wF": "SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wG": "RIB_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wH": "SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wI": "WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wJ": "SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wK": "SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wL": "RAISER_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wM": "HOST_ARMOR_TRIM_SMITHING_TEMPLATE",
        "wN": "ANGLER_POTTERY_SHERD",
        "wO": "ARCHER_POTTERY_SHERD",
        "wP": "ARMS_UP_POTTERY_SHERD",
        "wQ": "BLADE_POTTERY_SHERD",
        "wR": "BREWER_POTTERY_SHERD",
        "wS": "BURN_POTTERY_SHERD",
        "wT": "DANGER_POTTERY_SHERD",
        "wU": "EXPLORER_POTTERY_SHERD",
        "wV": "FRIEND_POTTERY_SHERD",
        "wW": "HEART_POTTERY_SHERD",
        "wX": "HEARTBREAK_POTTERY_SHERD",
        "wY": "HOWL_POTTERY_SHERD",
        "wZ": "MINER_POTTERY_SHERD",
        "xa": "MOURNER_POTTERY_SHERD",
        "xb": "PLENTY_POTTERY_SHERD",
        "xc": "PRIZE_POTTERY_SHERD",
        "xd": "SHEAF_POTTERY_SHERD",
        "xe": "SHELTER_POTTERY_SHERD",
        "xf": "SKULL_POTTERY_SHERD",
        "xg": "SNORT_POTTERY_SHERD"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/item/Item;": "registerBlock",
        "a(Lnet/minecraft/world/level/block/Block;[Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/item/Item;": "registerBlock",
        "a(Lnet/minecraft/world/item/BlockItem;)Lnet/minecraft/world/item/Item;": "registerBlock",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/Item;": "registerBlock",
        "a(Ljava/lang/String;Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/Item;": "registerItem",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/Item;": "registerItem",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/Item;": "registerItem"
      }
    },
    "net/minecraft/world/item/ItemKnowledgeBook": {
      "fields": {
        "a": "RECIPE_TAG",
        "b": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemLeash": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/InteractionResult;": "bindPlayerMobs"
      }
    },
    "net/minecraft/world/item/ItemLingeringPotion": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemWorldMap": {
      "fields": {
        "a": "IMAGE_WIDTH",
        "b": "IMAGE_HEIGHT",
        "e": "DEFAULT_MAP_COLOR",
        "f": "TAG_MAP",
        "c": "MAP_SCALE_TAG",
        "d": "MAP_LOCK_TAG"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;IIBZZ)Lnet/minecraft/world/item/ItemStack;": "create",
        "a(Ljava/lang/Integer;Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "getSavedData",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "getSavedData",
        "d(Lnet/minecraft/world/item/ItemStack;)Ljava/lang/Integer;": "getMapId",
        "a(Lnet/minecraft/world/level/Level;IIIZZLnet/minecraft/resources/ResourceKey;)I": "createNewSavedData",
        "a(Lnet/minecraft/world/item/ItemStack;I)V": "storeMapData",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;IIIZZLnet/minecraft/resources/ResourceKey;)V": "createAndStoreSavedData",
        "a(I)Ljava/lang/String;": "makeKey",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;)V": "update",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getCorrectStateForFluidBlock",
        "a([ZII)Z": "isBiomeWatery",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;)V": "renderBiomePreviewMap",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;IZ)V": "inventoryTick",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;)V": "onCraftedBy",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;I)V": "scaleMap",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;)V": "lockMap",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "k(Lnet/minecraft/world/item/ItemStack;)I": "getColor",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn"
      }
    },
    "net/minecraft/world/item/ItemMilkBucket": {
      "fields": {
        "a": "DRINK_DURATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemMinecart": {
      "fields": {
        "a": "DISPENSE_ITEM_BEHAVIOR",
        "b": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn"
      }
    },
    "net/minecraft/world/item/MobBucketItem": {
      "fields": {
        "a": "type",
        "b": "emptySound"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)V": "checkExtraContent",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "playEmptySound",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)V": "spawn",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText"
      }
    },
    "net/minecraft/world/item/ItemNameTag": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactLivingEntity"
      }
    },
    "net/minecraft/world/item/ItemPickaxe": {},
    "net/minecraft/world/item/PlaceOnWaterBlockItem": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ItemSkullPlayer": {
      "fields": {
        "c": "TAG_SKULL_OWNER"
      },
      "methods": {
        "m(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "getName",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "verifyTagAfterLoad"
      }
    },
    "net/minecraft/world/item/ItemPotion": {
      "fields": {
        "a": "DRINK_DURATION"
      },
      "methods": {
        "ae_()Lnet/minecraft/world/item/ItemStack;": "getDefaultInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "j(Lnet/minecraft/world/item/ItemStack;)Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText"
      }
    },
    "net/minecraft/world/item/ItemProjectileWeapon": {
      "fields": {
        "c": "ARROW_ONLY",
        "d": "ARROW_OR_FIREWORK"
      },
      "methods": {
        "e()Ljava/util/function/Predicate;": "getSupportedHeldProjectiles",
        "b()Ljava/util/function/Predicate;": "getAllSupportedProjectiles",
        "a(Lnet/minecraft/world/entity/LivingEntity;Ljava/util/function/Predicate;)Lnet/minecraft/world/item/ItemStack;": "getHeldProjectile",
        "c()I": "getEnchantmentValue",
        "d()I": "getDefaultProjectileRange",
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$static$1",
        "k(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/EnumItemRarity": {
      "fields": {
        "a": "COMMON",
        "b": "UNCOMMON",
        "c": "RARE",
        "d": "EPIC",
        "e": "color",
        "f": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/item/Rarity;": "$values"
      }
    },
    "net/minecraft/world/item/ItemRecord": {
      "fields": {
        "a": "BY_NAME",
        "b": "analogOutput",
        "c": "sound",
        "d": "lengthInTicks"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "h()I": "getAnalogOutput",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "i()Lnet/minecraft/network/chat/MutableComponent;": "getDisplayName",
        "a(Lnet/minecraft/sounds/SoundEvent;)Lnet/minecraft/world/item/RecordItem;": "getBySound",
        "x()Lnet/minecraft/sounds/SoundEvent;": "getSound",
        "y()I": "getLengthInTicks"
      }
    },
    "net/minecraft/world/item/ItemSaddle": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;": "interactLivingEntity"
      }
    },
    "net/minecraft/world/item/ItemScaffolding": {
      "methods": {
        "b(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/item/context/BlockPlaceContext;": "updatePlacementContext",
        "d()Z": "mustSurvive"
      }
    },
    "net/minecraft/world/item/ItemCooldownPlayer": {
      "fields": {
        "a": "player"
      },
      "methods": {
        "b(Lnet/minecraft/world/item/Item;I)V": "onCooldownStarted",
        "c(Lnet/minecraft/world/item/Item;)V": "onCooldownEnded"
      }
    },
    "net/minecraft/world/item/ItemShears": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "mineBlock",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCorrectToolForDrops",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/item/context/UseOnContext;Lnet/minecraft/world/entity/player/Player;)V": "lambda$useOn$1",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$mineBlock$0"
      }
    },
    "net/minecraft/world/item/ItemShield": {
      "fields": {
        "a": "EFFECTIVE_BLOCK_DELAY",
        "b": "MINIMUM_DURABILITY_DAMAGE",
        "c": "TAG_BASE_COLOR"
      },
      "methods": {
        "j(Lnet/minecraft/world/item/ItemStack;)Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isValidRepairItem",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/DyeColor;": "getColor",
        "g()Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot"
      }
    },
    "net/minecraft/world/item/ItemSpade": {
      "fields": {
        "a": "FLATTENABLES"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/item/context/UseOnContext;Lnet/minecraft/world/entity/player/Player;)V": "lambda$useOn$0"
      }
    },
    "net/minecraft/world/item/SignApplicator": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/SignBlockEntity;ZLnet/minecraft/world/entity/player/Player;)Z": "tryApplyToSign",
        "a(Lnet/minecraft/world/level/block/entity/SignText;Lnet/minecraft/world/entity/player/Player;)Z": "canApplyToSign"
      }
    },
    "net/minecraft/world/item/ItemSign": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)Z": "updateCustomBlockEntityTag"
      }
    },
    "net/minecraft/world/item/ItemNetherStar": {
      "methods": {
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil"
      }
    },
    "net/minecraft/world/item/SmithingTemplateItem": {
      "fields": {
        "a": "TITLE_FORMAT",
        "b": "DESCRIPTION_FORMAT",
        "c": "DESCRIPTION_ID",
        "d": "INGREDIENTS_TITLE",
        "e": "APPLIES_TO_TITLE",
        "f": "NETHERITE_UPGRADE",
        "g": "ARMOR_TRIM_APPLIES_TO",
        "h": "ARMOR_TRIM_INGREDIENTS",
        "i": "ARMOR_TRIM_BASE_SLOT_DESCRIPTION",
        "j": "ARMOR_TRIM_ADDITIONS_SLOT_DESCRIPTION",
        "k": "NETHERITE_UPGRADE_APPLIES_TO",
        "r": "NETHERITE_UPGRADE_INGREDIENTS",
        "s": "NETHERITE_UPGRADE_BASE_SLOT_DESCRIPTION",
        "t": "NETHERITE_UPGRADE_ADDITIONS_SLOT_DESCRIPTION",
        "u": "EMPTY_SLOT_HELMET",
        "v": "EMPTY_SLOT_CHESTPLATE",
        "w": "EMPTY_SLOT_LEGGINGS",
        "x": "EMPTY_SLOT_BOOTS",
        "y": "EMPTY_SLOT_HOE",
        "z": "EMPTY_SLOT_AXE",
        "A": "EMPTY_SLOT_SWORD",
        "B": "EMPTY_SLOT_SHOVEL",
        "C": "EMPTY_SLOT_PICKAXE",
        "D": "EMPTY_SLOT_INGOT",
        "E": "EMPTY_SLOT_REDSTONE_DUST",
        "F": "EMPTY_SLOT_QUARTZ",
        "G": "EMPTY_SLOT_EMERALD",
        "H": "EMPTY_SLOT_DIAMOND",
        "I": "EMPTY_SLOT_LAPIS_LAZULI",
        "J": "EMPTY_SLOT_AMETHYST_SHARD",
        "K": "appliesTo",
        "L": "ingredients",
        "M": "upgradeDescription",
        "N": "baseSlotDescription",
        "O": "additionsSlotDescription",
        "P": "baseSlotEmptyIcons",
        "Q": "additionalSlotEmptyIcons"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/item/SmithingTemplateItem;": "createArmorTrimTemplate",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/item/SmithingTemplateItem;": "createArmorTrimTemplate",
        "h()Lnet/minecraft/world/item/SmithingTemplateItem;": "createNetheriteUpgradeTemplate",
        "A()Ljava/util/List;": "createTrimmableArmorIconList",
        "B()Ljava/util/List;": "createTrimmableMaterialIconList",
        "C()Ljava/util/List;": "createNetheriteUpgradeIconList",
        "D()Ljava/util/List;": "createNetheriteUpgradeMaterialList",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "i()Lnet/minecraft/network/chat/Component;": "getBaseSlotDescription",
        "x()Lnet/minecraft/network/chat/Component;": "getAdditionSlotDescription",
        "y()Ljava/util/List;": "getBaseSlotEmptyIcons",
        "z()Ljava/util/List;": "getAdditionalSlotEmptyIcons",
        "a()Ljava/lang/String;": "getDescriptionId"
      }
    },
    "net/minecraft/world/item/ItemSnowball": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/SolidBucketItem": {
      "fields": {
        "c": "placeSound"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/sounds/SoundEvent;": "getPlaceSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/BlockHitResult;)Z": "emptyContents"
      }
    },
    "net/minecraft/world/item/ItemMonsterEgg": {
      "fields": {
        "a": "BY_ID",
        "b": "backgroundColor",
        "c": "highlightColor",
        "d": "defaultType"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/entity/EntityType;)Z": "spawnsEntity",
        "a(I)I": "getColor",
        "a(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/world/item/SpawnEggItem;": "byId",
        "h()Ljava/lang/Iterable;": "eggs",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/EntityType;": "getType",
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Mob;Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "spawnOffspringFromSpawnEgg"
      }
    },
    "net/minecraft/world/item/ItemSpectralArrow": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/projectile/AbstractArrow;": "createArrow"
      }
    },
    "net/minecraft/world/item/ItemSplashPotion": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/SpyglassItem": {
      "fields": {
        "a": "USE_DURATION",
        "b": "ZOOM_FOV_MODIFIER"
      },
      "methods": {
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "releaseUsing",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "stopUsing"
      }
    },
    "net/minecraft/world/item/ItemBlockWallable": {
      "fields": {
        "d": "wallBlock",
        "c": "attachmentDirection"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z": "canPlace",
        "c(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getPlacementState",
        "a(Ljava/util/Map;Lnet/minecraft/world/item/Item;)V": "registerBlocks"
      }
    },
    "net/minecraft/world/item/ItemSuspiciousStew": {
      "fields": {
        "a": "EFFECTS_TAG",
        "b": "EFFECT_ID_TAG",
        "c": "EFFECT_DURATION_TAG",
        "d": "DEFAULT_DURATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Ljava/util/function/Consumer;)V": "listPotionEffects",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/item/ItemStack;": "finishUsingItem"
      }
    },
    "net/minecraft/world/item/ItemSword": {
      "fields": {
        "a": "attackDamage",
        "b": "defaultModifiers"
      },
      "methods": {
        "h()F": "getDamage",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z": "canAttackBlock",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/state/BlockState;)F": "getDestroySpeed",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "hurtEnemy",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "mineBlock",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCorrectToolForDrops",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Lcom/google/common/collect/Multimap;": "getDefaultAttributeModifiers",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$mineBlock$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$hurtEnemy$0"
      }
    },
    "net/minecraft/world/item/ItemPotionThrowable": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use"
      }
    },
    "net/minecraft/world/item/ToolMaterial": {
      "methods": {
        "a()I": "getUses",
        "b()F": "getSpeed",
        "c()F": "getAttackDamageBonus",
        "d()I": "getLevel",
        "e()I": "getEnchantmentValue",
        "f()Lnet/minecraft/world/item/crafting/Ingredient;": "getRepairIngredient"
      }
    },
    "net/minecraft/world/item/ItemToolMaterial": {
      "fields": {
        "a": "tier"
      },
      "methods": {
        "i()Lnet/minecraft/world/item/Tier;": "getTier",
        "c()I": "getEnchantmentValue",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isValidRepairItem"
      }
    },
    "net/minecraft/world/item/EnumToolMaterial": {
      "fields": {
        "a": "WOOD",
        "b": "STONE",
        "c": "IRON",
        "d": "DIAMOND",
        "e": "GOLD",
        "f": "NETHERITE",
        "g": "level",
        "h": "uses",
        "i": "speed",
        "j": "damage",
        "k": "enchantmentValue",
        "l": "repairIngredient",
        "m": "$VALUES"
      },
      "methods": {
        "a()I": "getUses",
        "b()F": "getSpeed",
        "c()F": "getAttackDamageBonus",
        "d()I": "getLevel",
        "e()I": "getEnchantmentValue",
        "f()Lnet/minecraft/world/item/crafting/Ingredient;": "getRepairIngredient",
        "g()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$5",
        "h()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$4",
        "i()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$3",
        "j()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$2",
        "k()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$1",
        "l()Lnet/minecraft/world/item/crafting/Ingredient;": "lambda$static$0",
        "m()[Lnet/minecraft/world/item/Tiers;": "$values"
      }
    },
    "net/minecraft/world/item/ItemTippedArrow": {
      "methods": {
        "ae_()Lnet/minecraft/world/item/ItemStack;": "getDefaultInstance",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "j(Lnet/minecraft/world/item/ItemStack;)Ljava/lang/String;": "getDescriptionId"
      }
    },
    "net/minecraft/world/item/TooltipFlag": {
      "fields": {
        "a": "NORMAL",
        "b": "ADVANCED"
      },
      "methods": {
        "a()Z": "isAdvanced",
        "b()Z": "isCreative"
      }
    },
    "net/minecraft/world/item/ItemTrident": {
      "fields": {
        "a": "THROW_THRESHOLD_TIME",
        "b": "BASE_DAMAGE",
        "c": "SHOOT_POWER",
        "d": "defaultModifiers"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z": "canAttackBlock",
        "c(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/UseAnim;": "getUseAnimation",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getUseDuration",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;I)V": "releaseUsing",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/LivingEntity;)Z": "hurtEnemy",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "mineBlock",
        "a(Lnet/minecraft/world/entity/EquipmentSlot;)Lcom/google/common/collect/Multimap;": "getDefaultAttributeModifiers",
        "c()I": "getEnchantmentValue",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$mineBlock$2",
        "b(Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$hurtEnemy$1"
      }
    },
    "net/minecraft/world/item/EnumAnimation": {
      "fields": {
        "a": "NONE",
        "b": "EAT",
        "c": "DRINK",
        "d": "BLOCK",
        "e": "BOW",
        "f": "SPEAR",
        "g": "CROSSBOW",
        "h": "SPYGLASS",
        "i": "TOOT_HORN",
        "j": "BRUSH",
        "k": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/item/UseAnim;": "$values"
      }
    },
    "net/minecraft/world/item/ItemVanishable": {},
    "net/minecraft/world/item/ItemBookAndQuill": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/nbt/CompoundTag;)Z": "makeSureTagIsValid"
      }
    },
    "net/minecraft/world/item/ItemWrittenBook": {
      "fields": {
        "a": "TITLE_LENGTH",
        "b": "TITLE_MAX_LENGTH",
        "c": "PAGE_EDIT_LENGTH",
        "d": "PAGE_LENGTH",
        "e": "MAX_PAGES",
        "f": "MAX_GENERATION",
        "g": "TAG_TITLE",
        "h": "TAG_FILTERED_TITLE",
        "i": "TAG_AUTHOR",
        "j": "TAG_PAGES",
        "k": "TAG_FILTERED_PAGES",
        "r": "TAG_GENERATION",
        "s": "TAG_RESOLVED"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)Z": "makeSureTagIsValid",
        "d(Lnet/minecraft/world/item/ItemStack;)I": "getGeneration",
        "k(Lnet/minecraft/world/item/ItemStack;)I": "getPageCount",
        "m(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/network/chat/Component;": "getName",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/Level;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/item/context/UseOnContext;)Lnet/minecraft/world/InteractionResult;": "useOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResultHolder;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/player/Player;)Z": "resolveBookComponents",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/player/Player;Ljava/lang/String;)Ljava/lang/String;": "resolvePage",
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "isFoil"
      }
    },
    "net/minecraft/world/item/alchemy/PotionRegistry": {
      "fields": {
        "a": "name",
        "b": "effects"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/item/alchemy/Potion;": "byName",
        "b(Ljava/lang/String;)Ljava/lang/String;": "getName",
        "a()Ljava/util/List;": "getEffects",
        "b()Z": "hasInstantEffects"
      }
    },
    "net/minecraft/world/item/alchemy/PotionBrewer": {
      "fields": {
        "a": "BREWING_TIME_SECONDS",
        "b": "POTION_MIXES",
        "c": "CONTAINER_MIXES",
        "d": "ALLOWED_CONTAINERS",
        "e": "ALLOWED_CONTAINER"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isIngredient",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "isContainerIngredient",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "isPotionIngredient",
        "a(Lnet/minecraft/world/item/alchemy/Potion;)Z": "isBrewablePotion",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "hasMix",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "hasContainerMix",
        "c(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "hasPotionMix",
        "d(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;": "mix",
        "a()V": "bootStrap",
        "a(Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/Item;)V": "addContainerRecipe",
        "a(Lnet/minecraft/world/item/Item;)V": "addContainer",
        "a(Lnet/minecraft/world/item/alchemy/Potion;Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/alchemy/Potion;)V": "addMix",
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/alchemy/PotionBrewer$PredicatedCombination": {
      "fields": {
        "a": "from",
        "b": "ingredient",
        "c": "to"
      }
    },
    "net/minecraft/world/item/alchemy/PotionUtil": {
      "fields": {
        "a": "TAG_CUSTOM_POTION_EFFECTS",
        "b": "TAG_CUSTOM_POTION_COLOR",
        "c": "TAG_POTION",
        "d": "EMPTY_COLOR",
        "e": "NO_EFFECT"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Ljava/util/List;": "getMobEffects",
        "a(Lnet/minecraft/world/item/alchemy/Potion;Ljava/util/Collection;)Ljava/util/List;": "getAllEffects",
        "a(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/List;": "getAllEffects",
        "b(Lnet/minecraft/world/item/ItemStack;)Ljava/util/List;": "getCustomEffects",
        "b(Lnet/minecraft/nbt/CompoundTag;)Ljava/util/List;": "getCustomEffects",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/util/List;)V": "getCustomEffects",
        "c(Lnet/minecraft/world/item/ItemStack;)I": "getColor",
        "a(Lnet/minecraft/world/item/alchemy/Potion;)I": "getColor",
        "a(Ljava/util/Collection;)I": "getColor",
        "d(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/alchemy/Potion;": "getPotion",
        "c(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/item/alchemy/Potion;": "getPotion",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/alchemy/Potion;)Lnet/minecraft/world/item/ItemStack;": "setPotion",
        "a(Lnet/minecraft/world/item/ItemStack;Ljava/util/Collection;)Lnet/minecraft/world/item/ItemStack;": "setCustomEffects",
        "a(Lnet/minecraft/world/item/ItemStack;Ljava/util/List;F)V": "addPotionTooltip",
        "a(Ljava/util/List;Ljava/util/List;F)V": "addPotionTooltip"
      }
    },
    "net/minecraft/world/item/alchemy/Potions": {
      "fields": {
        "a": "EMPTY_ID",
        "b": "EMPTY",
        "c": "WATER",
        "d": "MUNDANE",
        "e": "THICK",
        "f": "AWKWARD",
        "g": "NIGHT_VISION",
        "h": "LONG_NIGHT_VISION",
        "i": "INVISIBILITY",
        "j": "LONG_INVISIBILITY",
        "k": "LEAPING",
        "l": "LONG_LEAPING",
        "m": "STRONG_LEAPING",
        "n": "FIRE_RESISTANCE",
        "o": "LONG_FIRE_RESISTANCE",
        "p": "SWIFTNESS",
        "q": "LONG_SWIFTNESS",
        "r": "STRONG_SWIFTNESS",
        "s": "SLOWNESS",
        "t": "LONG_SLOWNESS",
        "u": "STRONG_SLOWNESS",
        "v": "TURTLE_MASTER",
        "w": "LONG_TURTLE_MASTER",
        "x": "STRONG_TURTLE_MASTER",
        "y": "WATER_BREATHING",
        "z": "LONG_WATER_BREATHING",
        "A": "HEALING",
        "B": "STRONG_HEALING",
        "C": "HARMING",
        "D": "STRONG_HARMING",
        "E": "POISON",
        "F": "LONG_POISON",
        "G": "STRONG_POISON",
        "H": "REGENERATION",
        "I": "LONG_REGENERATION",
        "J": "STRONG_REGENERATION",
        "K": "STRENGTH",
        "L": "LONG_STRENGTH",
        "M": "STRONG_STRENGTH",
        "N": "WEAKNESS",
        "O": "LONG_WEAKNESS",
        "P": "LUCK",
        "Q": "SLOW_FALLING",
        "R": "LONG_SLOW_FALLING"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/item/alchemy/Potion;)Lnet/minecraft/world/item/alchemy/Potion;": "register",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/item/alchemy/Potion;)Lnet/minecraft/world/item/alchemy/Potion;": "register"
      }
    },
    "net/minecraft/world/item/armortrim/ArmorTrim": {
      "fields": {
        "a": "CODEC",
        "c": "LOGGER",
        "b": "TAG_TRIM_ID",
        "d": "UPGRADE_TITLE",
        "e": "material",
        "f": "pattern",
        "g": "innerTexture",
        "h": "outerTexture"
      },
      "methods": {
        "c(Lnet/minecraft/world/item/ArmorMaterial;)Ljava/lang/String;": "getColorPaletteSuffix",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/core/Holder;)Z": "hasPatternAndMaterial",
        "a()Lnet/minecraft/core/Holder;": "pattern",
        "b()Lnet/minecraft/core/Holder;": "material",
        "a(Lnet/minecraft/world/item/ArmorMaterial;)Lnet/minecraft/resources/ResourceLocation;": "innerTexture",
        "b(Lnet/minecraft/world/item/ArmorMaterial;)Lnet/minecraft/resources/ResourceLocation;": "outerTexture",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/armortrim/ArmorTrim;)Z": "setTrim",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getTrim",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/RegistryAccess;Ljava/util/List;)V": "appendUpgradeHoverText",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/item/ArmorMaterial;)Lnet/minecraft/resources/ResourceLocation;": "lambda$new$4",
        "a(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "lambda$new$3",
        "b(Lnet/minecraft/core/Holder;Lnet/minecraft/world/item/ArmorMaterial;)Lnet/minecraft/resources/ResourceLocation;": "lambda$new$2",
        "b(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": "lambda$new$1",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/armortrim/TrimMaterial": {
      "fields": {
        "c": "assetName",
        "d": "ingredient",
        "e": "itemModelIndex",
        "f": "overrideArmorMaterials",
        "g": "description",
        "a": "DIRECT_CODEC",
        "b": "CODEC"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/item/Item;FLnet/minecraft/network/chat/Component;Ljava/util/Map;)Lnet/minecraft/world/item/armortrim/TrimMaterial;": "create",
        "a()Ljava/lang/String;": "assetName",
        "b()Lnet/minecraft/core/Holder;": "ingredient",
        "c()F": "itemModelIndex",
        "d()Ljava/util/Map;": "overrideArmorMaterials",
        "e()Lnet/minecraft/network/chat/Component;": "description",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/armortrim/TrimMaterials": {
      "fields": {
        "a": "QUARTZ",
        "b": "IRON",
        "c": "NETHERITE",
        "d": "REDSTONE",
        "e": "COPPER",
        "f": "GOLD",
        "g": "EMERALD",
        "h": "DIAMOND",
        "i": "LAPIS",
        "j": "AMETHYST"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getFromIngredient",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/item/Item;Lnet/minecraft/network/chat/Style;F)V": "register",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/item/Item;Lnet/minecraft/network/chat/Style;FLjava/util/Map;)V": "register",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "registryKey",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Holder$Reference;)Z": "lambda$getFromIngredient$0"
      }
    },
    "net/minecraft/world/item/armortrim/TrimPattern": {
      "fields": {
        "c": "assetId",
        "d": "templateItem",
        "e": "description",
        "a": "DIRECT_CODEC",
        "b": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/network/chat/Component;": "copyWithStyle",
        "a()Lnet/minecraft/resources/ResourceLocation;": "assetId",
        "b()Lnet/minecraft/core/Holder;": "templateItem",
        "c()Lnet/minecraft/network/chat/Component;": "description",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/armortrim/TrimPatterns": {
      "fields": {
        "a": "SENTRY",
        "b": "DUNE",
        "c": "COAST",
        "d": "WILD",
        "e": "WARD",
        "f": "EYE",
        "g": "VEX",
        "h": "TIDE",
        "i": "SNOUT",
        "j": "RIB",
        "k": "SPIRE",
        "l": "WAYFINDER",
        "m": "SHAPER",
        "n": "SILENCE",
        "o": "RAISER",
        "p": "HOST"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getFromTemplate",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/world/item/Item;Lnet/minecraft/resources/ResourceKey;)V": "register",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "registryKey",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Holder$Reference;)Z": "lambda$getFromTemplate$0"
      }
    },
    "net/minecraft/world/item/context/BlockActionContext": {
      "fields": {
        "b": "relativePos",
        "a": "replaceClicked"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/item/context/BlockPlaceContext;": "at",
        "a()Lnet/minecraft/core/BlockPos;": "getClickedPos",
        "b()Z": "canPlace",
        "c()Z": "replacingClickedOnBlock",
        "d()Lnet/minecraft/core/Direction;": "getNearestLookingDirection",
        "e()Lnet/minecraft/core/Direction;": "getNearestLookingVerticalDirection",
        "f()[Lnet/minecraft/core/Direction;": "getNearestLookingDirections"
      }
    },
    "net/minecraft/world/item/context/BlockActionContextDirectional": {
      "fields": {
        "b": "direction"
      },
      "methods": {
        "a()Lnet/minecraft/core/BlockPos;": "getClickedPos",
        "b()Z": "canPlace",
        "c()Z": "replacingClickedOnBlock",
        "d()Lnet/minecraft/core/Direction;": "getNearestLookingDirection",
        "f()[Lnet/minecraft/core/Direction;": "getNearestLookingDirections",
        "g()Lnet/minecraft/core/Direction;": "getHorizontalDirection",
        "h()Z": "isSecondaryUseActive",
        "i()F": "getRotation"
      }
    },
    "net/minecraft/world/item/context/ItemActionContext": {
      "fields": {
        "a": "player",
        "b": "hand",
        "c": "hitResult",
        "d": "level",
        "e": "itemStack"
      },
      "methods": {
        "j()Lnet/minecraft/world/phys/BlockHitResult;": "getHitResult",
        "a()Lnet/minecraft/core/BlockPos;": "getClickedPos",
        "k()Lnet/minecraft/core/Direction;": "getClickedFace",
        "l()Lnet/minecraft/world/phys/Vec3;": "getClickLocation",
        "m()Z": "isInside",
        "n()Lnet/minecraft/world/item/ItemStack;": "getItemInHand",
        "o()Lnet/minecraft/world/entity/player/Player;": "getPlayer",
        "p()Lnet/minecraft/world/InteractionHand;": "getHand",
        "q()Lnet/minecraft/world/level/Level;": "getLevel",
        "g()Lnet/minecraft/core/Direction;": "getHorizontalDirection",
        "h()Z": "isSecondaryUseActive",
        "i()F": "getRotation"
      }
    },
    "net/minecraft/world/item/crafting/RecipeCooking": {
      "fields": {
        "a": "type",
        "b": "id",
        "h": "category",
        "c": "group",
        "d": "ingredient",
        "e": "result",
        "f": "experience",
        "g": "cookingTime"
      },
      "methods": {
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "a()Lnet/minecraft/core/NonNullList;": "getIngredients",
        "b()F": "getExperience",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "c()Ljava/lang/String;": "getGroup",
        "d()I": "getCookingTime",
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "f()Lnet/minecraft/world/item/crafting/RecipeType;": "getType",
        "g()Lnet/minecraft/world/item/crafting/CookingBookCategory;": "category"
      }
    },
    "net/minecraft/world/item/crafting/RecipeArmorDye": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeBannerDuplicate": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;)Lnet/minecraft/core/NonNullList;": "getRemainingItems",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/world/Container;)Lnet/minecraft/core/NonNullList;": "getRemainingItems",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeBlasting": {
      "methods": {
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer"
      }
    },
    "net/minecraft/world/item/crafting/RecipeBookClone": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;)Lnet/minecraft/core/NonNullList;": "getRemainingItems",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/world/Container;)Lnet/minecraft/core/NonNullList;": "getRemainingItems",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeCampfire": {
      "methods": {
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer"
      }
    },
    "net/minecraft/world/item/crafting/CookingBookCategory": {
      "fields": {
        "a": "FOOD",
        "b": "BLOCKS",
        "c": "MISC",
        "d": "CODEC",
        "e": "name",
        "f": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/item/crafting/CookingBookCategory;": "$values"
      }
    },
    "net/minecraft/world/item/crafting/CraftingBookCategory": {
      "fields": {
        "a": "BUILDING",
        "b": "REDSTONE",
        "c": "EQUIPMENT",
        "d": "MISC",
        "e": "CODEC",
        "f": "name",
        "g": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/item/crafting/CraftingBookCategory;": "$values"
      }
    },
    "net/minecraft/world/item/crafting/RecipeCrafting": {
      "methods": {
        "f()Lnet/minecraft/world/item/crafting/RecipeType;": "getType",
        "d()Lnet/minecraft/world/item/crafting/CraftingBookCategory;": "category"
      }
    },
    "net/minecraft/world/item/crafting/IRecipeComplex": {
      "fields": {
        "a": "id",
        "b": "category"
      },
      "methods": {
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "ai_()Z": "isSpecial",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "d()Lnet/minecraft/world/item/crafting/CraftingBookCategory;": "category"
      }
    },
    "net/minecraft/world/item/crafting/DecoratedPotRecipe": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/level/block/entity/DecoratedPotBlockEntity$Decorations;)Lnet/minecraft/world/item/ItemStack;": "createDecoratedPotItem",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeFireworks": {
      "fields": {
        "a": "PAPER_INGREDIENT",
        "b": "GUNPOWDER_INGREDIENT",
        "c": "STAR_INGREDIENT"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeFireworksFade": {
      "fields": {
        "a": "STAR_INGREDIENT"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeFireworksStar": {
      "fields": {
        "a": "SHAPE_INGREDIENT",
        "b": "TRAIL_INGREDIENT",
        "c": "FLICKER_INGREDIENT",
        "d": "SHAPE_BY_ITEM",
        "e": "GUNPOWDER_INGREDIENT"
      },
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Ljava/util/HashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/item/crafting/RecipeItemStack": {
      "fields": {
        "a": "EMPTY",
        "b": "values",
        "c": "itemStacks",
        "d": "stackingIds"
      },
      "methods": {
        "a()[Lnet/minecraft/world/item/ItemStack;": "getItems",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "test",
        "b()Lit/unimi/dsi/fastutil/ints/IntList;": "getStackingIds",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "toNetwork",
        "c()Lcom/google/gson/JsonElement;": "toJson",
        "d()Z": "isEmpty",
        "b(Ljava/util/stream/Stream;)Lnet/minecraft/world/item/crafting/Ingredient;": "fromValues",
        "e()Lnet/minecraft/world/item/crafting/Ingredient;": "of",
        "a([Lnet/minecraft/world/level/ItemLike;)Lnet/minecraft/world/item/crafting/Ingredient;": "of",
        "a([Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/crafting/Ingredient;": "of",
        "a(Ljava/util/stream/Stream;)Lnet/minecraft/world/item/crafting/Ingredient;": "of",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/item/crafting/Ingredient;": "of",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/Ingredient;": "fromNetwork",
        "a(Lcom/google/gson/JsonElement;)Lnet/minecraft/world/item/crafting/Ingredient;": "fromJson",
        "a(Lcom/google/gson/JsonElement;Z)Lnet/minecraft/world/item/crafting/Ingredient;": "fromJson",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/Ingredient$Value;": "valueFromJson"
      }
    },
    "net/minecraft/world/item/crafting/RecipeItemStack$StackProvider": {
      "fields": {
        "a": "item"
      },
      "methods": {
        "a()Ljava/util/Collection;": "getItems",
        "b()Lcom/google/gson/JsonObject;": "serialize"
      }
    },
    "net/minecraft/world/item/crafting/RecipeItemStack$Provider": {
      "methods": {
        "a()Ljava/util/Collection;": "getItems",
        "b()Lcom/google/gson/JsonObject;": "serialize"
      }
    },
    "net/minecraft/world/item/crafting/RecipeMapClone": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeMapExtend": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;)Lnet/minecraft/world/item/ItemStack;": "findFilledMap",
        "ai_()Z": "isSpecial",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/IRecipe": {
      "methods": {
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "a(Lnet/minecraft/world/Container;)Lnet/minecraft/core/NonNullList;": "getRemainingItems",
        "a()Lnet/minecraft/core/NonNullList;": "getIngredients",
        "ai_()Z": "isSpecial",
        "i()Z": "showNotification",
        "c()Ljava/lang/String;": "getGroup",
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol",
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "f()Lnet/minecraft/world/item/crafting/RecipeType;": "getType",
        "j()Z": "isIncomplete"
      }
    },
    "net/minecraft/world/item/crafting/CraftingManager": {
      "fields": {
        "a": "GSON",
        "b": "LOGGER",
        "c": "recipes",
        "d": "byName",
        "e": "hasErrors"
      },
      "methods": {
        "a()Z": "hadErrorsLoading",
        "a(Lnet/minecraft/world/item/crafting/RecipeType;Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Ljava/util/Optional;": "getRecipeFor",
        "a(Lnet/minecraft/world/item/crafting/RecipeType;Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "getRecipeFor",
        "a(Lnet/minecraft/world/item/crafting/RecipeType;)Ljava/util/List;": "getAllRecipesFor",
        "b(Lnet/minecraft/world/item/crafting/RecipeType;Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Ljava/util/List;": "getRecipesFor",
        "c(Lnet/minecraft/world/item/crafting/RecipeType;)Ljava/util/Map;": "byType",
        "c(Lnet/minecraft/world/item/crafting/RecipeType;Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Lnet/minecraft/core/NonNullList;": "getRemainingItemsFor",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "byKey",
        "b()Ljava/util/Collection;": "getRecipes",
        "d()Ljava/util/stream/Stream;": "getRecipeIds",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/Recipe;": "fromJson",
        "a(Ljava/lang/Iterable;)V": "replaceRecipes",
        "b(Lnet/minecraft/world/item/crafting/RecipeType;)Lnet/minecraft/world/item/crafting/RecipeManager$CachedCheck;": "createCheck",
        "d(Lnet/minecraft/world/item/crafting/RecipeType;)Ljava/util/Map;": "lambda$replaceRecipes$10",
        "a(Ljava/util/Map;)Ljava/util/stream/Stream;": "lambda$getRecipeIds$8",
        "b(Ljava/util/Map;)Ljava/util/stream/Stream;": "lambda$getRecipes$7",
        "a(Ljava/util/Map$Entry;)Lcom/mojang/datafixers/util/Pair;": "lambda$getRecipeFor$4",
        "b(Ljava/util/Map$Entry;)Ljava/util/Map;": "lambda$apply$1",
        "e(Lnet/minecraft/world/item/crafting/RecipeType;)Lcom/google/common/collect/ImmutableMap$Builder;": "lambda$apply$0"
      }
    },
    "net/minecraft/world/item/crafting/RecipeSerializer": {
      "fields": {
        "a": "SHAPED_RECIPE",
        "b": "SHAPELESS_RECIPE",
        "c": "ARMOR_DYE",
        "d": "BOOK_CLONING",
        "e": "MAP_CLONING",
        "f": "MAP_EXTENDING",
        "g": "FIREWORK_ROCKET",
        "h": "FIREWORK_STAR",
        "i": "FIREWORK_STAR_FADE",
        "j": "TIPPED_ARROW",
        "k": "BANNER_DUPLICATE",
        "l": "SHIELD_DECORATION",
        "m": "SHULKER_BOX_COLORING",
        "n": "SUSPICIOUS_STEW",
        "o": "REPAIR_ITEM",
        "p": "SMELTING_RECIPE",
        "q": "BLASTING_RECIPE",
        "r": "SMOKING_RECIPE",
        "s": "CAMPFIRE_COOKING_RECIPE",
        "t": "STONECUTTER",
        "u": "SMITHING_TRANSFORM",
        "v": "SMITHING_TRIM",
        "w": "DECORATED_POT_RECIPE"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/Recipe;": "fromJson",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/Recipe;": "fromNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/crafting/Recipe;)V": "toNetwork",
        "a(Ljava/lang/String;Lnet/minecraft/world/item/crafting/RecipeSerializer;)Lnet/minecraft/world/item/crafting/RecipeSerializer;": "register"
      }
    },
    "net/minecraft/world/item/crafting/Recipes": {
      "fields": {
        "a": "CRAFTING",
        "b": "SMELTING",
        "c": "BLASTING",
        "d": "SMOKING",
        "e": "CAMPFIRE_COOKING",
        "f": "STONECUTTING",
        "g": "SMITHING"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/item/crafting/RecipeType;": "register"
      }
    },
    "net/minecraft/world/item/crafting/RecipeRepair": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Lnet/minecraft/world/item/enchantment/Enchantment;)V": "lambda$assemble$0"
      }
    },
    "net/minecraft/world/item/crafting/ShapedRecipes": {
      "fields": {
        "a": "width",
        "b": "height",
        "c": "recipeItems",
        "d": "result",
        "e": "id",
        "f": "group",
        "g": "category",
        "h": "showNotification"
      },
      "methods": {
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "c()Ljava/lang/String;": "getGroup",
        "d()Lnet/minecraft/world/item/crafting/CraftingBookCategory;": "category",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "a()Lnet/minecraft/core/NonNullList;": "getIngredients",
        "i()Z": "showNotification",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;IIZ)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "k()I": "getWidth",
        "l()I": "getHeight",
        "a([Ljava/lang/String;Ljava/util/Map;II)Lnet/minecraft/core/NonNullList;": "dissolvePattern",
        "a([Ljava/lang/String;)[Ljava/lang/String;": "shrink",
        "j()Z": "isIncomplete",
        "a(Ljava/lang/String;)I": "firstNonSpace",
        "b(Ljava/lang/String;)I": "lastNonSpace",
        "a(Lcom/google/gson/JsonArray;)[Ljava/lang/String;": "patternFromJson",
        "c(Lcom/google/gson/JsonObject;)Ljava/util/Map;": "keyFromJson",
        "a(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/ItemStack;": "itemStackFromJson",
        "b(Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/Item;": "itemFromJson",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/ShapelessRecipes": {
      "fields": {
        "a": "id",
        "b": "group",
        "c": "category",
        "d": "result",
        "e": "ingredients"
      },
      "methods": {
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "c()Ljava/lang/String;": "getGroup",
        "d()Lnet/minecraft/world/item/crafting/CraftingBookCategory;": "category",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "a()Lnet/minecraft/core/NonNullList;": "getIngredients",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipiesShield": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeShulkerBox": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeSerializerCooking": {
      "fields": {
        "x": "defaultCookingTime",
        "y": "factory"
      },
      "methods": {
        "b(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/AbstractCookingRecipe;": "fromJson",
        "b(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/AbstractCookingRecipe;": "fromNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/crafting/AbstractCookingRecipe;)V": "toNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/crafting/Recipe;)V": "toNetwork",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/Recipe;": "fromNetwork",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/Recipe;": "fromJson",
        "a(Ljava/lang/String;)Ljava/lang/IllegalStateException;": "lambda$fromJson$0"
      }
    },
    "net/minecraft/world/item/crafting/SimpleCraftingRecipeSerializer": {
      "fields": {
        "x": "constructor"
      },
      "methods": {
        "b(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/CraftingRecipe;": "fromJson",
        "b(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/CraftingRecipe;": "fromNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/crafting/CraftingRecipe;)V": "toNetwork",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/crafting/Recipe;)V": "toNetwork",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/crafting/Recipe;": "fromNetwork",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonObject;)Lnet/minecraft/world/item/crafting/Recipe;": "fromJson"
      }
    },
    "net/minecraft/world/item/crafting/RecipeSingleItem": {
      "fields": {
        "a": "ingredient",
        "b": "result",
        "e": "type",
        "f": "serializer",
        "c": "id",
        "d": "group"
      },
      "methods": {
        "f()Lnet/minecraft/world/item/crafting/RecipeType;": "getType",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "c()Ljava/lang/String;": "getGroup",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "a()Lnet/minecraft/core/NonNullList;": "getIngredients",
        "a(II)Z": "canCraftInDimensions",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble"
      }
    },
    "net/minecraft/world/item/crafting/FurnaceRecipe": {
      "methods": {
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer"
      }
    },
    "net/minecraft/world/item/crafting/SmithingRecipe": {
      "methods": {
        "f()Lnet/minecraft/world/item/crafting/RecipeType;": "getType",
        "a(II)Z": "canCraftInDimensions",
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isTemplateIngredient",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "isBaseIngredient",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "isAdditionIngredient"
      }
    },
    "net/minecraft/world/item/crafting/SmithingTransformRecipe": {
      "fields": {
        "a": "id",
        "b": "template",
        "c": "base",
        "d": "addition",
        "e": "result"
      },
      "methods": {
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isTemplateIngredient",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "isBaseIngredient",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "isAdditionIngredient",
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "j()Z": "isIncomplete"
      }
    },
    "net/minecraft/world/item/crafting/SmithingTrimRecipe": {
      "fields": {
        "a": "id",
        "b": "template",
        "c": "base",
        "d": "addition"
      },
      "methods": {
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "getResultItem",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isTemplateIngredient",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "isBaseIngredient",
        "c(Lnet/minecraft/world/item/ItemStack;)Z": "isAdditionIngredient",
        "e()Lnet/minecraft/resources/ResourceLocation;": "getId",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "j()Z": "isIncomplete"
      }
    },
    "net/minecraft/world/item/crafting/RecipeSmoking": {
      "methods": {
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer"
      }
    },
    "net/minecraft/world/item/crafting/RecipeStonecutting": {
      "methods": {
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches",
        "h()Lnet/minecraft/world/item/ItemStack;": "getToastSymbol"
      }
    },
    "net/minecraft/world/item/crafting/RecipeSuspiciousStew": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/crafting/RecipeTippedArrow": {
      "methods": {
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/world/level/Level;)Z": "matches",
        "a(Lnet/minecraft/world/inventory/CraftingContainer;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(II)Z": "canCraftInDimensions",
        "aj_()Lnet/minecraft/world/item/crafting/RecipeSerializer;": "getSerializer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/item/ItemStack;": "assemble",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;)Z": "matches"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentArrowDamage": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentFlameArrows": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentInfiniteArrows": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentArrowKnockback": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentPiercing": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentBinding": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "b()Z": "isTreasureOnly",
        "c()Z": "isCurse",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "canEnchant"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentWeaponDamage": {
      "fields": {
        "a": "ALL",
        "b": "UNDEAD",
        "c": "ARTHROPODS",
        "g": "NAMES",
        "h": "MIN_COST",
        "i": "LEVEL_COST",
        "j": "LEVEL_COST_SPAN",
        "d": "type"
      },
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(ILnet/minecraft/world/entity/MobType;)F": "getDamageBonus",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "canEnchant",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)V": "doPostAttack"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentDurability": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "canEnchant",
        "a(Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/util/RandomSource;)Z": "shouldIgnoreDurabilityDrop"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentDigging": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "canEnchant"
      }
    },
    "net/minecraft/world/item/enchantment/Enchantment": {
      "fields": {
        "a": "slots",
        "b": "rarity",
        "e": "category",
        "f": "descriptionId"
      },
      "methods": {
        "c(I)Lnet/minecraft/world/item/enchantment/Enchantment;": "byId",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Map;": "getSlotItems",
        "d()Lnet/minecraft/world/item/enchantment/Enchantment$Rarity;": "getRarity",
        "e()I": "getMinLevel",
        "a()I": "getMaxLevel",
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a(ILnet/minecraft/world/damagesource/DamageSource;)I": "getDamageProtection",
        "a(ILnet/minecraft/world/entity/MobType;)F": "getDamageBonus",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "isCompatibleWith",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility",
        "f()Ljava/lang/String;": "getOrCreateDescriptionId",
        "g()Ljava/lang/String;": "getDescriptionId",
        "d(I)Lnet/minecraft/network/chat/Component;": "getFullname",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "canEnchant",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)V": "doPostAttack",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)V": "doPostHurt",
        "b()Z": "isTreasureOnly",
        "c()Z": "isCurse",
        "h()Z": "isTradeable",
        "i()Z": "isDiscoverable"
      }
    },
    "net/minecraft/world/item/enchantment/Enchantment$Rarity": {
      "fields": {
        "a": "COMMON",
        "b": "UNCOMMON",
        "c": "RARE",
        "d": "VERY_RARE",
        "e": "weight",
        "f": "$VALUES"
      },
      "methods": {
        "a()I": "getWeight",
        "b()[Lnet/minecraft/world/item/enchantment/Enchantment$Rarity;": "$values"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentSlotType": {
      "fields": {
        "a": "ARMOR",
        "b": "ARMOR_FEET",
        "c": "ARMOR_LEGS",
        "d": "ARMOR_CHEST",
        "e": "ARMOR_HEAD",
        "f": "WEAPON",
        "g": "DIGGER",
        "h": "FISHING_ROD",
        "i": "TRIDENT",
        "j": "BREAKABLE",
        "k": "BOW",
        "l": "WEARABLE",
        "m": "CROSSBOW",
        "n": "VANISHABLE",
        "o": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/Item;)Z": "canEnchant",
        "a()[Lnet/minecraft/world/item/enchantment/EnchantmentCategory;": "$values"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentManager": {
      "fields": {
        "a": "TAG_ENCH_ID",
        "b": "TAG_ENCH_LEVEL",
        "c": "SWIFT_SNEAK_EXTRA_FACTOR"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;I)Lnet/minecraft/nbt/CompoundTag;": "storeEnchantment",
        "a(Lnet/minecraft/nbt/CompoundTag;I)V": "setEnchantmentLevel",
        "a(Lnet/minecraft/nbt/CompoundTag;)I": "getEnchantmentLevel",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/resources/ResourceLocation;": "getEnchantmentId",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Lnet/minecraft/resources/ResourceLocation;": "getEnchantmentId",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;Lnet/minecraft/world/item/ItemStack;)I": "getItemEnchantmentLevel",
        "a(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Map;": "getEnchantments",
        "a(Lnet/minecraft/nbt/ListTag;)Ljava/util/Map;": "deserializeEnchantments",
        "a(Ljava/util/Map;Lnet/minecraft/world/item/ItemStack;)V": "setEnchantments",
        "a(Lnet/minecraft/world/item/enchantment/EnchantmentHelper$EnchantmentVisitor;Lnet/minecraft/world/item/ItemStack;)V": "runIterationOnItem",
        "a(Lnet/minecraft/world/item/enchantment/EnchantmentHelper$EnchantmentVisitor;Ljava/lang/Iterable;)V": "runIterationOnInventory",
        "a(Ljava/lang/Iterable;Lnet/minecraft/world/damagesource/DamageSource;)I": "getDamageProtection",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/MobType;)F": "getDamageBonus",
        "a(Lnet/minecraft/world/entity/LivingEntity;)F": "getSweepingDamageRatio",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;)V": "doPostHurtEffects",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;)V": "doPostDamageEffects",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;Lnet/minecraft/world/entity/LivingEntity;)I": "getEnchantmentLevel",
        "b(Lnet/minecraft/world/entity/LivingEntity;)F": "getSneakingSpeedBonus",
        "c(Lnet/minecraft/world/entity/LivingEntity;)I": "getKnockbackBonus",
        "d(Lnet/minecraft/world/entity/LivingEntity;)I": "getFireAspect",
        "e(Lnet/minecraft/world/entity/LivingEntity;)I": "getRespiration",
        "f(Lnet/minecraft/world/entity/LivingEntity;)I": "getDepthStrider",
        "g(Lnet/minecraft/world/entity/LivingEntity;)I": "getBlockEfficiency",
        "b(Lnet/minecraft/world/item/ItemStack;)I": "getFishingLuckBonus",
        "c(Lnet/minecraft/world/item/ItemStack;)I": "getFishingSpeedBonus",
        "h(Lnet/minecraft/world/entity/LivingEntity;)I": "getMobLooting",
        "i(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasAquaAffinity",
        "j(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasFrostWalker",
        "k(Lnet/minecraft/world/entity/LivingEntity;)Z": "hasSoulSpeed",
        "d(Lnet/minecraft/world/item/ItemStack;)Z": "hasBindingCurse",
        "e(Lnet/minecraft/world/item/ItemStack;)Z": "hasVanishingCurse",
        "f(Lnet/minecraft/world/item/ItemStack;)Z": "hasSilkTouch",
        "g(Lnet/minecraft/world/item/ItemStack;)I": "getLoyalty",
        "h(Lnet/minecraft/world/item/ItemStack;)I": "getRiptide",
        "i(Lnet/minecraft/world/item/ItemStack;)Z": "hasChanneling",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Map$Entry;": "getRandomItemWith",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;Lnet/minecraft/world/entity/LivingEntity;Ljava/util/function/Predicate;)Ljava/util/Map$Entry;": "getRandomItemWith",
        "a(Lnet/minecraft/util/RandomSource;IILnet/minecraft/world/item/ItemStack;)I": "getEnchantmentCost",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/item/ItemStack;IZ)Lnet/minecraft/world/item/ItemStack;": "enchantItem",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/item/ItemStack;IZ)Ljava/util/List;": "selectEnchantment",
        "a(Ljava/util/List;Lnet/minecraft/world/item/enchantment/EnchantmentInstance;)V": "filterCompatibleEnchantments",
        "a(Ljava/util/Collection;Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "isEnchantmentCompatible",
        "a(ILnet/minecraft/world/item/ItemStack;Z)Ljava/util/List;": "getAvailableEnchantmentResults",
        "j(Lnet/minecraft/world/item/ItemStack;)Z": "lambda$getRandomItemWith$6",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/item/enchantment/Enchantment;I)V": "lambda$doPostDamageEffects$5",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/item/enchantment/Enchantment;I)V": "lambda$doPostHurtEffects$4",
        "a(Lorg/apache/commons/lang3/mutable/MutableFloat;Lnet/minecraft/world/entity/MobType;Lnet/minecraft/world/item/enchantment/Enchantment;I)V": "lambda$getDamageBonus$3",
        "a(Lorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/item/enchantment/Enchantment;I)V": "lambda$getDamageProtection$2",
        "a(Lnet/minecraft/world/item/enchantment/EnchantmentHelper$EnchantmentVisitor;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/item/enchantment/Enchantment;)V": "lambda$runIterationOnItem$1",
        "a(Ljava/util/Map;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/item/enchantment/Enchantment;)V": "lambda$deserializeEnchantments$0"
      }
    },
    "net/minecraft/world/item/enchantment/WeightedRandomEnchant": {
      "fields": {
        "a": "enchantment",
        "b": "level"
      }
    },
    "net/minecraft/world/item/enchantment/Enchantments": {
      "fields": {
        "N": "ARMOR_SLOTS",
        "a": "ALL_DAMAGE_PROTECTION",
        "b": "FIRE_PROTECTION",
        "c": "FALL_PROTECTION",
        "d": "BLAST_PROTECTION",
        "e": "PROJECTILE_PROTECTION",
        "f": "RESPIRATION",
        "g": "AQUA_AFFINITY",
        "h": "THORNS",
        "i": "DEPTH_STRIDER",
        "j": "FROST_WALKER",
        "k": "BINDING_CURSE",
        "l": "SOUL_SPEED",
        "m": "SWIFT_SNEAK",
        "n": "SHARPNESS",
        "o": "SMITE",
        "p": "BANE_OF_ARTHROPODS",
        "q": "KNOCKBACK",
        "r": "FIRE_ASPECT",
        "s": "MOB_LOOTING",
        "t": "SWEEPING_EDGE",
        "u": "BLOCK_EFFICIENCY",
        "v": "SILK_TOUCH",
        "w": "UNBREAKING",
        "x": "BLOCK_FORTUNE",
        "y": "POWER_ARROWS",
        "z": "PUNCH_ARROWS",
        "A": "FLAMING_ARROWS",
        "B": "INFINITY_ARROWS",
        "C": "FISHING_LUCK",
        "D": "FISHING_SPEED",
        "E": "LOYALTY",
        "F": "IMPALING",
        "G": "RIPTIDE",
        "H": "CHANNELING",
        "I": "MULTISHOT",
        "J": "QUICK_CHARGE",
        "K": "PIERCING",
        "L": "MENDING",
        "M": "VANISHING_CURSE"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/item/enchantment/Enchantment;)Lnet/minecraft/world/item/enchantment/Enchantment;": "register"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentFire": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentLure": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentFrostWalker": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "b()Z": "isTreasureOnly",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;I)V": "onEntityMoved",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentKnockback": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentLootBonus": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentMending": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "b()Z": "isTreasureOnly"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentMultishot": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentOxygen": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentProtection": {
      "fields": {
        "a": "type"
      },
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(ILnet/minecraft/world/damagesource/DamageSource;)I": "getDamageProtection",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility",
        "a(Lnet/minecraft/world/entity/LivingEntity;I)I": "getFireAfterDampener",
        "a(Lnet/minecraft/world/entity/LivingEntity;D)D": "getExplosionKnockbackAfterDampener"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentProtection$DamageType": {
      "fields": {
        "a": "ALL",
        "b": "FIRE",
        "c": "FALL",
        "d": "EXPLOSION",
        "e": "PROJECTILE",
        "f": "minCost",
        "g": "levelCost",
        "h": "$VALUES"
      },
      "methods": {
        "a()I": "getMinCost",
        "b()I": "getLevelCost",
        "c()[Lnet/minecraft/world/item/enchantment/ProtectionEnchantment$Type;": "$values"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentQuickCharge": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentSoulSpeed": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "b()Z": "isTreasureOnly",
        "h()Z": "isTradeable",
        "i()Z": "isDiscoverable",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentSweeping": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "e(I)F": "getSweepingDamageRatio"
      }
    },
    "net/minecraft/world/item/enchantment/SwiftSneakEnchantment": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "b()Z": "isTreasureOnly",
        "h()Z": "isTradeable",
        "i()Z": "isDiscoverable",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentThorns": {
      "fields": {
        "a": "CHANCE_PER_LEVEL"
      },
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "canEnchant",
        "b(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)V": "doPostHurt",
        "a(ILnet/minecraft/util/RandomSource;)Z": "shouldHit",
        "b(ILnet/minecraft/util/RandomSource;)I": "getDamage",
        "a(Ljava/util/Map$Entry;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$doPostHurt$0"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentTridentChanneling": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentTridentImpaling": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(ILnet/minecraft/world/entity/MobType;)F": "getDamageBonus"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentTridentLoyalty": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentTridentRiptide": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentSilkTouch": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentVanishing": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "b()Z": "isTreasureOnly",
        "c()Z": "isCurse"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentDepthStrider": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost",
        "a()I": "getMaxLevel",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "checkCompatibility"
      }
    },
    "net/minecraft/world/item/enchantment/EnchantmentWaterWorker": {
      "methods": {
        "a(I)I": "getMinCost",
        "b(I)I": "getMaxCost"
      }
    },
    "net/minecraft/world/item/trading/IMerchant": {
      "methods": {
        "f(Lnet/minecraft/world/entity/player/Player;)V": "setTradingPlayer",
        "fY()Lnet/minecraft/world/entity/player/Player;": "getTradingPlayer",
        "ga()Lnet/minecraft/world/item/trading/MerchantOffers;": "getOffers",
        "a(Lnet/minecraft/world/item/trading/MerchantOffers;)V": "overrideOffers",
        "a(Lnet/minecraft/world/item/trading/MerchantOffer;)V": "notifyTrade",
        "l(Lnet/minecraft/world/item/ItemStack;)V": "notifyTradeUpdated",
        "r()I": "getVillagerXp",
        "t(I)V": "overrideXp",
        "gb()Z": "showProgressBar",
        "gc()Lnet/minecraft/sounds/SoundEvent;": "getNotifyTradeSound",
        "gk()Z": "canRestock",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/network/chat/Component;I)V": "openTradingScreen",
        "gg()Z": "isClientSide"
      }
    },
    "net/minecraft/world/item/trading/MerchantRecipe": {
      "fields": {
        "a": "baseCostA",
        "b": "costB",
        "c": "result",
        "d": "uses",
        "e": "maxUses",
        "f": "rewardExp",
        "g": "specialPriceDiff",
        "h": "demand",
        "i": "priceMultiplier",
        "j": "xp"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/ItemStack;": "getBaseCostA",
        "b()Lnet/minecraft/world/item/ItemStack;": "getCostA",
        "c()Lnet/minecraft/world/item/ItemStack;": "getCostB",
        "d()Lnet/minecraft/world/item/ItemStack;": "getResult",
        "e()V": "updateDemand",
        "f()Lnet/minecraft/world/item/ItemStack;": "assemble",
        "g()I": "getUses",
        "h()V": "resetUses",
        "i()I": "getMaxUses",
        "j()V": "increaseUses",
        "k()I": "getDemand",
        "a(I)V": "addToSpecialPriceDiff",
        "l()V": "resetSpecialPriceDiff",
        "m()I": "getSpecialPriceDiff",
        "b(I)V": "setSpecialPriceDiff",
        "n()F": "getPriceMultiplier",
        "o()I": "getXp",
        "p()Z": "isOutOfStock",
        "q()V": "setToOutOfStock",
        "r()Z": "needsRestock",
        "s()Z": "shouldRewardExp",
        "t()Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "satisfiedBy",
        "c(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "isRequiredItem",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "take"
      }
    },
    "net/minecraft/world/item/trading/MerchantRecipeList": {
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;I)Lnet/minecraft/world/item/trading/MerchantOffer;": "getRecipeFor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToStream",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/trading/MerchantOffers;": "createFromStream",
        "a()Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/item/trading/MerchantOffer;": "lambda$createFromStream$1",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/item/trading/MerchantOffer;)V": "lambda$writeToStream$0"
      }
    },
    "net/minecraft/world/level/CommandBlockListenerAbstract": {
      "fields": {
        "b": "TIME_FORMAT",
        "c": "DEFAULT_NAME",
        "d": "lastExecution",
        "e": "updateLastExecution",
        "f": "successCount",
        "g": "trackOutput",
        "h": "lastOutput",
        "i": "command",
        "j": "name"
      },
      "methods": {
        "k()I": "getSuccessCount",
        "a(I)V": "setSuccessCount",
        "l()Lnet/minecraft/network/chat/Component;": "getLastOutput",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Ljava/lang/String;)V": "setCommand",
        "m()Ljava/lang/String;": "getCommand",
        "a(Lnet/minecraft/world/level/Level;)Z": "performCommand",
        "n()Lnet/minecraft/network/chat/Component;": "getName",
        "b(Lnet/minecraft/network/chat/Component;)V": "setName",
        "a(Lnet/minecraft/network/chat/Component;)V": "sendSystemMessage",
        "e()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "f()V": "onUpdated",
        "c(Lnet/minecraft/network/chat/Component;)V": "setLastOutput",
        "a(Z)V": "setTrackOutput",
        "o()Z": "isTrackOutput",
        "a(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/InteractionResult;": "usedBy",
        "g()Lnet/minecraft/world/phys/Vec3;": "getPosition",
        "i()Lnet/minecraft/commands/CommandSourceStack;": "createCommandSourceStack",
        "e_()Z": "acceptsSuccess",
        "q_()Z": "acceptsFailure",
        "N_()Z": "shouldInformAdmins",
        "j()Z": "isValid"
      }
    },
    "net/minecraft/world/level/MobSpawnerAbstract": {
      "fields": {
        "b": "SPAWN_DATA_TAG",
        "a": "LOGGER",
        "c": "EVENT_SPAWN",
        "d": "spawnDelay",
        "e": "spawnPotentials",
        "f": "nextSpawnData",
        "g": "spin",
        "h": "oSpin",
        "i": "minSpawnDelay",
        "j": "maxSpawnDelay",
        "k": "spawnCount",
        "l": "displayEntity",
        "m": "maxNearbyEntities",
        "n": "requiredPlayerRange",
        "o": "spawnRange"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)V": "setEntityId",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "isNearPlayer",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "clientTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "serverTick",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "delay",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/Entity;": "getOrCreateDisplayEntity",
        "a(Lnet/minecraft/world/level/Level;I)Z": "onEventTriggered",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/SpawnData;)V": "setNextSpawnData",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/SpawnData;": "getOrCreateNextSpawnData",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;I)V": "broadcastEvent",
        "a()D": "getSpin",
        "b()D": "getoSpin"
      }
    },
    "net/minecraft/world/level/IBlockLightAccess": {
      "methods": {
        "a(Lnet/minecraft/core/Direction;Z)F": "getShade",
        "s_()Lnet/minecraft/world/level/lighting/LevelLightEngine;": "getLightEngine",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/ColorResolver;)I": "getBlockTint",
        "a(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/BlockPos;)I": "getBrightness",
        "b(Lnet/minecraft/core/BlockPos;I)I": "getRawBrightness",
        "g(Lnet/minecraft/core/BlockPos;)Z": "canSeeSky"
      }
    },
    "net/minecraft/world/level/VoxelShapeSpliterator": {
      "fields": {
        "a": "box",
        "b": "context",
        "c": "cursor",
        "d": "pos",
        "e": "entityShape",
        "f": "collisionGetter",
        "g": "onlySuffocatingBlocks",
        "h": "cachedBlockGetter",
        "i": "cachedBlockGetterPos",
        "j": "resultProvider"
      },
      "methods": {
        "a(II)Lnet/minecraft/world/level/BlockGetter;": "getChunk"
      }
    },
    "net/minecraft/world/level/BlockActionData": {
      "fields": {
        "a": "pos",
        "b": "block",
        "c": "paramA",
        "d": "paramB"
      },
      "methods": {
        "a()Lnet/minecraft/core/BlockPos;": "pos",
        "b()Lnet/minecraft/world/level/block/Block;": "block",
        "c()I": "paramA",
        "d()I": "paramB"
      }
    },
    "net/minecraft/world/level/IBlockAccess": {
      "methods": {
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Ljava/util/Optional;": "getBlockEntity",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "h(Lnet/minecraft/core/BlockPos;)I": "getLightEmission",
        "M()I": "getMaxLightLevel",
        "a(Lnet/minecraft/world/phys/AABB;)Ljava/util/stream/Stream;": "getBlockStates",
        "a(Lnet/minecraft/world/level/ClipBlockStateContext;)Lnet/minecraft/world/phys/BlockHitResult;": "isBlockInLine",
        "a(Lnet/minecraft/world/level/ClipContext;)Lnet/minecraft/world/phys/BlockHitResult;": "clip",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/BlockHitResult;": "clipWithInteractionOverride",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Ljava/util/function/Supplier;)D": "getBlockFloorHeight",
        "i(Lnet/minecraft/core/BlockPos;)D": "getBlockFloorHeight",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Ljava/lang/Object;": "traverseBlocks"
      }
    },
    "net/minecraft/world/level/ChunkCoordIntPair": {
      "fields": {
        "g": "SAFETY_MARGIN",
        "a": "INVALID_CHUNK_POS",
        "b": "ZERO",
        "h": "COORD_BITS",
        "i": "COORD_MASK",
        "j": "REGION_BITS",
        "c": "REGION_SIZE",
        "k": "REGION_MASK",
        "d": "REGION_MAX_INDEX",
        "e": "x",
        "f": "z",
        "l": "HASH_A",
        "m": "HASH_C",
        "n": "HASH_Z_XOR"
      },
      "methods": {
        "a(II)Lnet/minecraft/world/level/ChunkPos;": "minFromRegion",
        "b(II)Lnet/minecraft/world/level/ChunkPos;": "maxFromRegion",
        "a()J": "toLong",
        "c(II)J": "asLong",
        "a(Lnet/minecraft/core/BlockPos;)J": "asLong",
        "a(J)I": "getX",
        "b(J)I": "getZ",
        "d(II)I": "hash",
        "b()I": "getMiddleBlockX",
        "c()I": "getMiddleBlockZ",
        "d()I": "getMinBlockX",
        "e()I": "getMinBlockZ",
        "f()I": "getMaxBlockX",
        "g()I": "getMaxBlockZ",
        "h()I": "getRegionX",
        "i()I": "getRegionZ",
        "j()I": "getRegionLocalX",
        "k()I": "getRegionLocalZ",
        "a(III)Lnet/minecraft/core/BlockPos;": "getBlockAt",
        "a(I)I": "getBlockX",
        "b(I)I": "getBlockZ",
        "c(I)Lnet/minecraft/core/BlockPos;": "getMiddleBlockPosition",
        "l()Lnet/minecraft/core/BlockPos;": "getWorldPosition",
        "a(Lnet/minecraft/world/level/ChunkPos;)I": "getChessboardDistance",
        "a(Lnet/minecraft/world/level/ChunkPos;I)Ljava/util/stream/Stream;": "rangeClosed",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/ChunkPos;)Ljava/util/stream/Stream;": "rangeClosed"
      }
    },
    "net/minecraft/world/level/ClipBlockStateContext": {
      "fields": {
        "a": "from",
        "b": "to",
        "c": "block"
      },
      "methods": {
        "a()Lnet/minecraft/world/phys/Vec3;": "getTo",
        "b()Lnet/minecraft/world/phys/Vec3;": "getFrom",
        "c()Ljava/util/function/Predicate;": "isTargetBlock"
      }
    },
    "net/minecraft/world/level/RayTrace": {
      "fields": {
        "a": "from",
        "b": "to",
        "c": "block",
        "d": "fluid",
        "e": "collisionContext"
      },
      "methods": {
        "a()Lnet/minecraft/world/phys/Vec3;": "getTo",
        "b()Lnet/minecraft/world/phys/Vec3;": "getFrom",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockShape",
        "a(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getFluidShape"
      }
    },
    "net/minecraft/world/level/RayTrace$BlockCollisionOption": {
      "fields": {
        "a": "COLLIDER",
        "b": "OUTLINE",
        "c": "VISUAL",
        "d": "FALLDAMAGE_RESETTING",
        "e": "shapeGetter",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/RayTrace$FluidCollisionOption": {
      "fields": {
        "a": "NONE",
        "b": "SOURCE_ONLY",
        "c": "ANY",
        "d": "WATER",
        "e": "canPick",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "canPick"
      }
    },
    "net/minecraft/world/level/ICollisionAccess": {
      "methods": {
        "w_()Lnet/minecraft/world/level/border/WorldBorder;": "getWorldBorder",
        "c(II)Lnet/minecraft/world/level/BlockGetter;": "getChunkForCollisions",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "isUnobstructed",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Z": "isUnobstructed",
        "f(Lnet/minecraft/world/entity/Entity;)Z": "isUnobstructed",
        "b(Lnet/minecraft/world/phys/AABB;)Z": "noCollision",
        "g(Lnet/minecraft/world/entity/Entity;)Z": "noCollision",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Z": "noCollision",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getEntityCollisions",
        "c(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/lang/Iterable;": "getCollisions",
        "d(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/lang/Iterable;": "getBlockCollisions",
        "g(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "borderCollision",
        "e(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Z": "collidesWithSuffocatingBlock",
        "f(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/Optional;": "findSupportingBlock",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/Vec3;DDD)Ljava/util/Optional;": "findFreePosition",
        "a(DDDLnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;": "lambda$findFreePosition$6",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;)Ljava/util/stream/Stream;": "lambda$findFreePosition$5",
        "b(Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "lambda$findFreePosition$4",
        "a(Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/core/BlockPos;": "lambda$findSupportingBlock$3",
        "b(Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$collidesWithSuffocatingBlock$2",
        "h(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/Iterator;": "lambda$getBlockCollisions$1",
        "c(Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$getBlockCollisions$0"
      }
    },
    "net/minecraft/world/level/ColorResolver": {},
    "net/minecraft/world/level/ICombinedAccess": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Ljava/util/Optional;": "getBlockEntity",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getEntityCollisions",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "isUnobstructed",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "getHeightmapPos"
      }
    },
    "net/minecraft/world/level/MobSpawner": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;ZZ)I": "tick"
      }
    },
    "net/minecraft/world/level/DataPackConfiguration": {
      "fields": {
        "a": "DEFAULT",
        "b": "CODEC",
        "c": "enabled",
        "d": "disabled"
      },
      "methods": {
        "a()Ljava/util/List;": "getEnabled",
        "b()Ljava/util/List;": "getDisabled",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/DataPackConfig;)Ljava/util/List;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/DataPackConfig;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/BlockAccessAir": {
      "fields": {
        "a": "INSTANCE",
        "b": "$VALUES"
      },
      "methods": {
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "C_()I": "getMinBuildHeight",
        "D_()I": "getHeight",
        "a()[Lnet/minecraft/world/level/EmptyBlockGetter;": "$values"
      }
    },
    "net/minecraft/world/level/ExplosionDamageCalculatorEntity": {
      "fields": {
        "a": "source"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Ljava/util/Optional;": "getBlockExplosionResistance",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;F)Z": "shouldBlockExplode",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;Ljava/lang/Float;)Ljava/lang/Float;": "lambda$getBlockExplosionResistance$0"
      }
    },
    "net/minecraft/world/level/IEntityAccess": {
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "a(Ljava/lang/Class;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntitiesOfClass",
        "v()Ljava/util/List;": "players",
        "a_(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "isUnobstructed",
        "a(Ljava/lang/Class;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getEntitiesOfClass",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getEntityCollisions",
        "a(DDDDLjava/util/function/Predicate;)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "a(Lnet/minecraft/world/entity/Entity;D)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "a(DDDDZ)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "a(DDDD)Z": "hasNearbyAlivePlayer",
        "a(Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "a(Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;Lnet/minecraft/world/entity/LivingEntity;DDD)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "a(Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;DDD)Lnet/minecraft/world/entity/player/Player;": "getNearestPlayer",
        "a(Ljava/lang/Class;Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;Lnet/minecraft/world/entity/LivingEntity;DDDLnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/entity/LivingEntity;": "getNearestEntity",
        "a(Ljava/util/List;Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;Lnet/minecraft/world/entity/LivingEntity;DDD)Lnet/minecraft/world/entity/LivingEntity;": "getNearestEntity",
        "a(Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getNearbyPlayers",
        "a(Ljava/lang/Class;Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getNearbyEntities",
        "b(Ljava/util/UUID;)Lnet/minecraft/world/entity/player/Player;": "getPlayerByUUID",
        "a(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$getNearbyEntities$1",
        "b(Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$getNearestEntity$0"
      }
    },
    "net/minecraft/world/level/Explosion": {
      "fields": {
        "a": "EXPLOSION_DAMAGE_CALCULATOR",
        "b": "MAX_DROPS_PER_COMBINED_STACK",
        "c": "fire",
        "d": "blockInteraction",
        "e": "random",
        "f": "level",
        "g": "x",
        "h": "y",
        "i": "z",
        "j": "source",
        "k": "radius",
        "l": "damageSource",
        "m": "damageCalculator",
        "n": "toBlow",
        "o": "hitPlayers"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/level/ExplosionDamageCalculator;": "makeDamageCalculator",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;)F": "getSeenPercent",
        "a()V": "explode",
        "a(Z)V": "finalizeExplosion",
        "b()Z": "interactsWithBlocks",
        "a(Lit/unimi/dsi/fastutil/objects/ObjectArrayList;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)V": "addBlockDrops",
        "c()Lnet/minecraft/world/damagesource/DamageSource;": "getDamageSource",
        "d()Ljava/util/Map;": "getHitPlayers",
        "e()Lnet/minecraft/world/entity/LivingEntity;": "getIndirectSourceEntity",
        "f()Lnet/minecraft/world/entity/Entity;": "getDirectSourceEntity",
        "g()V": "clearToBlow",
        "h()Ljava/util/List;": "getToBlow",
        "a(Lit/unimi/dsi/fastutil/objects/ObjectArrayList;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)V": "lambda$finalizeExplosion$0"
      }
    },
    "net/minecraft/world/level/Explosion$Effect": {
      "fields": {
        "a": "KEEP",
        "b": "DESTROY",
        "c": "DESTROY_WITH_DECAY",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/ExplosionDamageCalculator": {
      "methods": {
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Ljava/util/Optional;": "getBlockExplosionResistance",
        "a(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;F)Z": "shouldBlockExplode"
      }
    },
    "net/minecraft/world/level/FoliageColor": {
      "fields": {
        "a": "pixels"
      },
      "methods": {
        "a([I)V": "init",
        "a(DD)I": "get",
        "a()I": "getEvergreenColor",
        "b()I": "getBirchColor",
        "c()I": "getDefaultColor",
        "d()I": "getMangroveColor"
      }
    },
    "net/minecraft/world/level/ForcedChunk": {
      "fields": {
        "a": "FILE_ID",
        "b": "TAG_FORCED",
        "c": "chunks"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/ForcedChunksSavedData;": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a()Lit/unimi/dsi/fastutil/longs/LongSet;": "getChunks"
      }
    },
    "net/minecraft/world/level/GameRules": {
      "fields": {
        "a": "DEFAULT_RANDOM_TICK_SPEED",
        "U": "LOGGER",
        "V": "GAME_RULE_TYPES",
        "b": "RULE_DOFIRETICK",
        "c": "RULE_MOBGRIEFING",
        "d": "RULE_KEEPINVENTORY",
        "e": "RULE_DOMOBSPAWNING",
        "f": "RULE_DOMOBLOOT",
        "g": "RULE_DOBLOCKDROPS",
        "h": "RULE_DOENTITYDROPS",
        "i": "RULE_COMMANDBLOCKOUTPUT",
        "j": "RULE_NATURAL_REGENERATION",
        "k": "RULE_DAYLIGHT",
        "l": "RULE_LOGADMINCOMMANDS",
        "m": "RULE_SHOWDEATHMESSAGES",
        "n": "RULE_RANDOMTICKING",
        "o": "RULE_SENDCOMMANDFEEDBACK",
        "p": "RULE_REDUCEDDEBUGINFO",
        "q": "RULE_SPECTATORSGENERATECHUNKS",
        "r": "RULE_SPAWN_RADIUS",
        "s": "RULE_DISABLE_ELYTRA_MOVEMENT_CHECK",
        "t": "RULE_MAX_ENTITY_CRAMMING",
        "u": "RULE_WEATHER_CYCLE",
        "v": "RULE_LIMITED_CRAFTING",
        "w": "RULE_MAX_COMMAND_CHAIN_LENGTH",
        "x": "RULE_COMMAND_MODIFICATION_BLOCK_LIMIT",
        "y": "RULE_ANNOUNCE_ADVANCEMENTS",
        "z": "RULE_DISABLE_RAIDS",
        "A": "RULE_DOINSOMNIA",
        "B": "RULE_DO_IMMEDIATE_RESPAWN",
        "C": "RULE_DROWNING_DAMAGE",
        "D": "RULE_FALL_DAMAGE",
        "E": "RULE_FIRE_DAMAGE",
        "F": "RULE_FREEZE_DAMAGE",
        "G": "RULE_DO_PATROL_SPAWNING",
        "H": "RULE_DO_TRADER_SPAWNING",
        "I": "RULE_DO_WARDEN_SPAWNING",
        "J": "RULE_FORGIVE_DEAD_PLAYERS",
        "K": "RULE_UNIVERSAL_ANGER",
        "L": "RULE_PLAYERS_SLEEPING_PERCENTAGE",
        "M": "RULE_BLOCK_EXPLOSION_DROP_DECAY",
        "N": "RULE_MOB_EXPLOSION_DROP_DECAY",
        "O": "RULE_TNT_EXPLOSION_DROP_DECAY",
        "P": "RULE_SNOW_ACCUMULATION_HEIGHT",
        "Q": "RULE_WATER_SOURCE_CONVERSION",
        "R": "RULE_LAVA_SOURCE_CONVERSION",
        "S": "RULE_GLOBAL_SOUND_EVENTS",
        "T": "RULE_DO_VINES_SPREAD",
        "W": "rules"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/GameRules$Category;Lnet/minecraft/world/level/GameRules$Type;)Lnet/minecraft/world/level/GameRules$Key;": "register",
        "a(Lnet/minecraft/world/level/GameRules$Key;)Lnet/minecraft/world/level/GameRules$Value;": "getRule",
        "a()Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "a(Lcom/mojang/serialization/DynamicLike;)V": "loadFromTag",
        "b()Lnet/minecraft/world/level/GameRules;": "copy",
        "a(Lnet/minecraft/world/level/GameRules$GameRuleTypeVisitor;)V": "visitGameRuleTypes",
        "a(Lnet/minecraft/world/level/GameRules$GameRuleTypeVisitor;Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Type;)V": "callVisitorCap",
        "a(Lnet/minecraft/world/level/GameRules;Lnet/minecraft/server/MinecraftServer;)V": "assignFrom",
        "a(Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules;Lnet/minecraft/server/MinecraftServer;)V": "assignCap",
        "b(Lnet/minecraft/world/level/GameRules$Key;)Z": "getBoolean",
        "c(Lnet/minecraft/world/level/GameRules$Key;)I": "getInt",
        "a(Lnet/minecraft/world/level/GameRules;Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/GameRules$Key;)V": "lambda$assignFrom$8",
        "b(Lnet/minecraft/world/level/GameRules$GameRuleTypeVisitor;Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Type;)V": "lambda$visitGameRuleTypes$7",
        "a(Ljava/util/Map$Entry;)Lnet/minecraft/world/level/GameRules$Value;": "lambda$copy$6",
        "a(Lcom/mojang/serialization/DynamicLike;Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Value;)V": "lambda$loadFromTag$5",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Value;)V": "lambda$createTag$4",
        "a(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/GameRules$BooleanValue;)V": "lambda$static$2",
        "b(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/GameRules$BooleanValue;)V": "lambda$static$1"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleBoolean": {
      "fields": {
        "b": "value"
      },
      "methods": {
        "a(ZLjava/util/function/BiConsumer;)Lnet/minecraft/world/level/GameRules$Type;": "create",
        "a(Z)Lnet/minecraft/world/level/GameRules$Type;": "create",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)V": "updateFromArgument",
        "a()Z": "get",
        "a(ZLnet/minecraft/server/MinecraftServer;)V": "set",
        "b()Ljava/lang/String;": "serialize",
        "a(Ljava/lang/String;)V": "deserialize",
        "c()I": "getCommandResult",
        "d()Lnet/minecraft/world/level/GameRules$BooleanValue;": "getSelf",
        "e()Lnet/minecraft/world/level/GameRules$BooleanValue;": "copy",
        "a(Lnet/minecraft/world/level/GameRules$BooleanValue;Lnet/minecraft/server/MinecraftServer;)V": "setFrom",
        "a(Lnet/minecraft/world/level/GameRules$Value;Lnet/minecraft/server/MinecraftServer;)V": "setFrom",
        "f()Lnet/minecraft/world/level/GameRules$Value;": "copy",
        "g()Lnet/minecraft/world/level/GameRules$Value;": "getSelf",
        "a(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/GameRules$BooleanValue;)V": "lambda$create$1"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleCategory": {
      "fields": {
        "a": "PLAYER",
        "b": "MOBS",
        "c": "SPAWNING",
        "d": "DROPS",
        "e": "UPDATES",
        "f": "CHAT",
        "g": "MISC",
        "h": "descriptionId",
        "$VALUES": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getDescriptionId"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleVisitor": {
      "methods": {
        "a(Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Type;)V": "visit",
        "b(Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Type;)V": "visitBoolean",
        "c(Lnet/minecraft/world/level/GameRules$Key;Lnet/minecraft/world/level/GameRules$Type;)V": "visitInteger"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleInt": {
      "fields": {
        "b": "value"
      },
      "methods": {
        "a(ILjava/util/function/BiConsumer;)Lnet/minecraft/world/level/GameRules$Type;": "create",
        "a(I)Lnet/minecraft/world/level/GameRules$Type;": "create",
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)V": "updateFromArgument",
        "a()I": "get",
        "a(ILnet/minecraft/server/MinecraftServer;)V": "set",
        "b()Ljava/lang/String;": "serialize",
        "a(Ljava/lang/String;)V": "deserialize",
        "b(Ljava/lang/String;)Z": "tryDeserialize",
        "c(Ljava/lang/String;)I": "safeParse",
        "c()I": "getCommandResult",
        "d()Lnet/minecraft/world/level/GameRules$IntegerValue;": "getSelf",
        "e()Lnet/minecraft/world/level/GameRules$IntegerValue;": "copy",
        "a(Lnet/minecraft/world/level/GameRules$IntegerValue;Lnet/minecraft/server/MinecraftServer;)V": "setFrom",
        "a(Lnet/minecraft/world/level/GameRules$Value;Lnet/minecraft/server/MinecraftServer;)V": "setFrom",
        "f()Lnet/minecraft/world/level/GameRules$Value;": "copy",
        "g()Lnet/minecraft/world/level/GameRules$Value;": "getSelf",
        "a(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/GameRules$IntegerValue;)V": "lambda$create$1"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleKey": {
      "fields": {
        "a": "id",
        "b": "category"
      },
      "methods": {
        "a()Ljava/lang/String;": "getId",
        "b()Ljava/lang/String;": "getDescriptionId",
        "c()Lnet/minecraft/world/level/GameRules$Category;": "getCategory"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleDefinition": {
      "fields": {
        "a": "argument",
        "b": "constructor",
        "c": "callback",
        "d": "visitorCaller"
      },
      "methods": {
        "a(Ljava/lang/String;)Lcom/mojang/brigadier/builder/RequiredArgumentBuilder;": "createArgument",
        "a()Lnet/minecraft/world/level/GameRules$Value;": "createRule",
        "a(Lnet/minecraft/world/level/GameRules$GameRuleTypeVisitor;Lnet/minecraft/world/level/GameRules$Key;)V": "callVisitor"
      }
    },
    "net/minecraft/world/level/GameRules$GameRuleValue": {
      "fields": {
        "a": "type"
      },
      "methods": {
        "a(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)V": "updateFromArgument",
        "b(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)V": "setFromArgument",
        "a(Lnet/minecraft/server/MinecraftServer;)V": "onChanged",
        "a(Ljava/lang/String;)V": "deserialize",
        "b()Ljava/lang/String;": "serialize",
        "c()I": "getCommandResult",
        "g()Lnet/minecraft/world/level/GameRules$Value;": "getSelf",
        "f()Lnet/minecraft/world/level/GameRules$Value;": "copy",
        "a(Lnet/minecraft/world/level/GameRules$Value;Lnet/minecraft/server/MinecraftServer;)V": "setFrom"
      }
    },
    "net/minecraft/world/level/EnumGamemode": {
      "fields": {
        "a": "SURVIVAL",
        "b": "CREATIVE",
        "c": "ADVENTURE",
        "d": "SPECTATOR",
        "e": "DEFAULT_MODE",
        "f": "CODEC",
        "g": "BY_ID",
        "h": "NOT_SET",
        "i": "id",
        "j": "name",
        "k": "shortName",
        "l": "longName",
        "m": "$VALUES"
      },
      "methods": {
        "a()I": "getId",
        "b()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "d()Lnet/minecraft/network/chat/Component;": "getLongDisplayName",
        "e()Lnet/minecraft/network/chat/Component;": "getShortDisplayName",
        "a(Lnet/minecraft/world/entity/player/Abilities;)V": "updatePlayerAbilities",
        "f()Z": "isBlockPlacingRestricted",
        "g()Z": "isCreative",
        "h()Z": "isSurvival",
        "a(I)Lnet/minecraft/world/level/GameType;": "byId",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/GameType;": "byName",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/GameType;)Lnet/minecraft/world/level/GameType;": "byName",
        "a(Lnet/minecraft/world/level/GameType;)I": "getNullableId",
        "b(I)Lnet/minecraft/world/level/GameType;": "byNullableId",
        "i()[Lnet/minecraft/world/level/GameType;": "$values"
      }
    },
    "net/minecraft/world/level/GrassColor": {
      "fields": {
        "a": "pixels"
      },
      "methods": {
        "a([I)V": "init",
        "a(DD)I": "get",
        "a()I": "getDefaultColor"
      }
    },
    "net/minecraft/world/level/IMaterial": {
      "methods": {
        "k()Lnet/minecraft/world/item/Item;": "asItem"
      }
    },
    "net/minecraft/world/level/World": {
      "fields": {
        "g": "RESOURCE_KEY_CODEC",
        "h": "OVERWORLD",
        "i": "NETHER",
        "j": "END",
        "k": "MAX_LEVEL_SIZE",
        "l": "LONG_PARTICLE_CLIP_RANGE",
        "m": "SHORT_PARTICLE_CLIP_RANGE",
        "n": "MAX_BRIGHTNESS",
        "o": "TICKS_PER_DAY",
        "p": "MAX_ENTITY_SPAWN_Y",
        "q": "MIN_ENTITY_SPAWN_Y",
        "r": "blockEntityTickers",
        "s": "neighborUpdater",
        "a": "pendingBlockEntityTickers",
        "b": "tickingBlockEntities",
        "c": "thread",
        "d": "isDebug",
        "e": "skyDarken",
        "t": "randValue",
        "u": "addend",
        "v": "oRainLevel",
        "w": "rainLevel",
        "x": "oThunderLevel",
        "y": "thunderLevel",
        "z": "random",
        "f": "threadSafeRandom",
        "D": "dimensionTypeId",
        "E": "dimensionTypeRegistration",
        "A": "levelData",
        "F": "profiler",
        "B": "isClientSide",
        "G": "worldBorder",
        "H": "biomeManager",
        "I": "dimension",
        "J": "registryAccess",
        "K": "damageSources",
        "L": "subTickCount"
      },
      "methods": {
        "r_()Z": "isClientSide",
        "n()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "j(Lnet/minecraft/core/BlockPos;)Z": "isInWorldBounds",
        "k(Lnet/minecraft/core/BlockPos;)Z": "isInSpawnableBounds",
        "D(Lnet/minecraft/core/BlockPos;)Z": "isInWorldBoundsHorizontal",
        "b(I)Z": "isOutsideSpawnableHeight",
        "l(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/chunk/LevelChunk;": "getChunkAt",
        "d(II)Lnet/minecraft/world/level/chunk/LevelChunk;": "getChunk",
        "a(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;I)Z": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)Z": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)V": "onBlockStateChange",
        "a(Lnet/minecraft/core/BlockPos;Z)Z": "removeBlock",
        "a(Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/entity/Entity;I)Z": "destroyBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "addDestroyBlockEffect",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "setBlockAndUpdate",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;I)V": "sendBlockUpdated",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlocksDirty",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "updateNeighborsAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/Direction;)V": "updateNeighborsAtExceptFromFacing",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;II)V": "neighborShapeChanged",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "s_()Lnet/minecraft/world/level/lighting/LevelLightEngine;": "getLightEngine",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "N()Z": "isDay",
        "O()Z": "isNight",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playSound",
        "a(Lnet/minecraft/world/entity/player/Player;DDDLnet/minecraft/core/Holder;Lnet/minecraft/sounds/SoundSource;FFJ)V": "playSeededSound",
        "a(Lnet/minecraft/world/entity/player/Player;DDDLnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FFJ)V": "playSeededSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Holder;Lnet/minecraft/sounds/SoundSource;FFJ)V": "playSeededSound",
        "a(Lnet/minecraft/world/entity/player/Player;DDDLnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playSound",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FFZ)V": "playLocalSound",
        "a(DDDLnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FFZ)V": "playLocalSound",
        "a(Lnet/minecraft/core/particles/ParticleOptions;DDDDDD)V": "addParticle",
        "a(Lnet/minecraft/core/particles/ParticleOptions;ZDDDDDD)V": "addParticle",
        "b(Lnet/minecraft/core/particles/ParticleOptions;DDDDDD)V": "addAlwaysVisibleParticle",
        "b(Lnet/minecraft/core/particles/ParticleOptions;ZDDDDDD)V": "addAlwaysVisibleParticle",
        "a(F)F": "getSunAngle",
        "a(Lnet/minecraft/world/level/block/entity/TickingBlockEntity;)V": "addBlockEntityTicker",
        "P()V": "tickBlockEntities",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/entity/Entity;)V": "guardEntityTick",
        "h(Lnet/minecraft/world/entity/Entity;)Z": "shouldTickDeath",
        "a(J)Z": "shouldTickBlocksAt",
        "m(Lnet/minecraft/core/BlockPos;)Z": "shouldTickBlocksAt",
        "a(Lnet/minecraft/world/entity/Entity;DDDFLnet/minecraft/world/level/Level$ExplosionInteraction;)Lnet/minecraft/world/level/Explosion;": "explode",
        "a(Lnet/minecraft/world/entity/Entity;DDDFZLnet/minecraft/world/level/Level$ExplosionInteraction;)Lnet/minecraft/world/level/Explosion;": "explode",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/level/ExplosionDamageCalculator;Lnet/minecraft/world/phys/Vec3;FZLnet/minecraft/world/level/Level$ExplosionInteraction;)Lnet/minecraft/world/level/Explosion;": "explode",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/level/ExplosionDamageCalculator;DDDFZLnet/minecraft/world/level/Level$ExplosionInteraction;)Lnet/minecraft/world/level/Explosion;": "explode",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;Lnet/minecraft/world/level/ExplosionDamageCalculator;DDDFZLnet/minecraft/world/level/Level$ExplosionInteraction;Z)Lnet/minecraft/world/level/Explosion;": "explode",
        "a(Lnet/minecraft/world/level/GameRules$Key;)Lnet/minecraft/world/level/Explosion$BlockInteraction;": "getDestroyType",
        "F()Ljava/lang/String;": "gatherChunkSourceStats",
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "setBlockEntity",
        "n(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntity",
        "o(Lnet/minecraft/core/BlockPos;)Z": "isLoaded",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Direction;)Z": "loadedAndEntityCanStandOnFace",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)Z": "loadedAndEntityCanStandOn",
        "Q()V": "updateSkyBrightness",
        "b(ZZ)V": "setSpawnSettings",
        "R()Lnet/minecraft/core/BlockPos;": "getSharedSpawnPos",
        "S()F": "getSharedSpawnAngle",
        "T()V": "prepareWeather",
        "c(II)Lnet/minecraft/world/level/BlockGetter;": "getChunkForCollisions",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;)Ljava/util/List;": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;Ljava/util/List;)V": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Ljava/util/function/Predicate;Ljava/util/List;I)V": "getEntities",
        "a(I)Lnet/minecraft/world/entity/Entity;": "getEntity",
        "p(Lnet/minecraft/core/BlockPos;)V": "blockEntityChanged",
        "t_()I": "getSeaLevel",
        "U()V": "disconnect",
        "V()J": "getGameTime",
        "W()J": "getDayTime",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;)Z": "mayInteract",
        "a(Lnet/minecraft/world/entity/Entity;B)V": "broadcastEntityEvent",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/damagesource/DamageSource;)V": "broadcastDamageEvent",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;II)V": "blockEvent",
        "u_()Lnet/minecraft/world/level/storage/LevelData;": "getLevelData",
        "X()Lnet/minecraft/world/level/GameRules;": "getGameRules",
        "b(F)F": "getThunderLevel",
        "c(F)V": "setThunderLevel",
        "d(F)F": "getRainLevel",
        "e(F)V": "setRainLevel",
        "Y()Z": "isThundering",
        "Z()Z": "isRaining",
        "q(Lnet/minecraft/core/BlockPos;)Z": "isRainingAt",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "getMapData",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;)V": "setMapData",
        "t()I": "getFreeMapId",
        "b(ILnet/minecraft/core/BlockPos;I)V": "globalLevelEvent",
        "a(Lnet/minecraft/CrashReport;)Lnet/minecraft/CrashReportCategory;": "fillReportDetails",
        "a(ILnet/minecraft/core/BlockPos;I)V": "destroyBlockProgress",
        "a(DDDDDDLnet/minecraft/nbt/CompoundTag;)V": "createFireworks",
        "I()Lnet/minecraft/world/scores/Scoreboard;": "getScoreboard",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "updateNeighbourForOutputSignal",
        "d_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/DifficultyInstance;": "getCurrentDifficultyAt",
        "v_()I": "getSkyDarken",
        "c(I)V": "setSkyFlashTime",
        "w_()Lnet/minecraft/world/level/border/WorldBorder;": "getWorldBorder",
        "a(Lnet/minecraft/network/protocol/Packet;)V": "sendPacketToServer",
        "x_()Lnet/minecraft/world/level/dimension/DimensionType;": "dimensionType",
        "aa()Lnet/minecraft/resources/ResourceKey;": "dimensionTypeId",
        "ab()Lnet/minecraft/core/Holder;": "dimensionTypeRegistration",
        "ac()Lnet/minecraft/resources/ResourceKey;": "dimension",
        "y_()Lnet/minecraft/util/RandomSource;": "getRandom",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "isStateAtPosition",
        "b(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "isFluidAtPosition",
        "q()Lnet/minecraft/world/item/crafting/RecipeManager;": "getRecipeManager",
        "a(IIII)Lnet/minecraft/core/BlockPos;": "getBlockRandomPos",
        "r()Z": "noSave",
        "ad()Lnet/minecraft/util/profiling/ProfilerFiller;": "getProfiler",
        "ae()Ljava/util/function/Supplier;": "getProfilerSupplier",
        "z_()Lnet/minecraft/world/level/biome/BiomeManager;": "getBiomeManager",
        "af()Z": "isDebug",
        "E()Lnet/minecraft/world/level/entity/LevelEntityGetter;": "getEntities",
        "A_()J": "nextSubTickCount",
        "B_()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "ag()Lnet/minecraft/world/damagesource/DamageSources;": "damageSources",
        "a(II)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(Ljava/util/function/Predicate;Ljava/util/List;ILnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "lambda$getEntities$2",
        "a(Lnet/minecraft/world/entity/Entity;Ljava/util/function/Predicate;Ljava/util/List;Lnet/minecraft/world/entity/Entity;)V": "lambda$getEntities$1",
        "a(Lnet/minecraft/core/Holder;)Ljava/lang/IllegalArgumentException;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/GeneratorAccess": {
      "methods": {
        "ah()J": "dayTime",
        "A_()J": "nextSubTickCount",
        "L()Lnet/minecraft/world/ticks/LevelTickAccess;": "getBlockTicks",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;ILnet/minecraft/world/ticks/TickPriority;)Lnet/minecraft/world/ticks/ScheduledTick;": "createTick",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;I)Lnet/minecraft/world/ticks/ScheduledTick;": "createTick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;ILnet/minecraft/world/ticks/TickPriority;)V": "scheduleTick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;I)V": "scheduleTick",
        "K()Lnet/minecraft/world/ticks/LevelTickAccess;": "getFluidTicks",
        "u_()Lnet/minecraft/world/level/storage/LevelData;": "getLevelData",
        "d_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/DifficultyInstance;": "getCurrentDifficultyAt",
        "n()Lnet/minecraft/server/MinecraftServer;": "getServer",
        "ai()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "J()Lnet/minecraft/world/level/chunk/ChunkSource;": "getChunkSource",
        "b(II)Z": "hasChunk",
        "y_()Lnet/minecraft/util/RandomSource;": "getRandom",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "blockUpdated",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;II)V": "neighborShapeChanged",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;)V": "playSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;Lnet/minecraft/sounds/SoundSource;FF)V": "playSound",
        "a(Lnet/minecraft/core/particles/ParticleOptions;DDDDDD)V": "addParticle",
        "a(Lnet/minecraft/world/entity/player/Player;ILnet/minecraft/core/BlockPos;I)V": "levelEvent",
        "c(ILnet/minecraft/core/BlockPos;I)V": "levelEvent",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEvent$Context;)V": "gameEvent",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;)V": "gameEvent",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/core/BlockPos;)V": "gameEvent",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/gameevent/GameEvent$Context;)V": "gameEvent"
      }
    },
    "net/minecraft/world/level/LevelHeightAccessor": {
      "methods": {
        "D_()I": "getHeight",
        "C_()I": "getMinBuildHeight",
        "aj()I": "getMaxBuildHeight",
        "ak()I": "getSectionsCount",
        "al()I": "getMinSection",
        "am()I": "getMaxSection",
        "r(Lnet/minecraft/core/BlockPos;)Z": "isOutsideBuildHeight",
        "d(I)Z": "isOutsideBuildHeight",
        "e(I)I": "getSectionIndex",
        "f(I)I": "getSectionIndexFromSectionY",
        "g(I)I": "getSectionYFromSectionIndex",
        "e(II)Lnet/minecraft/world/level/LevelHeightAccessor;": "create"
      }
    },
    "net/minecraft/world/level/IWorldReader": {
      "methods": {
        "a(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "b(II)Z": "hasChunk",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "v_()I": "getSkyDarken",
        "z_()Lnet/minecraft/world/level/biome/BiomeManager;": "getBiomeManager",
        "s(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/Holder;": "getBiome",
        "c(Lnet/minecraft/world/phys/AABB;)Ljava/util/stream/Stream;": "getBlockStatesIfLoaded",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/ColorResolver;)I": "getBlockTint",
        "a(III)Lnet/minecraft/core/Holder;": "getUncachedNoiseBiome",
        "r_()Z": "isClientSide",
        "t_()I": "getSeaLevel",
        "x_()Lnet/minecraft/world/level/dimension/DimensionType;": "dimensionType",
        "C_()I": "getMinBuildHeight",
        "D_()I": "getHeight",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "getHeightmapPos",
        "t(Lnet/minecraft/core/BlockPos;)Z": "isEmptyBlock",
        "u(Lnet/minecraft/core/BlockPos;)Z": "canSeeSkyFromBelowWater",
        "v(Lnet/minecraft/core/BlockPos;)F": "getPathfindingCostFromLightLevels",
        "w(Lnet/minecraft/core/BlockPos;)F": "getLightLevelDependentMagicValue",
        "x(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(II)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(IILnet/minecraft/world/level/chunk/ChunkStatus;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "c(II)Lnet/minecraft/world/level/BlockGetter;": "getChunkForCollisions",
        "y(Lnet/minecraft/core/BlockPos;)Z": "isWaterAt",
        "d(Lnet/minecraft/world/phys/AABB;)Z": "containsAnyLiquid",
        "z(Lnet/minecraft/core/BlockPos;)I": "getMaxLocalRawBrightness",
        "c(Lnet/minecraft/core/BlockPos;I)I": "getMaxLocalRawBrightness",
        "f(II)Z": "hasChunkAt",
        "A(Lnet/minecraft/core/BlockPos;)Z": "hasChunkAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Z": "hasChunksAt",
        "a(IIIIII)Z": "hasChunksAt",
        "b(IIII)Z": "hasChunksAt",
        "B_()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "G()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/core/HolderLookup;": "holderLookup"
      }
    },
    "net/minecraft/world/level/WorldSettings": {
      "fields": {
        "a": "levelName",
        "b": "gameType",
        "c": "hardcore",
        "d": "difficulty",
        "e": "allowCommands",
        "f": "gameRules",
        "g": "dataConfiguration"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Lnet/minecraft/world/level/WorldDataConfiguration;)Lnet/minecraft/world/level/LevelSettings;": "parse",
        "a()Ljava/lang/String;": "levelName",
        "b()Lnet/minecraft/world/level/GameType;": "gameType",
        "c()Z": "hardcore",
        "d()Lnet/minecraft/world/Difficulty;": "difficulty",
        "e()Z": "allowCommands",
        "f()Lnet/minecraft/world/level/GameRules;": "gameRules",
        "g()Lnet/minecraft/world/level/WorldDataConfiguration;": "getDataConfiguration",
        "a(Lnet/minecraft/world/level/GameType;)Lnet/minecraft/world/level/LevelSettings;": "withGameType",
        "a(Lnet/minecraft/world/Difficulty;)Lnet/minecraft/world/level/LevelSettings;": "withDifficulty",
        "a(Lnet/minecraft/world/level/WorldDataConfiguration;)Lnet/minecraft/world/level/LevelSettings;": "withDataConfiguration",
        "h()Lnet/minecraft/world/level/LevelSettings;": "copy",
        "a(Ljava/lang/Number;)Lnet/minecraft/world/Difficulty;": "lambda$parse$0"
      }
    },
    "net/minecraft/world/level/VirtualLevelWritable": {},
    "net/minecraft/world/level/VirtualLevelReadable": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "isStateAtPosition",
        "b(Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "isFluidAtPosition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Ljava/util/Optional;": "getBlockEntity",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "getHeightmapPos"
      }
    },
    "net/minecraft/world/level/IWorldTime": {
      "methods": {
        "ah()J": "dayTime",
        "an()F": "getMoonBrightness",
        "f(F)F": "getTimeOfDay",
        "ao()I": "getMoonPhase"
      }
    },
    "net/minecraft/world/level/IWorldWriter": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)Z": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;I)Z": "setBlock",
        "a(Lnet/minecraft/core/BlockPos;Z)Z": "removeBlock",
        "b(Lnet/minecraft/core/BlockPos;Z)Z": "destroyBlock",
        "a(Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/entity/Entity;)Z": "destroyBlock",
        "a(Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/entity/Entity;I)Z": "destroyBlock",
        "b(Lnet/minecraft/world/entity/Entity;)Z": "addFreshEntity"
      }
    },
    "net/minecraft/world/level/EnumSkyBlock": {
      "fields": {
        "a": "SKY",
        "b": "BLOCK",
        "c": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/LightLayer;": "$values"
      }
    },
    "net/minecraft/world/level/LocalMobCapCalculator": {
      "fields": {
        "a": "playersNearChunk",
        "b": "playerMobCounts"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/List;": "getPlayersNear",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/entity/MobCategory;)V": "addMob",
        "a(Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/world/level/ChunkPos;)Z": "canSpawn",
        "a(Lnet/minecraft/server/level/ServerPlayer;)Lnet/minecraft/world/level/LocalMobCapCalculator$MobCounts;": "lambda$addMob$1",
        "a(Lnet/minecraft/world/level/ChunkPos;J)Ljava/util/List;": "lambda$getPlayersNear$0"
      }
    },
    "net/minecraft/world/level/SpawnerCreature": {
      "fields": {
        "c": "LOGGER",
        "d": "MIN_SPAWN_DISTANCE",
        "a": "SPAWN_DISTANCE_CHUNK",
        "b": "SPAWN_DISTANCE_BLOCK",
        "e": "MAGIC_NUMBER",
        "f": "SPAWNING_CATEGORIES"
      },
      "methods": {
        "a(ILjava/lang/Iterable;Lnet/minecraft/world/level/NaturalSpawner$ChunkGetter;Lnet/minecraft/world/level/LocalMobCapCalculator;)Lnet/minecraft/world/level/NaturalSpawner$SpawnState;": "createState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/biome/Biome;": "getRoughBiome",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/LevelChunk;Lnet/minecraft/world/level/NaturalSpawner$SpawnState;ZZZ)V": "spawnForChunk",
        "a(Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/LevelChunk;Lnet/minecraft/world/level/NaturalSpawner$SpawnPredicate;Lnet/minecraft/world/level/NaturalSpawner$AfterSpawnCallback;)V": "spawnCategoryForChunk",
        "a(Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "spawnCategoryForPosition",
        "a(Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/NaturalSpawner$SpawnPredicate;Lnet/minecraft/world/level/NaturalSpawner$AfterSpawnCallback;)V": "spawnCategoryForPosition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos$MutableBlockPos;D)Z": "isRightDistanceToPlayerAndSpawnPoint",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/biome/MobSpawnSettings$SpawnerData;Lnet/minecraft/core/BlockPos$MutableBlockPos;D)Z": "isValidSpawnPostitionForType",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/world/entity/Mob;": "getMobForSpawn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Mob;D)Z": "isValidPositionForMob",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "getRandomSpawnMobAt",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/world/level/biome/MobSpawnSettings$SpawnerData;Lnet/minecraft/core/BlockPos;)Z": "canSpawnMobAt",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)Lnet/minecraft/util/random/WeightedRandomList;": "mobsAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/world/level/StructureManager;)Z": "isInNetherFortressBounds",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/chunk/LevelChunk;)Lnet/minecraft/core/BlockPos;": "getRandomPosWithin",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/entity/EntityType;)Z": "isValidEmptySpawnBlock",
        "a(Lnet/minecraft/world/entity/SpawnPlacements$Type;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Z": "isSpawnPositionOk",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/util/RandomSource;)V": "spawnMobsForChunkGeneration",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/entity/EntityType;II)Lnet/minecraft/core/BlockPos;": "getTopNonCollidingPos",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/PotentialCalculator;Lnet/minecraft/world/level/LocalMobCapCalculator;Lnet/minecraft/world/entity/MobCategory;Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;Lnet/minecraft/world/level/chunk/LevelChunk;)V": "lambda$createState$2"
      }
    },
    "net/minecraft/world/level/BlockColumn": {
      "fields": {
        "a": "minY",
        "b": "column"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/block/state/BlockState;": "getBlock",
        "a(ILnet/minecraft/world/level/block/state/BlockState;)V": "setBlock"
      }
    },
    "net/minecraft/world/level/ChunkCache": {
      "fields": {
        "a": "centerX",
        "b": "centerZ",
        "c": "chunks",
        "d": "allEmpty",
        "e": "level",
        "f": "plains"
      },
      "methods": {
        "d(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(II)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "w_()Lnet/minecraft/world/level/border/WorldBorder;": "getWorldBorder",
        "c(II)Lnet/minecraft/world/level/BlockGetter;": "getChunkForCollisions",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Ljava/util/List;": "getEntityCollisions",
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "C_()I": "getMinBuildHeight",
        "D_()I": "getHeight",
        "a()Lnet/minecraft/util/profiling/ProfilerFiller;": "getProfiler",
        "a(Lnet/minecraft/world/level/Level;)Lnet/minecraft/core/Holder;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/SpawnerCreatureProbabilities": {
      "fields": {
        "a": "charges"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;D)V": "addCharge",
        "b(Lnet/minecraft/core/BlockPos;D)D": "getPotentialEnergyChange"
      }
    },
    "net/minecraft/world/level/WorldAccess": {
      "methods": {
        "C()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "a_(Lnet/minecraft/world/entity/Entity;)V": "addFreshEntityWithPassengers"
      }
    },
    "net/minecraft/world/level/SignalGetter": {
      "fields": {
        "C": "DIRECTIONS"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "e_(Lnet/minecraft/core/BlockPos;)I": "getDirectSignalTo",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Z)I": "getControlInputSignal",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "hasSignal",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "B(Lnet/minecraft/core/BlockPos;)Z": "hasNeighborSignal",
        "C(Lnet/minecraft/core/BlockPos;)I": "getBestNeighborSignal"
      }
    },
    "net/minecraft/world/level/MobSpawnerData": {
      "fields": {
        "d": "entityToSpawn",
        "e": "customSpawnRules",
        "a": "ENTITY_TAG",
        "b": "CODEC",
        "c": "LIST_CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/nbt/CompoundTag;": "getEntityToSpawn",
        "b()Ljava/util/Optional;": "getCustomSpawnRules",
        "c()Lnet/minecraft/nbt/CompoundTag;": "entityToSpawn",
        "d()Ljava/util/Optional;": "customSpawnRules",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/SpawnData;)Ljava/util/Optional;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/SpawnData;)Lnet/minecraft/nbt/CompoundTag;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/StructureManager": {
      "fields": {
        "a": "level",
        "b": "worldOptions",
        "c": "structureCheck"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/WorldGenRegion;)Lnet/minecraft/world/level/StructureManager;": "forWorldGenRegion",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/util/function/Predicate;)Ljava/util/List;": "startsForStructure",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/levelgen/structure/Structure;)Ljava/util/List;": "startsForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Lit/unimi/dsi/fastutil/longs/LongSet;Ljava/util/function/Consumer;)V": "fillStartsForStructure",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/chunk/StructureAccess;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStartForStructure",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/levelgen/structure/StructureStart;Lnet/minecraft/world/level/chunk/StructureAccess;)V": "setStartForStructure",
        "a(Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/levelgen/structure/Structure;JLnet/minecraft/world/level/chunk/StructureAccess;)V": "addReferenceForStructure",
        "a()Z": "shouldGenerateStructures",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/Structure;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStructureAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStructureWithPieceAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStructureWithPieceAt",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/Structure;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStructureWithPieceAt",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Z": "structureHasPieceAt",
        "a(Lnet/minecraft/core/BlockPos;)Z": "hasAnyStructureAt",
        "b(Lnet/minecraft/core/BlockPos;)Ljava/util/Map;": "getAllStructuresAt",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/Structure;Z)Lnet/minecraft/world/level/levelgen/structure/StructureCheckResult;": "checkStructurePresence",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "addReference",
        "b()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "a(Lnet/minecraft/tags/TagKey;Lnet/minecraft/core/Holder$Reference;)Ljava/lang/Boolean;": "lambda$getStructureWithPieceAt$0"
      }
    },
    "net/minecraft/world/level/WorldDataConfiguration": {
      "fields": {
        "d": "dataPacks",
        "e": "enabledFeatures",
        "a": "ENABLED_FEATURES_ID",
        "b": "CODEC",
        "c": "DEFAULT"
      },
      "methods": {
        "a(Lnet/minecraft/world/flag/FeatureFlagSet;)Lnet/minecraft/world/level/WorldDataConfiguration;": "expandFeatures",
        "a()Lnet/minecraft/world/level/DataPackConfig;": "dataPacks",
        "b()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/GeneratorAccessSeed": {
      "methods": {
        "A()J": "getSeed",
        "f_(Lnet/minecraft/core/BlockPos;)Z": "ensureCanWrite",
        "a(Ljava/util/function/Supplier;)V": "setCurrentlyGenerating"
      }
    },
    "net/minecraft/world/level/biome/CaveSound": {
      "fields": {
        "a": "CODEC",
        "b": "soundEvent",
        "c": "tickChance"
      },
      "methods": {
        "a()Lnet/minecraft/core/Holder;": "getSoundEvent",
        "b()D": "getTickChance",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/biome/AmbientAdditionsSettings;)Ljava/lang/Double;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/biome/AmbientAdditionsSettings;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/CaveSoundSettings": {
      "fields": {
        "a": "CODEC",
        "b": "LEGACY_CAVE_SETTINGS",
        "c": "soundEvent",
        "d": "tickDelay",
        "e": "blockSearchExtent",
        "f": "soundPositionOffset"
      },
      "methods": {
        "a()Lnet/minecraft/core/Holder;": "getSoundEvent",
        "b()I": "getTickDelay",
        "c()I": "getBlockSearchExtent",
        "d()D": "getSoundPositionOffset",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/biome/AmbientMoodSettings;)Ljava/lang/Double;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/biome/AmbientMoodSettings;)Ljava/lang/Integer;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/biome/AmbientMoodSettings;)Ljava/lang/Integer;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/biome/AmbientMoodSettings;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeParticles": {
      "fields": {
        "a": "CODEC",
        "b": "options",
        "c": "probability"
      },
      "methods": {
        "a()Lnet/minecraft/core/particles/ParticleOptions;": "getOptions",
        "a(Lnet/minecraft/util/RandomSource;)Z": "canSpawn",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/biome/AmbientParticleSettings;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/biome/AmbientParticleSettings;)Lnet/minecraft/core/particles/ParticleOptions;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeBase": {
      "fields": {
        "a": "DIRECT_CODEC",
        "b": "NETWORK_CODEC",
        "c": "CODEC",
        "d": "LIST_CODEC",
        "f": "TEMPERATURE_NOISE",
        "g": "FROZEN_TEMPERATURE_NOISE",
        "e": "BIOME_INFO_NOISE",
        "h": "TEMPERATURE_CACHE_SIZE",
        "i": "climateSettings",
        "j": "generationSettings",
        "k": "mobSettings",
        "l": "specialEffects",
        "m": "temperatureCache"
      },
      "methods": {
        "a()I": "getSkyColor",
        "b()Lnet/minecraft/world/level/biome/MobSpawnSettings;": "getMobSettings",
        "c()Z": "hasPrecipitation",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/biome/Biome$Precipitation;": "getPrecipitationAt",
        "e(Lnet/minecraft/core/BlockPos;)F": "getHeightAdjustedTemperature",
        "f(Lnet/minecraft/core/BlockPos;)F": "getTemperature",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "shouldFreeze",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Z)Z": "shouldFreeze",
        "b(Lnet/minecraft/core/BlockPos;)Z": "coldEnoughToSnow",
        "c(Lnet/minecraft/core/BlockPos;)Z": "warmEnoughToRain",
        "d(Lnet/minecraft/core/BlockPos;)Z": "shouldMeltFrozenOceanIcebergSlightly",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "shouldSnow",
        "d()Lnet/minecraft/world/level/biome/BiomeGenerationSettings;": "getGenerationSettings",
        "e()I": "getFogColor",
        "a(DD)I": "getGrassColor",
        "p()I": "getGrassColorFromTexture",
        "f()I": "getFoliageColor",
        "q()I": "getFoliageColorFromTexture",
        "g()F": "getBaseTemperature",
        "h()Lnet/minecraft/world/level/biome/BiomeSpecialEffects;": "getSpecialEffects",
        "i()I": "getWaterColor",
        "j()I": "getWaterFogColor",
        "k()Ljava/util/Optional;": "getAmbientParticle",
        "l()Ljava/util/Optional;": "getAmbientLoop",
        "m()Ljava/util/Optional;": "getAmbientMood",
        "n()Ljava/util/Optional;": "getAmbientAdditions",
        "o()Ljava/util/Optional;": "getBackgroundMusic",
        "r()Lit/unimi/dsi/fastutil/longs/Long2FloatLinkedOpenHashMap;": "lambda$new$10",
        "s()Lit/unimi/dsi/fastutil/longs/Long2FloatLinkedOpenHashMap;": "lambda$new$9",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$8",
        "a(Lnet/minecraft/world/level/biome/Biome$ClimateSettings;Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Lnet/minecraft/world/level/biome/Biome;": "lambda$static$7",
        "a(Lnet/minecraft/world/level/biome/Biome;)Lnet/minecraft/world/level/biome/BiomeSpecialEffects;": "lambda$static$6",
        "b(Lnet/minecraft/world/level/biome/Biome;)Lnet/minecraft/world/level/biome/Biome$ClimateSettings;": "lambda$static$5",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/biome/Biome;)Lnet/minecraft/world/level/biome/MobSpawnSettings;": "lambda$static$3",
        "d(Lnet/minecraft/world/level/biome/Biome;)Lnet/minecraft/world/level/biome/BiomeGenerationSettings;": "lambda$static$2",
        "e(Lnet/minecraft/world/level/biome/Biome;)Lnet/minecraft/world/level/biome/BiomeSpecialEffects;": "lambda$static$1",
        "f(Lnet/minecraft/world/level/biome/Biome;)Lnet/minecraft/world/level/biome/Biome$ClimateSettings;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeBase$ClimateSettings": {
      "fields": {
        "b": "hasPrecipitation",
        "c": "temperature",
        "d": "temperatureModifier",
        "e": "downfall",
        "a": "CODEC"
      },
      "methods": {
        "a()Z": "hasPrecipitation",
        "b()F": "temperature",
        "c()Lnet/minecraft/world/level/biome/Biome$TemperatureModifier;": "temperatureModifier",
        "d()F": "downfall",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/biome/Biome$ClimateSettings;)Ljava/lang/Float;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/biome/Biome$ClimateSettings;)Lnet/minecraft/world/level/biome/Biome$TemperatureModifier;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/biome/Biome$ClimateSettings;)Ljava/lang/Float;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/biome/Biome$ClimateSettings;)Ljava/lang/Boolean;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeBase$Precipitation": {
      "fields": {
        "a": "NONE",
        "b": "RAIN",
        "c": "SNOW",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/biome/Biome$Precipitation;": "$values"
      }
    },
    "net/minecraft/world/level/biome/BiomeBase$TemperatureModifier": {
      "fields": {
        "a": "NONE",
        "b": "FROZEN",
        "d": "name",
        "c": "CODEC",
        "e": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;F)F": "modifyTemperature",
        "a()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()[Lnet/minecraft/world/level/biome/Biome$TemperatureModifier;": "$values"
      }
    },
    "net/minecraft/world/level/biome/BiomeSettingsGeneration": {
      "fields": {
        "c": "LOGGER",
        "a": "EMPTY",
        "b": "CODEC",
        "d": "carvers",
        "e": "features",
        "f": "flowerFeatures",
        "g": "featureSet"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Ljava/lang/Iterable;": "getCarvers",
        "a()Ljava/util/List;": "getFlowerFeatures",
        "b()Ljava/util/List;": "features",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacedFeature;)Z": "hasFeature",
        "a(Ljava/util/List;)Ljava/util/Set;": "lambda$new$5",
        "b(Ljava/util/List;)Ljava/util/List;": "lambda$new$4",
        "a(Lnet/minecraft/world/level/levelgen/feature/ConfiguredFeature;)Z": "lambda$new$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/biome/BiomeGenerationSettings;)Ljava/util/List;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/biome/BiomeGenerationSettings;)Ljava/util/Map;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeManager": {
      "fields": {
        "a": "CHUNK_CENTER_QUART",
        "b": "ZOOM_BITS",
        "c": "ZOOM",
        "d": "ZOOM_MASK",
        "e": "noiseBiomeSource",
        "f": "biomeZoomSeed"
      },
      "methods": {
        "a(J)J": "obfuscateSeed",
        "a(Lnet/minecraft/world/level/biome/BiomeManager$NoiseBiomeSource;)Lnet/minecraft/world/level/biome/BiomeManager;": "withDifferentSource",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/Holder;": "getBiome",
        "a(DDD)Lnet/minecraft/core/Holder;": "getNoiseBiomeAtPosition",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/Holder;": "getNoiseBiomeAtPosition",
        "a(III)Lnet/minecraft/core/Holder;": "getNoiseBiomeAtQuart",
        "a(JIIIDDD)D": "getFiddledDistance",
        "b(J)D": "getFiddle"
      }
    },
    "net/minecraft/world/level/biome/BiomeManager$Provider": {},
    "net/minecraft/world/level/biome/BiomeResolver": {},
    "net/minecraft/world/level/biome/WorldChunkManager": {
      "fields": {
        "a": "CODEC",
        "b": "possibleBiomes"
      },
      "methods": {
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "b()Ljava/util/stream/Stream;": "collectPossibleBiomes",
        "c()Ljava/util/Set;": "possibleBiomes",
        "a(IIIILnet/minecraft/world/level/biome/Climate$Sampler;)Ljava/util/Set;": "getBiomesWithin",
        "a(IIIILjava/util/function/Predicate;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/biome/Climate$Sampler;)Lcom/mojang/datafixers/util/Pair;": "findBiomeHorizontal",
        "a(Lnet/minecraft/core/BlockPos;IIILjava/util/function/Predicate;Lnet/minecraft/world/level/biome/Climate$Sampler;Lnet/minecraft/world/level/LevelReader;)Lcom/mojang/datafixers/util/Pair;": "findClosestBiome3d",
        "a(IIIIILjava/util/function/Predicate;Lnet/minecraft/util/RandomSource;ZLnet/minecraft/world/level/biome/Climate$Sampler;)Lcom/mojang/datafixers/util/Pair;": "findBiomeHorizontal",
        "a(Ljava/util/List;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/biome/Climate$Sampler;)V": "addDebugInfo",
        "d()Ljava/util/Set;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeSources": {},
    "net/minecraft/world/level/biome/BiomeFog": {
      "fields": {
        "a": "CODEC",
        "b": "fogColor",
        "c": "waterColor",
        "d": "waterFogColor",
        "e": "skyColor",
        "f": "foliageColorOverride",
        "g": "grassColorOverride",
        "h": "grassColorModifier",
        "i": "ambientParticleSettings",
        "j": "ambientLoopSoundEvent",
        "k": "ambientMoodSettings",
        "l": "ambientAdditionsSettings",
        "m": "backgroundMusic"
      },
      "methods": {
        "a()I": "getFogColor",
        "b()I": "getWaterColor",
        "c()I": "getWaterFogColor",
        "d()I": "getSkyColor",
        "e()Ljava/util/Optional;": "getFoliageColorOverride",
        "f()Ljava/util/Optional;": "getGrassColorOverride",
        "g()Lnet/minecraft/world/level/biome/BiomeSpecialEffects$GrassColorModifier;": "getGrassColorModifier",
        "h()Ljava/util/Optional;": "getAmbientParticleSettings",
        "i()Ljava/util/Optional;": "getAmbientLoopSoundEvent",
        "j()Ljava/util/Optional;": "getAmbientMoodSettings",
        "k()Ljava/util/Optional;": "getAmbientAdditionsSettings",
        "l()Ljava/util/Optional;": "getBackgroundMusic",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$12",
        "a(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$11",
        "b(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$10",
        "c(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$9",
        "d(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$8",
        "e(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$7",
        "f(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Lnet/minecraft/world/level/biome/BiomeSpecialEffects$GrassColorModifier;": "lambda$static$6",
        "g(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$5",
        "h(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/util/Optional;": "lambda$static$4",
        "i(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/lang/Integer;": "lambda$static$3",
        "j(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/lang/Integer;": "lambda$static$2",
        "k(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/lang/Integer;": "lambda$static$1",
        "l(Lnet/minecraft/world/level/biome/BiomeSpecialEffects;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeFog$GrassColor": {
      "fields": {
        "a": "NONE",
        "b": "DARK_FOREST",
        "c": "SWAMP",
        "e": "name",
        "d": "CODEC",
        "f": "$VALUES"
      },
      "methods": {
        "a(DDI)I": "modifyColor",
        "a()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()[Lnet/minecraft/world/level/biome/BiomeSpecialEffects$GrassColorModifier;": "$values"
      }
    },
    "net/minecraft/world/level/biome/Biomes": {
      "fields": {
        "a": "THE_VOID",
        "b": "PLAINS",
        "c": "SUNFLOWER_PLAINS",
        "d": "SNOWY_PLAINS",
        "e": "ICE_SPIKES",
        "f": "DESERT",
        "g": "SWAMP",
        "h": "MANGROVE_SWAMP",
        "i": "FOREST",
        "j": "FLOWER_FOREST",
        "k": "BIRCH_FOREST",
        "l": "DARK_FOREST",
        "m": "OLD_GROWTH_BIRCH_FOREST",
        "n": "OLD_GROWTH_PINE_TAIGA",
        "o": "OLD_GROWTH_SPRUCE_TAIGA",
        "p": "TAIGA",
        "q": "SNOWY_TAIGA",
        "r": "SAVANNA",
        "s": "SAVANNA_PLATEAU",
        "t": "WINDSWEPT_HILLS",
        "u": "WINDSWEPT_GRAVELLY_HILLS",
        "v": "WINDSWEPT_FOREST",
        "w": "WINDSWEPT_SAVANNA",
        "x": "JUNGLE",
        "y": "SPARSE_JUNGLE",
        "z": "BAMBOO_JUNGLE",
        "A": "BADLANDS",
        "B": "ERODED_BADLANDS",
        "C": "WOODED_BADLANDS",
        "D": "MEADOW",
        "E": "CHERRY_GROVE",
        "F": "GROVE",
        "G": "SNOWY_SLOPES",
        "H": "FROZEN_PEAKS",
        "I": "JAGGED_PEAKS",
        "J": "STONY_PEAKS",
        "K": "RIVER",
        "L": "FROZEN_RIVER",
        "M": "BEACH",
        "N": "SNOWY_BEACH",
        "O": "STONY_SHORE",
        "P": "WARM_OCEAN",
        "Q": "LUKEWARM_OCEAN",
        "R": "DEEP_LUKEWARM_OCEAN",
        "S": "OCEAN",
        "T": "DEEP_OCEAN",
        "U": "COLD_OCEAN",
        "V": "DEEP_COLD_OCEAN",
        "W": "FROZEN_OCEAN",
        "X": "DEEP_FROZEN_OCEAN",
        "Y": "MUSHROOM_FIELDS",
        "Z": "DRIPSTONE_CAVES",
        "aa": "LUSH_CAVES",
        "ab": "DEEP_DARK",
        "ac": "NETHER_WASTES",
        "ad": "WARPED_FOREST",
        "ae": "CRIMSON_FOREST",
        "af": "SOUL_SAND_VALLEY",
        "ag": "BASALT_DELTAS",
        "ah": "THE_END",
        "ai": "END_HIGHLANDS",
        "aj": "END_MIDLANDS",
        "ak": "SMALL_END_ISLANDS",
        "al": "END_BARRENS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "register"
      }
    },
    "net/minecraft/world/level/biome/WorldChunkManagerCheckerBoard": {
      "fields": {
        "b": "CODEC",
        "c": "allowedBiomes",
        "d": "bitShift",
        "e": "size"
      },
      "methods": {
        "b()Ljava/util/stream/Stream;": "collectPossibleBiomes",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/biome/CheckerboardColumnBiomeSource;)Ljava/lang/Integer;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/biome/CheckerboardColumnBiomeSource;)Lnet/minecraft/core/HolderSet;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/Climate": {
      "fields": {
        "b": "DEBUG_SLOW_BIOME_SEARCH",
        "c": "QUANTIZATION_FACTOR",
        "a": "PARAMETER_COUNT"
      },
      "methods": {
        "a(FFFFFF)Lnet/minecraft/world/level/biome/Climate$TargetPoint;": "target",
        "a(FFFFFFF)Lnet/minecraft/world/level/biome/Climate$ParameterPoint;": "parameters",
        "a(Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;F)Lnet/minecraft/world/level/biome/Climate$ParameterPoint;": "parameters",
        "a(F)J": "quantizeCoord",
        "a(J)F": "unquantizeCoord",
        "a()Lnet/minecraft/world/level/biome/Climate$Sampler;": "empty",
        "a(Ljava/util/List;Lnet/minecraft/world/level/biome/Climate$Sampler;)Lnet/minecraft/core/BlockPos;": "findSpawnPosition"
      }
    },
    "net/minecraft/world/level/biome/Climate$Sampler": {
      "fields": {
        "a": "temperature",
        "b": "humidity",
        "c": "continentalness",
        "d": "erosion",
        "e": "depth",
        "f": "weirdness",
        "g": "spawnTarget"
      },
      "methods": {
        "a(III)Lnet/minecraft/world/level/biome/Climate$TargetPoint;": "sample",
        "a()Lnet/minecraft/core/BlockPos;": "findSpawnPosition",
        "b()Lnet/minecraft/world/level/levelgen/DensityFunction;": "temperature",
        "c()Lnet/minecraft/world/level/levelgen/DensityFunction;": "humidity",
        "d()Lnet/minecraft/world/level/levelgen/DensityFunction;": "continentalness",
        "e()Lnet/minecraft/world/level/levelgen/DensityFunction;": "erosion",
        "f()Lnet/minecraft/world/level/levelgen/DensityFunction;": "depth",
        "g()Lnet/minecraft/world/level/levelgen/DensityFunction;": "weirdness",
        "h()Ljava/util/List;": "spawnTarget"
      }
    },
    "net/minecraft/world/level/biome/FeatureSorter": {
      "methods": {
        "a(Ljava/util/List;Ljava/util/function/Function;Z)Ljava/util/List;": "buildFeaturesPerStep",
        "a(ILnet/minecraft/world/level/biome/FeatureSorter$1FeatureData;)Z": "lambda$buildFeaturesPerStep$2",
        "a(Ljava/util/Comparator;Lnet/minecraft/world/level/biome/FeatureSorter$1FeatureData;)Ljava/util/Set;": "lambda$buildFeaturesPerStep$1",
        "a(Lorg/apache/commons/lang3/mutable/MutableInt;Ljava/lang/Object;)I": "lambda$buildFeaturesPerStep$0"
      }
    },
    "net/minecraft/world/level/biome/WorldChunkManagerHell": {
      "fields": {
        "b": "CODEC",
        "c": "biome"
      },
      "methods": {
        "b()Ljava/util/stream/Stream;": "collectPossibleBiomes",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(IIIIILjava/util/function/Predicate;Lnet/minecraft/util/RandomSource;ZLnet/minecraft/world/level/biome/Climate$Sampler;)Lcom/mojang/datafixers/util/Pair;": "findBiomeHorizontal",
        "a(Lnet/minecraft/core/BlockPos;IIILjava/util/function/Predicate;Lnet/minecraft/world/level/biome/Climate$Sampler;Lnet/minecraft/world/level/LevelReader;)Lcom/mojang/datafixers/util/Pair;": "findClosestBiome3d",
        "a(IIIILnet/minecraft/world/level/biome/Climate$Sampler;)Ljava/util/Set;": "getBiomesWithin",
        "a(Lnet/minecraft/world/level/biome/FixedBiomeSource;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/BiomeSettingsMobs": {
      "fields": {
        "d": "LOGGER",
        "e": "DEFAULT_CREATURE_SPAWN_PROBABILITY",
        "a": "EMPTY_MOB_LIST",
        "b": "EMPTY",
        "c": "CODEC",
        "f": "creatureGenerationProbability",
        "g": "spawners",
        "h": "mobSpawnCosts"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/MobCategory;)Lnet/minecraft/util/random/WeightedRandomList;": "getMobs",
        "a(Lnet/minecraft/world/entity/EntityType;)Lnet/minecraft/world/level/biome/MobSpawnSettings$MobSpawnCost;": "getMobSpawnCost",
        "a()F": "getCreatureProbability",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/biome/MobSpawnSettings;)Ljava/util/Map;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/biome/MobSpawnSettings;)Ljava/util/Map;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/biome/MobSpawnSettings;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/WorldChunkManagerMultiNoise": {
      "fields": {
        "d": "ENTRY_CODEC",
        "b": "DIRECT_CODEC",
        "e": "PRESET_CODEC",
        "c": "CODEC",
        "f": "parameters"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/biome/Climate$ParameterList;)Lnet/minecraft/world/level/biome/MultiNoiseBiomeSource;": "createFromList",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/biome/MultiNoiseBiomeSource;": "createFromPreset",
        "d()Lnet/minecraft/world/level/biome/Climate$ParameterList;": "parameters",
        "b()Ljava/util/stream/Stream;": "collectPossibleBiomes",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/resources/ResourceKey;)Z": "stable",
        "a(Lnet/minecraft/world/level/biome/Climate$TargetPoint;)Lnet/minecraft/core/Holder;": "getNoiseBiome",
        "a(Ljava/util/List;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/biome/Climate$Sampler;)V": "addDebugInfo",
        "b(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/biome/Climate$ParameterList;": "lambda$parameters$2",
        "b(Lnet/minecraft/world/level/biome/Climate$ParameterList;)Lnet/minecraft/world/level/biome/Climate$ParameterList;": "lambda$parameters$1",
        "a(Lnet/minecraft/world/level/biome/MultiNoiseBiomeSource;)Lcom/mojang/datafixers/util/Either;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList": {
      "fields": {
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "preset",
        "d": "parameters"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/biome/Climate$ParameterList;": "parameters",
        "b()Ljava/util/Map;": "knownPresets",
        "a(Lnet/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList$Preset;)Lnet/minecraft/world/level/biome/Climate$ParameterList;": "lambda$knownPresets$4",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/ResourceKey;": "lambda$knownPresets$3",
        "b(Lnet/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList$Preset;)Lnet/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList$Preset;": "lambda$knownPresets$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList;)Lnet/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterList$Preset;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/biome/MultiNoiseBiomeSourceParameterLists": {
      "fields": {
        "a": "NETHER",
        "b": "OVERWORLD"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "register"
      }
    },
    "net/minecraft/world/level/biome/OverworldBiomeBuilder": {
      "fields": {
        "h": "VALLEY_SIZE",
        "i": "LOW_START",
        "a": "HIGH_START",
        "j": "HIGH_END",
        "k": "PEAK_SIZE",
        "b": "PEAK_START",
        "l": "PEAK_END",
        "c": "NEAR_INLAND_START",
        "d": "MID_INLAND_START",
        "e": "FAR_INLAND_START",
        "f": "EROSION_INDEX_1_START",
        "g": "EROSION_INDEX_2_START",
        "m": "EROSION_DEEP_DARK_DRYNESS_THRESHOLD",
        "n": "DEPTH_DEEP_DARK_DRYNESS_THRESHOLD",
        "o": "FULL_RANGE",
        "p": "temperatures",
        "q": "humidities",
        "r": "erosions",
        "s": "FROZEN_RANGE",
        "t": "UNFROZEN_RANGE",
        "u": "mushroomFieldsContinentalness",
        "v": "deepOceanContinentalness",
        "w": "oceanContinentalness",
        "x": "coastContinentalness",
        "y": "inlandContinentalness",
        "z": "nearInlandContinentalness",
        "A": "midInlandContinentalness",
        "B": "farInlandContinentalness",
        "C": "OCEANS",
        "D": "MIDDLE_BIOMES",
        "E": "MIDDLE_BIOMES_VARIANT",
        "F": "PLATEAU_BIOMES",
        "G": "PLATEAU_BIOMES_VARIANT",
        "H": "SHATTERED_BIOMES"
      },
      "methods": {
        "a()Ljava/util/List;": "spawnTarget",
        "a(Ljava/util/function/Consumer;)V": "addBiomes",
        "b(Ljava/util/function/Consumer;)V": "addDebugBiomes",
        "c(Ljava/util/function/Consumer;)V": "addOffCoastBiomes",
        "d(Ljava/util/function/Consumer;)V": "addInlandBiomes",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;)V": "addPeaks",
        "b(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;)V": "addHighSlice",
        "c(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;)V": "addMidSlice",
        "d(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;)V": "addLowSlice",
        "e(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;)V": "addValleys",
        "e(Ljava/util/function/Consumer;)V": "addUndergroundBiomes",
        "a(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickMiddleBiome",
        "b(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickMiddleBiomeOrBadlandsIfHot",
        "c(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold",
        "a(IILnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/ResourceKey;": "maybePickWindsweptSavannaBiome",
        "d(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickShatteredCoastBiome",
        "a(II)Lnet/minecraft/resources/ResourceKey;": "pickBeachBiome",
        "a(ILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickBadlandsBiome",
        "e(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickPlateauBiome",
        "f(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickPeakBiome",
        "g(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickSlopeBiome",
        "h(IILnet/minecraft/world/level/biome/Climate$Parameter;)Lnet/minecraft/resources/ResourceKey;": "pickShatteredBiome",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;FLnet/minecraft/resources/ResourceKey;)V": "addSurfaceBiome",
        "b(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;FLnet/minecraft/resources/ResourceKey;)V": "addUndergroundBiome",
        "c(Ljava/util/function/Consumer;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;Lnet/minecraft/world/level/biome/Climate$Parameter;FLnet/minecraft/resources/ResourceKey;)V": "addBottomBiome",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;)Z": "isDeepDarkRegion",
        "a(D)Ljava/lang/String;": "getDebugStringForPeaksAndValleys",
        "b(D)Ljava/lang/String;": "getDebugStringForContinentalness",
        "c(D)Ljava/lang/String;": "getDebugStringForErosion",
        "d(D)Ljava/lang/String;": "getDebugStringForTemperature",
        "e(D)Ljava/lang/String;": "getDebugStringForHumidity",
        "a(D[Lnet/minecraft/world/level/biome/Climate$Parameter;)Ljava/lang/String;": "getDebugStringForNoiseValue",
        "b()[Lnet/minecraft/world/level/biome/Climate$Parameter;": "getTemperatureThresholds",
        "c()[Lnet/minecraft/world/level/biome/Climate$Parameter;": "getHumidityThresholds",
        "d()[Lnet/minecraft/world/level/biome/Climate$Parameter;": "getErosionThresholds",
        "e()[Lnet/minecraft/world/level/biome/Climate$Parameter;": "getContinentalnessThresholds",
        "f()[Lnet/minecraft/world/level/biome/Climate$Parameter;": "getPeaksAndValleysThresholds",
        "g()[Lnet/minecraft/world/level/biome/Climate$Parameter;": "getWeirdnessThresholds"
      }
    },
    "net/minecraft/world/level/biome/WorldChunkManagerTheEnd": {
      "fields": {
        "b": "CODEC",
        "c": "end",
        "d": "highlands",
        "e": "midlands",
        "f": "islands",
        "g": "barrens"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/biome/TheEndBiomeSource;": "create",
        "b()Ljava/util/stream/Stream;": "collectPossibleBiomes",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/BlockBannerAbstract": {
      "fields": {
        "a": "color"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isPossibleToRespawnInThis",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/entity/BannerBlockEntity;)V": "lambda$setPlacedBy$1",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/entity/BannerBlockEntity;)V": "lambda$setPlacedBy$0"
      }
    },
    "net/minecraft/world/level/block/AbstractCandleBlock": {
      "fields": {
        "a": "LIGHT_PER_CANDLE",
        "b": "LIT"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/lang/Iterable;": "getParticleOffsets",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isLit",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canBeLit",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/util/RandomSource;)V": "addParticlesAndSound",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "extinguish",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Z)V": "setLit"
      }
    },
    "net/minecraft/world/level/block/AbstractCauldronBlock": {
      "fields": {
        "c": "SIDE_THICKNESS",
        "d": "LEG_WIDTH",
        "e": "LEG_HEIGHT",
        "f": "LEG_DEPTH",
        "a": "FLOOR_LEVEL",
        "g": "INSIDE",
        "b": "SHAPE",
        "h": "interactions"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;)D": "getContentHeight",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)Z": "isEntityInsideContent",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getInteractionShape",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFull",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick"
      }
    },
    "net/minecraft/world/level/block/BlockChestAbstract": {
      "fields": {
        "a": "blockEntityType"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/level/block/DoubleBlockCombiner$NeighborCombineResult;": "combine"
      }
    },
    "net/minecraft/world/level/block/BlockFurnace": {
      "fields": {
        "a": "FACING",
        "b": "LIT"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "openContainer",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "createFurnaceTicker"
      }
    },
    "net/minecraft/world/level/block/BlockGlassAbstract": {
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown"
      }
    },
    "net/minecraft/world/level/block/BlockSkullAbstract": {
      "fields": {
        "a": "type"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a()Lnet/minecraft/world/level/block/SkullBlock$Type;": "getType",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "g()Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot"
      }
    },
    "net/minecraft/world/level/block/BlockAir": {
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/AmethystBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit"
      }
    },
    "net/minecraft/world/level/block/AmethystClusterBlock": {
      "fields": {
        "a": "WATERLOGGED",
        "b": "FACING",
        "c": "northAabb",
        "d": "southAabb",
        "e": "eastAabb",
        "f": "westAabb",
        "g": "upAabb",
        "h": "downAabb"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockAnvil": {
      "fields": {
        "a": "FACING",
        "b": "BASE",
        "c": "X_LEG1",
        "d": "X_LEG2",
        "e": "X_TOP",
        "f": "Z_LEG1",
        "g": "Z_LEG2",
        "h": "Z_TOP",
        "i": "X_AXIS_AABB",
        "j": "Z_AXIS_AABB",
        "k": "CONTAINER_TITLE",
        "l": "FALL_DAMAGE_PER_DISTANCE",
        "m": "FALL_DAMAGE_MAX"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "falling",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onLand",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onBrokenAfterFall",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "getFallDamageSource",
        "e(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "damage",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getDustColor",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockStemAttached": {
      "fields": {
        "a": "FACING",
        "b": "AABB_OFFSET",
        "c": "AABBS",
        "d": "fruit",
        "e": "seedSupplier"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/AzaleaBlock": {
      "fields": {
        "a": "TREE_GROWER",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockBambooSapling": {
      "fields": {
        "a": "SAPLING_AABB_OFFSET",
        "b": "SAPLING_SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getDestroyProgress",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "growBamboo"
      }
    },
    "net/minecraft/world/level/block/BlockBamboo": {
      "fields": {
        "a": "SMALL_LEAVES_AABB_OFFSET",
        "b": "LARGE_LEAVES_AABB_OFFSET",
        "c": "COLLISION_AABB_OFFSET",
        "d": "SMALL_SHAPE",
        "e": "LARGE_SHAPE",
        "f": "COLLISION_SHAPE",
        "g": "AGE",
        "h": "LEAVES",
        "i": "STAGE",
        "j": "MAX_HEIGHT",
        "k": "STAGE_GROWING",
        "l": "STAGE_DONE_GROWING",
        "m": "AGE_THIN_BAMBOO",
        "n": "AGE_THICK_BAMBOO"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isCollisionShapeFullBlock",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getDestroyProgress",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;I)V": "growBamboo",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getHeightAboveUpToMax",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getHeightBelowUpToMax"
      }
    },
    "net/minecraft/world/level/block/BlockBanner": {
      "fields": {
        "a": "ROTATION",
        "b": "BY_COLOR",
        "c": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/level/block/Block;": "byColor"
      }
    },
    "net/minecraft/world/level/block/BlockBarrel": {
      "fields": {
        "a": "FACING",
        "b": "OPEN"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/BlockBarrier": {
      "methods": {
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness"
      }
    },
    "net/minecraft/world/level/block/BlockCoralFanAbstract": {
      "fields": {
        "a": "AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/BlockCoralDead": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/BlockCoralBase": {
      "fields": {
        "c": "WATERLOGGED",
        "a": "AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "tryScheduleDieTick",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "scanForWater",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState"
      }
    },
    "net/minecraft/world/level/block/BlockCoralFanWallAbstract": {
      "fields": {
        "a": "FACING",
        "b": "SHAPES"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/BlockTileEntity": {
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;II)Z": "triggerEvent",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/world/level/block/entity/BlockEntityTicker;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "createTickerHelper"
      }
    },
    "net/minecraft/world/level/block/BlockFireAbstract": {
      "fields": {
        "c": "SECONDS_ON_FIRE",
        "d": "fireDamage",
        "a": "AABB_OFFSET",
        "b": "DOWN_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "f(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canBurn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/Level;)Z": "inPortalDimension",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "spawnDestroyParticles",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canBePlacedAt",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isPortal"
      }
    },
    "net/minecraft/world/level/block/BlockPressurePlateAbstract": {
      "fields": {
        "a": "PRESSED_AABB",
        "b": "AABB",
        "c": "TOUCH_AABB",
        "d": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a()I": "getPressedTime",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isPossibleToRespawnInThis",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;I)V": "checkPressed",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "updateNeighbours",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/phys/AABB;Ljava/lang/Class;)I": "getEntityCount",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getSignalStrength",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getSignalForState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;I)Lnet/minecraft/world/level/block/state/BlockState;": "setSignalForState",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "lambda$getEntityCount$0"
      }
    },
    "net/minecraft/world/level/block/BlockMinecartTrackAbstract": {
      "fields": {
        "a": "FLAT_AABB",
        "b": "HALF_BLOCK_AABB",
        "c": "WATERLOGGED",
        "d": "isStraight"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "isRail",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRail",
        "a()Z": "isStraight",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/level/block/state/BlockState;": "updateState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/properties/RailShape;)Z": "shouldBeRemoved",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "updateState",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "updateDir",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "b()Lnet/minecraft/world/level/block/state/properties/Property;": "getShapeProperty",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState"
      }
    },
    "net/minecraft/world/level/block/IBeaconBeam": {
      "methods": {
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor"
      }
    },
    "net/minecraft/world/level/block/BlockBeacon": {
      "methods": {
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy"
      }
    },
    "net/minecraft/world/level/block/BlockBed": {
      "fields": {
        "a": "PART",
        "b": "OCCUPIED",
        "c": "HEIGHT",
        "d": "BASE",
        "m": "LEG_WIDTH",
        "e": "LEG_NORTH_WEST",
        "f": "LEG_SOUTH_WEST",
        "g": "LEG_NORTH_EAST",
        "h": "LEG_SOUTH_EAST",
        "i": "NORTH_SHAPE",
        "j": "SOUTH_SHAPE",
        "k": "WEST_SHAPE",
        "l": "EAST_SHAPE",
        "n": "color"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/Direction;": "getBedOrientation",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;)Z": "canSetSpawn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "kickVillagerOutOfBed",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/entity/Entity;)V": "updateEntityAfterFallOn",
        "a(Lnet/minecraft/world/entity/Entity;)V": "bounceUp",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/properties/BedPart;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "getNeighbourDirection",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getConnectedDirection",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/DoubleBlockCombiner$BlockType;": "getBlockType",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isBunkBed",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;F)Ljava/util/Optional;": "findStandUpPosition",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)Ljava/util/Optional;": "findBunkBedStandUpPosition",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;[[IZ)Ljava/util/Optional;": "findStandUpPositionAtOffset",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)J": "getSeed",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)[[I": "bedStandUpOffsets",
        "b(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)[[I": "bedSurroundStandUpOffsets",
        "a(Lnet/minecraft/core/Direction;)[[I": "bedAboveStandUpOffsets",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/entity/player/Player$BedSleepingProblem;)V": "lambda$use$0"
      }
    },
    "net/minecraft/world/level/block/BlockBeehive": {
      "fields": {
        "a": "FACING",
        "b": "HONEY_LEVEL",
        "c": "MAX_HONEY_LEVELS",
        "d": "SHEARED_HONEYCOMB_COUNT"
      },
      "methods": {
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/item/ItemStack;)V": "playerDestroy",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "angerNearbyBees",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "dropHoneycomb",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "hiveContainsBees",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeReleaseStatus;)V": "releaseBeesAndResetHoneyLevel",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V": "resetHoneyLevel",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "trySpawnDripParticles",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/VoxelShape;D)V": "spawnParticle",
        "a(Lnet/minecraft/world/level/Level;DDDDD)V": "spawnFluidParticle",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape"
      }
    },
    "net/minecraft/world/level/block/BlockBeetroot": {
      "fields": {
        "a": "MAX_AGE",
        "b": "AGE",
        "e": "SHAPE_BY_AGE"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/properties/IntegerProperty;": "getAgeProperty",
        "b()I": "getMaxAge",
        "c()Lnet/minecraft/world/level/ItemLike;": "getBaseSeedId",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/Level;)I": "getBonemealAgeIncrease",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/BlockBell": {
      "fields": {
        "a": "FACING",
        "b": "ATTACHMENT",
        "c": "POWERED",
        "e": "NORTH_SOUTH_FLOOR_SHAPE",
        "f": "EAST_WEST_FLOOR_SHAPE",
        "g": "BELL_TOP_SHAPE",
        "h": "BELL_BOTTOM_SHAPE",
        "i": "BELL_SHAPE",
        "j": "NORTH_SOUTH_BETWEEN",
        "k": "EAST_WEST_BETWEEN",
        "l": "TO_WEST",
        "m": "TO_EAST",
        "n": "TO_NORTH",
        "D": "TO_SOUTH",
        "E": "CEILING_SHAPE",
        "d": "EVENT_BELL_RING"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/player/Player;Z)Z": "onHit",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;D)Z": "isProperHit",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "attemptToRing",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "attemptToRing",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVoxelShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getConnectedDirection",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BigDripleafBlock": {
      "fields": {
        "a": "WATERLOGGED",
        "b": "TILT",
        "c": "NO_TICK",
        "d": "DELAY_UNTIL_NEXT_TILT_STATE",
        "e": "MAX_GEN_HEIGHT",
        "f": "STEM_WIDTH",
        "g": "ENTITY_DETECTION_MIN_Y",
        "h": "LOWEST_LEAF_TOP",
        "i": "LEAF_SHAPES",
        "j": "STEM_SLICER",
        "k": "STEM_SHAPES",
        "l": "shapesCache"
      },
      "methods": {
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateShape",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)V": "placeWithRandomHeight",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canReplace",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canPlaceAt",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/core/Direction;)Z": "place",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;)V": "playTiltSound",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)Z": "canEntityTilt",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/properties/Tilt;Lnet/minecraft/sounds/SoundEvent;)V": "setTiltAndScheduleTick",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "resetTilt",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/properties/Tilt;)V": "setTilt",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BigDripleafStemBlock": {
      "fields": {
        "e": "WATERLOGGED",
        "f": "STEM_WIDTH",
        "a": "NORTH_SHAPE",
        "b": "SOUTH_SHAPE",
        "c": "EAST_SHAPE",
        "d": "WEST_SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/core/Direction;)Z": "place",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack"
      }
    },
    "net/minecraft/world/level/block/BlockBlastFurnace": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "openContainer",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/Block": {
      "fields": {
        "a": "LOGGER",
        "b": "builtInRegistryHolder",
        "o": "BLOCK_STATE_REGISTRY",
        "c": "SHAPE_FULL_BLOCK_CACHE",
        "p": "UPDATE_NEIGHBORS",
        "q": "UPDATE_CLIENTS",
        "r": "UPDATE_INVISIBLE",
        "s": "UPDATE_IMMEDIATE",
        "t": "UPDATE_KNOWN_SHAPE",
        "u": "UPDATE_SUPPRESS_DROPS",
        "v": "UPDATE_MOVE_BY_PISTON",
        "w": "UPDATE_NONE",
        "x": "UPDATE_ALL",
        "y": "UPDATE_ALL_IMMEDIATE",
        "z": "INDESTRUCTIBLE",
        "A": "INSTANT",
        "B": "UPDATE_LIMIT",
        "C": "stateDefinition",
        "d": "defaultBlockState",
        "e": "descriptionId",
        "f": "item",
        "g": "CACHE_SIZE",
        "h": "OCCLUSION_CACHE"
      },
      "methods": {
        "i(Lnet/minecraft/world/level/block/state/BlockState;)I": "getId",
        "a(I)Lnet/minecraft/world/level/block/state/BlockState;": "stateById",
        "a(Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/level/block/Block;": "byItem",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "pushEntitiesUp",
        "a(DDDDDD)Lnet/minecraft/world/phys/shapes/VoxelShape;": "box",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateFromNeighbourShapes",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;I)V": "updateOrDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;II)V": "updateOrDestroy",
        "j(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isExceptionForConnection",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;)Z": "shouldRenderFace",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "canSupportRigidBlock",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canSupportCenter",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/core/Direction;)Z": "isFaceFull",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "isShapeFullBlock",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "destroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntity;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/item/ItemStack;)Ljava/util/List;": "getDrops",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "dropResources",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "dropResources",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/item/ItemStack;)V": "dropResources",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)V": "popResource",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/world/item/ItemStack;)V": "popResourceFromFace",
        "a(Lnet/minecraft/world/level/Level;Ljava/util/function/Supplier;Lnet/minecraft/world/item/ItemStack;)V": "popResource",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;I)V": "popExperience",
        "d()F": "getExplosionResistance",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Explosion;)V": "wasExploded",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/item/ItemStack;)V": "playerDestroy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isPossibleToRespawnInThis",
        "e()Lnet/minecraft/network/chat/MutableComponent;": "getName",
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/entity/Entity;)V": "updateEntityAfterFallOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "h()F": "getFriction",
        "i()F": "getSpeedFactor",
        "j()F": "getJumpFactor",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "spawnDestroyParticles",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/biome/Biome$Precipitation;)V": "handlePrecipitation",
        "a(Lnet/minecraft/world/level/Explosion;)Z": "dropFromExplosion",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "l()Lnet/minecraft/world/level/block/state/StateDefinition;": "getStateDefinition",
        "k(Lnet/minecraft/world/level/block/state/BlockState;)V": "registerDefaultState",
        "n()Lnet/minecraft/world/level/block/state/BlockState;": "defaultBlockState",
        "l(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "withPropertiesOf",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;)Lnet/minecraft/world/level/block/state/BlockState;": "copyProperty",
        "m(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/SoundType;": "getSoundType",
        "k()Lnet/minecraft/world/item/Item;": "asItem",
        "o()Z": "hasDynamicShape",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/BlockGetter;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "p()Lnet/minecraft/world/level/block/Block;": "asBlock",
        "a(Ljava/util/function/Function;)Lcom/google/common/collect/ImmutableMap;": "getShapeForEachState",
        "q()Lnet/minecraft/core/Holder$Reference;": "builtInRegistryHolder",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/util/valueproviders/IntProvider;)V": "tryDropExperience"
      }
    },
    "net/minecraft/world/level/block/Blocks": {
      "fields": {
        "a": "AIR",
        "b": "STONE",
        "c": "GRANITE",
        "d": "POLISHED_GRANITE",
        "e": "DIORITE",
        "f": "POLISHED_DIORITE",
        "g": "ANDESITE",
        "h": "POLISHED_ANDESITE",
        "i": "GRASS_BLOCK",
        "j": "DIRT",
        "k": "COARSE_DIRT",
        "l": "PODZOL",
        "m": "COBBLESTONE",
        "n": "OAK_PLANKS",
        "o": "SPRUCE_PLANKS",
        "p": "BIRCH_PLANKS",
        "q": "JUNGLE_PLANKS",
        "r": "ACACIA_PLANKS",
        "s": "CHERRY_PLANKS",
        "t": "DARK_OAK_PLANKS",
        "u": "MANGROVE_PLANKS",
        "v": "BAMBOO_PLANKS",
        "w": "BAMBOO_MOSAIC",
        "x": "OAK_SAPLING",
        "y": "SPRUCE_SAPLING",
        "z": "BIRCH_SAPLING",
        "A": "JUNGLE_SAPLING",
        "B": "ACACIA_SAPLING",
        "C": "CHERRY_SAPLING",
        "D": "DARK_OAK_SAPLING",
        "E": "MANGROVE_PROPAGULE",
        "F": "BEDROCK",
        "G": "WATER",
        "H": "LAVA",
        "I": "SAND",
        "J": "SUSPICIOUS_SAND",
        "K": "RED_SAND",
        "L": "GRAVEL",
        "M": "SUSPICIOUS_GRAVEL",
        "N": "GOLD_ORE",
        "O": "DEEPSLATE_GOLD_ORE",
        "P": "IRON_ORE",
        "Q": "DEEPSLATE_IRON_ORE",
        "R": "COAL_ORE",
        "S": "DEEPSLATE_COAL_ORE",
        "T": "NETHER_GOLD_ORE",
        "U": "OAK_LOG",
        "V": "SPRUCE_LOG",
        "W": "BIRCH_LOG",
        "X": "JUNGLE_LOG",
        "Y": "ACACIA_LOG",
        "Z": "CHERRY_LOG",
        "aa": "DARK_OAK_LOG",
        "ab": "MANGROVE_LOG",
        "ac": "MANGROVE_ROOTS",
        "ad": "MUDDY_MANGROVE_ROOTS",
        "ae": "BAMBOO_BLOCK",
        "af": "STRIPPED_SPRUCE_LOG",
        "ag": "STRIPPED_BIRCH_LOG",
        "ah": "STRIPPED_JUNGLE_LOG",
        "ai": "STRIPPED_ACACIA_LOG",
        "aj": "STRIPPED_CHERRY_LOG",
        "ak": "STRIPPED_DARK_OAK_LOG",
        "al": "STRIPPED_OAK_LOG",
        "am": "STRIPPED_MANGROVE_LOG",
        "an": "STRIPPED_BAMBOO_BLOCK",
        "ao": "OAK_WOOD",
        "ap": "SPRUCE_WOOD",
        "aq": "BIRCH_WOOD",
        "ar": "JUNGLE_WOOD",
        "as": "ACACIA_WOOD",
        "at": "CHERRY_WOOD",
        "au": "DARK_OAK_WOOD",
        "av": "MANGROVE_WOOD",
        "aw": "STRIPPED_OAK_WOOD",
        "ax": "STRIPPED_SPRUCE_WOOD",
        "ay": "STRIPPED_BIRCH_WOOD",
        "az": "STRIPPED_JUNGLE_WOOD",
        "aA": "STRIPPED_ACACIA_WOOD",
        "aB": "STRIPPED_CHERRY_WOOD",
        "aC": "STRIPPED_DARK_OAK_WOOD",
        "aD": "STRIPPED_MANGROVE_WOOD",
        "aE": "OAK_LEAVES",
        "aF": "SPRUCE_LEAVES",
        "aG": "BIRCH_LEAVES",
        "aH": "JUNGLE_LEAVES",
        "aI": "ACACIA_LEAVES",
        "aJ": "CHERRY_LEAVES",
        "aK": "DARK_OAK_LEAVES",
        "aL": "MANGROVE_LEAVES",
        "aM": "AZALEA_LEAVES",
        "aN": "FLOWERING_AZALEA_LEAVES",
        "aO": "SPONGE",
        "aP": "WET_SPONGE",
        "aQ": "GLASS",
        "aR": "LAPIS_ORE",
        "aS": "DEEPSLATE_LAPIS_ORE",
        "aT": "LAPIS_BLOCK",
        "aU": "DISPENSER",
        "aV": "SANDSTONE",
        "aW": "CHISELED_SANDSTONE",
        "aX": "CUT_SANDSTONE",
        "aY": "NOTE_BLOCK",
        "aZ": "WHITE_BED",
        "ba": "ORANGE_BED",
        "bb": "MAGENTA_BED",
        "bc": "LIGHT_BLUE_BED",
        "bd": "YELLOW_BED",
        "be": "LIME_BED",
        "bf": "PINK_BED",
        "bg": "GRAY_BED",
        "bh": "LIGHT_GRAY_BED",
        "bi": "CYAN_BED",
        "bj": "PURPLE_BED",
        "bk": "BLUE_BED",
        "bl": "BROWN_BED",
        "bm": "GREEN_BED",
        "bn": "RED_BED",
        "bo": "BLACK_BED",
        "bp": "POWERED_RAIL",
        "bq": "DETECTOR_RAIL",
        "br": "STICKY_PISTON",
        "bs": "COBWEB",
        "bt": "GRASS",
        "bu": "FERN",
        "bv": "DEAD_BUSH",
        "bw": "SEAGRASS",
        "bx": "TALL_SEAGRASS",
        "by": "PISTON",
        "bz": "PISTON_HEAD",
        "bA": "WHITE_WOOL",
        "bB": "ORANGE_WOOL",
        "bC": "MAGENTA_WOOL",
        "bD": "LIGHT_BLUE_WOOL",
        "bE": "YELLOW_WOOL",
        "bF": "LIME_WOOL",
        "bG": "PINK_WOOL",
        "bH": "GRAY_WOOL",
        "bI": "LIGHT_GRAY_WOOL",
        "bJ": "CYAN_WOOL",
        "bK": "PURPLE_WOOL",
        "bL": "BLUE_WOOL",
        "bM": "BROWN_WOOL",
        "bN": "GREEN_WOOL",
        "bO": "RED_WOOL",
        "bP": "BLACK_WOOL",
        "bQ": "MOVING_PISTON",
        "bR": "DANDELION",
        "bS": "TORCHFLOWER",
        "bT": "POPPY",
        "bU": "BLUE_ORCHID",
        "bV": "ALLIUM",
        "bW": "AZURE_BLUET",
        "bX": "RED_TULIP",
        "bY": "ORANGE_TULIP",
        "bZ": "WHITE_TULIP",
        "ca": "PINK_TULIP",
        "cb": "OXEYE_DAISY",
        "cc": "CORNFLOWER",
        "cd": "WITHER_ROSE",
        "ce": "LILY_OF_THE_VALLEY",
        "cf": "BROWN_MUSHROOM",
        "cg": "RED_MUSHROOM",
        "ch": "GOLD_BLOCK",
        "ci": "IRON_BLOCK",
        "cj": "BRICKS",
        "ck": "TNT",
        "cl": "BOOKSHELF",
        "cm": "CHISELED_BOOKSHELF",
        "cn": "MOSSY_COBBLESTONE",
        "co": "OBSIDIAN",
        "cp": "TORCH",
        "cq": "WALL_TORCH",
        "cr": "FIRE",
        "cs": "SOUL_FIRE",
        "ct": "SPAWNER",
        "cu": "OAK_STAIRS",
        "cv": "CHEST",
        "cw": "REDSTONE_WIRE",
        "cx": "DIAMOND_ORE",
        "cy": "DEEPSLATE_DIAMOND_ORE",
        "cz": "DIAMOND_BLOCK",
        "cA": "CRAFTING_TABLE",
        "cB": "WHEAT",
        "cC": "FARMLAND",
        "cD": "FURNACE",
        "cE": "OAK_SIGN",
        "cF": "SPRUCE_SIGN",
        "cG": "BIRCH_SIGN",
        "cH": "ACACIA_SIGN",
        "cI": "CHERRY_SIGN",
        "cJ": "JUNGLE_SIGN",
        "cK": "DARK_OAK_SIGN",
        "cL": "MANGROVE_SIGN",
        "cM": "BAMBOO_SIGN",
        "cN": "OAK_DOOR",
        "cO": "LADDER",
        "cP": "RAIL",
        "cQ": "COBBLESTONE_STAIRS",
        "cR": "OAK_WALL_SIGN",
        "cS": "SPRUCE_WALL_SIGN",
        "cT": "BIRCH_WALL_SIGN",
        "cU": "ACACIA_WALL_SIGN",
        "cV": "CHERRY_WALL_SIGN",
        "cW": "JUNGLE_WALL_SIGN",
        "cX": "DARK_OAK_WALL_SIGN",
        "cY": "MANGROVE_WALL_SIGN",
        "cZ": "BAMBOO_WALL_SIGN",
        "da": "OAK_HANGING_SIGN",
        "db": "SPRUCE_HANGING_SIGN",
        "dc": "BIRCH_HANGING_SIGN",
        "dd": "ACACIA_HANGING_SIGN",
        "de": "CHERRY_HANGING_SIGN",
        "df": "JUNGLE_HANGING_SIGN",
        "dg": "DARK_OAK_HANGING_SIGN",
        "dh": "CRIMSON_HANGING_SIGN",
        "di": "WARPED_HANGING_SIGN",
        "dj": "MANGROVE_HANGING_SIGN",
        "dk": "BAMBOO_HANGING_SIGN",
        "dl": "OAK_WALL_HANGING_SIGN",
        "dm": "SPRUCE_WALL_HANGING_SIGN",
        "dn": "BIRCH_WALL_HANGING_SIGN",
        "do": "ACACIA_WALL_HANGING_SIGN",
        "dp": "CHERRY_WALL_HANGING_SIGN",
        "dq": "JUNGLE_WALL_HANGING_SIGN",
        "dr": "DARK_OAK_WALL_HANGING_SIGN",
        "ds": "MANGROVE_WALL_HANGING_SIGN",
        "dt": "CRIMSON_WALL_HANGING_SIGN",
        "du": "WARPED_WALL_HANGING_SIGN",
        "dv": "BAMBOO_WALL_HANGING_SIGN",
        "dw": "LEVER",
        "dx": "STONE_PRESSURE_PLATE",
        "dy": "IRON_DOOR",
        "dz": "OAK_PRESSURE_PLATE",
        "dA": "SPRUCE_PRESSURE_PLATE",
        "dB": "BIRCH_PRESSURE_PLATE",
        "dC": "JUNGLE_PRESSURE_PLATE",
        "dD": "ACACIA_PRESSURE_PLATE",
        "dE": "CHERRY_PRESSURE_PLATE",
        "dF": "DARK_OAK_PRESSURE_PLATE",
        "dG": "MANGROVE_PRESSURE_PLATE",
        "dH": "BAMBOO_PRESSURE_PLATE",
        "dI": "REDSTONE_ORE",
        "dJ": "DEEPSLATE_REDSTONE_ORE",
        "dK": "REDSTONE_TORCH",
        "dL": "REDSTONE_WALL_TORCH",
        "dM": "STONE_BUTTON",
        "dN": "SNOW",
        "dO": "ICE",
        "dP": "SNOW_BLOCK",
        "dQ": "CACTUS",
        "dR": "CLAY",
        "dS": "SUGAR_CANE",
        "dT": "JUKEBOX",
        "dU": "OAK_FENCE",
        "dV": "PUMPKIN",
        "dW": "NETHERRACK",
        "dX": "SOUL_SAND",
        "dY": "SOUL_SOIL",
        "dZ": "BASALT",
        "ea": "POLISHED_BASALT",
        "eb": "SOUL_TORCH",
        "ec": "SOUL_WALL_TORCH",
        "ed": "GLOWSTONE",
        "ee": "NETHER_PORTAL",
        "ef": "CARVED_PUMPKIN",
        "eg": "JACK_O_LANTERN",
        "eh": "CAKE",
        "ei": "REPEATER",
        "ej": "WHITE_STAINED_GLASS",
        "ek": "ORANGE_STAINED_GLASS",
        "el": "MAGENTA_STAINED_GLASS",
        "em": "LIGHT_BLUE_STAINED_GLASS",
        "en": "YELLOW_STAINED_GLASS",
        "eo": "LIME_STAINED_GLASS",
        "ep": "PINK_STAINED_GLASS",
        "eq": "GRAY_STAINED_GLASS",
        "er": "LIGHT_GRAY_STAINED_GLASS",
        "es": "CYAN_STAINED_GLASS",
        "et": "PURPLE_STAINED_GLASS",
        "eu": "BLUE_STAINED_GLASS",
        "ev": "BROWN_STAINED_GLASS",
        "ew": "GREEN_STAINED_GLASS",
        "ex": "RED_STAINED_GLASS",
        "ey": "BLACK_STAINED_GLASS",
        "ez": "OAK_TRAPDOOR",
        "eA": "SPRUCE_TRAPDOOR",
        "eB": "BIRCH_TRAPDOOR",
        "eC": "JUNGLE_TRAPDOOR",
        "eD": "ACACIA_TRAPDOOR",
        "eE": "CHERRY_TRAPDOOR",
        "eF": "DARK_OAK_TRAPDOOR",
        "eG": "MANGROVE_TRAPDOOR",
        "eH": "BAMBOO_TRAPDOOR",
        "eI": "STONE_BRICKS",
        "eJ": "MOSSY_STONE_BRICKS",
        "eK": "CRACKED_STONE_BRICKS",
        "eL": "CHISELED_STONE_BRICKS",
        "eM": "PACKED_MUD",
        "eN": "MUD_BRICKS",
        "eO": "INFESTED_STONE",
        "eP": "INFESTED_COBBLESTONE",
        "eQ": "INFESTED_STONE_BRICKS",
        "eR": "INFESTED_MOSSY_STONE_BRICKS",
        "eS": "INFESTED_CRACKED_STONE_BRICKS",
        "eT": "INFESTED_CHISELED_STONE_BRICKS",
        "eU": "BROWN_MUSHROOM_BLOCK",
        "eV": "RED_MUSHROOM_BLOCK",
        "eW": "MUSHROOM_STEM",
        "eX": "IRON_BARS",
        "eY": "CHAIN",
        "eZ": "GLASS_PANE",
        "fa": "MELON",
        "fb": "ATTACHED_PUMPKIN_STEM",
        "fc": "ATTACHED_MELON_STEM",
        "fd": "PUMPKIN_STEM",
        "fe": "MELON_STEM",
        "ff": "VINE",
        "fg": "GLOW_LICHEN",
        "fh": "OAK_FENCE_GATE",
        "fi": "BRICK_STAIRS",
        "fj": "STONE_BRICK_STAIRS",
        "fk": "MUD_BRICK_STAIRS",
        "fl": "MYCELIUM",
        "fm": "LILY_PAD",
        "fn": "NETHER_BRICKS",
        "fo": "NETHER_BRICK_FENCE",
        "fp": "NETHER_BRICK_STAIRS",
        "fq": "NETHER_WART",
        "fr": "ENCHANTING_TABLE",
        "fs": "BREWING_STAND",
        "ft": "CAULDRON",
        "fu": "WATER_CAULDRON",
        "fv": "LAVA_CAULDRON",
        "fw": "POWDER_SNOW_CAULDRON",
        "fx": "END_PORTAL",
        "fy": "END_PORTAL_FRAME",
        "fz": "END_STONE",
        "fA": "DRAGON_EGG",
        "fB": "REDSTONE_LAMP",
        "fC": "COCOA",
        "fD": "SANDSTONE_STAIRS",
        "fE": "EMERALD_ORE",
        "fF": "DEEPSLATE_EMERALD_ORE",
        "fG": "ENDER_CHEST",
        "fH": "TRIPWIRE_HOOK",
        "fI": "TRIPWIRE",
        "fJ": "EMERALD_BLOCK",
        "fK": "SPRUCE_STAIRS",
        "fL": "BIRCH_STAIRS",
        "fM": "JUNGLE_STAIRS",
        "fN": "COMMAND_BLOCK",
        "fO": "BEACON",
        "fP": "COBBLESTONE_WALL",
        "fQ": "MOSSY_COBBLESTONE_WALL",
        "fR": "FLOWER_POT",
        "fS": "POTTED_TORCHFLOWER",
        "fT": "POTTED_OAK_SAPLING",
        "fU": "POTTED_SPRUCE_SAPLING",
        "fV": "POTTED_BIRCH_SAPLING",
        "fW": "POTTED_JUNGLE_SAPLING",
        "fX": "POTTED_ACACIA_SAPLING",
        "fY": "POTTED_CHERRY_SAPLING",
        "fZ": "POTTED_DARK_OAK_SAPLING",
        "ga": "POTTED_MANGROVE_PROPAGULE",
        "gb": "POTTED_FERN",
        "gc": "POTTED_DANDELION",
        "gd": "POTTED_POPPY",
        "ge": "POTTED_BLUE_ORCHID",
        "gf": "POTTED_ALLIUM",
        "gg": "POTTED_AZURE_BLUET",
        "gh": "POTTED_RED_TULIP",
        "gi": "POTTED_ORANGE_TULIP",
        "gj": "POTTED_WHITE_TULIP",
        "gk": "POTTED_PINK_TULIP",
        "gl": "POTTED_OXEYE_DAISY",
        "gm": "POTTED_CORNFLOWER",
        "gn": "POTTED_LILY_OF_THE_VALLEY",
        "go": "POTTED_WITHER_ROSE",
        "gp": "POTTED_RED_MUSHROOM",
        "gq": "POTTED_BROWN_MUSHROOM",
        "gr": "POTTED_DEAD_BUSH",
        "gs": "POTTED_CACTUS",
        "gt": "CARROTS",
        "gu": "POTATOES",
        "gv": "OAK_BUTTON",
        "gw": "SPRUCE_BUTTON",
        "gx": "BIRCH_BUTTON",
        "gy": "JUNGLE_BUTTON",
        "gz": "ACACIA_BUTTON",
        "gA": "CHERRY_BUTTON",
        "gB": "DARK_OAK_BUTTON",
        "gC": "MANGROVE_BUTTON",
        "gD": "BAMBOO_BUTTON",
        "gE": "SKELETON_SKULL",
        "gF": "SKELETON_WALL_SKULL",
        "gG": "WITHER_SKELETON_SKULL",
        "gH": "WITHER_SKELETON_WALL_SKULL",
        "gI": "ZOMBIE_HEAD",
        "gJ": "ZOMBIE_WALL_HEAD",
        "gK": "PLAYER_HEAD",
        "gL": "PLAYER_WALL_HEAD",
        "gM": "CREEPER_HEAD",
        "gN": "CREEPER_WALL_HEAD",
        "gO": "DRAGON_HEAD",
        "gP": "DRAGON_WALL_HEAD",
        "gQ": "PIGLIN_HEAD",
        "gR": "PIGLIN_WALL_HEAD",
        "gS": "ANVIL",
        "gT": "CHIPPED_ANVIL",
        "gU": "DAMAGED_ANVIL",
        "gV": "TRAPPED_CHEST",
        "gW": "LIGHT_WEIGHTED_PRESSURE_PLATE",
        "gX": "HEAVY_WEIGHTED_PRESSURE_PLATE",
        "gY": "COMPARATOR",
        "gZ": "DAYLIGHT_DETECTOR",
        "ha": "REDSTONE_BLOCK",
        "hb": "NETHER_QUARTZ_ORE",
        "hc": "HOPPER",
        "hd": "QUARTZ_BLOCK",
        "he": "CHISELED_QUARTZ_BLOCK",
        "hf": "QUARTZ_PILLAR",
        "hg": "QUARTZ_STAIRS",
        "hh": "ACTIVATOR_RAIL",
        "hi": "DROPPER",
        "hj": "WHITE_TERRACOTTA",
        "hk": "ORANGE_TERRACOTTA",
        "hl": "MAGENTA_TERRACOTTA",
        "hm": "LIGHT_BLUE_TERRACOTTA",
        "hn": "YELLOW_TERRACOTTA",
        "ho": "LIME_TERRACOTTA",
        "hp": "PINK_TERRACOTTA",
        "hq": "GRAY_TERRACOTTA",
        "hr": "LIGHT_GRAY_TERRACOTTA",
        "hs": "CYAN_TERRACOTTA",
        "ht": "PURPLE_TERRACOTTA",
        "hu": "BLUE_TERRACOTTA",
        "hv": "BROWN_TERRACOTTA",
        "hw": "GREEN_TERRACOTTA",
        "hx": "RED_TERRACOTTA",
        "hy": "BLACK_TERRACOTTA",
        "hz": "WHITE_STAINED_GLASS_PANE",
        "hA": "ORANGE_STAINED_GLASS_PANE",
        "hB": "MAGENTA_STAINED_GLASS_PANE",
        "hC": "LIGHT_BLUE_STAINED_GLASS_PANE",
        "hD": "YELLOW_STAINED_GLASS_PANE",
        "hE": "LIME_STAINED_GLASS_PANE",
        "hF": "PINK_STAINED_GLASS_PANE",
        "hG": "GRAY_STAINED_GLASS_PANE",
        "hH": "LIGHT_GRAY_STAINED_GLASS_PANE",
        "hI": "CYAN_STAINED_GLASS_PANE",
        "hJ": "PURPLE_STAINED_GLASS_PANE",
        "hK": "BLUE_STAINED_GLASS_PANE",
        "hL": "BROWN_STAINED_GLASS_PANE",
        "hM": "GREEN_STAINED_GLASS_PANE",
        "hN": "RED_STAINED_GLASS_PANE",
        "hO": "BLACK_STAINED_GLASS_PANE",
        "hP": "ACACIA_STAIRS",
        "hQ": "CHERRY_STAIRS",
        "hR": "DARK_OAK_STAIRS",
        "hS": "MANGROVE_STAIRS",
        "hT": "BAMBOO_STAIRS",
        "hU": "BAMBOO_MOSAIC_STAIRS",
        "hV": "SLIME_BLOCK",
        "hW": "BARRIER",
        "hX": "LIGHT",
        "hY": "IRON_TRAPDOOR",
        "hZ": "PRISMARINE",
        "ia": "PRISMARINE_BRICKS",
        "ib": "DARK_PRISMARINE",
        "ic": "PRISMARINE_STAIRS",
        "id": "PRISMARINE_BRICK_STAIRS",
        "ie": "DARK_PRISMARINE_STAIRS",
        "if": "PRISMARINE_SLAB",
        "ig": "PRISMARINE_BRICK_SLAB",
        "ih": "DARK_PRISMARINE_SLAB",
        "ii": "SEA_LANTERN",
        "ij": "HAY_BLOCK",
        "ik": "WHITE_CARPET",
        "il": "ORANGE_CARPET",
        "im": "MAGENTA_CARPET",
        "in": "LIGHT_BLUE_CARPET",
        "io": "YELLOW_CARPET",
        "ip": "LIME_CARPET",
        "iq": "PINK_CARPET",
        "ir": "GRAY_CARPET",
        "is": "LIGHT_GRAY_CARPET",
        "it": "CYAN_CARPET",
        "iu": "PURPLE_CARPET",
        "iv": "BLUE_CARPET",
        "iw": "BROWN_CARPET",
        "ix": "GREEN_CARPET",
        "iy": "RED_CARPET",
        "iz": "BLACK_CARPET",
        "iA": "TERRACOTTA",
        "iB": "COAL_BLOCK",
        "iC": "PACKED_ICE",
        "iD": "SUNFLOWER",
        "iE": "LILAC",
        "iF": "ROSE_BUSH",
        "iG": "PEONY",
        "iH": "TALL_GRASS",
        "iI": "LARGE_FERN",
        "iJ": "WHITE_BANNER",
        "iK": "ORANGE_BANNER",
        "iL": "MAGENTA_BANNER",
        "iM": "LIGHT_BLUE_BANNER",
        "iN": "YELLOW_BANNER",
        "iO": "LIME_BANNER",
        "iP": "PINK_BANNER",
        "iQ": "GRAY_BANNER",
        "iR": "LIGHT_GRAY_BANNER",
        "iS": "CYAN_BANNER",
        "iT": "PURPLE_BANNER",
        "iU": "BLUE_BANNER",
        "iV": "BROWN_BANNER",
        "iW": "GREEN_BANNER",
        "iX": "RED_BANNER",
        "iY": "BLACK_BANNER",
        "iZ": "WHITE_WALL_BANNER",
        "ja": "ORANGE_WALL_BANNER",
        "jb": "MAGENTA_WALL_BANNER",
        "jc": "LIGHT_BLUE_WALL_BANNER",
        "jd": "YELLOW_WALL_BANNER",
        "je": "LIME_WALL_BANNER",
        "jf": "PINK_WALL_BANNER",
        "jg": "GRAY_WALL_BANNER",
        "jh": "LIGHT_GRAY_WALL_BANNER",
        "ji": "CYAN_WALL_BANNER",
        "jj": "PURPLE_WALL_BANNER",
        "jk": "BLUE_WALL_BANNER",
        "jl": "BROWN_WALL_BANNER",
        "jm": "GREEN_WALL_BANNER",
        "jn": "RED_WALL_BANNER",
        "jo": "BLACK_WALL_BANNER",
        "jp": "RED_SANDSTONE",
        "jq": "CHISELED_RED_SANDSTONE",
        "jr": "CUT_RED_SANDSTONE",
        "js": "RED_SANDSTONE_STAIRS",
        "jt": "OAK_SLAB",
        "ju": "SPRUCE_SLAB",
        "jv": "BIRCH_SLAB",
        "jw": "JUNGLE_SLAB",
        "jx": "ACACIA_SLAB",
        "jy": "CHERRY_SLAB",
        "jz": "DARK_OAK_SLAB",
        "jA": "MANGROVE_SLAB",
        "jB": "BAMBOO_SLAB",
        "jC": "BAMBOO_MOSAIC_SLAB",
        "jD": "STONE_SLAB",
        "jE": "SMOOTH_STONE_SLAB",
        "jF": "SANDSTONE_SLAB",
        "jG": "CUT_SANDSTONE_SLAB",
        "jH": "PETRIFIED_OAK_SLAB",
        "jI": "COBBLESTONE_SLAB",
        "jJ": "BRICK_SLAB",
        "jK": "STONE_BRICK_SLAB",
        "jL": "MUD_BRICK_SLAB",
        "jM": "NETHER_BRICK_SLAB",
        "jN": "QUARTZ_SLAB",
        "jO": "RED_SANDSTONE_SLAB",
        "jP": "CUT_RED_SANDSTONE_SLAB",
        "jQ": "PURPUR_SLAB",
        "jR": "SMOOTH_STONE",
        "jS": "SMOOTH_SANDSTONE",
        "jT": "SMOOTH_QUARTZ",
        "jU": "SMOOTH_RED_SANDSTONE",
        "jV": "SPRUCE_FENCE_GATE",
        "jW": "BIRCH_FENCE_GATE",
        "jX": "JUNGLE_FENCE_GATE",
        "jY": "ACACIA_FENCE_GATE",
        "jZ": "CHERRY_FENCE_GATE",
        "ka": "DARK_OAK_FENCE_GATE",
        "kb": "MANGROVE_FENCE_GATE",
        "kc": "BAMBOO_FENCE_GATE",
        "kd": "SPRUCE_FENCE",
        "ke": "BIRCH_FENCE",
        "kf": "JUNGLE_FENCE",
        "kg": "ACACIA_FENCE",
        "kh": "CHERRY_FENCE",
        "ki": "DARK_OAK_FENCE",
        "kj": "MANGROVE_FENCE",
        "kk": "BAMBOO_FENCE",
        "kl": "SPRUCE_DOOR",
        "km": "BIRCH_DOOR",
        "kn": "JUNGLE_DOOR",
        "ko": "ACACIA_DOOR",
        "kp": "CHERRY_DOOR",
        "kq": "DARK_OAK_DOOR",
        "kr": "MANGROVE_DOOR",
        "ks": "BAMBOO_DOOR",
        "kt": "END_ROD",
        "ku": "CHORUS_PLANT",
        "kv": "CHORUS_FLOWER",
        "kw": "PURPUR_BLOCK",
        "kx": "PURPUR_PILLAR",
        "ky": "PURPUR_STAIRS",
        "kz": "END_STONE_BRICKS",
        "kA": "TORCHFLOWER_CROP",
        "kB": "PITCHER_CROP",
        "kC": "PITCHER_PLANT",
        "kD": "BEETROOTS",
        "kE": "DIRT_PATH",
        "kF": "END_GATEWAY",
        "kG": "REPEATING_COMMAND_BLOCK",
        "kH": "CHAIN_COMMAND_BLOCK",
        "kI": "FROSTED_ICE",
        "kJ": "MAGMA_BLOCK",
        "kK": "NETHER_WART_BLOCK",
        "kL": "RED_NETHER_BRICKS",
        "kM": "BONE_BLOCK",
        "kN": "STRUCTURE_VOID",
        "kO": "OBSERVER",
        "kP": "SHULKER_BOX",
        "kQ": "WHITE_SHULKER_BOX",
        "kR": "ORANGE_SHULKER_BOX",
        "kS": "MAGENTA_SHULKER_BOX",
        "kT": "LIGHT_BLUE_SHULKER_BOX",
        "kU": "YELLOW_SHULKER_BOX",
        "kV": "LIME_SHULKER_BOX",
        "kW": "PINK_SHULKER_BOX",
        "kX": "GRAY_SHULKER_BOX",
        "kY": "LIGHT_GRAY_SHULKER_BOX",
        "kZ": "CYAN_SHULKER_BOX",
        "la": "PURPLE_SHULKER_BOX",
        "lb": "BLUE_SHULKER_BOX",
        "lc": "BROWN_SHULKER_BOX",
        "ld": "GREEN_SHULKER_BOX",
        "le": "RED_SHULKER_BOX",
        "lf": "BLACK_SHULKER_BOX",
        "lg": "WHITE_GLAZED_TERRACOTTA",
        "lh": "ORANGE_GLAZED_TERRACOTTA",
        "li": "MAGENTA_GLAZED_TERRACOTTA",
        "lj": "LIGHT_BLUE_GLAZED_TERRACOTTA",
        "lk": "YELLOW_GLAZED_TERRACOTTA",
        "ll": "LIME_GLAZED_TERRACOTTA",
        "lm": "PINK_GLAZED_TERRACOTTA",
        "ln": "GRAY_GLAZED_TERRACOTTA",
        "lo": "LIGHT_GRAY_GLAZED_TERRACOTTA",
        "lp": "CYAN_GLAZED_TERRACOTTA",
        "lq": "PURPLE_GLAZED_TERRACOTTA",
        "lr": "BLUE_GLAZED_TERRACOTTA",
        "ls": "BROWN_GLAZED_TERRACOTTA",
        "lt": "GREEN_GLAZED_TERRACOTTA",
        "lu": "RED_GLAZED_TERRACOTTA",
        "lv": "BLACK_GLAZED_TERRACOTTA",
        "lw": "WHITE_CONCRETE",
        "lx": "ORANGE_CONCRETE",
        "ly": "MAGENTA_CONCRETE",
        "lz": "LIGHT_BLUE_CONCRETE",
        "lA": "YELLOW_CONCRETE",
        "lB": "LIME_CONCRETE",
        "lC": "PINK_CONCRETE",
        "lD": "GRAY_CONCRETE",
        "lE": "LIGHT_GRAY_CONCRETE",
        "lF": "CYAN_CONCRETE",
        "lG": "PURPLE_CONCRETE",
        "lH": "BLUE_CONCRETE",
        "lI": "BROWN_CONCRETE",
        "lJ": "GREEN_CONCRETE",
        "lK": "RED_CONCRETE",
        "lL": "BLACK_CONCRETE",
        "lM": "WHITE_CONCRETE_POWDER",
        "lN": "ORANGE_CONCRETE_POWDER",
        "lO": "MAGENTA_CONCRETE_POWDER",
        "lP": "LIGHT_BLUE_CONCRETE_POWDER",
        "lQ": "YELLOW_CONCRETE_POWDER",
        "lR": "LIME_CONCRETE_POWDER",
        "lS": "PINK_CONCRETE_POWDER",
        "lT": "GRAY_CONCRETE_POWDER",
        "lU": "LIGHT_GRAY_CONCRETE_POWDER",
        "lV": "CYAN_CONCRETE_POWDER",
        "lW": "PURPLE_CONCRETE_POWDER",
        "lX": "BLUE_CONCRETE_POWDER",
        "lY": "BROWN_CONCRETE_POWDER",
        "lZ": "GREEN_CONCRETE_POWDER",
        "ma": "RED_CONCRETE_POWDER",
        "mb": "BLACK_CONCRETE_POWDER",
        "mc": "KELP",
        "md": "KELP_PLANT",
        "me": "DRIED_KELP_BLOCK",
        "mf": "TURTLE_EGG",
        "mg": "SNIFFER_EGG",
        "mh": "DEAD_TUBE_CORAL_BLOCK",
        "mi": "DEAD_BRAIN_CORAL_BLOCK",
        "mj": "DEAD_BUBBLE_CORAL_BLOCK",
        "mk": "DEAD_FIRE_CORAL_BLOCK",
        "ml": "DEAD_HORN_CORAL_BLOCK",
        "mm": "TUBE_CORAL_BLOCK",
        "mn": "BRAIN_CORAL_BLOCK",
        "mo": "BUBBLE_CORAL_BLOCK",
        "mp": "FIRE_CORAL_BLOCK",
        "mq": "HORN_CORAL_BLOCK",
        "mr": "DEAD_TUBE_CORAL",
        "ms": "DEAD_BRAIN_CORAL",
        "mt": "DEAD_BUBBLE_CORAL",
        "mu": "DEAD_FIRE_CORAL",
        "mv": "DEAD_HORN_CORAL",
        "mw": "TUBE_CORAL",
        "mx": "BRAIN_CORAL",
        "my": "BUBBLE_CORAL",
        "mz": "FIRE_CORAL",
        "mA": "HORN_CORAL",
        "mB": "DEAD_TUBE_CORAL_FAN",
        "mC": "DEAD_BRAIN_CORAL_FAN",
        "mD": "DEAD_BUBBLE_CORAL_FAN",
        "mE": "DEAD_FIRE_CORAL_FAN",
        "mF": "DEAD_HORN_CORAL_FAN",
        "mG": "TUBE_CORAL_FAN",
        "mH": "BRAIN_CORAL_FAN",
        "mI": "BUBBLE_CORAL_FAN",
        "mJ": "FIRE_CORAL_FAN",
        "mK": "HORN_CORAL_FAN",
        "mL": "DEAD_TUBE_CORAL_WALL_FAN",
        "mM": "DEAD_BRAIN_CORAL_WALL_FAN",
        "mN": "DEAD_BUBBLE_CORAL_WALL_FAN",
        "mO": "DEAD_FIRE_CORAL_WALL_FAN",
        "mP": "DEAD_HORN_CORAL_WALL_FAN",
        "mQ": "TUBE_CORAL_WALL_FAN",
        "mR": "BRAIN_CORAL_WALL_FAN",
        "mS": "BUBBLE_CORAL_WALL_FAN",
        "mT": "FIRE_CORAL_WALL_FAN",
        "mU": "HORN_CORAL_WALL_FAN",
        "mV": "SEA_PICKLE",
        "mW": "BLUE_ICE",
        "mX": "CONDUIT",
        "mY": "BAMBOO_SAPLING",
        "mZ": "BAMBOO",
        "na": "POTTED_BAMBOO",
        "nb": "VOID_AIR",
        "nc": "CAVE_AIR",
        "nd": "BUBBLE_COLUMN",
        "ne": "POLISHED_GRANITE_STAIRS",
        "nf": "SMOOTH_RED_SANDSTONE_STAIRS",
        "ng": "MOSSY_STONE_BRICK_STAIRS",
        "nh": "POLISHED_DIORITE_STAIRS",
        "ni": "MOSSY_COBBLESTONE_STAIRS",
        "nj": "END_STONE_BRICK_STAIRS",
        "nk": "STONE_STAIRS",
        "nl": "SMOOTH_SANDSTONE_STAIRS",
        "nm": "SMOOTH_QUARTZ_STAIRS",
        "nn": "GRANITE_STAIRS",
        "no": "ANDESITE_STAIRS",
        "np": "RED_NETHER_BRICK_STAIRS",
        "nq": "POLISHED_ANDESITE_STAIRS",
        "nr": "DIORITE_STAIRS",
        "ns": "POLISHED_GRANITE_SLAB",
        "nt": "SMOOTH_RED_SANDSTONE_SLAB",
        "nu": "MOSSY_STONE_BRICK_SLAB",
        "nv": "POLISHED_DIORITE_SLAB",
        "nw": "MOSSY_COBBLESTONE_SLAB",
        "nx": "END_STONE_BRICK_SLAB",
        "ny": "SMOOTH_SANDSTONE_SLAB",
        "nz": "SMOOTH_QUARTZ_SLAB",
        "nA": "GRANITE_SLAB",
        "nB": "ANDESITE_SLAB",
        "nC": "RED_NETHER_BRICK_SLAB",
        "nD": "POLISHED_ANDESITE_SLAB",
        "nE": "DIORITE_SLAB",
        "nF": "BRICK_WALL",
        "nG": "PRISMARINE_WALL",
        "nH": "RED_SANDSTONE_WALL",
        "nI": "MOSSY_STONE_BRICK_WALL",
        "nJ": "GRANITE_WALL",
        "nK": "STONE_BRICK_WALL",
        "nL": "MUD_BRICK_WALL",
        "nM": "NETHER_BRICK_WALL",
        "nN": "ANDESITE_WALL",
        "nO": "RED_NETHER_BRICK_WALL",
        "nP": "SANDSTONE_WALL",
        "nQ": "END_STONE_BRICK_WALL",
        "nR": "DIORITE_WALL",
        "nS": "SCAFFOLDING",
        "nT": "LOOM",
        "nU": "BARREL",
        "nV": "SMOKER",
        "nW": "BLAST_FURNACE",
        "nX": "CARTOGRAPHY_TABLE",
        "nY": "FLETCHING_TABLE",
        "nZ": "GRINDSTONE",
        "oa": "LECTERN",
        "ob": "SMITHING_TABLE",
        "oc": "STONECUTTER",
        "od": "BELL",
        "oe": "LANTERN",
        "of": "SOUL_LANTERN",
        "og": "CAMPFIRE",
        "oh": "SOUL_CAMPFIRE",
        "oi": "SWEET_BERRY_BUSH",
        "oj": "WARPED_STEM",
        "ok": "STRIPPED_WARPED_STEM",
        "ol": "WARPED_HYPHAE",
        "om": "STRIPPED_WARPED_HYPHAE",
        "on": "WARPED_NYLIUM",
        "oo": "WARPED_FUNGUS",
        "op": "WARPED_WART_BLOCK",
        "oq": "WARPED_ROOTS",
        "or": "NETHER_SPROUTS",
        "os": "CRIMSON_STEM",
        "ot": "STRIPPED_CRIMSON_STEM",
        "ou": "CRIMSON_HYPHAE",
        "ov": "STRIPPED_CRIMSON_HYPHAE",
        "ow": "CRIMSON_NYLIUM",
        "ox": "CRIMSON_FUNGUS",
        "oy": "SHROOMLIGHT",
        "oz": "WEEPING_VINES",
        "oA": "WEEPING_VINES_PLANT",
        "oB": "TWISTING_VINES",
        "oC": "TWISTING_VINES_PLANT",
        "oD": "CRIMSON_ROOTS",
        "oE": "CRIMSON_PLANKS",
        "oF": "WARPED_PLANKS",
        "oG": "CRIMSON_SLAB",
        "oH": "WARPED_SLAB",
        "oI": "CRIMSON_PRESSURE_PLATE",
        "oJ": "WARPED_PRESSURE_PLATE",
        "oK": "CRIMSON_FENCE",
        "oL": "WARPED_FENCE",
        "oM": "CRIMSON_TRAPDOOR",
        "oN": "WARPED_TRAPDOOR",
        "oO": "CRIMSON_FENCE_GATE",
        "oP": "WARPED_FENCE_GATE",
        "oQ": "CRIMSON_STAIRS",
        "oR": "WARPED_STAIRS",
        "oS": "CRIMSON_BUTTON",
        "oT": "WARPED_BUTTON",
        "oU": "CRIMSON_DOOR",
        "oV": "WARPED_DOOR",
        "oW": "CRIMSON_SIGN",
        "oX": "WARPED_SIGN",
        "oY": "CRIMSON_WALL_SIGN",
        "oZ": "WARPED_WALL_SIGN",
        "pa": "STRUCTURE_BLOCK",
        "pb": "JIGSAW",
        "pc": "COMPOSTER",
        "pd": "TARGET",
        "pe": "BEE_NEST",
        "pf": "BEEHIVE",
        "pg": "HONEY_BLOCK",
        "ph": "HONEYCOMB_BLOCK",
        "pi": "NETHERITE_BLOCK",
        "pj": "ANCIENT_DEBRIS",
        "pk": "CRYING_OBSIDIAN",
        "pl": "RESPAWN_ANCHOR",
        "pm": "POTTED_CRIMSON_FUNGUS",
        "pn": "POTTED_WARPED_FUNGUS",
        "po": "POTTED_CRIMSON_ROOTS",
        "pp": "POTTED_WARPED_ROOTS",
        "pq": "LODESTONE",
        "pr": "BLACKSTONE",
        "ps": "BLACKSTONE_STAIRS",
        "pt": "BLACKSTONE_WALL",
        "pu": "BLACKSTONE_SLAB",
        "pv": "POLISHED_BLACKSTONE",
        "pw": "POLISHED_BLACKSTONE_BRICKS",
        "px": "CRACKED_POLISHED_BLACKSTONE_BRICKS",
        "py": "CHISELED_POLISHED_BLACKSTONE",
        "pz": "POLISHED_BLACKSTONE_BRICK_SLAB",
        "pA": "POLISHED_BLACKSTONE_BRICK_STAIRS",
        "pB": "POLISHED_BLACKSTONE_BRICK_WALL",
        "pC": "GILDED_BLACKSTONE",
        "pD": "POLISHED_BLACKSTONE_STAIRS",
        "pE": "POLISHED_BLACKSTONE_SLAB",
        "pF": "POLISHED_BLACKSTONE_PRESSURE_PLATE",
        "pG": "POLISHED_BLACKSTONE_BUTTON",
        "pH": "POLISHED_BLACKSTONE_WALL",
        "pI": "CHISELED_NETHER_BRICKS",
        "pJ": "CRACKED_NETHER_BRICKS",
        "pK": "QUARTZ_BRICKS",
        "pL": "CANDLE",
        "pM": "WHITE_CANDLE",
        "pN": "ORANGE_CANDLE",
        "pO": "MAGENTA_CANDLE",
        "pP": "LIGHT_BLUE_CANDLE",
        "pQ": "YELLOW_CANDLE",
        "pR": "LIME_CANDLE",
        "pS": "PINK_CANDLE",
        "pT": "GRAY_CANDLE",
        "pU": "LIGHT_GRAY_CANDLE",
        "pV": "CYAN_CANDLE",
        "pW": "PURPLE_CANDLE",
        "pX": "BLUE_CANDLE",
        "pY": "BROWN_CANDLE",
        "pZ": "GREEN_CANDLE",
        "qa": "RED_CANDLE",
        "qb": "BLACK_CANDLE",
        "qc": "CANDLE_CAKE",
        "qd": "WHITE_CANDLE_CAKE",
        "qe": "ORANGE_CANDLE_CAKE",
        "qf": "MAGENTA_CANDLE_CAKE",
        "qg": "LIGHT_BLUE_CANDLE_CAKE",
        "qh": "YELLOW_CANDLE_CAKE",
        "qi": "LIME_CANDLE_CAKE",
        "qj": "PINK_CANDLE_CAKE",
        "qk": "GRAY_CANDLE_CAKE",
        "ql": "LIGHT_GRAY_CANDLE_CAKE",
        "qm": "CYAN_CANDLE_CAKE",
        "qn": "PURPLE_CANDLE_CAKE",
        "qo": "BLUE_CANDLE_CAKE",
        "qp": "BROWN_CANDLE_CAKE",
        "qq": "GREEN_CANDLE_CAKE",
        "qr": "RED_CANDLE_CAKE",
        "qs": "BLACK_CANDLE_CAKE",
        "qt": "AMETHYST_BLOCK",
        "qu": "BUDDING_AMETHYST",
        "qv": "AMETHYST_CLUSTER",
        "qw": "LARGE_AMETHYST_BUD",
        "qx": "MEDIUM_AMETHYST_BUD",
        "qy": "SMALL_AMETHYST_BUD",
        "qz": "TUFF",
        "qA": "CALCITE",
        "qB": "TINTED_GLASS",
        "qC": "POWDER_SNOW",
        "qD": "SCULK_SENSOR",
        "qE": "CALIBRATED_SCULK_SENSOR",
        "qF": "SCULK",
        "qG": "SCULK_VEIN",
        "qH": "SCULK_CATALYST",
        "qI": "SCULK_SHRIEKER",
        "qJ": "OXIDIZED_COPPER",
        "qK": "WEATHERED_COPPER",
        "qL": "EXPOSED_COPPER",
        "qM": "COPPER_BLOCK",
        "qN": "COPPER_ORE",
        "qO": "DEEPSLATE_COPPER_ORE",
        "qP": "OXIDIZED_CUT_COPPER",
        "qQ": "WEATHERED_CUT_COPPER",
        "qR": "EXPOSED_CUT_COPPER",
        "qS": "CUT_COPPER",
        "qT": "OXIDIZED_CUT_COPPER_STAIRS",
        "qU": "WEATHERED_CUT_COPPER_STAIRS",
        "qV": "EXPOSED_CUT_COPPER_STAIRS",
        "qW": "CUT_COPPER_STAIRS",
        "qX": "OXIDIZED_CUT_COPPER_SLAB",
        "qY": "WEATHERED_CUT_COPPER_SLAB",
        "qZ": "EXPOSED_CUT_COPPER_SLAB",
        "ra": "CUT_COPPER_SLAB",
        "rb": "WAXED_COPPER_BLOCK",
        "rc": "WAXED_WEATHERED_COPPER",
        "rd": "WAXED_EXPOSED_COPPER",
        "re": "WAXED_OXIDIZED_COPPER",
        "rf": "WAXED_OXIDIZED_CUT_COPPER",
        "rg": "WAXED_WEATHERED_CUT_COPPER",
        "rh": "WAXED_EXPOSED_CUT_COPPER",
        "ri": "WAXED_CUT_COPPER",
        "rj": "WAXED_OXIDIZED_CUT_COPPER_STAIRS",
        "rk": "WAXED_WEATHERED_CUT_COPPER_STAIRS",
        "rl": "WAXED_EXPOSED_CUT_COPPER_STAIRS",
        "rm": "WAXED_CUT_COPPER_STAIRS",
        "rn": "WAXED_OXIDIZED_CUT_COPPER_SLAB",
        "ro": "WAXED_WEATHERED_CUT_COPPER_SLAB",
        "rp": "WAXED_EXPOSED_CUT_COPPER_SLAB",
        "rq": "WAXED_CUT_COPPER_SLAB",
        "rr": "LIGHTNING_ROD",
        "rs": "POINTED_DRIPSTONE",
        "rt": "DRIPSTONE_BLOCK",
        "ru": "CAVE_VINES",
        "rv": "CAVE_VINES_PLANT",
        "rw": "SPORE_BLOSSOM",
        "rx": "AZALEA",
        "ry": "FLOWERING_AZALEA",
        "rz": "MOSS_CARPET",
        "rA": "PINK_PETALS",
        "rB": "MOSS_BLOCK",
        "rC": "BIG_DRIPLEAF",
        "rD": "BIG_DRIPLEAF_STEM",
        "rE": "SMALL_DRIPLEAF",
        "rF": "HANGING_ROOTS",
        "rG": "ROOTED_DIRT",
        "rH": "MUD",
        "rI": "DEEPSLATE",
        "rJ": "COBBLED_DEEPSLATE",
        "rK": "COBBLED_DEEPSLATE_STAIRS",
        "rL": "COBBLED_DEEPSLATE_SLAB",
        "rM": "COBBLED_DEEPSLATE_WALL",
        "rN": "POLISHED_DEEPSLATE",
        "rO": "POLISHED_DEEPSLATE_STAIRS",
        "rP": "POLISHED_DEEPSLATE_SLAB",
        "rQ": "POLISHED_DEEPSLATE_WALL",
        "rR": "DEEPSLATE_TILES",
        "rS": "DEEPSLATE_TILE_STAIRS",
        "rT": "DEEPSLATE_TILE_SLAB",
        "rU": "DEEPSLATE_TILE_WALL",
        "rV": "DEEPSLATE_BRICKS",
        "rW": "DEEPSLATE_BRICK_STAIRS",
        "rX": "DEEPSLATE_BRICK_SLAB",
        "rY": "DEEPSLATE_BRICK_WALL",
        "rZ": "CHISELED_DEEPSLATE",
        "sa": "CRACKED_DEEPSLATE_BRICKS",
        "sb": "CRACKED_DEEPSLATE_TILES",
        "sc": "INFESTED_DEEPSLATE",
        "sd": "SMOOTH_BASALT",
        "se": "RAW_IRON_BLOCK",
        "sf": "RAW_COPPER_BLOCK",
        "sg": "RAW_GOLD_BLOCK",
        "sh": "POTTED_AZALEA",
        "si": "POTTED_FLOWERING_AZALEA",
        "sj": "OCHRE_FROGLIGHT",
        "sk": "VERDANT_FROGLIGHT",
        "sl": "PEARLESCENT_FROGLIGHT",
        "sm": "FROGSPAWN",
        "sn": "REINFORCED_DEEPSLATE",
        "so": "DECORATED_POT"
      },
      "methods": {
        "a(I)Ljava/util/function/ToIntFunction;": "litBlockEmission",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Ljava/lang/Boolean;": "never",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Ljava/lang/Boolean;": "always",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Ljava/lang/Boolean;": "ocelotOrParrot",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/level/block/BedBlock;": "bed",
        "a(Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/material/MapColor;)Lnet/minecraft/world/level/block/RotatedPillarBlock;": "log",
        "a(Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/block/SoundType;)Lnet/minecraft/world/level/block/RotatedPillarBlock;": "log",
        "a(Lnet/minecraft/world/level/material/MapColor;)Lnet/minecraft/world/level/block/Block;": "netherStem",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "always",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "never",
        "b(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/level/block/StainedGlassBlock;": "stainedGlass",
        "a(Lnet/minecraft/world/level/block/SoundType;)Lnet/minecraft/world/level/block/LeavesBlock;": "leaves",
        "a(Lnet/minecraft/world/item/DyeColor;Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;)Lnet/minecraft/world/level/block/ShulkerBoxBlock;": "shulkerBox",
        "a(Z)Lnet/minecraft/world/level/block/piston/PistonBaseBlock;": "pistonBase",
        "a(Lnet/minecraft/world/level/block/state/properties/BlockSetType;[Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/level/block/ButtonBlock;": "woodenButton",
        "b()Lnet/minecraft/world/level/block/ButtonBlock;": "stoneButton",
        "a(Lnet/minecraft/world/level/block/Block;[Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/level/block/FlowerPotBlock;": "flowerPot",
        "b(Lnet/minecraft/world/level/material/MapColor;)Lnet/minecraft/world/level/block/CandleBlock;": "candle",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/Block;": "register",
        "a()V": "rebuildCache",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$55",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$54",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$53",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$52",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$static$51",
        "e(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$50",
        "f(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$49",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$48",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$47",
        "i(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$46",
        "j(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$45",
        "k(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$44",
        "l(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$43",
        "m(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$42",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$41",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$40",
        "p(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$39",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Z": "lambda$static$38",
        "q(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$37",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Z": "lambda$static$36",
        "r(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$35",
        "s(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$34",
        "t(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$33",
        "u(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$32",
        "v(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$31",
        "w(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$30",
        "x(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$29",
        "y(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$28",
        "z(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$27",
        "A(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$26",
        "B(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$25",
        "c()Lnet/minecraft/world/item/Item;": "lambda$static$24",
        "d()Lnet/minecraft/world/item/Item;": "lambda$static$23",
        "e()Lnet/minecraft/world/item/Item;": "lambda$static$22",
        "f()Lnet/minecraft/world/item/Item;": "lambda$static$21",
        "C(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$20",
        "D(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$19",
        "E(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$18",
        "F(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$17",
        "G(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$16",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Z": "lambda$static$15",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$static$14",
        "g()Lnet/minecraft/world/level/block/entity/BlockEntityType;": "lambda$static$13",
        "H(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$12",
        "I(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$11",
        "J(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$10",
        "K(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$9",
        "L(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$8",
        "M(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$7",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$pistonBase$6",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "lambda$shulkerBox$5",
        "a(Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/MapColor;": "lambda$netherStem$4",
        "a(Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/MapColor;": "lambda$log$3",
        "b(Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/material/MapColor;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/MapColor;": "lambda$log$2",
        "a(Lnet/minecraft/world/item/DyeColor;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/MapColor;": "lambda$bed$1",
        "a(ILnet/minecraft/world/level/block/state/BlockState;)I": "lambda$litBlockEmission$0"
      }
    },
    "net/minecraft/world/level/block/IBlockFragilePlantElement": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockBrewingStand": {
      "fields": {
        "a": "HAS_BOTTLE",
        "b": "SHAPE"
      },
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BrushableBlock": {
      "fields": {
        "b": "DUSTED",
        "a": "TICK_DELAY",
        "c": "turnsInto",
        "d": "brushSound",
        "e": "brushCompletedSound"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onBrokenAfterFall",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a()Lnet/minecraft/world/level/block/Block;": "getTurnsInto",
        "b()Lnet/minecraft/sounds/SoundEvent;": "getBrushSound",
        "c()Lnet/minecraft/sounds/SoundEvent;": "getBrushCompletedSound"
      }
    },
    "net/minecraft/world/level/block/BlockBubbleColumn": {
      "fields": {
        "a": "DRAG_DOWN",
        "b": "CHECK_PERIOD"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateColumn",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateColumn",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canExistIn",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getColumnState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "pickupBlock",
        "am_()Ljava/util/Optional;": "getPickupSound"
      }
    },
    "net/minecraft/world/level/block/IFluidSource": {
      "methods": {
        "c(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "pickupBlock",
        "am_()Ljava/util/Optional;": "getPickupSound"
      }
    },
    "net/minecraft/world/level/block/BuddingAmethystBlock": {
      "fields": {
        "a": "GROWTH_CHANCE",
        "b": "DIRECTIONS"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canClusterGrowAtState"
      }
    },
    "net/minecraft/world/level/block/BlockPlant": {
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockButtonAbstract": {
      "fields": {
        "a": "POWERED",
        "J": "PRESSED_DEPTH",
        "K": "UNPRESSED_DEPTH",
        "b": "HALF_AABB_HEIGHT",
        "c": "HALF_AABB_WIDTH",
        "d": "CEILING_AABB_X",
        "e": "CEILING_AABB_Z",
        "f": "FLOOR_AABB_X",
        "g": "FLOOR_AABB_Z",
        "h": "NORTH_AABB",
        "i": "SOUTH_AABB",
        "j": "WEST_AABB",
        "k": "EAST_AABB",
        "l": "PRESSED_CEILING_AABB_X",
        "m": "PRESSED_CEILING_AABB_Z",
        "n": "PRESSED_FLOOR_AABB_X",
        "D": "PRESSED_FLOOR_AABB_Z",
        "E": "PRESSED_NORTH_AABB",
        "F": "PRESSED_SOUTH_AABB",
        "G": "PRESSED_WEST_AABB",
        "H": "PRESSED_EAST_AABB",
        "L": "type",
        "M": "ticksToStayPressed",
        "N": "arrowsCanPress"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "press",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Z)V": "playSound",
        "a(Z)Lnet/minecraft/sounds/SoundEvent;": "getSound",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "checkPressed",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "updateNeighbours",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockCactus": {
      "fields": {
        "a": "AGE",
        "b": "MAX_AGE",
        "c": "AABB_OFFSET",
        "d": "COLLISION_SHAPE",
        "e": "OUTLINE_SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockCake": {
      "fields": {
        "a": "MAX_BITES",
        "b": "BITES",
        "c": "FULL_CAKE_SIGNAL",
        "d": "AABB_OFFSET",
        "e": "AABB_SIZE_PER_BITE",
        "f": "SHAPE_BY_BITE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/InteractionResult;": "eat",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "b(I)I": "getOutputSignal",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/CalibratedSculkSensorBlock": {
      "fields": {
        "a": "FACING"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "b()I": "getActiveTicks",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/CalibratedSculkSensorBlockEntity;)V": "lambda$getTicker$0"
      }
    },
    "net/minecraft/world/level/block/BlockCampfire": {
      "fields": {
        "a": "SHAPE",
        "b": "LIT",
        "c": "SIGNAL_FIRE",
        "d": "WATERLOGGED",
        "e": "FACING",
        "f": "VIRTUAL_FENCE_POST",
        "g": "SMOKE_DISTANCE",
        "h": "spawnParticles",
        "i": "fireDamage"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSmokeSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "dowse",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ZZ)V": "makeParticles",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "isSmokeyPos",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isLitCampfire",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canLight"
      }
    },
    "net/minecraft/world/level/block/CandleBlock": {
      "fields": {
        "c": "MIN_CANDLES",
        "d": "MAX_CANDLES",
        "e": "CANDLES",
        "f": "LIT",
        "g": "WATERLOGGED",
        "h": "LIGHT_EMISSION",
        "i": "PARTICLE_OFFSETS",
        "j": "ONE_AABB",
        "k": "TWO_AABB",
        "l": "THREE_AABB",
        "m": "FOUR_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canLight",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/lang/Iterable;": "getParticleOffsets",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canBeLit",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour$BlockStateBase;)Z": "lambda$canLight$2",
        "g()Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;": "lambda$static$1",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/CandleCakeBlock": {
      "fields": {
        "c": "LIT",
        "d": "AABB_OFFSET",
        "e": "CAKE_SHAPE",
        "f": "CANDLE_SHAPE",
        "g": "SHAPE",
        "h": "BY_CANDLE",
        "i": "PARTICLE_OFFSETS"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/lang/Iterable;": "getParticleOffsets",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/phys/BlockHitResult;)Z": "candleHit",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "byCandle",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canLight",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockBehaviour$BlockStateBase;)Z": "lambda$canLight$0"
      }
    },
    "net/minecraft/world/level/block/CarpetBlock": {
      "fields": {
        "a": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive"
      }
    },
    "net/minecraft/world/level/block/BlockCarrots": {
      "fields": {
        "a": "SHAPE_BY_AGE"
      },
      "methods": {
        "c()Lnet/minecraft/world/level/ItemLike;": "getBaseSeedId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/BlockCartographyTable": {
      "fields": {
        "a": "CONTAINER_TITLE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockPumpkinCarved": {
      "fields": {
        "a": "FACING",
        "b": "snowGolemBase",
        "c": "snowGolemFull",
        "d": "ironGolemBase",
        "e": "ironGolemFull",
        "f": "PUMPKINS_PREDICATE"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSpawnGolem",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "trySpawnGolem",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/BlockPos;)V": "spawnGolemInWorld",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;)V": "clearPatternBlocks",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;)V": "updatePatternBlocks",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreateSnowGolemBase",
        "g()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreateSnowGolemFull",
        "u()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreateIronGolemBase",
        "v()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreateIronGolemFull"
      }
    },
    "net/minecraft/world/level/block/BlockCauldron": {
      "fields": {
        "c": "RAIN_FILL_CHANCE",
        "d": "POWDER_SNOW_FILL_CHANCE"
      },
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFull",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/biome/Biome$Precipitation;)Z": "shouldHandlePrecipitation",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/biome/Biome$Precipitation;)V": "handlePrecipitation"
      }
    },
    "net/minecraft/world/level/block/CaveVines": {
      "fields": {
        "r_": "SHAPE",
        "s_": "BERRIES"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/InteractionResult;": "use",
        "h_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasGlowBerries",
        "h_(I)Ljava/util/function/ToIntFunction;": "emission"
      }
    },
    "net/minecraft/world/level/block/CaveVinesBlock": {
      "fields": {
        "f": "CHANCE_OF_BERRIES_ON_GROWTH"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)I": "getBlocksToGrowWhenBonemealed",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canGrowInto",
        "a()Lnet/minecraft/world/level/block/Block;": "getBodyBlock",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "updateBodyAfterConvertedFromHead",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "getGrowIntoState",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/CaveVinesPlantBlock": {
      "methods": {
        "b()Lnet/minecraft/world/level/block/GrowingPlantHeadBlock;": "getHeadBlock",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "updateHeadAfterConvertedFromBody",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/CeilingHangingSignBlock": {
      "fields": {
        "a": "ROTATION",
        "b": "ATTACHED",
        "c": "AABB_OFFSET",
        "d": "SHAPE",
        "h": "AABBS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/level/block/entity/SignBlockEntity;Lnet/minecraft/world/item/ItemStack;)Z": "shouldTryToChainAnotherHangingSign",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)F": "getYRotationDegrees",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker"
      }
    },
    "net/minecraft/world/level/block/BlockChain": {
      "fields": {
        "a": "WATERLOGGED",
        "b": "AABB_MIN",
        "c": "AABB_MAX",
        "d": "Y_AXIS_AABB",
        "e": "Z_AXIS_AABB",
        "f": "X_AXIS_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/ChangeOverTimeBlock": {
      "fields": {
        "w_": "SCAN_DISTANCE"
      },
      "methods": {
        "i_(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "getNext",
        "a()F": "getChanceModifier",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "onRandomTick",
        "b()Ljava/lang/Enum;": "getAge",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "applyChangeOverTime"
      }
    },
    "net/minecraft/world/level/block/CherryLeavesBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/BlockChest": {
      "fields": {
        "b": "FACING",
        "c": "TYPE",
        "d": "WATERLOGGED",
        "e": "EVENT_SET_OPEN_COUNT",
        "f": "AABB_OFFSET",
        "g": "AABB_HEIGHT",
        "h": "NORTH_AABB",
        "i": "SOUTH_AABB",
        "j": "WEST_AABB",
        "k": "EAST_AABB",
        "l": "AABB",
        "m": "CHEST_COMBINER",
        "n": "MENU_PROVIDER_COMBINER"
      },
      "methods": {
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/DoubleBlockCombiner$BlockType;": "getBlockType",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getConnectedDirection",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "candidatePartnerFacing",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b()Lnet/minecraft/stats/Stat;": "getOpenChestStat",
        "c()Lnet/minecraft/world/level/block/entity/BlockEntityType;": "blockEntityType",
        "a(Lnet/minecraft/world/level/block/ChestBlock;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/Container;": "getContainer",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/level/block/DoubleBlockCombiner$NeighborCombineResult;": "combine",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/entity/LidBlockEntity;)Lnet/minecraft/world/level/block/DoubleBlockCombiner$Combiner;": "opennessCombiner",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isChestBlockedAt",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isBlockedChestByBlock",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isCatSittingOnChest",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick"
      }
    },
    "net/minecraft/world/level/block/ChiseledBookShelfBlock": {
      "fields": {
        "c": "MAX_BOOKS_IN_STORAGE",
        "a": "BOOKS_PER_ROW",
        "b": "SLOT_OCCUPIED_PROPERTIES"
      },
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/core/Direction;)Ljava/util/Optional;": "getRelativeHitCoordinatesForBlockFace",
        "a(Lnet/minecraft/world/phys/Vec2;)I": "getHitSlot",
        "a(F)I": "getSection",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity;Lnet/minecraft/world/item/ItemStack;I)V": "addBook",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity;I)V": "removeBook",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;Lnet/minecraft/world/level/block/state/properties/Property;)V": "lambda$createBlockStateDefinition$0"
      }
    },
    "net/minecraft/world/level/block/BlockChorusFlower": {
      "fields": {
        "a": "DEAD_AGE",
        "b": "AGE",
        "c": "plant"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;I)V": "placeGrownFlower",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "placeDeadFlower",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "allNeighborsEmpty",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;I)V": "generatePlant",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;II)V": "growTreeRecursive",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit"
      }
    },
    "net/minecraft/world/level/block/BlockChorusFruit": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockCocoa": {
      "fields": {
        "a": "MAX_AGE",
        "b": "AGE",
        "c": "AGE_0_WIDTH",
        "d": "AGE_0_HEIGHT",
        "e": "AGE_0_HALFWIDTH",
        "f": "AGE_1_WIDTH",
        "g": "AGE_1_HEIGHT",
        "h": "AGE_1_HALFWIDTH",
        "i": "AGE_2_WIDTH",
        "j": "AGE_2_HEIGHT",
        "k": "AGE_2_HALFWIDTH",
        "l": "EAST_AABB",
        "m": "WEST_AABB",
        "n": "NORTH_AABB",
        "D": "SOUTH_AABB"
      },
      "methods": {
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockCommand": {
      "fields": {
        "c": "LOGGER",
        "a": "FACING",
        "b": "CONDITIONAL",
        "d": "automatic"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/BaseCommandBlock;Z)V": "execute",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)V": "executeChain"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneComparator": {
      "fields": {
        "a": "MODE"
      },
      "methods": {
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getDelay",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "getOutputSignal",
        "e(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "calculateOutputSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldTurnOn",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "getInputSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/entity/decoration/ItemFrame;": "getItemFrame",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "checkTickOnNeighbor",
        "f(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "refreshOutputState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;II)Z": "triggerEvent",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockComposter": {
      "fields": {
        "a": "READY",
        "b": "MIN_LEVEL",
        "c": "MAX_LEVEL",
        "d": "LEVEL",
        "e": "COMPOSTABLES",
        "f": "AABB_SIDE_THICKNESS",
        "g": "OUTER_SHAPE",
        "h": "SHAPES"
      },
      "methods": {
        "a()V": "bootStrap",
        "a(FLnet/minecraft/world/level/ItemLike;)V": "add",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)V": "handleFill",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getInteractionShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "insertItem",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "extractProduce",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "empty",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/level/block/state/BlockState;": "addItem",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/WorldlyContainer;": "getContainer"
      }
    },
    "net/minecraft/world/level/block/BlockComposter$ContainerEmpty": {
      "methods": {
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace"
      }
    },
    "net/minecraft/world/level/block/BlockComposter$ContainerInput": {
      "fields": {
        "c": "state",
        "d": "level",
        "e": "pos",
        "f": "changed"
      },
      "methods": {
        "ac_()I": "getMaxStackSize",
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace",
        "e()V": "setChanged"
      }
    },
    "net/minecraft/world/level/block/BlockComposter$ContainerOutput": {
      "fields": {
        "c": "state",
        "d": "level",
        "e": "pos",
        "f": "changed"
      },
      "methods": {
        "ac_()I": "getMaxStackSize",
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace",
        "e()V": "setChanged"
      }
    },
    "net/minecraft/world/level/block/BlockConcretePowder": {
      "fields": {
        "a": "concrete"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onLand",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldSolidify",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "touchesLiquid",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canSolidify",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getDustColor"
      }
    },
    "net/minecraft/world/level/block/BlockConduit": {
      "fields": {
        "a": "WATERLOGGED",
        "c": "SIZE",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockCoral": {
      "fields": {
        "a": "deadBlock"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "scanForWater",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/BlockCoralFan": {
      "fields": {
        "a": "deadBlock"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape"
      }
    },
    "net/minecraft/world/level/block/BlockCoralPlant": {
      "fields": {
        "d": "deadBlock",
        "a": "AABB_OFFSET",
        "b": "SHAPE"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/BlockCoralFanWall": {
      "fields": {
        "b": "deadBlock"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape"
      }
    },
    "net/minecraft/world/level/block/BlockWorkbench": {
      "fields": {
        "a": "CONTAINER_TITLE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockCrops": {
      "fields": {
        "c": "MAX_AGE",
        "d": "AGE",
        "a": "SHAPE_BY_AGE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a()Lnet/minecraft/world/level/block/state/properties/IntegerProperty;": "getAgeProperty",
        "b()I": "getMaxAge",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getAge",
        "b(I)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForAge",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isMaxAge",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "growCrops",
        "a(Lnet/minecraft/world/level/Level;)I": "getBonemealAgeIncrease",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getGrowthSpeed",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "c()Lnet/minecraft/world/level/ItemLike;": "getBaseSeedId",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockTall": {
      "fields": {
        "a": "NORTH",
        "b": "EAST",
        "c": "SOUTH",
        "d": "WEST",
        "e": "WATERLOGGED",
        "f": "PROPERTY_BY_DIRECTION",
        "g": "collisionShapeByIndex",
        "h": "shapeByIndex",
        "i": "stateToIndex"
      },
      "methods": {
        "a(FFFFF)[Lnet/minecraft/world/phys/shapes/VoxelShape;": "makeShapes",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/core/Direction;)I": "indexFor",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getAABBIndex",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$getAABBIndex$1",
        "a(Ljava/util/Map$Entry;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/BlockCryingObsidian": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/BlockDaylightDetector": {
      "fields": {
        "a": "POWER",
        "b": "INVERTED",
        "c": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "updateSignalStrength",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/DaylightDetectorBlockEntity;)V": "tickEntity",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockDeadBush": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn"
      }
    },
    "net/minecraft/world/level/block/DecoratedPotBlock": {
      "fields": {
        "a": "SHERDS_DYNAMIC_DROP_ID",
        "b": "BOUNDING_BOX",
        "c": "HORIZONTAL_FACING",
        "d": "CRACKED",
        "e": "WATERLOGGED"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "m(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/SoundType;": "getSoundType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/BlockGetter;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Ljava/util/List;Lnet/minecraft/world/item/Item;)V": "lambda$appendHoverText$1",
        "a(Lnet/minecraft/world/level/block/entity/DecoratedPotBlockEntity;Ljava/util/function/Consumer;)V": "lambda$getDrops$0"
      }
    },
    "net/minecraft/world/level/block/BlockMinecartDetector": {
      "fields": {
        "d": "SHAPE",
        "e": "POWERED",
        "f": "PRESSED_CHECK_PERIOD"
      },
      "methods": {
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "checkPressed",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "updatePowerToConnected",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "b()Lnet/minecraft/world/level/block/state/properties/Property;": "getShapeProperty",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/lang/Class;Ljava/util/function/Predicate;)Ljava/util/List;": "getInteractingMinecartOfType",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/AABB;": "getSearchBB",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockDiodeAbstract": {
      "fields": {
        "b": "SHAPE",
        "c": "POWERED"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "checkTickOnNeighbor",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isLocked",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldTurnOn",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "getInputSignal",
        "a(Lnet/minecraft/world/level/SignalGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "getAlternateSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "d(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateNeighborsInFront",
        "a()Z": "sideInputDiodesOnly",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "getOutputSignal",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isDiode",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldPrioritize",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getDelay"
      }
    },
    "net/minecraft/world/level/block/BlockDirectional": {
      "fields": {
        "a": "FACING"
      }
    },
    "net/minecraft/world/level/block/BlockGrassPath": {
      "fields": {
        "a": "SHAPE"
      },
      "methods": {
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockDispenser": {
      "fields": {
        "a": "FACING",
        "b": "TRIGGERED",
        "c": "DISPENSER_REGISTRY",
        "d": "TRIGGER_DURATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ItemLike;Lnet/minecraft/core/dispenser/DispenseItemBehavior;)V": "registerBehavior",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "dispenseFrom",
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/core/dispenser/DispenseItemBehavior;": "getDispenseMethod",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockDoor": {
      "fields": {
        "a": "FACING",
        "b": "OPEN",
        "c": "HINGE",
        "d": "POWERED",
        "e": "HALF",
        "f": "AABB_DOOR_THICKNESS",
        "g": "SOUTH_AABB",
        "h": "NORTH_AABB",
        "i": "WEST_AABB",
        "j": "EAST_AABB",
        "k": "type"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/properties/BlockSetType;": "type",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "b(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/properties/DoorHingeSide;": "getHinge",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isOpen",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Z)V": "setOpen",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)V": "playSound",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)J": "getSeed",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "isWoodenDoor",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isWoodenDoor"
      }
    },
    "net/minecraft/world/level/block/DoubleBlockFinder": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/entity/BlockEntityType;Ljava/util/function/Function;Ljava/util/function/Function;Lnet/minecraft/world/level/block/state/properties/DirectionProperty;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Ljava/util/function/BiPredicate;)Lnet/minecraft/world/level/block/DoubleBlockCombiner$NeighborCombineResult;": "combineWithNeigbour"
      }
    },
    "net/minecraft/world/level/block/DoubleBlockFinder$BlockType": {
      "fields": {
        "a": "SINGLE",
        "b": "FIRST",
        "c": "SECOND",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/block/DoubleBlockCombiner$BlockType;": "$values"
      }
    },
    "net/minecraft/world/level/block/DoubleBlockFinder$Combiner": {
      "methods": {
        "a(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;": "acceptDouble",
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "acceptSingle",
        "b()Ljava/lang/Object;": "acceptNone"
      }
    },
    "net/minecraft/world/level/block/DoubleBlockFinder$Result": {},
    "net/minecraft/world/level/block/DoubleBlockFinder$Result$Double": {
      "fields": {
        "a": "first",
        "b": "second"
      }
    },
    "net/minecraft/world/level/block/DoubleBlockFinder$Result$Single": {
      "fields": {
        "a": "single"
      }
    },
    "net/minecraft/world/level/block/BlockTallPlant": {
      "fields": {
        "a": "HALF"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;I)V": "placeAt",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "copyWaterloggedFrom",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/item/ItemStack;)V": "playerDestroy",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "preventCreativeDropFromBottomPart",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)J": "getSeed"
      }
    },
    "net/minecraft/world/level/block/BlockDragonEgg": {
      "fields": {
        "a": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "attack",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "teleport",
        "a()I": "getDelayAfterPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/DropExperienceBlock": {
      "fields": {
        "a": "xpRange"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak"
      }
    },
    "net/minecraft/world/level/block/BlockDropper": {
      "fields": {
        "c": "DISPENSE_BEHAVIOUR"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/core/dispenser/DispenseItemBehavior;": "getDispenseMethod",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "dispenseFrom"
      }
    },
    "net/minecraft/world/level/block/BlockEnchantmentTable": {
      "fields": {
        "a": "SHAPE",
        "b": "BOOKSHELF_OFFSETS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Z": "isValidBookShelf",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$1",
        "a(Lnet/minecraft/core/BlockPos;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/BlockEndGateway": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack"
      }
    },
    "net/minecraft/world/level/block/BlockEnderPortal": {
      "fields": {
        "a": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack"
      }
    },
    "net/minecraft/world/level/block/BlockEnderPortalFrame": {
      "fields": {
        "a": "FACING",
        "b": "HAS_EYE",
        "c": "BASE_SHAPE",
        "d": "EYE_SHAPE",
        "e": "FULL_SHAPE",
        "f": "portalShape"
      },
      "methods": {
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreatePortalShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockEndRod": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockEnderChest": {
      "fields": {
        "b": "FACING",
        "c": "WATERLOGGED",
        "d": "SHAPE",
        "e": "CONTAINER_TITLE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/level/block/DoubleBlockCombiner$NeighborCombineResult;": "combine",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/inventory/PlayerEnderChestContainer;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$use$1",
        "g()Lnet/minecraft/world/level/block/entity/BlockEntityType;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/block/ITileEntity": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/block/entity/BlockEntity;)Lnet/minecraft/world/level/gameevent/GameEventListener;": "getListener"
      }
    },
    "net/minecraft/world/level/block/EquipableCarvedPumpkinBlock": {
      "methods": {
        "g()Lnet/minecraft/world/entity/EquipmentSlot;": "getEquipmentSlot"
      }
    },
    "net/minecraft/world/level/block/BlockAttachable": {
      "fields": {
        "I": "FACE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canAttach",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getConnectedDirection"
      }
    },
    "net/minecraft/world/level/block/Fallable": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onLand",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onBrokenAfterFall",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "getFallDamageSource"
      }
    },
    "net/minecraft/world/level/block/BlockFalling": {
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "falling",
        "a()I": "getDelayAfterPlace",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFree",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getDustColor"
      }
    },
    "net/minecraft/world/level/block/BlockSoil": {
      "fields": {
        "a": "MOISTURE",
        "b": "SHAPE",
        "c": "MAX_MOISTURE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "turnToDirt",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "shouldMaintainFarmland",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isNearWater",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockFence": {
      "fields": {
        "i": "occlusionByIndex"
      },
      "methods": {
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;ZLnet/minecraft/core/Direction;)Z": "connectsTo",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSameFence",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockFenceGate": {
      "fields": {
        "a": "OPEN",
        "b": "POWERED",
        "c": "IN_WALL",
        "d": "Z_SHAPE",
        "e": "X_SHAPE",
        "f": "Z_SHAPE_LOW",
        "g": "X_SHAPE_LOW",
        "h": "Z_COLLISION_SHAPE",
        "i": "X_COLLISION_SHAPE",
        "j": "Z_SUPPORT_SHAPE",
        "k": "X_SUPPORT_SHAPE",
        "l": "Z_OCCLUSION_SHAPE",
        "m": "X_OCCLUSION_SHAPE",
        "n": "Z_OCCLUSION_SHAPE_LOW",
        "D": "X_OCCLUSION_SHAPE_LOW",
        "E": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isWall",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "connectsToDirection"
      }
    },
    "net/minecraft/world/level/block/BlockFire": {
      "fields": {
        "c": "MAX_AGE",
        "d": "AGE",
        "e": "NORTH",
        "f": "EAST",
        "g": "SOUTH",
        "h": "WEST",
        "i": "UP",
        "j": "PROPERTY_BY_DIRECTION",
        "k": "UP_AABB",
        "l": "WEST_AABB",
        "m": "EAST_AABB",
        "n": "NORTH_AABB",
        "D": "SOUTH_AABB",
        "E": "shapesCache",
        "F": "IGNITE_INSTANT",
        "G": "IGNITE_EASY",
        "H": "IGNITE_MEDIUM",
        "I": "IGNITE_HARD",
        "J": "BURN_INSTANT",
        "K": "BURN_EASY",
        "L": "BURN_MEDIUM",
        "M": "BURN_HARD",
        "N": "igniteOdds",
        "O": "burnOdds"
      },
      "methods": {
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "isNearRain",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)I": "getBurnOdds",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)I": "getIgniteOdds",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/util/RandomSource;I)V": "checkBurnOut",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;I)Lnet/minecraft/world/level/block/state/BlockState;": "getStateWithAge",
        "d(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isValidFireLocation",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)I": "getIgniteOdds",
        "f(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canBurn",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/util/RandomSource;)I": "getFireTickDelay",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/Block;II)V": "setFlammable",
        "a()V": "bootStrap"
      }
    },
    "net/minecraft/world/level/block/BlockFletchingTable": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use"
      }
    },
    "net/minecraft/world/level/block/BlockFlowers": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE",
        "d": "effectDuration"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b()I": "getEffectDuration"
      }
    },
    "net/minecraft/world/level/block/BlockFlowerPot": {
      "fields": {
        "c": "POTTED_BY_CONTENT",
        "a": "AABB_SIZE",
        "b": "SHAPE",
        "d": "content"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "g()Z": "isEmpty",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a()Lnet/minecraft/world/level/block/Block;": "getContent",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/FrogspawnBlock": {
      "fields": {
        "b": "MIN_TADPOLES_SPAWN",
        "c": "MAX_TADPOLES_SPAWN",
        "d": "DEFAULT_MIN_HATCH_TICK_DELAY",
        "e": "DEFAULT_MAX_HATCH_TICK_DELAY",
        "a": "SHAPE",
        "f": "minHatchTickDelay",
        "g": "maxHatchTickDelay"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/util/RandomSource;)I": "getFrogspawnHatchDelay",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "hatchFrogspawn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "destroyBlock",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "spawnTadpoles",
        "b(Lnet/minecraft/util/RandomSource;)D": "getRandomTadpolePositionOffset",
        "a(II)V": "setHatchDelay",
        "a()V": "setDefaultHatchDelay"
      }
    },
    "net/minecraft/world/level/block/BlockIceFrost": {
      "fields": {
        "a": "MAX_AGE",
        "b": "AGE",
        "c": "NEIGHBORS_TO_AGE",
        "d": "NEIGHBORS_TO_MELT"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "slightlyMelt",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;I)Z": "fewerNeigboursThan",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack"
      }
    },
    "net/minecraft/world/level/block/BlockFungi": {
      "fields": {
        "a": "SHAPE",
        "b": "BONEMEAL_SUCCESS_PROBABILITY",
        "c": "requiredBlock",
        "d": "feature"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/LevelReader;)Ljava/util/Optional;": "getFeature",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockFurnaceFurace": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "openContainer",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/GameMasterBlock": {},
    "net/minecraft/world/level/block/BlockGlass": {},
    "net/minecraft/world/level/block/BlockGlazedTerracotta": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/GlowLichenBlock": {
      "fields": {
        "b": "WATERLOGGED",
        "c": "spreader"
      },
      "methods": {
        "b(I)Ljava/util/function/ToIntFunction;": "emission",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "b()Lnet/minecraft/world/level/block/MultifaceSpreader;": "getSpreader",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "lambda$isValidBonemealTarget$1",
        "a(ILnet/minecraft/world/level/block/state/BlockState;)I": "lambda$emission$0"
      }
    },
    "net/minecraft/world/level/block/BlockGrass": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockGravel": {
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getDustColor"
      }
    },
    "net/minecraft/world/level/block/BlockGrindstone": {
      "fields": {
        "a": "FLOOR_NORTH_SOUTH_LEFT_POST",
        "b": "FLOOR_NORTH_SOUTH_RIGHT_POST",
        "c": "FLOOR_NORTH_SOUTH_LEFT_PIVOT",
        "d": "FLOOR_NORTH_SOUTH_RIGHT_PIVOT",
        "e": "FLOOR_NORTH_SOUTH_LEFT_LEG",
        "f": "FLOOR_NORTH_SOUTH_RIGHT_LEG",
        "g": "FLOOR_NORTH_SOUTH_ALL_LEGS",
        "h": "FLOOR_NORTH_SOUTH_GRINDSTONE",
        "i": "FLOOR_EAST_WEST_LEFT_POST",
        "j": "FLOOR_EAST_WEST_RIGHT_POST",
        "k": "FLOOR_EAST_WEST_LEFT_PIVOT",
        "l": "FLOOR_EAST_WEST_RIGHT_PIVOT",
        "m": "FLOOR_EAST_WEST_LEFT_LEG",
        "n": "FLOOR_EAST_WEST_RIGHT_LEG",
        "D": "FLOOR_EAST_WEST_ALL_LEGS",
        "E": "FLOOR_EAST_WEST_GRINDSTONE",
        "F": "WALL_SOUTH_LEFT_POST",
        "G": "WALL_SOUTH_RIGHT_POST",
        "H": "WALL_SOUTH_LEFT_PIVOT",
        "J": "WALL_SOUTH_RIGHT_PIVOT",
        "K": "WALL_SOUTH_LEFT_LEG",
        "L": "WALL_SOUTH_RIGHT_LEG",
        "M": "WALL_SOUTH_ALL_LEGS",
        "N": "WALL_SOUTH_GRINDSTONE",
        "O": "WALL_NORTH_LEFT_POST",
        "P": "WALL_NORTH_RIGHT_POST",
        "Q": "WALL_NORTH_LEFT_PIVOT",
        "R": "WALL_NORTH_RIGHT_PIVOT",
        "S": "WALL_NORTH_LEFT_LEG",
        "T": "WALL_NORTH_RIGHT_LEG",
        "U": "WALL_NORTH_ALL_LEGS",
        "V": "WALL_NORTH_GRINDSTONE",
        "W": "WALL_WEST_LEFT_POST",
        "X": "WALL_WEST_RIGHT_POST",
        "Y": "WALL_WEST_LEFT_PIVOT",
        "Z": "WALL_WEST_RIGHT_PIVOT",
        "aa": "WALL_WEST_LEFT_LEG",
        "ab": "WALL_WEST_RIGHT_LEG",
        "ac": "WALL_WEST_ALL_LEGS",
        "ad": "WALL_WEST_GRINDSTONE",
        "ae": "WALL_EAST_LEFT_POST",
        "af": "WALL_EAST_RIGHT_POST",
        "ag": "WALL_EAST_LEFT_PIVOT",
        "ah": "WALL_EAST_RIGHT_PIVOT",
        "ai": "WALL_EAST_LEFT_LEG",
        "aj": "WALL_EAST_RIGHT_LEG",
        "ak": "WALL_EAST_ALL_LEGS",
        "al": "WALL_EAST_GRINDSTONE",
        "am": "CEILING_NORTH_SOUTH_LEFT_POST",
        "an": "CEILING_NORTH_SOUTH_RIGHT_POST",
        "ao": "CEILING_NORTH_SOUTH_LEFT_PIVOT",
        "ap": "CEILING_NORTH_SOUTH_RIGHT_PIVOT",
        "aq": "CEILING_NORTH_SOUTH_LEFT_LEG",
        "ar": "CEILING_NORTH_SOUTH_RIGHT_LEG",
        "as": "CEILING_NORTH_SOUTH_ALL_LEGS",
        "at": "CEILING_NORTH_SOUTH_GRINDSTONE",
        "au": "CEILING_EAST_WEST_LEFT_POST",
        "av": "CEILING_EAST_WEST_RIGHT_POST",
        "aw": "CEILING_EAST_WEST_LEFT_PIVOT",
        "ax": "CEILING_EAST_WEST_RIGHT_PIVOT",
        "ay": "CEILING_EAST_WEST_LEFT_LEG",
        "az": "CEILING_EAST_WEST_RIGHT_LEG",
        "aA": "CEILING_EAST_WEST_ALL_LEGS",
        "aB": "CEILING_EAST_WEST_GRINDSTONE",
        "aP": "CONTAINER_TITLE"
      },
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVoxelShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockGrowingAbstract": {
      "fields": {
        "a": "growthDirection",
        "b": "scheduleFluidTicks",
        "c": "shape"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/LevelAccessor;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canAttachTo",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b()Lnet/minecraft/world/level/block/GrowingPlantHeadBlock;": "getHeadBlock",
        "a()Lnet/minecraft/world/level/block/Block;": "getBodyBlock"
      }
    },
    "net/minecraft/world/level/block/BlockGrowingStem": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "updateHeadAfterConvertedFromBody",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)Ljava/util/Optional;": "getHeadPos",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a()Lnet/minecraft/world/level/block/Block;": "getBodyBlock"
      }
    },
    "net/minecraft/world/level/block/BlockGrowingTop": {
      "fields": {
        "d": "AGE",
        "e": "MAX_AGE",
        "f": "growPerTickProbability"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "getGrowIntoState",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getMaxAgeState",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isMaxAge",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "updateBodyAfterConvertedFromHead",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/util/RandomSource;)I": "getBlocksToGrowWhenBonemealed",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canGrowInto",
        "b()Lnet/minecraft/world/level/block/GrowingPlantHeadBlock;": "getHeadBlock"
      }
    },
    "net/minecraft/world/level/block/BlockHalfTransparent": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering"
      }
    },
    "net/minecraft/world/level/block/HangingRootsBlock": {
      "fields": {
        "b": "WATERLOGGED",
        "a": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape"
      }
    },
    "net/minecraft/world/level/block/BlockHay": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn"
      }
    },
    "net/minecraft/world/level/block/BlockHoney": {
      "fields": {
        "b": "SLIDE_STARTS_WHEN_VERTICAL_SPEED_IS_AT_LEAST",
        "c": "MIN_FALL_SPEED_TO_BE_CONSIDERED_SLIDING",
        "d": "THROTTLE_SLIDE_SPEED_TO",
        "e": "SLIDE_ADVANCEMENT_CHECK_INTERVAL",
        "a": "SHAPE"
      },
      "methods": {
        "c(Lnet/minecraft/world/entity/Entity;)Z": "doesEntityDoHoneyBlockSlideEffects",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)Z": "isSlidingDown",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/BlockPos;)V": "maybeDoSlideAchievement",
        "d(Lnet/minecraft/world/entity/Entity;)V": "doSlideMovement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;)V": "maybeDoSlideEffects",
        "a(Lnet/minecraft/world/entity/Entity;)V": "showSlideParticles",
        "b(Lnet/minecraft/world/entity/Entity;)V": "showJumpParticles",
        "a(Lnet/minecraft/world/entity/Entity;I)V": "showParticles"
      }
    },
    "net/minecraft/world/level/block/BlockHopper": {
      "fields": {
        "a": "FACING",
        "b": "ENABLED",
        "c": "TOP",
        "d": "FUNNEL",
        "e": "CONVEX_BASE",
        "f": "BASE",
        "g": "DOWN_SHAPE",
        "h": "EAST_SHAPE",
        "i": "NORTH_SHAPE",
        "j": "SOUTH_SHAPE",
        "k": "WEST_SHAPE",
        "l": "DOWN_INTERACTION_SHAPE",
        "m": "EAST_INTERACTION_SHAPE",
        "n": "NORTH_INTERACTION_SHAPE",
        "D": "SOUTH_INTERACTION_SHAPE",
        "E": "WEST_INTERACTION_SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getInteractionShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;I)V": "checkPoweredState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockFacingHorizontal": {
      "fields": {
        "aC": "FACING"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror"
      }
    },
    "net/minecraft/world/level/block/BlockHugeMushroom": {
      "fields": {
        "a": "NORTH",
        "b": "EAST",
        "c": "SOUTH",
        "d": "WEST",
        "e": "UP",
        "f": "DOWN",
        "g": "PROPERTY_BY_DIRECTION"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockIce": {
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "meltsInto",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/item/ItemStack;)V": "playerDestroy",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "melt"
      }
    },
    "net/minecraft/world/level/block/BlockMonsterEggs": {
      "fields": {
        "a": "hostBlock",
        "b": "BLOCK_BY_HOST_BLOCK",
        "c": "HOST_TO_INFESTED_STATES",
        "d": "INFESTED_TO_HOST_STATES"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/Block;": "getHostBlock",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCompatibleHostBlock",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "spawnInfestation",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "infestedStateByHost",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "hostStateByInfested",
        "a(Ljava/util/Map;Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/function/Supplier;)Lnet/minecraft/world/level/block/state/BlockState;": "getNewStateWithProperties"
      }
    },
    "net/minecraft/world/level/block/InfestedRotatedPillarBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/BlockIronBars": {
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "attachsTo",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockJigsaw": {
      "fields": {
        "a": "ORIENTATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;)Z": "canAttach",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getFrontFacing",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getTopFacing",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;": "lambda$canAttach$0"
      }
    },
    "net/minecraft/world/level/block/BlockJukeBox": {
      "fields": {
        "a": "HAS_RECORD"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker"
      }
    },
    "net/minecraft/world/level/block/BlockKelp": {
      "fields": {
        "f": "SHAPE",
        "g": "GROW_PER_TICK_PROBABILITY"
      },
      "methods": {
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canGrowInto",
        "a()Lnet/minecraft/world/level/block/Block;": "getBodyBlock",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canAttachTo",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid",
        "a(Lnet/minecraft/util/RandomSource;)I": "getBlocksToGrowWhenBonemealed",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState"
      }
    },
    "net/minecraft/world/level/block/BlockKelpPlant": {
      "methods": {
        "b()Lnet/minecraft/world/level/block/GrowingPlantHeadBlock;": "getHeadBlock",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canAttachTo",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid"
      }
    },
    "net/minecraft/world/level/block/BlockLadder": {
      "fields": {
        "a": "FACING",
        "b": "WATERLOGGED",
        "c": "AABB_OFFSET",
        "d": "EAST_AABB",
        "e": "WEST_AABB",
        "f": "SOUTH_AABB",
        "g": "NORTH_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canAttachTo",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState"
      }
    },
    "net/minecraft/world/level/block/BlockLantern": {
      "fields": {
        "a": "HANGING",
        "b": "WATERLOGGED",
        "c": "AABB",
        "d": "HANGING_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/core/Direction;": "getConnectedDirection",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/LavaCauldronBlock": {
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;)D": "getContentHeight",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFull",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal"
      }
    },
    "net/minecraft/world/level/block/LayeredCauldronBlock": {
      "fields": {
        "c": "MIN_FILL_LEVEL",
        "d": "MAX_FILL_LEVEL",
        "e": "LEVEL",
        "h": "BASE_CONTENT_HEIGHT",
        "i": "HEIGHT_PER_LEVEL",
        "f": "RAIN",
        "g": "SNOW",
        "j": "fillPredicate"
      },
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFull",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)D": "getContentHeight",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "handleEntityOnFireInside",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "lowerFillLevel",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/biome/Biome$Precipitation;)V": "handlePrecipitation",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockLeaves": {
      "fields": {
        "a": "DECAY_DISTANCE",
        "b": "DISTANCE",
        "c": "PERSISTENT",
        "d": "WATERLOGGED",
        "e": "TICK_DELAY"
      },
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "decaying",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "g(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getLightBlock",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateDistance",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)I": "getDistanceAt",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/OptionalInt;": "getOptionalDistanceAt",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/BlockLectern": {
      "fields": {
        "a": "FACING",
        "b": "POWERED",
        "c": "HAS_BOOK",
        "d": "SHAPE_BASE",
        "e": "SHAPE_POST",
        "f": "SHAPE_COMMON",
        "g": "SHAPE_TOP_PLATE",
        "h": "SHAPE_COLLISION",
        "i": "SHAPE_WEST",
        "j": "SHAPE_NORTH",
        "k": "SHAPE_EAST",
        "l": "SHAPE_SOUTH",
        "m": "PAGE_CHANGE_IMPULSE_TICKS"
      },
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/ItemStack;)Z": "tryPlaceBook",
        "b(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/ItemStack;)V": "placeBook",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "resetBookState",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "signalPageChange",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "changePowered",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateBelow",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "popBook",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "openScreen",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockLever": {
      "fields": {
        "a": "POWERED",
        "b": "DEPTH",
        "c": "WIDTH",
        "d": "HEIGHT",
        "e": "NORTH_AABB",
        "f": "SOUTH_AABB",
        "g": "WEST_AABB",
        "h": "EAST_AABB",
        "i": "UP_AABB_Z",
        "j": "UP_AABB_X",
        "k": "DOWN_AABB_Z",
        "l": "DOWN_AABB_X"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "pull",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;F)V": "makeParticle",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "updateNeighbours",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/LightBlock": {
      "fields": {
        "a": "MAX_LEVEL",
        "b": "LEVEL",
        "c": "WATERLOGGED",
        "d": "LIGHT_EMISSION"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/item/ItemStack;I)Lnet/minecraft/world/item/ItemStack;": "setLightOnStack",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)I": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/LightningRodBlock": {
      "fields": {
        "b": "WATERLOGGED",
        "c": "POWERED",
        "j": "ACTIVATION_TICKS",
        "d": "RANGE",
        "k": "SPARK_CYCLE"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "onLightningStrike",
        "e(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "updateNeighbours",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource"
      }
    },
    "net/minecraft/world/level/block/BlockFluids": {
      "fields": {
        "a": "LEVEL",
        "b": "fluid",
        "e": "stateCache",
        "c": "STABLE_SHAPE",
        "d": "POSSIBLE_FLOW_DIRECTIONS"
      },
      "methods": {
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldSpreadLiquid",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "fizz",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "pickupBlock",
        "am_()Ljava/util/Optional;": "getPickupSound"
      }
    },
    "net/minecraft/world/level/block/IFluidContainer": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid"
      }
    },
    "net/minecraft/world/level/block/BlockLoom": {
      "fields": {
        "a": "CONTAINER_TITLE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockMagma": {
      "fields": {
        "a": "BUBBLE_COLUMN_CHECK_DELAY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace"
      }
    },
    "net/minecraft/world/level/block/MangroveLeavesBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/MangrovePropaguleBlock": {
      "fields": {
        "a": "AGE",
        "b": "MAX_AGE",
        "g": "SHAPE_PER_AGE",
        "h": "WATERLOGGED",
        "c": "HANGING",
        "i": "GROW_TALL_MANGROVE_PROBABILITY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isHanging",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFullyGrown",
        "b()Lnet/minecraft/world/level/block/state/BlockState;": "createNewHangingPropagule",
        "b(I)Lnet/minecraft/world/level/block/state/BlockState;": "createNewHangingPropagule"
      }
    },
    "net/minecraft/world/level/block/MangroveRootsBlock": {
      "fields": {
        "a": "WATERLOGGED"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockMelon": {
      "methods": {
        "a()Lnet/minecraft/world/level/block/StemBlock;": "getStem",
        "b()Lnet/minecraft/world/level/block/AttachedStemBlock;": "getAttachedStem"
      }
    },
    "net/minecraft/world/level/block/EnumBlockMirror": {
      "fields": {
        "a": "NONE",
        "b": "LEFT_RIGHT",
        "c": "FRONT_BACK",
        "d": "CODEC",
        "e": "id",
        "f": "symbol",
        "g": "rotation",
        "h": "$VALUES"
      },
      "methods": {
        "a(II)I": "mirror",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "b(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "mirror",
        "a()Lcom/mojang/math/OctahedralGroup;": "rotation",
        "b()Lnet/minecraft/network/chat/Component;": "symbol",
        "c()Ljava/lang/String;": "getSerializedName",
        "d()[Lnet/minecraft/world/level/block/Mirror;": "$values"
      }
    },
    "net/minecraft/world/level/block/MossBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder$Reference;)V": "lambda$performBonemeal$1"
      }
    },
    "net/minecraft/world/level/block/MudBlock": {
      "fields": {
        "a": "SHAPE"
      },
      "methods": {
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness"
      }
    },
    "net/minecraft/world/level/block/MultifaceBlock": {
      "fields": {
        "b": "AABB_OFFSET",
        "c": "UP_AABB",
        "d": "DOWN_AABB",
        "e": "WEST_AABB",
        "f": "EAST_AABB",
        "g": "NORTH_AABB",
        "h": "SOUTH_AABB",
        "i": "PROPERTY_BY_DIRECTION",
        "j": "SHAPE_BY_DIRECTION",
        "a": "DIRECTIONS",
        "k": "shapesCache",
        "l": "canRotate",
        "m": "canMirrorX",
        "n": "canMirrorZ"
      },
      "methods": {
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Set;": "availableFaces",
        "a(B)Ljava/util/Set;": "unpack",
        "a(Ljava/util/Collection;)B": "pack",
        "a(Lnet/minecraft/core/Direction;)Z": "isFaceSupported",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isValidStateForPlacement",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/function/Function;)Lnet/minecraft/world/level/block/state/BlockState;": "mapDirections",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "hasFace",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canAttachTo",
        "g()Z": "isWaterloggable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/BooleanProperty;)Lnet/minecraft/world/level/block/state/BlockState;": "removeFace",
        "b(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/properties/BooleanProperty;": "getFaceProperty",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition;)Lnet/minecraft/world/level/block/state/BlockState;": "getDefaultMultifaceState",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateMultifaceShape",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnyFace",
        "p(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnyVacantFace",
        "b()Lnet/minecraft/world/level/block/MultifaceSpreader;": "getSpreader",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "lambda$hasAnyVacantFace$3",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "lambda$hasAnyFace$2",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$getStateForPlacement$1",
        "a(Ljava/util/EnumMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/MultifaceSpreader": {
      "fields": {
        "a": "DEFAULT_SPREAD_ORDER",
        "b": "config"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canSpreadInAnyDirection",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "spreadFromRandomFaceTowardRandomDirection",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Z)J": "spreadAll",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/util/RandomSource;Z)Ljava/util/Optional;": "spreadFromFaceTowardRandomDirection",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Z)J": "spreadFromFaceTowardAllDirections",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Z)Ljava/util/Optional;": "spreadFromFaceTowardDirection",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/MultifaceSpreader$SpreadPredicate;)Ljava/util/Optional;": "getSpreadFromFaceTowardDirection",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/MultifaceSpreader$SpreadPos;Z)Ljava/util/Optional;": "spreadToFace"
      }
    },
    "net/minecraft/world/level/block/BlockMushroom": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE",
        "c": "feature"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "growMushroom",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockMycel": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/BlockPortal": {
      "fields": {
        "a": "AXIS",
        "b": "AABB_OFFSET",
        "c": "X_AXIS_AABB",
        "d": "Z_AXIS_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockNetherSprouts": {
      "fields": {
        "a": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn"
      }
    },
    "net/minecraft/world/level/block/BlockNetherVinesUtil": {
      "fields": {
        "b": "BONEMEAL_GROW_PROBABILITY_DECREASE_RATE",
        "a": "GROW_PER_TICK_PROBABILITY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isValidGrowthState",
        "a(Lnet/minecraft/util/RandomSource;)I": "getBlocksToGrowWhenBonemealed"
      }
    },
    "net/minecraft/world/level/block/BlockNetherWart": {
      "fields": {
        "a": "MAX_AGE",
        "b": "AGE",
        "c": "SHAPE_BY_AGE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockNetherrack": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockNote": {
      "fields": {
        "a": "INSTRUMENT",
        "b": "POWERED",
        "c": "NOTE",
        "d": "NOTE_VOLUME"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "setInstrument",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "playNote",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "attack",
        "b(I)F": "getPitchFromNote",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;II)Z": "triggerEvent",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/resources/ResourceLocation;": "getCustomSoundId",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockNylium": {
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canBeNylium",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockObserver": {
      "fields": {
        "b": "POWERED"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "startSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateNeighborsInFront",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/PiglinWallSkullBlock": {
      "fields": {
        "b": "AABBS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/PinkPetalsBlock": {
      "fields": {
        "a": "MIN_FLOWERS",
        "b": "MAX_FLOWERS",
        "c": "FACING",
        "d": "AMOUNT"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockSprawling": {
      "fields": {
        "i": "DIRECTIONS",
        "a": "NORTH",
        "b": "EAST",
        "c": "SOUTH",
        "d": "WEST",
        "e": "UP",
        "f": "DOWN",
        "g": "PROPERTY_BY_DIRECTION",
        "h": "shapeByIndex"
      },
      "methods": {
        "a(F)[Lnet/minecraft/world/phys/shapes/VoxelShape;": "makeShapes",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)I": "getAABBIndex",
        "a(Ljava/util/EnumMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/PitcherCropBlock": {
      "fields": {
        "b": "AGE",
        "c": "MAX_AGE",
        "d": "DOUBLE_PLANT_AGE_INTERSECTION",
        "e": "BONEMEAL_INCREASE",
        "f": "FULL_UPPER_SHAPE",
        "g": "FULL_LOWER_SHAPE",
        "h": "COLLISION_SHAPE_BULB",
        "i": "COLLISION_SHAPE_CROP",
        "j": "UPPER_SHAPE_BY_AGE",
        "k": "LOWER_SHAPE_BY_AGE"
      },
      "methods": {
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isMaxAge",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;I)V": "grow",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canGrowInto",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "sufficientLight",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isLower",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isUpper",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;I)Z": "canGrow",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/PitcherCropBlock$PosAndState;": "getLowerHalf",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockSkullPlayer": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy"
      }
    },
    "net/minecraft/world/level/block/BlockSkullPlayerWall": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops"
      }
    },
    "net/minecraft/world/level/block/PointedDripstoneBlock": {
      "fields": {
        "a": "TIP_DIRECTION",
        "b": "THICKNESS",
        "c": "WATERLOGGED",
        "d": "MAX_SEARCH_LENGTH_WHEN_CHECKING_DRIP_TYPE",
        "e": "DELAY_BEFORE_FALLING",
        "f": "DRIP_PROBABILITY_PER_ANIMATE_TICK",
        "g": "DRIP_PROBABILITY_PER_ANIMATE_TICK_IF_UNDER_LIQUID_SOURCE",
        "h": "MAX_SEARCH_LENGTH_BETWEEN_STALACTITE_TIP_AND_CAULDRON",
        "i": "WATER_TRANSFER_PROBABILITY_PER_RANDOM_TICK",
        "j": "LAVA_TRANSFER_PROBABILITY_PER_RANDOM_TICK",
        "k": "MIN_TRIDENT_VELOCITY_TO_BREAK_DRIPSTONE",
        "l": "STALACTITE_DAMAGE_PER_FALL_DISTANCE_AND_SIZE",
        "m": "STALACTITE_MAX_DAMAGE",
        "n": "MAX_STALACTITE_HEIGHT_FOR_DAMAGE_CALCULATION",
        "D": "STALAGMITE_FALL_DISTANCE_OFFSET",
        "E": "STALAGMITE_FALL_DAMAGE_MODIFIER",
        "F": "AVERAGE_DAYS_PER_GROWTH",
        "G": "GROWTH_PROBABILITY_PER_RANDOM_TICK",
        "H": "MAX_GROWTH_LENGTH",
        "I": "MAX_STALAGMITE_SEARCH_RANGE_WHEN_GROWING",
        "J": "STALACTITE_DRIP_START_PIXEL",
        "K": "TIP_MERGE_SHAPE",
        "L": "TIP_SHAPE_UP",
        "M": "TIP_SHAPE_DOWN",
        "N": "FRUSTUM_SHAPE",
        "O": "MIDDLE_SHAPE",
        "P": "BASE_SHAPE",
        "Q": "MAX_HORIZONTAL_OFFSET",
        "R": "REQUIRED_SPACE_TO_DRIP_THROUGH_NON_SOLID_BLOCK"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;F)V": "maybeTransferFluid",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isCollisionShapeFullBlock",
        "al_()F": "getMaxHorizontalOffset",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/item/FallingBlockEntity;)V": "onBrokenAfterFall",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;": "getFallDamageSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "spawnFallingStalactite",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "growStalactiteOrStalagmiteIfPossible",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "growStalagmiteBelow",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)V": "grow",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/properties/DripstoneThickness;)V": "createDripstone",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "createMergedTips",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "spawnDripParticle",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;IZ)Lnet/minecraft/core/BlockPos;": "findTip",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "calculateTipDirection",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Z)Lnet/minecraft/world/level/block/state/properties/DripstoneThickness;": "calculateDripstoneThickness",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canDrip",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Z": "canTipGrow",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;I)Ljava/util/Optional;": "findRootBlock",
        "c(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isValidPointedDripstonePlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isTip",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "isUnmergedTipWithDirection",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isStalactite",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isStalagmite",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isStalactiteStartPos",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "isPointedDripstoneWithDirection",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "findStalactiteTipAboveCauldron",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "getFluidAboveStalactite",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canGrow",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction$AxisDirection;Ljava/util/function/BiPredicate;Ljava/util/function/Predicate;I)Ljava/util/Optional;": "findBlockVertical",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canDripThrough"
      }
    },
    "net/minecraft/world/level/block/BlockPotatoes": {
      "fields": {
        "a": "SHAPE_BY_AGE"
      },
      "methods": {
        "c()Lnet/minecraft/world/level/ItemLike;": "getBaseSeedId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/PowderSnowBlock": {
      "fields": {
        "a": "HORIZONTAL_PARTICLE_MOMENTUM_FACTOR",
        "b": "IN_BLOCK_HORIZONTAL_SPEED_MULTIPLIER",
        "c": "IN_BLOCK_VERTICAL_SPEED_MULTIPLIER",
        "d": "NUM_BLOCKS_TO_FALL_INTO_BLOCK",
        "e": "FALLING_COLLISION_SHAPE",
        "f": "MINIMUM_FALL_DISTANCE_FOR_SOUND",
        "g": "MINIMUM_FALL_DISTANCE_FOR_BIG_SOUND"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canEntityWalkOnPowderSnow",
        "c(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "pickupBlock",
        "am_()Ljava/util/Optional;": "getPickupSound",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/PowderSnowCauldronBlock": {
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "handleEntityOnFireInside"
      }
    },
    "net/minecraft/world/level/block/BlockPowered": {
      "methods": {
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal"
      }
    },
    "net/minecraft/world/level/block/BlockPoweredRail": {
      "fields": {
        "d": "SHAPE",
        "e": "POWERED"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;ZI)Z": "findPoweredRailSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ZILnet/minecraft/world/level/block/state/properties/RailShape;)Z": "isSameRailWithPower",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "updateState",
        "b()Lnet/minecraft/world/level/block/state/properties/Property;": "getShapeProperty",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockPressurePlateBinary": {
      "fields": {
        "d": "POWERED",
        "e": "sensitivity"
      },
      "methods": {
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getSignalForState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;I)Lnet/minecraft/world/level/block/state/BlockState;": "setSignalForState",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getSignalStrength",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockPressurePlateBinary$EnumMobType": {
      "fields": {
        "a": "EVERYTHING",
        "b": "MOBS",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/block/BlockPumpkin": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a()Lnet/minecraft/world/level/block/StemBlock;": "getStem",
        "b()Lnet/minecraft/world/level/block/AttachedStemBlock;": "getAttachedStem",
        "a(Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/entity/player/Player;)V": "lambda$use$0"
      }
    },
    "net/minecraft/world/level/block/BlockMinecartTrack": {
      "fields": {
        "d": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "updateState",
        "b()Lnet/minecraft/world/level/block/state/properties/Property;": "getShapeProperty",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/MinecartTrackLogic": {
      "fields": {
        "a": "level",
        "b": "pos",
        "c": "block",
        "d": "state",
        "e": "isStraight",
        "f": "connections"
      },
      "methods": {
        "a()Ljava/util/List;": "getConnections",
        "a(Lnet/minecraft/world/level/block/state/properties/RailShape;)V": "updateConnections",
        "d()V": "removeSoftConnections",
        "a(Lnet/minecraft/core/BlockPos;)Z": "hasRail",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/RailState;": "getRail",
        "a(Lnet/minecraft/world/level/block/RailState;)Z": "connectsTo",
        "c(Lnet/minecraft/core/BlockPos;)Z": "hasConnection",
        "b()I": "countPotentialConnections",
        "b(Lnet/minecraft/world/level/block/RailState;)Z": "canConnectTo",
        "c(Lnet/minecraft/world/level/block/RailState;)V": "connectTo",
        "d(Lnet/minecraft/core/BlockPos;)Z": "hasNeighborRail",
        "a(ZZLnet/minecraft/world/level/block/state/properties/RailShape;)Lnet/minecraft/world/level/block/RailState;": "place",
        "c()Lnet/minecraft/world/level/block/state/BlockState;": "getState"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneOre": {
      "fields": {
        "a": "LIT"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "attack",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "interact",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "spawnParticles",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneWire": {
      "fields": {
        "a": "NORTH",
        "b": "EAST",
        "c": "SOUTH",
        "d": "WEST",
        "e": "POWER",
        "f": "PROPERTY_BY_DIRECTION",
        "g": "H",
        "h": "W",
        "i": "E",
        "j": "N",
        "k": "S",
        "l": "SHAPE_DOT",
        "m": "SHAPES_FLOOR",
        "n": "SHAPES_UP",
        "D": "SHAPES_CACHE",
        "E": "COLORS",
        "F": "PARTICLE_DENSITY",
        "G": "crossState",
        "H": "shouldSignal"
      },
      "methods": {
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getConnectionState",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getMissingConnections",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isCross",
        "p(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isDot",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;II)V": "updateIndirectNeighbourShapes",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/properties/RedstoneSide;": "getConnectingSide",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Z)Lnet/minecraft/world/level/block/state/properties/RedstoneSide;": "getConnectingSide",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canSurviveOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updatePowerStrength",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "calculateTargetStrength",
        "q(Lnet/minecraft/world/level/block/state/BlockState;)I": "getWireSignal",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "checkCornerChangeAt",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "updateNeighborsOfNeighboringWires",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "shouldConnectTo",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "shouldConnectTo",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "b(I)I": "getColorForPower",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;FF)V": "spawnParticlesAlongLine",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)V": "updatesOnShapeChange"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneLamp": {
      "fields": {
        "a": "LIT"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneTorch": {
      "fields": {
        "a": "LIT",
        "e": "RECENT_TOGGLES",
        "b": "RECENT_TOGGLE_TIMER",
        "c": "MAX_RECENT_TOGGLES",
        "d": "RESTART_DELAY",
        "f": "TOGGLE_DELAY"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasNeighborSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Z": "isToggledTooFrequently",
        "a(Lnet/minecraft/world/level/BlockGetter;)Ljava/util/List;": "lambda$isToggledTooFrequently$0"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneTorch$RedstoneUpdateInfo": {
      "fields": {
        "a": "pos",
        "b": "when"
      }
    },
    "net/minecraft/world/level/block/BlockRedstoneTorchWall": {
      "fields": {
        "e": "FACING",
        "f": "LIT"
      },
      "methods": {
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasNeighborSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/EnumRenderType": {
      "fields": {
        "a": "INVISIBLE",
        "b": "ENTITYBLOCK_ANIMATED",
        "c": "MODEL",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/block/RenderShape;": "$values"
      }
    },
    "net/minecraft/world/level/block/BlockRepeater": {
      "fields": {
        "a": "LOCKED",
        "d": "DELAY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getDelay",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isLocked",
        "a()Z": "sideInputDiodesOnly",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockRespawnAnchor": {
      "fields": {
        "a": "MIN_CHARGES",
        "b": "MAX_CHARGES",
        "c": "CHARGE",
        "d": "RESPAWN_HORIZONTAL_OFFSETS",
        "e": "RESPAWN_OFFSETS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/item/ItemStack;)Z": "isRespawnFuel",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canBeCharged",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;)Z": "isWaterThatWouldFlow",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "explode",
        "a(Lnet/minecraft/world/level/Level;)Z": "canSetSpawn",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "charge",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;I)I": "getScaledChargeLevel",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;)Ljava/util/Optional;": "findStandUpPosition",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/CollisionGetter;Lnet/minecraft/core/BlockPos;Z)Ljava/util/Optional;": "findStandUpPosition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/RodBlock": {
      "fields": {
        "e": "AABB_MIN",
        "f": "AABB_MAX",
        "g": "Y_AXIS_AABB",
        "h": "Z_AXIS_AABB",
        "i": "X_AXIS_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/RootedDirtBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockRoots": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn"
      }
    },
    "net/minecraft/world/level/block/BlockRotatable": {
      "fields": {
        "g": "AXIS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotatePillar",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement"
      }
    },
    "net/minecraft/world/level/block/EnumBlockRotation": {
      "fields": {
        "a": "NONE",
        "b": "CLOCKWISE_90",
        "c": "CLOCKWISE_180",
        "d": "COUNTERCLOCKWISE_90",
        "e": "CODEC",
        "f": "id",
        "g": "rotation",
        "h": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/Rotation;": "getRotated",
        "a()Lcom/mojang/math/OctahedralGroup;": "rotation",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Direction;": "rotate",
        "a(II)I": "rotate",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/Rotation;": "getRandom",
        "b(Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffled",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()[Lnet/minecraft/world/level/block/Rotation;": "$values"
      }
    },
    "net/minecraft/world/level/block/BlockSand": {
      "fields": {
        "a": "dustColor"
      },
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getDustColor"
      }
    },
    "net/minecraft/world/level/block/BlockSapling": {
      "fields": {
        "d": "STAGE",
        "e": "AABB_OFFSET",
        "f": "SHAPE",
        "a": "treeGrower"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)V": "advanceTree",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockScaffolding": {
      "fields": {
        "e": "TICK_DELAY",
        "f": "STABLE_SHAPE",
        "g": "UNSTABLE_SHAPE",
        "h": "UNSTABLE_SHAPE_BOTTOM",
        "i": "BELOW_BLOCK",
        "a": "STABILITY_MAX_DISTANCE",
        "b": "DISTANCE",
        "c": "WATERLOGGED",
        "d": "BOTTOM"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getInteractionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;I)Z": "isBottom",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getDistance"
      }
    },
    "net/minecraft/world/level/block/SculkBehaviour": {
      "fields": {
        "t_": "DEFAULT"
      },
      "methods": {
        "a()B": "getSculkSpreadDelay",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "onDischarged",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "depositCharge",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/Collection;Z)Z": "attemptSpreadVein",
        "c()Z": "canChangeBlockStateOnSpread",
        "i_(I)I": "updateDecayDelay",
        "a(Lnet/minecraft/world/level/block/SculkSpreader$ChargeCursor;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/SculkSpreader;Z)I": "attemptUseCharge"
      }
    },
    "net/minecraft/world/level/block/SculkBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/SculkSpreader$ChargeCursor;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/SculkSpreader;Z)I": "attemptUseCharge",
        "a(Lnet/minecraft/world/level/block/SculkSpreader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;I)I": "getDecayPenalty",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/world/level/block/state/BlockState;": "getRandomGrowthState",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "canPlaceGrowth",
        "c()Z": "canChangeBlockStateOnSpread"
      }
    },
    "net/minecraft/world/level/block/SculkCatalystBlock": {
      "fields": {
        "a": "PULSE",
        "b": "xpRange"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak"
      }
    },
    "net/minecraft/world/level/block/SculkSensorBlock": {
      "fields": {
        "b": "ACTIVE_TICKS",
        "c": "COOLDOWN_TICKS",
        "d": "PHASE",
        "e": "POWER",
        "f": "WATERLOGGED",
        "g": "SHAPE",
        "a": "RESONANCE_PITCH_BEND"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateNeighbours",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/properties/SculkSensorPhase;": "getPhase",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canActivate",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "deactivate",
        "b()I": "getActiveTicks",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)V": "activate",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;I)V": "tryResonateVibration",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak"
      }
    },
    "net/minecraft/world/level/block/SculkShriekerBlock": {
      "fields": {
        "a": "SHRIEKING",
        "b": "WATERLOGGED",
        "c": "CAN_SUMMON",
        "d": "COLLIDER",
        "e": "TOP_Y"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker"
      }
    },
    "net/minecraft/world/level/block/SculkSpreader": {
      "fields": {
        "a": "MAX_GROWTH_RATE_RADIUS",
        "b": "MAX_CHARGE",
        "c": "MAX_DECAY_FACTOR",
        "e": "MAX_CURSORS",
        "d": "SHRIEKER_PLACEMENT_RATE",
        "f": "isWorldGeneration",
        "g": "replaceableBlocks",
        "h": "growthSpawnCost",
        "i": "noGrowthRadius",
        "j": "chargeDecayRate",
        "k": "additionalDecayRate",
        "l": "cursors",
        "m": "LOGGER"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/SculkSpreader;": "createLevelSpreader",
        "b()Lnet/minecraft/world/level/block/SculkSpreader;": "createWorldGenSpreader",
        "c()Lnet/minecraft/tags/TagKey;": "replaceableBlocks",
        "d()I": "growthSpawnCost",
        "e()I": "noGrowthRadius",
        "f()I": "chargeDecayRate",
        "g()I": "additionalDecayRate",
        "h()Z": "isWorldGeneration",
        "i()Ljava/util/List;": "getCursors",
        "j()V": "clear",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "save",
        "a(Lnet/minecraft/core/BlockPos;I)V": "addCursors",
        "a(Lnet/minecraft/world/level/block/SculkSpreader$ChargeCursor;)V": "addCursor",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Z)V": "updateCursors",
        "a(Lnet/minecraft/world/level/block/SculkSpreader$ChargeCursor;Lnet/minecraft/core/BlockPos;Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$updateCursors$2",
        "b(Lnet/minecraft/world/level/block/SculkSpreader$ChargeCursor;)Ljava/lang/Integer;": "lambda$save$1",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$save$0"
      }
    },
    "net/minecraft/world/level/block/SculkVeinBlock": {
      "fields": {
        "b": "WATERLOGGED",
        "c": "veinSpreader",
        "d": "sameSpaceSpreader"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/block/MultifaceSpreader;": "getSpreader",
        "g()Lnet/minecraft/world/level/block/MultifaceSpreader;": "getSameSpaceSpreader",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/Collection;)Z": "regrow",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "onDischarged",
        "a(Lnet/minecraft/world/level/block/SculkSpreader$ChargeCursor;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/SculkSpreader;Z)I": "attemptUseCharge",
        "a(Lnet/minecraft/world/level/block/SculkSpreader;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "attemptPlaceSculk",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z": "hasSubstrateAccess",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState"
      }
    },
    "net/minecraft/world/level/block/BlockSeaPickle": {
      "fields": {
        "a": "MAX_PICKLES",
        "b": "PICKLES",
        "c": "WATERLOGGED",
        "d": "ONE_AABB",
        "e": "TWO_AABB",
        "f": "THREE_AABB",
        "g": "FOUR_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isDead",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/SeagrassBlock": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid"
      }
    },
    "net/minecraft/world/level/block/BlockShulkerBox": {
      "fields": {
        "c": "OPEN_AABB_SIZE",
        "d": "UP_OPEN_AABB",
        "e": "DOWN_OPEN_AABB",
        "f": "WES_OPEN_AABB",
        "g": "EAST_OPEN_AABB",
        "h": "NORTH_OPEN_AABB",
        "i": "SOUTH_OPEN_AABB",
        "j": "OPEN_SHAPE_BY_DIRECTION",
        "a": "FACING",
        "b": "CONTENTS",
        "k": "color"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/ShulkerBoxBlockEntity;)Z": "canOpen",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/BlockGetter;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "b(Lnet/minecraft/world/item/Item;)Lnet/minecraft/world/item/DyeColor;": "getColorFromItem",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/item/DyeColor;": "getColorFromBlock",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/level/block/Block;": "getBlockByColor",
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "b(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/item/ItemStack;": "getColoredItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/block/entity/ShulkerBoxBlockEntity;)V": "lambda$getCloneItemStack$2",
        "a(Lnet/minecraft/world/level/block/entity/ShulkerBoxBlockEntity;Ljava/util/function/Consumer;)V": "lambda$getDrops$1",
        "a(Ljava/util/EnumMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/BlockSign": {
      "fields": {
        "e": "WATERLOGGED",
        "f": "AABB_OFFSET",
        "g": "SHAPE",
        "a": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isPossibleToRespawnInThis",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/entity/SignBlockEntity;Z)Z": "hasEditableText",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)F": "getYRotationDegrees",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/Vec3;": "getSignHitboxCenterPosition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "c()Lnet/minecraft/world/level/block/state/properties/WoodType;": "type",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/properties/WoodType;": "getWoodType",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/entity/SignBlockEntity;Z)V": "openTextEdit",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/entity/SignBlockEntity;)Z": "otherPlayerIsEditingSign",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker"
      }
    },
    "net/minecraft/world/level/block/IBlockWaterlogged": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid",
        "c(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "pickupBlock",
        "am_()Ljava/util/Optional;": "getPickupSound"
      }
    },
    "net/minecraft/world/level/block/BlockSkull": {
      "fields": {
        "a": "MAX",
        "e": "ROTATIONS",
        "b": "ROTATION",
        "c": "SHAPE",
        "d": "PIGLIN_SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockSkull$Type": {
      "fields": {
        "a": "SKELETON",
        "b": "WITHER_SKELETON",
        "c": "PLAYER",
        "d": "ZOMBIE",
        "e": "CREEPER",
        "f": "PIGLIN",
        "g": "DRAGON",
        "h": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/block/SkullBlock$Types;": "$values"
      }
    },
    "net/minecraft/world/level/block/BlockStepAbstract": {
      "fields": {
        "a": "TYPE",
        "b": "WATERLOGGED",
        "c": "BOTTOM_AABB",
        "d": "TOP_AABB"
      },
      "methods": {
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/BlockSlime": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/entity/Entity;)V": "updateEntityAfterFallOn",
        "a(Lnet/minecraft/world/entity/Entity;)V": "bounceUp",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn"
      }
    },
    "net/minecraft/world/level/block/SmallDripleafBlock": {
      "fields": {
        "e": "WATERLOGGED",
        "b": "FACING",
        "c": "AABB_OFFSET",
        "d": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "an_()F": "getMaxVerticalOffset"
      }
    },
    "net/minecraft/world/level/block/BlockSmithingTable": {
      "fields": {
        "a": "CONTAINER_TITLE"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockSmoker": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "openContainer",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/SnifferEggBlock": {
      "fields": {
        "a": "MAX_HATCH_LEVEL",
        "b": "HATCH",
        "c": "REGULAR_HATCH_TIME_TICKS",
        "d": "BOOSTED_HATCH_TIME_TICKS",
        "e": "RANDOM_HATCH_OFFSET_TICKS",
        "f": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)I": "getHatchLevel",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isReadyToHatch",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "hatchBoost"
      }
    },
    "net/minecraft/world/level/block/BlockSnow": {
      "fields": {
        "a": "MAX_HEIGHT",
        "b": "LAYERS",
        "c": "SHAPE_BY_LAYER",
        "d": "HEIGHT_IMPASSABLE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockDirtSnow": {
      "fields": {
        "a": "SNOWY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSnowySetting",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockSoulFire": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canSurviveOnBlock",
        "f(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canBurn"
      }
    },
    "net/minecraft/world/level/block/BlockSlowSand": {
      "fields": {
        "a": "SHAPE",
        "b": "BUBBLE_COLUMN_CHECK_DELAY"
      },
      "methods": {
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness"
      }
    },
    "net/minecraft/world/level/block/SoundEffectType": {
      "fields": {
        "a": "EMPTY",
        "b": "WOOD",
        "c": "GRAVEL",
        "d": "GRASS",
        "e": "LILY_PAD",
        "f": "STONE",
        "g": "METAL",
        "h": "GLASS",
        "i": "WOOL",
        "j": "SAND",
        "k": "SNOW",
        "l": "POWDER_SNOW",
        "m": "LADDER",
        "n": "ANVIL",
        "o": "SLIME_BLOCK",
        "p": "HONEY_BLOCK",
        "q": "WET_GRASS",
        "r": "CORAL_BLOCK",
        "s": "BAMBOO",
        "t": "BAMBOO_SAPLING",
        "u": "SCAFFOLDING",
        "v": "SWEET_BERRY_BUSH",
        "w": "CROP",
        "x": "HARD_CROP",
        "y": "VINE",
        "z": "NETHER_WART",
        "A": "LANTERN",
        "B": "STEM",
        "C": "NYLIUM",
        "D": "FUNGUS",
        "E": "ROOTS",
        "F": "SHROOMLIGHT",
        "G": "WEEPING_VINES",
        "H": "TWISTING_VINES",
        "I": "SOUL_SAND",
        "J": "SOUL_SOIL",
        "K": "BASALT",
        "L": "WART_BLOCK",
        "M": "NETHERRACK",
        "N": "NETHER_BRICKS",
        "O": "NETHER_SPROUTS",
        "P": "NETHER_ORE",
        "Q": "BONE_BLOCK",
        "R": "NETHERITE_BLOCK",
        "S": "ANCIENT_DEBRIS",
        "T": "LODESTONE",
        "U": "CHAIN",
        "V": "NETHER_GOLD_ORE",
        "W": "GILDED_BLACKSTONE",
        "X": "CANDLE",
        "Y": "AMETHYST",
        "Z": "AMETHYST_CLUSTER",
        "aa": "SMALL_AMETHYST_BUD",
        "ab": "MEDIUM_AMETHYST_BUD",
        "ac": "LARGE_AMETHYST_BUD",
        "ad": "TUFF",
        "ae": "CALCITE",
        "af": "DRIPSTONE_BLOCK",
        "ag": "POINTED_DRIPSTONE",
        "ah": "COPPER",
        "ai": "CAVE_VINES",
        "aj": "SPORE_BLOSSOM",
        "ak": "AZALEA",
        "al": "FLOWERING_AZALEA",
        "am": "MOSS_CARPET",
        "an": "PINK_PETALS",
        "ao": "MOSS",
        "ap": "BIG_DRIPLEAF",
        "aq": "SMALL_DRIPLEAF",
        "ar": "ROOTED_DIRT",
        "as": "HANGING_ROOTS",
        "at": "AZALEA_LEAVES",
        "au": "SCULK_SENSOR",
        "av": "SCULK_CATALYST",
        "aw": "SCULK",
        "ax": "SCULK_VEIN",
        "ay": "SCULK_SHRIEKER",
        "az": "GLOW_LICHEN",
        "aA": "DEEPSLATE",
        "aB": "DEEPSLATE_BRICKS",
        "aC": "DEEPSLATE_TILES",
        "aD": "POLISHED_DEEPSLATE",
        "aE": "FROGLIGHT",
        "aF": "FROGSPAWN",
        "aG": "MANGROVE_ROOTS",
        "aH": "MUDDY_MANGROVE_ROOTS",
        "aI": "MUD",
        "aJ": "MUD_BRICKS",
        "aK": "PACKED_MUD",
        "aL": "HANGING_SIGN",
        "aM": "NETHER_WOOD_HANGING_SIGN",
        "aN": "BAMBOO_WOOD_HANGING_SIGN",
        "aO": "BAMBOO_WOOD",
        "aP": "NETHER_WOOD",
        "aQ": "CHERRY_WOOD",
        "aR": "CHERRY_SAPLING",
        "aS": "CHERRY_LEAVES",
        "aT": "CHERRY_WOOD_HANGING_SIGN",
        "aU": "CHISELED_BOOKSHELF",
        "aV": "SUSPICIOUS_SAND",
        "aW": "SUSPICIOUS_GRAVEL",
        "aX": "DECORATED_POT",
        "aY": "DECORATED_POT_CRACKED",
        "aZ": "volume",
        "ba": "pitch",
        "bb": "breakSound",
        "bc": "stepSound",
        "bd": "placeSound",
        "be": "hitSound",
        "bf": "fallSound"
      },
      "methods": {
        "a()F": "getVolume",
        "b()F": "getPitch",
        "c()Lnet/minecraft/sounds/SoundEvent;": "getBreakSound",
        "d()Lnet/minecraft/sounds/SoundEvent;": "getStepSound",
        "e()Lnet/minecraft/sounds/SoundEvent;": "getPlaceSound",
        "f()Lnet/minecraft/sounds/SoundEvent;": "getHitSound",
        "g()Lnet/minecraft/sounds/SoundEvent;": "getFallSound"
      }
    },
    "net/minecraft/world/level/block/BlockMobSpawner": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/BlockGetter;Ljava/util/List;Lnet/minecraft/world/item/TooltipFlag;)V": "appendHoverText",
        "a(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getSpawnEntityDisplayName"
      }
    },
    "net/minecraft/world/level/block/BlockSponge": {
      "fields": {
        "a": "MAX_DEPTH",
        "b": "MAX_COUNT",
        "c": "ALL_DIRECTIONS"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "tryAbsorbWater",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "removeWaterBreadthFirstSearch",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z": "lambda$removeWaterBreadthFirstSearch$1"
      }
    },
    "net/minecraft/world/level/block/SporeBlossomBlock": {
      "fields": {
        "a": "SHAPE",
        "b": "ADD_PARTICLE_ATTEMPTS",
        "c": "PARTICLE_XZ_RADIUS",
        "d": "PARTICLE_Y_MAX"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/block/BlockDirtSnowSpreadable": {
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canBeGrass",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canPropagate",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick"
      }
    },
    "net/minecraft/world/level/block/BlockStainedGlass": {
      "fields": {
        "a": "color"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor"
      }
    },
    "net/minecraft/world/level/block/BlockStainedGlassPane": {
      "fields": {
        "i": "color"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor"
      }
    },
    "net/minecraft/world/level/block/BlockStairs": {
      "fields": {
        "a": "FACING",
        "b": "HALF",
        "c": "SHAPE",
        "d": "WATERLOGGED",
        "e": "TOP_AABB",
        "f": "BOTTOM_AABB",
        "g": "OCTET_NNN",
        "h": "OCTET_NNP",
        "i": "OCTET_NPN",
        "j": "OCTET_NPP",
        "k": "OCTET_PNN",
        "l": "OCTET_PNP",
        "m": "OCTET_PPN",
        "n": "OCTET_PPP",
        "D": "TOP_SHAPES",
        "E": "BOTTOM_SHAPES",
        "F": "SHAPE_BY_STATE",
        "G": "base",
        "H": "baseState"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)[Lnet/minecraft/world/phys/shapes/VoxelShape;": "makeShapes",
        "a(ILnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "makeStairShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)I": "getShapeIndex",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "attack",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "destroy",
        "d()F": "getExplosionResistance",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Explosion;)V": "wasExploded",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "i(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/properties/StairsShape;": "getStairsShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canTakeShape",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isStairs",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "b(I)[Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$makeShapes$1",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;I)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$makeShapes$0"
      }
    },
    "net/minecraft/world/level/block/BlockFloorSign": {
      "fields": {
        "a": "ROTATION"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)F": "getYRotationDegrees",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockStem": {
      "fields": {
        "a": "MAX_AGE",
        "b": "AGE",
        "c": "AABB_OFFSET",
        "d": "SHAPE_BY_AGE",
        "e": "fruit",
        "f": "seedSupplier"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a()Lnet/minecraft/world/level/block/StemGrownBlock;": "getFruit"
      }
    },
    "net/minecraft/world/level/block/BlockStemmed": {
      "methods": {
        "a()Lnet/minecraft/world/level/block/StemBlock;": "getStem",
        "b()Lnet/minecraft/world/level/block/AttachedStemBlock;": "getAttachedStem"
      }
    },
    "net/minecraft/world/level/block/BlockStonecutter": {
      "fields": {
        "c": "CONTAINER_TITLE",
        "a": "FACING",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/entity/player/Inventory;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "lambda$getMenuProvider$0"
      }
    },
    "net/minecraft/world/level/block/BlockStructure": {
      "fields": {
        "a": "MODE"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/block/entity/StructureBlockEntity;)V": "trigger"
      }
    },
    "net/minecraft/world/level/block/BlockStructureVoid": {
      "fields": {
        "a": "SIZE",
        "b": "SHAPE"
      },
      "methods": {
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness"
      }
    },
    "net/minecraft/world/level/block/BlockReed": {
      "fields": {
        "a": "AGE",
        "b": "AABB_OFFSET",
        "c": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/EnumBlockSupport": {
      "fields": {
        "a": "FULL",
        "b": "CENTER",
        "c": "RIGID",
        "d": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isSupporting",
        "a()[Lnet/minecraft/world/level/block/SupportType;": "$values"
      }
    },
    "net/minecraft/world/level/block/SuspiciousEffectHolder": {
      "methods": {
        "b()I": "getEffectDuration",
        "c()Ljava/util/List;": "getAllEffectHolders",
        "a(Lnet/minecraft/world/level/ItemLike;)Lnet/minecraft/world/level/block/SuspiciousEffectHolder;": "tryGet"
      }
    },
    "net/minecraft/world/level/block/BlockSweetBerryBush": {
      "fields": {
        "c": "HURT_SPEED_THRESHOLD",
        "a": "MAX_AGE",
        "b": "AGE",
        "d": "SAPLING_SHAPE",
        "e": "MID_GROWTH_SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockTallPlantFlower": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/BlockLongGrass": {
      "fields": {
        "a": "AABB_OFFSET",
        "b": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Z": "isValidBonemealTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBonemealSuccess",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "performBonemeal"
      }
    },
    "net/minecraft/world/level/block/TallSeagrassBlock": {
      "fields": {
        "b": "HALF",
        "c": "AABB_OFFSET",
        "d": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;)Z": "placeLiquid"
      }
    },
    "net/minecraft/world/level/block/BlockTarget": {
      "fields": {
        "a": "OUTPUT_POWER",
        "b": "ACTIVATION_TICKS_ARROWS",
        "c": "ACTIVATION_TICKS_OTHER"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/Entity;)I": "updateRedstoneOutput",
        "a(Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/phys/Vec3;)I": "getRedstoneStrength",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/block/state/BlockState;ILnet/minecraft/core/BlockPos;I)V": "setOutputPower",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace"
      }
    },
    "net/minecraft/world/level/block/TintedGlassBlock": {
      "methods": {
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "g(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getLightBlock"
      }
    },
    "net/minecraft/world/level/block/BlockTNT": {
      "fields": {
        "a": "UNSTABLE"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/Explosion;)V": "wasExploded",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "explode",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)V": "explode",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "a(Lnet/minecraft/world/level/Explosion;)Z": "dropFromExplosion",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockTorch": {
      "fields": {
        "g": "AABB_STANDING_OFFSET",
        "h": "AABB",
        "i": "flameParticle"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/TorchflowerCropBlock": {
      "fields": {
        "a": "MAX_AGE",
        "b": "AGE",
        "e": "AABB_OFFSET",
        "f": "SHAPE_BY_AGE",
        "g": "BONEMEAL_INCREASE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a()Lnet/minecraft/world/level/block/state/properties/IntegerProperty;": "getAgeProperty",
        "b()I": "getMaxAge",
        "c()Lnet/minecraft/world/level/ItemLike;": "getBaseSeedId",
        "b(I)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForAge",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/Level;)I": "getBonemealAgeIncrease"
      }
    },
    "net/minecraft/world/level/block/BlockTrapdoor": {
      "fields": {
        "a": "OPEN",
        "b": "HALF",
        "c": "POWERED",
        "d": "WATERLOGGED",
        "e": "AABB_THICKNESS",
        "f": "EAST_OPEN_AABB",
        "g": "WEST_OPEN_AABB",
        "h": "SOUTH_OPEN_AABB",
        "i": "NORTH_OPEN_AABB",
        "j": "BOTTOM_AABB",
        "k": "TOP_AABB",
        "l": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)V": "playSound",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape"
      }
    },
    "net/minecraft/world/level/block/BlockChestTrapped": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "b()Lnet/minecraft/stats/Stat;": "getOpenChestStat",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "g()Lnet/minecraft/world/level/block/entity/BlockEntityType;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/block/BlockTripwire": {
      "fields": {
        "a": "POWERED",
        "b": "ATTACHED",
        "c": "DISARMED",
        "d": "NORTH",
        "e": "EAST",
        "f": "SOUTH",
        "g": "WEST",
        "j": "PROPERTY_BY_DIRECTION",
        "h": "AABB",
        "i": "NOT_ATTACHED_AABB",
        "k": "RECHECK_PERIOD",
        "l": "hook"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "checkPressed",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "shouldConnectTo",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockTripwireHook": {
      "fields": {
        "a": "FACING",
        "b": "POWERED",
        "c": "ATTACHED",
        "d": "WIRE_DIST_MIN",
        "e": "WIRE_DIST_MAX",
        "k": "RECHECK_PERIOD",
        "f": "AABB_OFFSET",
        "g": "NORTH_AABB",
        "h": "SOUTH_AABB",
        "i": "WEST_AABB",
        "j": "EAST_AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;ZZILnet/minecraft/world/level/block/state/BlockState;)V": "calculateState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;ZZZZ)V": "emitState",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)V": "notifyNeighbors",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockTurtleEgg": {
      "fields": {
        "a": "MAX_HATCH_LEVEL",
        "b": "MIN_EGGS",
        "c": "MAX_EGGS",
        "f": "ONE_EGG_AABB",
        "g": "MULTIPLE_EGGS_AABB",
        "d": "HATCH",
        "e": "EGGS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;)V": "stepOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;F)V": "fallOn",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;I)V": "destroyEgg",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "decreaseEggs",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "onSand",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isSand",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/Level;)Z": "shouldUpdateHatchLevel",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/item/ItemStack;)V": "playerDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/Entity;)Z": "canDestroyEgg"
      }
    },
    "net/minecraft/world/level/block/BlockTwistingVines": {
      "fields": {
        "f": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)I": "getBlocksToGrowWhenBonemealed",
        "a()Lnet/minecraft/world/level/block/Block;": "getBodyBlock",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canGrowInto"
      }
    },
    "net/minecraft/world/level/block/BlockTwistingVinesPlant": {
      "fields": {
        "d": "SHAPE"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/block/GrowingPlantHeadBlock;": "getHeadBlock"
      }
    },
    "net/minecraft/world/level/block/BlockVine": {
      "fields": {
        "a": "UP",
        "b": "NORTH",
        "c": "EAST",
        "d": "SOUTH",
        "e": "WEST",
        "f": "PROPERTY_BY_DIRECTION",
        "g": "AABB_OFFSET",
        "h": "UP_AABB",
        "i": "WEST_AABB",
        "j": "EAST_AABB",
        "k": "NORTH_AABB",
        "l": "SOUTH_AABB",
        "m": "shapesCache"
      },
      "methods": {
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "n(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasFaces",
        "o(Lnet/minecraft/world/level/block/state/BlockState;)I": "countFaces",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canSupportAtFace",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isAcceptableNeighbour",
        "i(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getUpdatedState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "copyRandomFaces",
        "p(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasHorizontalConnection",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "canSpread",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/properties/BooleanProperty;": "getPropertyForFace"
      }
    },
    "net/minecraft/world/level/block/BlockBannerWall": {
      "fields": {
        "a": "FACING",
        "b": "SHAPES"
      },
      "methods": {
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockCobbleWall": {
      "fields": {
        "a": "UP",
        "b": "EAST_WALL",
        "c": "NORTH_WALL",
        "d": "SOUTH_WALL",
        "e": "WEST_WALL",
        "f": "WATERLOGGED",
        "g": "shapeByIndex",
        "h": "collisionShapeByIndex",
        "i": "WALL_WIDTH",
        "j": "WALL_HEIGHT",
        "k": "POST_WIDTH",
        "l": "POST_COVER_WIDTH",
        "m": "WALL_COVER_START",
        "n": "WALL_COVER_END",
        "D": "POST_TEST",
        "E": "NORTH_TEST",
        "F": "SOUTH_TEST",
        "G": "WEST_TEST",
        "H": "EAST_TEST"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/level/block/state/properties/WallSide;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "applyWallShape",
        "a(FFFFFF)Ljava/util/Map;": "makeShapes",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;ZLnet/minecraft/core/Direction;)Z": "connectsTo",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;)Z": "isConnected",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "isCovered",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "topUpdate",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/BlockState;": "sideUpdate",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;ZZZZ)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "shouldRaisePost",
        "a(Lnet/minecraft/world/level/block/state/BlockState;ZZZZLnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/level/block/state/BlockState;": "updateSides",
        "a(ZLnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/level/block/state/properties/WallSide;": "makeWallState",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror"
      }
    },
    "net/minecraft/world/level/block/WallHangingSignBlock": {
      "fields": {
        "a": "FACING",
        "b": "PLANK_NORTHSOUTH",
        "c": "PLANK_EASTWEST",
        "d": "SHAPE_NORTHSOUTH",
        "h": "SHAPE_EASTWEST",
        "i": "AABBS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/level/block/entity/SignBlockEntity;Lnet/minecraft/world/item/ItemStack;)Z": "shouldTryToChainAnotherHangingSign",
        "a(Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isHittingEditableSide",
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canPlace",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "canAttachTo",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)F": "getYRotationDegrees",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker"
      }
    },
    "net/minecraft/world/level/block/BlockWallSign": {
      "fields": {
        "a": "FACING",
        "b": "AABB_THICKNESS",
        "c": "AABB_BOTTOM",
        "d": "AABB_TOP",
        "h": "AABBS"
      },
      "methods": {
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)F": "getYRotationDegrees",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/Vec3;": "getSignHitboxCenterPosition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockSkullWall": {
      "fields": {
        "a": "FACING",
        "b": "AABBS"
      },
      "methods": {
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockTorchWall": {
      "fields": {
        "a": "FACING",
        "b": "AABB_OFFSET",
        "c": "AABBS"
      },
      "methods": {
        "f()Ljava/lang/String;": "getDescriptionId",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "h(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockWaterLily": {
      "fields": {
        "a": "AABB"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn"
      }
    },
    "net/minecraft/world/level/block/WeatheringCopper": {
      "fields": {
        "u_": "NEXT_BY_BLOCK",
        "v_": "PREVIOUS_BY_BLOCK"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Ljava/util/Optional;": "getPrevious",
        "b(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/Block;": "getFirst",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "getPrevious",
        "c(Lnet/minecraft/world/level/block/Block;)Ljava/util/Optional;": "getNext",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getFirst",
        "i_(Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Optional;": "getNext",
        "a()F": "getChanceModifier",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$getNext$3",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$getPrevious$2",
        "c()Lcom/google/common/collect/BiMap;": "lambda$static$1",
        "d()Lcom/google/common/collect/BiMap;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/WeatheringCopperFullBlock": {
      "fields": {
        "d": "weatherState"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "g()Lnet/minecraft/world/level/block/WeatheringCopper$WeatherState;": "getAge",
        "b()Ljava/lang/Enum;": "getAge"
      }
    },
    "net/minecraft/world/level/block/WeatheringCopperSlabBlock": {
      "fields": {
        "e": "weatherState"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "g()Lnet/minecraft/world/level/block/WeatheringCopper$WeatherState;": "getAge",
        "b()Ljava/lang/Enum;": "getAge"
      }
    },
    "net/minecraft/world/level/block/WeatheringCopperStairBlock": {
      "fields": {
        "F": "weatherState"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "e_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isRandomlyTicking",
        "g()Lnet/minecraft/world/level/block/WeatheringCopper$WeatherState;": "getAge",
        "b()Ljava/lang/Enum;": "getAge"
      }
    },
    "net/minecraft/world/level/block/BlockWeb": {
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside"
      }
    },
    "net/minecraft/world/level/block/BlockWeepingVines": {
      "fields": {
        "f": "SHAPE"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)I": "getBlocksToGrowWhenBonemealed",
        "a()Lnet/minecraft/world/level/block/Block;": "getBodyBlock",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canGrowInto"
      }
    },
    "net/minecraft/world/level/block/BlockWeepingVinesPlant": {
      "fields": {
        "d": "SHAPE"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/block/GrowingPlantHeadBlock;": "getHeadBlock"
      }
    },
    "net/minecraft/world/level/block/BlockPressurePlateWeighted": {
      "fields": {
        "d": "POWER",
        "e": "maxWeight"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getSignalStrength",
        "g(Lnet/minecraft/world/level/block/state/BlockState;)I": "getSignalForState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;I)Lnet/minecraft/world/level/block/state/BlockState;": "setSignalForState",
        "a()I": "getPressedTime",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition"
      }
    },
    "net/minecraft/world/level/block/BlockWetSponge": {
      "methods": {
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick"
      }
    },
    "net/minecraft/world/level/block/BlockWitherRose": {
      "methods": {
        "d(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside"
      }
    },
    "net/minecraft/world/level/block/BlockWitherSkull": {
      "fields": {
        "e": "witherPatternFull",
        "f": "witherPatternBase"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/SkullBlockEntity;)V": "checkSpawn",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;)Z": "canSpawnMob",
        "u()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreateWitherFull",
        "v()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "getOrCreateWitherBase"
      }
    },
    "net/minecraft/world/level/block/BlockWitherSkullWall": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy"
      }
    },
    "net/minecraft/world/level/block/BlockCarpet": {
      "fields": {
        "b": "color"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/DyeColor;": "getColor"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityFurnace": {
      "fields": {
        "c": "SLOT_INPUT",
        "d": "SLOT_FUEL",
        "e": "SLOT_RESULT",
        "f": "DATA_LIT_TIME",
        "r": "SLOTS_FOR_UP",
        "s": "SLOTS_FOR_DOWN",
        "t": "SLOTS_FOR_SIDES",
        "g": "DATA_LIT_DURATION",
        "h": "DATA_COOKING_PROGRESS",
        "i": "DATA_COOKING_TOTAL_TIME",
        "j": "NUM_DATA_VALUES",
        "k": "BURN_TIME_STANDARD",
        "l": "BURN_COOL_SPEED",
        "m": "items",
        "u": "litTime",
        "v": "litDuration",
        "w": "cookingProgress",
        "x": "cookingTotalTime",
        "n": "dataAccess",
        "y": "recipesUsed",
        "z": "quickCheck"
      },
      "methods": {
        "f()Ljava/util/Map;": "getFuel",
        "b(Lnet/minecraft/world/item/Item;)Z": "isNeverAFurnaceFuel",
        "a(Ljava/util/Map;Lnet/minecraft/tags/TagKey;I)V": "add",
        "a(Ljava/util/Map;Lnet/minecraft/world/level/ItemLike;I)V": "add",
        "i()Z": "isLit",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity;)V": "serverTick",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/item/crafting/Recipe;Lnet/minecraft/core/NonNullList;I)Z": "canBurn",
        "b(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/item/crafting/Recipe;Lnet/minecraft/core/NonNullList;I)Z": "burn",
        "a(Lnet/minecraft/world/item/ItemStack;)I": "getBurnDuration",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity;)I": "getTotalCookTime",
        "b(Lnet/minecraft/world/item/ItemStack;)Z": "isFuel",
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace",
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "b(ILnet/minecraft/world/item/ItemStack;)Z": "canPlaceItem",
        "a()V": "clearContent",
        "a(Lnet/minecraft/world/item/crafting/Recipe;)V": "setRecipeUsed",
        "d()Lnet/minecraft/world/item/crafting/Recipe;": "getRecipeUsed",
        "a(Lnet/minecraft/world/entity/player/Player;Ljava/util/List;)V": "awardUsedRecipes",
        "a(Lnet/minecraft/server/level/ServerPlayer;)V": "awardUsedRecipesAndPopExperience",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Ljava/util/List;": "getRecipesToAwardAndPopExperience",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;IF)V": "createExperience",
        "a(Lnet/minecraft/world/entity/player/StackedContents;)V": "fillStackedContents",
        "a(Ljava/util/List;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lit/unimi/dsi/fastutil/objects/Object2IntMap$Entry;Lnet/minecraft/world/item/crafting/Recipe;)V": "lambda$getRecipesToAwardAndPopExperience$1"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBanner": {
      "fields": {
        "a": "MAX_PATTERNS",
        "b": "TAG_PATTERNS",
        "c": "TAG_PATTERN",
        "d": "TAG_COLOR",
        "e": "name",
        "f": "baseColor",
        "g": "itemPatterns",
        "h": "patterns"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/nbt/ListTag;": "getItemPatterns",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/DyeColor;)V": "fromItem",
        "b(Lnet/minecraft/world/item/ItemStack;)V": "fromItem",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "ab()Lnet/minecraft/network/chat/Component;": "getCustomName",
        "a(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "c(Lnet/minecraft/world/item/ItemStack;)I": "getPatternCount",
        "c()Ljava/util/List;": "getPatterns",
        "a(Lnet/minecraft/world/item/DyeColor;Lnet/minecraft/nbt/ListTag;)Ljava/util/List;": "createPatterns",
        "d(Lnet/minecraft/world/item/ItemStack;)V": "removeLastPattern",
        "f()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "g()Lnet/minecraft/world/item/DyeColor;": "getBaseColor",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/EnumBannerPatternType": {
      "fields": {
        "a": "hashname"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceKey;Z)Lnet/minecraft/resources/ResourceLocation;": "location",
        "a()Ljava/lang/String;": "getHashname",
        "a(Ljava/lang/String;)Lnet/minecraft/core/Holder;": "byHash",
        "a(Ljava/lang/String;Lnet/minecraft/core/Holder$Reference;)Z": "lambda$byHash$0"
      }
    },
    "net/minecraft/world/level/block/entity/BannerPatterns": {
      "fields": {
        "a": "BASE",
        "b": "SQUARE_BOTTOM_LEFT",
        "c": "SQUARE_BOTTOM_RIGHT",
        "d": "SQUARE_TOP_LEFT",
        "e": "SQUARE_TOP_RIGHT",
        "f": "STRIPE_BOTTOM",
        "g": "STRIPE_TOP",
        "h": "STRIPE_LEFT",
        "i": "STRIPE_RIGHT",
        "j": "STRIPE_CENTER",
        "k": "STRIPE_MIDDLE",
        "l": "STRIPE_DOWNRIGHT",
        "m": "STRIPE_DOWNLEFT",
        "n": "STRIPE_SMALL",
        "o": "CROSS",
        "p": "STRAIGHT_CROSS",
        "q": "TRIANGLE_BOTTOM",
        "r": "TRIANGLE_TOP",
        "s": "TRIANGLES_BOTTOM",
        "t": "TRIANGLES_TOP",
        "u": "DIAGONAL_LEFT",
        "v": "DIAGONAL_RIGHT",
        "w": "DIAGONAL_LEFT_MIRROR",
        "x": "DIAGONAL_RIGHT_MIRROR",
        "y": "CIRCLE_MIDDLE",
        "z": "RHOMBUS_MIDDLE",
        "A": "HALF_VERTICAL",
        "B": "HALF_HORIZONTAL",
        "C": "HALF_VERTICAL_MIRROR",
        "D": "HALF_HORIZONTAL_MIRROR",
        "E": "BORDER",
        "F": "CURLY_BORDER",
        "G": "GRADIENT",
        "H": "GRADIENT_UP",
        "I": "BRICKS",
        "J": "GLOBE",
        "K": "CREEPER",
        "L": "SKULL",
        "M": "FLOWER",
        "N": "MOJANG",
        "O": "PIGLIN"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "create"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBarrel": {
      "fields": {
        "c": "items",
        "f": "openersCounter"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b()I": "getContainerSize",
        "f()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/core/NonNullList;)V": "setItems",
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu",
        "d_(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "i()V": "recheckOpen",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Z)V": "updateBlockState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/sounds/SoundEvent;)V": "playSound"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityContainer": {
      "fields": {
        "c": "lockKey",
        "d": "name"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "ab()Lnet/minecraft/network/chat/Component;": "getCustomName",
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "d(Lnet/minecraft/world/entity/player/Player;)Z": "canOpen",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/LockCode;Lnet/minecraft/network/chat/Component;)Z": "canUnlock",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBeacon": {
      "fields": {
        "f": "MAX_LEVELS",
        "g": "VALID_EFFECTS",
        "b": "DATA_LEVELS",
        "c": "DATA_PRIMARY",
        "d": "DATA_SECONDARY",
        "e": "NUM_DATA_VALUES",
        "h": "BLOCKS_CHECK_PER_TICK",
        "i": "DEFAULT_NAME",
        "j": "beamSections",
        "k": "checkingBeamSections",
        "l": "levels",
        "m": "lastCheckY",
        "s": "name",
        "t": "lockKey",
        "u": "dataAccess"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BeaconBlockEntity;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;III)I": "updateBase",
        "ap_()V": "setRemoved",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/sounds/SoundEvent;)V": "playSound",
        "c()Ljava/util/List;": "getBeamSections",
        "f()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "ab()Lnet/minecraft/network/chat/Component;": "getCustomName",
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "a(Lnet/minecraft/world/level/Level;)V": "setLevel",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBeacon$BeaconColorTracker": {
      "fields": {
        "a": "color",
        "b": "height"
      },
      "methods": {
        "a()V": "increaseHeight",
        "b()[F": "getColor",
        "c()I": "getHeight"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBed": {
      "fields": {
        "a": "color"
      },
      "methods": {
        "c()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "d()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(Lnet/minecraft/world/item/DyeColor;)V": "setColor",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBeehive": {
      "fields": {
        "a": "TAG_FLOWER_POS",
        "b": "MIN_OCCUPATION_TICKS",
        "c": "ENTITY_DATA",
        "d": "TICKS_IN_HIVE",
        "e": "HAS_NECTAR",
        "f": "BEES",
        "i": "IGNORED_BEE_TAGS",
        "g": "MAX_OCCUPANTS",
        "j": "MIN_TICKS_BEFORE_REENTERING_HIVE",
        "k": "MIN_OCCUPATION_TICKS_NECTAR",
        "h": "MIN_OCCUPATION_TICKS_NECTARLESS",
        "l": "stored",
        "m": "savedFlowerPos"
      },
      "methods": {
        "e()V": "setChanged",
        "c()Z": "isFireNearby",
        "d()Z": "isEmpty",
        "f()Z": "isFull",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeReleaseStatus;)V": "emptyAllLivingFromHive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeReleaseStatus;)Ljava/util/List;": "releaseAllOccupants",
        "a(Lnet/minecraft/world/entity/Entity;Z)V": "addOccupant",
        "g()I": "getOccupantCount",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)I": "getHoneyLevel",
        "i()Z": "isSedated",
        "a(Lnet/minecraft/world/entity/Entity;ZI)V": "addOccupantWithPresetTicks",
        "a(Lnet/minecraft/nbt/CompoundTag;IZ)V": "storeBee",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeData;Ljava/util/List;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeReleaseStatus;Lnet/minecraft/core/BlockPos;)Z": "releaseOccupant",
        "d(Lnet/minecraft/nbt/CompoundTag;)V": "removeIgnoredBeeTags",
        "a(ILnet/minecraft/world/entity/animal/Bee;)V": "setBeeReleaseData",
        "v()Z": "hasSavedFlowerPos",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/List;Lnet/minecraft/core/BlockPos;)V": "tickOccupants",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity;)V": "serverTick",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "j()Lnet/minecraft/nbt/ListTag;": "writeBees",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour$BlockStateBase;)Z": "lambda$releaseOccupant$2",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/Entity;": "lambda$releaseOccupant$1",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/List;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeReleaseStatus;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity$BeeData;)Z": "lambda$releaseAllOccupants$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBeehive$HiveBee": {
      "fields": {
        "a": "entityData",
        "b": "ticksInHive",
        "c": "minOccupationTicks"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBeehive$ReleaseStatus": {
      "fields": {
        "a": "HONEY_DELIVERED",
        "b": "BEE_RELEASED",
        "c": "EMERGENCY",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBell": {
      "fields": {
        "d": "DURATION",
        "e": "GLOW_DURATION",
        "f": "MIN_TICKS_BETWEEN_SEARCHES",
        "g": "MAX_RESONATION_TICKS",
        "h": "TICKS_BEFORE_RESONATION",
        "i": "SEARCH_RADIUS",
        "j": "HEAR_BELL_RADIUS",
        "k": "HIGHLIGHT_RAIDERS_RADIUS",
        "l": "lastRingTimestamp",
        "a": "ticks",
        "b": "shaking",
        "c": "clickDirection",
        "m": "nearbyEntities",
        "n": "resonating",
        "r": "resonationTicks"
      },
      "methods": {
        "a_(II)Z": "triggerEvent",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BellBlockEntity;Lnet/minecraft/world/level/block/entity/BellBlockEntity$ResonationEndAction;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BellBlockEntity;)V": "clientTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BellBlockEntity;)V": "serverTick",
        "a(Lnet/minecraft/core/Direction;)V": "onHit",
        "c()V": "updateEntities",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/List;)Z": "areRaidersNearby",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/util/List;)V": "makeRaidersGlow",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/util/List;)V": "showBellParticles",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "isRaiderWithinRange",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "glow",
        "a(Lnet/minecraft/core/BlockPos;ILorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/LivingEntity;)V": "lambda$showBellParticles$3",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$showBellParticles$2",
        "c(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$showBellParticles$1",
        "d(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/LivingEntity;)Z": "lambda$makeRaidersGlow$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBlastFurnace": {
      "methods": {
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(Lnet/minecraft/world/item/ItemStack;)I": "getBurnDuration",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntity": {
      "fields": {
        "c": "LOGGER",
        "d": "type",
        "o": "level",
        "p": "worldPosition",
        "q": "remove",
        "e": "blockState"
      },
      "methods": {
        "c(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/core/BlockPos;": "getPosFromTag",
        "k()Lnet/minecraft/world/level/Level;": "getLevel",
        "a(Lnet/minecraft/world/level/Level;)V": "setLevel",
        "l()Z": "hasLevel",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "m()Lnet/minecraft/nbt/CompoundTag;": "saveWithFullMetadata",
        "n()Lnet/minecraft/nbt/CompoundTag;": "saveWithId",
        "o()Lnet/minecraft/nbt/CompoundTag;": "saveWithoutMetadata",
        "d(Lnet/minecraft/nbt/CompoundTag;)V": "saveId",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/block/entity/BlockEntityType;)V": "addEntityType",
        "e(Lnet/minecraft/world/item/ItemStack;)V": "saveToItem",
        "e(Lnet/minecraft/nbt/CompoundTag;)V": "saveMetadata",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "loadStatic",
        "e()V": "setChanged",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "setChanged",
        "p()Lnet/minecraft/core/BlockPos;": "getBlockPos",
        "q()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "r()Z": "isRemoved",
        "ap_()V": "setRemoved",
        "s()V": "clearRemoved",
        "a_(II)Z": "triggerEvent",
        "a(Lnet/minecraft/CrashReportCategory;)V": "fillCrashReportCategory",
        "t()Z": "onlyOpCanSetNbt",
        "u()Lnet/minecraft/world/level/block/entity/BlockEntityType;": "getType",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlockState"
      }
    },
    "net/minecraft/world/level/block/entity/BlockEntityTicker": {},
    "net/minecraft/world/level/block/entity/TileEntityTypes": {
      "fields": {
        "P": "LOGGER",
        "a": "FURNACE",
        "b": "CHEST",
        "c": "TRAPPED_CHEST",
        "d": "ENDER_CHEST",
        "e": "JUKEBOX",
        "f": "DISPENSER",
        "g": "DROPPER",
        "h": "SIGN",
        "i": "HANGING_SIGN",
        "j": "MOB_SPAWNER",
        "k": "PISTON",
        "l": "BREWING_STAND",
        "m": "ENCHANTING_TABLE",
        "n": "END_PORTAL",
        "o": "BEACON",
        "p": "SKULL",
        "q": "DAYLIGHT_DETECTOR",
        "r": "HOPPER",
        "s": "COMPARATOR",
        "t": "BANNER",
        "u": "STRUCTURE_BLOCK",
        "v": "END_GATEWAY",
        "w": "COMMAND_BLOCK",
        "x": "SHULKER_BOX",
        "y": "BED",
        "z": "CONDUIT",
        "A": "BARREL",
        "B": "SMOKER",
        "C": "BLAST_FURNACE",
        "D": "LECTERN",
        "E": "BELL",
        "F": "JIGSAW",
        "G": "CAMPFIRE",
        "H": "BEEHIVE",
        "I": "SCULK_SENSOR",
        "J": "CALIBRATED_SCULK_SENSOR",
        "K": "SCULK_CATALYST",
        "L": "SCULK_SHRIEKER",
        "M": "CHISELED_BOOKSHELF",
        "N": "BRUSHABLE_BLOCK",
        "O": "DECORATED_POT",
        "Q": "factory",
        "R": "validBlocks",
        "S": "dataType"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/block/entity/BlockEntityType$Builder;)Lnet/minecraft/world/level/block/entity/BlockEntityType;": "register",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "create",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isValid",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityBrewingStand": {
      "fields": {
        "h": "INGREDIENT_SLOT",
        "i": "FUEL_SLOT",
        "j": "SLOTS_FOR_UP",
        "k": "SLOTS_FOR_DOWN",
        "l": "SLOTS_FOR_SIDES",
        "c": "FUEL_USES",
        "d": "DATA_BREW_TIME",
        "e": "DATA_FUEL_USES",
        "f": "NUM_DATA_VALUES",
        "m": "items",
        "n": "brewTime",
        "r": "lastPotionCount",
        "s": "ingredient",
        "t": "fuel",
        "g": "dataAccess"
      },
      "methods": {
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BrewingStandBlockEntity;)V": "serverTick",
        "f()[Z": "getPotionBits",
        "a(Lnet/minecraft/core/NonNullList;)Z": "isBrewable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/NonNullList;)V": "doBrew",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "b(ILnet/minecraft/world/item/ItemStack;)Z": "canPlaceItem",
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace",
        "a()V": "clearContent",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/level/block/entity/BrushableBlockEntity": {
      "fields": {
        "a": "LOGGER",
        "b": "LOOT_TABLE_TAG",
        "c": "LOOT_TABLE_SEED_TAG",
        "d": "HIT_DIRECTION_TAG",
        "e": "ITEM_TAG",
        "f": "BRUSH_COOLDOWN_TICKS",
        "g": "BRUSH_RESET_TICKS",
        "h": "REQUIRED_BRUSHES_TO_BREAK",
        "i": "brushCount",
        "j": "brushCountResetsAtTick",
        "k": "coolDownEndsAtTick",
        "l": "item",
        "m": "hitDirection",
        "n": "lootTable",
        "r": "lootTableSeed"
      },
      "methods": {
        "a(JLnet/minecraft/world/entity/player/Player;Lnet/minecraft/core/Direction;)Z": "brush",
        "a(Lnet/minecraft/world/entity/player/Player;)V": "unpackLootTable",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "brushingCompleted",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "dropContent",
        "c()V": "checkReset",
        "d(Lnet/minecraft/nbt/CompoundTag;)Z": "tryLoadLootTable",
        "e(Lnet/minecraft/nbt/CompoundTag;)Z": "trySaveLootTable",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "d()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/resources/ResourceLocation;J)V": "setLootTable",
        "i()I": "getCompletionState",
        "f()Lnet/minecraft/core/Direction;": "getHitDirection",
        "g()Lnet/minecraft/world/item/ItemStack;": "getItem",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/CalibratedSculkSensorBlockEntity": {
      "methods": {
        "c()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "createVibrationUser"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityCampfire": {
      "fields": {
        "a": "BURN_COOL_SPEED",
        "b": "NUM_SLOTS",
        "c": "items",
        "d": "cookingProgress",
        "e": "cookingTime",
        "f": "quickCheck"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/CampfireBlockEntity;)V": "cookTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/CampfireBlockEntity;)V": "cooldownTick",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/CampfireBlockEntity;)V": "particleTick",
        "c()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "d()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a(Lnet/minecraft/world/item/ItemStack;)Ljava/util/Optional;": "getCookableRecipe",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/item/ItemStack;I)Z": "placeFood",
        "g()V": "markUpdated",
        "a()V": "clearContent",
        "f()V": "dowse",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/crafting/CampfireCookingRecipe;)Lnet/minecraft/world/item/ItemStack;": "lambda$cookTick$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityChest": {
      "fields": {
        "c": "EVENT_SET_OPEN_COUNT",
        "f": "items",
        "g": "openersCounter",
        "j": "chestLidController"
      },
      "methods": {
        "b()I": "getContainerSize",
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/ChestBlockEntity;)V": "lidAnimateTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/sounds/SoundEvent;)V": "playSound",
        "a_(II)Z": "triggerEvent",
        "d_(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "f()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/core/NonNullList;)V": "setItems",
        "a(F)F": "getOpenNess",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getOpenCount",
        "a(Lnet/minecraft/world/level/block/entity/ChestBlockEntity;Lnet/minecraft/world/level/block/entity/ChestBlockEntity;)V": "swapContents",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu",
        "i()V": "recheckOpen",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)V": "signalOpenCount"
      }
    },
    "net/minecraft/world/level/block/entity/ChestLidController": {
      "fields": {
        "a": "shouldBeOpen",
        "b": "openness",
        "c": "oOpenness"
      },
      "methods": {
        "a()V": "tickLid",
        "a(F)F": "getOpenness",
        "a(Z)V": "shouldBeOpen"
      }
    },
    "net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity": {
      "fields": {
        "c": "MAX_BOOKS_IN_STORAGE",
        "d": "LOGGER",
        "e": "items",
        "f": "lastInteractedSlot"
      },
      "methods": {
        "c(I)V": "updateState",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "f()I": "count",
        "a()V": "clearContent",
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/Container;ILnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "ac_()I": "getMaxStackSize",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "b(ILnet/minecraft/world/item/ItemStack;)Z": "canPlaceItem",
        "g()I": "getLastInteractedSlot"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityCommand": {
      "fields": {
        "a": "powered",
        "b": "auto",
        "c": "conditionMet",
        "d": "commandBlock"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "t()Z": "onlyOpCanSetNbt",
        "c()Lnet/minecraft/world/level/BaseCommandBlock;": "getCommandBlock",
        "a(Z)V": "setPowered",
        "d()Z": "isPowered",
        "f()Z": "isAutomatic",
        "b(Z)V": "setAutomatic",
        "g()V": "onModeSwitch",
        "x()V": "scheduleTick",
        "i()Z": "wasConditionMet",
        "j()Z": "markConditionMet",
        "v()Lnet/minecraft/world/level/block/entity/CommandBlockEntity$Mode;": "getMode",
        "w()Z": "isConditional"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityCommand$Type": {
      "fields": {
        "a": "SEQUENCE",
        "b": "AUTO",
        "c": "REDSTONE",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityComparator": {
      "fields": {
        "a": "output"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "c()I": "getOutputSignal",
        "a(I)V": "setOutputSignal"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityConduit": {
      "fields": {
        "b": "BLOCK_REFRESH_RATE",
        "c": "EFFECT_DURATION",
        "d": "ROTATION_SPEED",
        "e": "MIN_ACTIVE_SIZE",
        "f": "MIN_KILL_SIZE",
        "g": "KILL_RANGE",
        "h": "VALID_BLOCKS",
        "a": "tickCount",
        "i": "activeRotation",
        "j": "isActive",
        "k": "isHunting",
        "l": "effectBlocks",
        "m": "destroyTarget",
        "n": "destroyTargetUUID",
        "r": "nextAmbientSoundActivation"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "c()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/ConduitBlockEntity;)V": "clientTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/ConduitBlockEntity;)V": "serverTick",
        "a(Lnet/minecraft/world/level/block/entity/ConduitBlockEntity;Ljava/util/List;)V": "updateHunting",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/util/List;)Z": "updateShape",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/util/List;)V": "applyEffects",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/List;Lnet/minecraft/world/level/block/entity/ConduitBlockEntity;)V": "updateDestroyTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/ConduitBlockEntity;)V": "updateClientTarget",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/AABB;": "getDestroyRangeAABB",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/util/UUID;)Lnet/minecraft/world/entity/LivingEntity;": "findDestroyTarget",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Ljava/util/List;Lnet/minecraft/world/entity/Entity;I)V": "animationTick",
        "d()Z": "isActive",
        "f()Z": "isHunting",
        "a(Z)V": "setHunting",
        "a(F)F": "getActiveRotation",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/ContainerOpenersCounter": {
      "fields": {
        "a": "CHECK_TICK_DELAY",
        "b": "openCount"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "onOpen",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "onClose",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)V": "openerCountChanged",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "isOwnContainer",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "incrementOpeners",
        "b(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "decrementOpeners",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getOpenCount",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "recheckOpeners",
        "a()I": "getOpenerCount",
        "d(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "scheduleRecheck"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityLightDetector": {},
    "net/minecraft/world/level/block/entity/DecoratedPotBlockEntity": {
      "fields": {
        "a": "TAG_SHERDS",
        "b": "decorations"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "c()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "d()Lnet/minecraft/core/Direction;": "getDirection",
        "f()Lnet/minecraft/world/level/block/entity/DecoratedPotBlockEntity$Decorations;": "getDecorations",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setFromItem",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/DecoratedPotPatterns": {
      "fields": {
        "b": "BASE_NAME",
        "a": "BASE",
        "c": "BRICK_NAME",
        "d": "ANGLER_NAME",
        "e": "ARCHER_NAME",
        "f": "ARMS_UP_NAME",
        "g": "BLADE_NAME",
        "h": "BREWER_NAME",
        "i": "BURN_NAME",
        "j": "DANGER_NAME",
        "k": "EXPLORER_NAME",
        "l": "FRIEND_NAME",
        "m": "HEART_NAME",
        "n": "HEARTBREAK_NAME",
        "o": "HOWL_NAME",
        "p": "MINER_NAME",
        "q": "MOURNER_NAME",
        "r": "PLENTY_NAME",
        "s": "PRIZE_NAME",
        "t": "SHEAF_NAME",
        "u": "SHELTER_NAME",
        "v": "SKULL_NAME",
        "w": "SNORT_NAME",
        "x": "BRICK",
        "y": "ANGLER",
        "z": "ARCHER",
        "A": "ARMS_UP",
        "B": "BLADE",
        "C": "BREWER",
        "D": "BURN",
        "E": "DANGER",
        "F": "EXPLORER",
        "G": "FRIEND",
        "H": "HEART",
        "I": "HEARTBREAK",
        "J": "HOWL",
        "K": "MINER",
        "L": "MOURNER",
        "M": "PLENTY",
        "N": "PRIZE",
        "O": "SHEAF",
        "P": "SHELTER",
        "Q": "SKULL",
        "R": "SNORT",
        "S": "ITEM_TO_POT_TEXTURE"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "create",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/resources/ResourceLocation;": "location",
        "a(Lnet/minecraft/world/item/Item;)Lnet/minecraft/resources/ResourceKey;": "getResourceKey"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityDispenser": {
      "fields": {
        "c": "CONTAINER_SIZE",
        "f": "items"
      },
      "methods": {
        "b()I": "getContainerSize",
        "a(Lnet/minecraft/util/RandomSource;)I": "getRandomSlot",
        "a(Lnet/minecraft/world/item/ItemStack;)I": "addItem",
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "f()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/core/NonNullList;)V": "setItems",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityDropper": {
      "methods": {
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityEnchantTable": {
      "fields": {
        "a": "time",
        "b": "flip",
        "c": "oFlip",
        "d": "flipT",
        "e": "flipA",
        "f": "open",
        "g": "oOpen",
        "h": "rot",
        "i": "oRot",
        "j": "tRot",
        "k": "RANDOM",
        "l": "name"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/EnchantmentTableBlockEntity;)V": "bookAnimationTick",
        "Z()Lnet/minecraft/network/chat/Component;": "getName",
        "a(Lnet/minecraft/network/chat/Component;)V": "setCustomName",
        "ab()Lnet/minecraft/network/chat/Component;": "getCustomName"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityEnderChest": {
      "fields": {
        "a": "chestLidController",
        "b": "openersCounter"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/EnderChestBlockEntity;)V": "lidAnimateTick",
        "a_(II)Z": "triggerEvent",
        "a(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "b(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "c()V": "recheckOpen",
        "a(F)F": "getOpenNess"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityFurnaceFurnace": {
      "methods": {
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/level/block/entity/HangingSignBlockEntity": {
      "fields": {
        "a": "MAX_TEXT_LINE_WIDTH",
        "b": "TEXT_LINE_HEIGHT"
      },
      "methods": {
        "c()I": "getTextLineHeight",
        "d()I": "getMaxTextLineWidth"
      }
    },
    "net/minecraft/world/level/block/entity/IHopper": {
      "fields": {
        "c": "INSIDE",
        "x_": "ABOVE",
        "y_": "SUCK"
      },
      "methods": {
        "aq_()Lnet/minecraft/world/phys/shapes/VoxelShape;": "getSuckShape",
        "G()D": "getLevelX",
        "I()D": "getLevelY",
        "J()D": "getLevelZ"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityHopper": {
      "fields": {
        "f": "MOVE_ITEM_SPEED",
        "g": "HOPPER_CONTAINER_SIZE",
        "j": "items",
        "k": "cooldownTime",
        "l": "tickedGameTime"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "b()I": "getContainerSize",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/HopperBlockEntity;)V": "pushItemsTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/HopperBlockEntity;Ljava/util/function/BooleanSupplier;)Z": "tryMoveItems",
        "i()Z": "inventoryFull",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/Container;)Z": "ejectItems",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/core/Direction;)Ljava/util/stream/IntStream;": "getSlots",
        "b(Lnet/minecraft/world/Container;Lnet/minecraft/core/Direction;)Z": "isFullContainer",
        "c(Lnet/minecraft/world/Container;Lnet/minecraft/core/Direction;)Z": "isEmptyContainer",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/Hopper;)Z": "suckInItems",
        "a(Lnet/minecraft/world/level/block/entity/Hopper;Lnet/minecraft/world/Container;ILnet/minecraft/core/Direction;)Z": "tryTakeInItemFromSlot",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/entity/item/ItemEntity;)Z": "addItem",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/Container;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/item/ItemStack;": "addItem",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/core/Direction;)Z": "canPlaceItemInContainer",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/Container;Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/core/Direction;)Z": "canTakeItemFromContainer",
        "b(Lnet/minecraft/world/Container;Lnet/minecraft/world/Container;Lnet/minecraft/world/item/ItemStack;ILnet/minecraft/core/Direction;)Lnet/minecraft/world/item/ItemStack;": "tryMoveInItem",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/Container;": "getAttachedContainer",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/Hopper;)Lnet/minecraft/world/Container;": "getSourceContainer",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/Hopper;)Ljava/util/List;": "getItemsAtAndAbove",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/Container;": "getContainerAt",
        "a(Lnet/minecraft/world/level/Level;DDD)Lnet/minecraft/world/Container;": "getContainerAt",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z": "canMergeItems",
        "G()D": "getLevelX",
        "I()D": "getLevelY",
        "J()D": "getLevelZ",
        "c(I)V": "setCooldown",
        "j()Z": "isOnCooldown",
        "v()Z": "isOnCustomCooldown",
        "f()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/core/NonNullList;)V": "setItems",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/entity/HopperBlockEntity;)V": "entityInside",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/Hopper;Lnet/minecraft/world/phys/AABB;)Ljava/util/stream/Stream;": "lambda$getItemsAtAndAbove$4",
        "a(Lnet/minecraft/world/level/block/entity/Hopper;Lnet/minecraft/world/Container;Lnet/minecraft/core/Direction;I)Z": "lambda$suckInItems$3",
        "a(Lnet/minecraft/world/Container;I)Z": "lambda$isEmptyContainer$2",
        "b(Lnet/minecraft/world/Container;I)Z": "lambda$isFullContainer$1"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityJigsaw": {
      "fields": {
        "a": "TARGET",
        "b": "POOL",
        "c": "JOINT",
        "d": "NAME",
        "e": "FINAL_STATE",
        "f": "name",
        "g": "target",
        "h": "pool",
        "i": "joint",
        "j": "finalState"
      },
      "methods": {
        "c()Lnet/minecraft/resources/ResourceLocation;": "getName",
        "d()Lnet/minecraft/resources/ResourceLocation;": "getTarget",
        "f()Lnet/minecraft/resources/ResourceKey;": "getPool",
        "g()Ljava/lang/String;": "getFinalState",
        "i()Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;": "getJoint",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "setName",
        "b(Lnet/minecraft/resources/ResourceLocation;)V": "setTarget",
        "a(Lnet/minecraft/resources/ResourceKey;)V": "setPool",
        "a(Ljava/lang/String;)V": "setFinalState",
        "a(Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;)V": "setJoint",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "j()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a(Lnet/minecraft/server/level/ServerLevel;IZ)V": "generate",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "v()Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;": "lambda$load$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityJigsaw$JointType": {
      "fields": {
        "a": "ROLLABLE",
        "b": "ALIGNED",
        "c": "name",
        "d": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "byName",
        "a()Lnet/minecraft/network/chat/Component;": "getTranslatedName",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;)Z": "lambda$byName$0",
        "b()[Lnet/minecraft/world/level/block/entity/JigsawBlockEntity$JointType;": "$values"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityJukeBox": {
      "fields": {
        "c": "SONG_END_PADDING",
        "d": "items",
        "e": "ticksSinceLastEvent",
        "f": "tickCount",
        "g": "recordStartedTick",
        "h": "isPlaying"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "f()Z": "isRecordPlaying",
        "a(Lnet/minecraft/world/entity/Entity;Z)V": "setHasRecordBlockState",
        "g()V": "startPlaying",
        "v()V": "stopPlaying",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "tick",
        "a(Lnet/minecraft/world/item/RecordItem;)Z": "shouldRecordStopPlaying",
        "w()Z": "shouldSendJukeboxPlayingEvent",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "ac_()I": "getMaxStackSize",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "b(ILnet/minecraft/world/item/ItemStack;)Z": "canPlaceItem",
        "a(Lnet/minecraft/world/Container;ILnet/minecraft/world/item/ItemStack;)Z": "canTakeItem",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "spawnMusicParticles",
        "i()V": "popOutRecord",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/JukeboxBlockEntity;)V": "playRecordTick",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setRecordWithoutPlaying"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityLectern": {
      "fields": {
        "a": "DATA_PAGE",
        "b": "NUM_DATA",
        "c": "SLOT_BOOK",
        "d": "NUM_SLOTS",
        "e": "bookAccess",
        "f": "dataAccess",
        "g": "book",
        "h": "page",
        "i": "pageCount"
      },
      "methods": {
        "c()Lnet/minecraft/world/item/ItemStack;": "getBook",
        "f()Z": "hasBook",
        "a(Lnet/minecraft/world/item/ItemStack;)V": "setBook",
        "j()V": "onBookItemRemove",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)V": "setBook",
        "a(I)V": "setPage",
        "g()I": "getPage",
        "i()I": "getRedstoneSignal",
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/item/ItemStack;": "resolveBook",
        "a(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/commands/CommandSourceStack;": "createCommandSourceStack",
        "t()Z": "onlyOpCanSetNbt",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a()V": "clearContent",
        "H_()Lnet/minecraft/network/chat/Component;": "getDisplayName"
      }
    },
    "net/minecraft/world/level/block/entity/LidBlockEntity": {
      "methods": {
        "a(F)F": "getOpenNess"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityLootable": {
      "fields": {
        "d": "LOOT_TABLE_TAG",
        "e": "LOOT_TABLE_SEED_TAG",
        "h": "lootTable",
        "i": "lootTableSeed"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/resources/ResourceLocation;)V": "setLootTable",
        "d(Lnet/minecraft/nbt/CompoundTag;)Z": "tryLoadLootTable",
        "e(Lnet/minecraft/nbt/CompoundTag;)Z": "trySaveLootTable",
        "e(Lnet/minecraft/world/entity/player/Player;)V": "unpackLootTable",
        "a(Lnet/minecraft/resources/ResourceLocation;J)V": "setLootTable",
        "ab_()Z": "isEmpty",
        "a(I)Lnet/minecraft/world/item/ItemStack;": "getItem",
        "a(II)Lnet/minecraft/world/item/ItemStack;": "removeItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate",
        "a(ILnet/minecraft/world/item/ItemStack;)V": "setItem",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "stillValid",
        "a()V": "clearContent",
        "f()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/core/NonNullList;)V": "setItems",
        "d(Lnet/minecraft/world/entity/player/Player;)Z": "canOpen"
      }
    },
    "net/minecraft/world/level/block/entity/SculkCatalystBlockEntity": {
      "fields": {
        "a": "catalystListener"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/SculkCatalystBlockEntity;)V": "serverTick",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "c()Lnet/minecraft/world/level/block/entity/SculkCatalystBlockEntity$CatalystListener;": "getListener",
        "d()Lnet/minecraft/world/level/gameevent/GameEventListener;": "getListener"
      }
    },
    "net/minecraft/world/level/block/entity/SculkSensorBlockEntity": {
      "fields": {
        "b": "LOGGER",
        "c": "vibrationData",
        "d": "vibrationListener",
        "e": "vibrationUser",
        "g": "lastVibrationFrequency"
      },
      "methods": {
        "c()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "createVibrationUser",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "gb()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;": "getVibrationData",
        "gc()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "getVibrationUser",
        "f()I": "getLastVibrationFrequency",
        "a(I)V": "setLastVibrationFrequency",
        "g()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Listener;": "getListener",
        "d()Lnet/minecraft/world/level/gameevent/GameEventListener;": "getListener",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$saveAdditional$1",
        "a(Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;)V": "lambda$load$0"
      }
    },
    "net/minecraft/world/level/block/entity/SculkShriekerBlockEntity": {
      "fields": {
        "b": "LOGGER",
        "c": "WARNING_SOUND_RADIUS",
        "d": "WARDEN_SPAWN_ATTEMPTS",
        "e": "WARDEN_SPAWN_RANGE_XZ",
        "g": "WARDEN_SPAWN_RANGE_Y",
        "h": "DARKNESS_RADIUS",
        "i": "SHRIEKING_TICKS",
        "j": "SOUND_BY_LEVEL",
        "k": "warningLevel",
        "l": "vibrationUser",
        "m": "vibrationData",
        "n": "vibrationListener"
      },
      "methods": {
        "gb()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;": "getVibrationData",
        "gc()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "getVibrationUser",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/server/level/ServerPlayer;": "tryGetPlayer",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/server/level/ServerPlayer;)V": "tryShriek",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/server/level/ServerPlayer;)Z": "tryToWarn",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Entity;)V": "shriek",
        "b(Lnet/minecraft/server/level/ServerLevel;)Z": "canRespond",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "tryRespond",
        "b(Lnet/minecraft/world/level/Level;)V": "playWardenReplySound",
        "c(Lnet/minecraft/server/level/ServerLevel;)Z": "trySummonWarden",
        "c()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Listener;": "getListener",
        "d()Lnet/minecraft/world/level/gameevent/GameEventListener;": "getListener",
        "a(I)V": "lambda$tryToWarn$3",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$saveAdditional$2",
        "a(Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;)V": "lambda$load$1",
        "a(Lit/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityShulkerBox": {
      "fields": {
        "c": "COLUMNS",
        "f": "ROWS",
        "g": "CONTAINER_SIZE",
        "j": "EVENT_SET_OPEN_COUNT",
        "k": "OPENING_TICK_LENGTH",
        "l": "MAX_LID_HEIGHT",
        "m": "MAX_LID_ROTATION",
        "n": "ITEMS_TAG",
        "r": "SLOTS",
        "s": "itemStacks",
        "t": "openCount",
        "u": "animationStatus",
        "v": "progress",
        "w": "progressOld",
        "x": "color"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/ShulkerBoxBlockEntity;)V": "tick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "updateAnimation",
        "i()Lnet/minecraft/world/level/block/entity/ShulkerBoxBlockEntity$AnimationStatus;": "getAnimationStatus",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/phys/AABB;": "getBoundingBox",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "moveCollidedEntities",
        "b()I": "getContainerSize",
        "a_(II)Z": "triggerEvent",
        "d(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "doNeighborUpdates",
        "d_(Lnet/minecraft/world/entity/player/Player;)V": "startOpen",
        "c(Lnet/minecraft/world/entity/player/Player;)V": "stopOpen",
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "f(Lnet/minecraft/nbt/CompoundTag;)V": "loadFromTag",
        "f()Lnet/minecraft/core/NonNullList;": "getItems",
        "a(Lnet/minecraft/core/NonNullList;)V": "setItems",
        "a(Lnet/minecraft/core/Direction;)[I": "getSlotsForFace",
        "a(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canPlaceItemThroughFace",
        "b(ILnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/Direction;)Z": "canTakeItemThroughFace",
        "a(F)F": "getProgress",
        "j()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu",
        "v()Z": "isClosed"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityShulkerBox$AnimationPhase": {
      "fields": {
        "a": "CLOSED",
        "b": "OPENING",
        "c": "OPENED",
        "d": "CLOSING",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntitySign": {
      "fields": {
        "a": "LOGGER",
        "b": "MAX_TEXT_LINE_WIDTH",
        "c": "TEXT_LINE_HEIGHT",
        "d": "playerWhoMayEdit",
        "e": "frontText",
        "f": "backText",
        "g": "isWaxed"
      },
      "methods": {
        "f()Lnet/minecraft/world/level/block/entity/SignText;": "createDefaultSignText",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "isFacingFrontText",
        "b(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/level/block/entity/SignText;": "getTextFacingPlayer",
        "a(Z)Lnet/minecraft/world/level/block/entity/SignText;": "getText",
        "g()Lnet/minecraft/world/level/block/entity/SignText;": "getFrontText",
        "i()Lnet/minecraft/world/level/block/entity/SignText;": "getBackText",
        "c()I": "getTextLineHeight",
        "d()I": "getMaxTextLineWidth",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/world/level/block/entity/SignText;)Lnet/minecraft/world/level/block/entity/SignText;": "loadLines",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "loadLine",
        "a(Lnet/minecraft/world/entity/player/Player;ZLjava/util/List;)V": "updateSignText",
        "a(Ljava/util/function/UnaryOperator;Z)Z": "updateText",
        "a(Lnet/minecraft/world/entity/player/Player;Ljava/util/List;Lnet/minecraft/world/level/block/entity/SignText;)Lnet/minecraft/world/level/block/entity/SignText;": "setMessages",
        "a(Lnet/minecraft/world/level/block/entity/SignText;Z)Z": "setText",
        "b(Lnet/minecraft/world/level/block/entity/SignText;)Z": "setBackText",
        "c(Lnet/minecraft/world/level/block/entity/SignText;)Z": "setFrontText",
        "a(ZLnet/minecraft/world/entity/player/Player;)Z": "canExecuteClickCommands",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Z)Z": "executeClickCommandsIfPresent",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/commands/CommandSourceStack;": "createCommandSourceStack",
        "j()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "t()Z": "onlyOpCanSetNbt",
        "a(Ljava/util/UUID;)V": "setAllowedPlayerEditor",
        "v()Ljava/util/UUID;": "getPlayerWhoMayEdit",
        "x()V": "markUpdated",
        "w()Z": "isWaxed",
        "b(Z)Z": "setWaxed",
        "b(Ljava/util/UUID;)Z": "playerIsTooFarAwayToEdit",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/SignBlockEntity;)V": "tick",
        "a(Lnet/minecraft/world/level/block/entity/SignBlockEntity;Lnet/minecraft/world/level/Level;Ljava/util/UUID;)V": "clearInvalidPlayerWhoMayEdit",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "b(Lnet/minecraft/world/entity/player/Player;Ljava/util/List;Lnet/minecraft/world/level/block/entity/SignText;)Lnet/minecraft/world/level/block/entity/SignText;": "lambda$updateSignText$4"
      }
    },
    "net/minecraft/world/level/block/entity/SignText": {
      "fields": {
        "c": "LINES_CODEC",
        "a": "DIRECT_CODEC",
        "b": "LINES",
        "d": "messages",
        "e": "filteredMessages",
        "f": "color",
        "g": "hasGlowingText",
        "h": "renderMessages",
        "i": "renderMessagedFiltered"
      },
      "methods": {
        "c()[Lnet/minecraft/network/chat/Component;": "emptyMessages",
        "a([Lnet/minecraft/network/chat/Component;Ljava/util/Optional;Lnet/minecraft/world/item/DyeColor;Z)Lnet/minecraft/world/level/block/entity/SignText;": "load",
        "a([Lnet/minecraft/network/chat/Component;[Lnet/minecraft/network/chat/Component;)V": "populateFilteredMessagesWithRawMessages",
        "a()Z": "hasGlowingText",
        "a(Z)Lnet/minecraft/world/level/block/entity/SignText;": "setHasGlowingText",
        "b()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/level/block/entity/SignText;": "setColor",
        "a(IZ)Lnet/minecraft/network/chat/Component;": "getMessage",
        "a(ILnet/minecraft/network/chat/Component;)Lnet/minecraft/world/level/block/entity/SignText;": "setMessage",
        "a(ILnet/minecraft/network/chat/Component;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/world/level/block/entity/SignText;": "setMessage",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "hasMessage",
        "b(Z)[Lnet/minecraft/network/chat/Component;": "getMessages",
        "a(ZLjava/util/function/Function;)[Lnet/minecraft/util/FormattedCharSequence;": "getRenderMessages",
        "d()Ljava/util/Optional;": "getOnlyFilteredMessages",
        "b(Lnet/minecraft/world/entity/player/Player;)Z": "hasAnyClickCommands",
        "a(Lnet/minecraft/network/chat/Component;)Z": "lambda$hasMessage$7",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$6",
        "a(Lnet/minecraft/world/level/block/entity/SignText;)Ljava/lang/Boolean;": "lambda$static$5",
        "b(Lnet/minecraft/world/level/block/entity/SignText;)Lnet/minecraft/world/item/DyeColor;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/block/entity/SignText;)[Lnet/minecraft/network/chat/Component;": "lambda$static$3",
        "a([Lnet/minecraft/network/chat/Component;)Ljava/util/List;": "lambda$static$2",
        "a(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "b(Ljava/util/List;)[Lnet/minecraft/network/chat/Component;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntitySkull": {
      "fields": {
        "a": "TAG_SKULL_OWNER",
        "b": "TAG_NOTE_BLOCK_SOUND",
        "c": "profileCache",
        "d": "sessionService",
        "e": "mainThreadExecutor",
        "f": "owner",
        "g": "noteBlockSound",
        "h": "animationTickCount",
        "i": "isAnimating"
      },
      "methods": {
        "a(Lnet/minecraft/server/Services;Ljava/util/concurrent/Executor;)V": "setup",
        "c()V": "clear",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/SkullBlockEntity;)V": "animation",
        "a(F)F": "getAnimation",
        "d()Lcom/mojang/authlib/GameProfile;": "getOwnerProfile",
        "f()Lnet/minecraft/resources/ResourceLocation;": "getNoteBlockSound",
        "g()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a(Lcom/mojang/authlib/GameProfile;)V": "setOwner",
        "i()V": "updateOwnerProfile",
        "a(Lcom/mojang/authlib/GameProfile;Ljava/util/function/Consumer;)V": "updateGameprofile",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "a(Ljava/util/function/Consumer;Lcom/mojang/authlib/GameProfile;Ljava/util/Optional;)V": "lambda$updateGameprofile$6",
        "a(Ljava/util/Optional;Ljava/util/function/Consumer;Lcom/mojang/authlib/GameProfile;)V": "lambda$updateGameprofile$5",
        "a(Ljava/util/function/Consumer;Lcom/mojang/authlib/GameProfile;)V": "lambda$updateGameprofile$4",
        "b(Ljava/util/function/Consumer;Lcom/mojang/authlib/GameProfile;)V": "lambda$updateGameprofile$3",
        "c(Ljava/util/function/Consumer;Lcom/mojang/authlib/GameProfile;)V": "lambda$updateGameprofile$2",
        "b(Lcom/mojang/authlib/GameProfile;Ljava/util/function/Consumer;)V": "lambda$updateGameprofile$1",
        "b(Lcom/mojang/authlib/GameProfile;)V": "lambda$updateOwnerProfile$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntitySmoker": {
      "methods": {
        "g()Lnet/minecraft/network/chat/Component;": "getDefaultName",
        "a(Lnet/minecraft/world/item/ItemStack;)I": "getBurnDuration",
        "a(ILnet/minecraft/world/entity/player/Inventory;)Lnet/minecraft/world/inventory/AbstractContainerMenu;": "createMenu"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityMobSpawner": {
      "fields": {
        "a": "spawner"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/SpawnerBlockEntity;)V": "clientTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/SpawnerBlockEntity;)V": "serverTick",
        "c()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a_(II)Z": "triggerEvent",
        "t()Z": "onlyOpCanSetNbt",
        "a(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/util/RandomSource;)V": "setEntityId",
        "d()Lnet/minecraft/world/level/BaseSpawner;": "getSpawner",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityStructure": {
      "fields": {
        "d": "SCAN_CORNER_BLOCKS_RANGE",
        "a": "MAX_OFFSET_PER_AXIS",
        "b": "MAX_SIZE_PER_AXIS",
        "c": "AUTHOR_TAG",
        "e": "structureName",
        "f": "author",
        "g": "metaData",
        "h": "structurePos",
        "i": "structureSize",
        "j": "mirror",
        "k": "rotation",
        "l": "mode",
        "m": "ignoreEntities",
        "n": "powered",
        "r": "showAir",
        "s": "showBoundingBox",
        "t": "integrity",
        "u": "seed"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "J()V": "updateBlockState",
        "c()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "a(Lnet/minecraft/world/entity/player/Player;)Z": "usedBy",
        "d()Ljava/lang/String;": "getStructureName",
        "f()Ljava/lang/String;": "getStructurePath",
        "g()Z": "hasStructureName",
        "a(Ljava/lang/String;)V": "setStructureName",
        "a(Lnet/minecraft/resources/ResourceLocation;)V": "setStructureName",
        "a(Lnet/minecraft/world/entity/LivingEntity;)V": "createdBy",
        "i()Lnet/minecraft/core/BlockPos;": "getStructurePos",
        "a(Lnet/minecraft/core/BlockPos;)V": "setStructurePos",
        "j()Lnet/minecraft/core/Vec3i;": "getStructureSize",
        "a(Lnet/minecraft/core/Vec3i;)V": "setStructureSize",
        "v()Lnet/minecraft/world/level/block/Mirror;": "getMirror",
        "a(Lnet/minecraft/world/level/block/Mirror;)V": "setMirror",
        "w()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "a(Lnet/minecraft/world/level/block/Rotation;)V": "setRotation",
        "x()Ljava/lang/String;": "getMetaData",
        "b(Ljava/lang/String;)V": "setMetaData",
        "y()Lnet/minecraft/world/level/block/state/properties/StructureMode;": "getMode",
        "a(Lnet/minecraft/world/level/block/state/properties/StructureMode;)V": "setMode",
        "z()Z": "isIgnoreEntities",
        "a(Z)V": "setIgnoreEntities",
        "A()F": "getIntegrity",
        "a(F)V": "setIntegrity",
        "B()J": "getSeed",
        "a(J)V": "setSeed",
        "C()Z": "detectSize",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getRelatedCorners",
        "a(Lnet/minecraft/core/BlockPos;Ljava/util/stream/Stream;)Ljava/util/Optional;": "calculateEnclosingBoundingBox",
        "D()Z": "saveStructure",
        "b(Z)Z": "saveStructure",
        "a(Lnet/minecraft/server/level/ServerLevel;)Z": "loadStructure",
        "b(J)Lnet/minecraft/util/RandomSource;": "createRandom",
        "a(Lnet/minecraft/server/level/ServerLevel;Z)Z": "loadStructure",
        "a(Lnet/minecraft/server/level/ServerLevel;ZLnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;)Z": "loadStructure",
        "E()V": "unloadStructure",
        "F()Z": "isStructureLoadable",
        "G()Z": "isPowered",
        "c(Z)V": "setPowered",
        "H()Z": "getShowAir",
        "d(Z)V": "setShowAir",
        "I()Z": "getShowBoundingBox",
        "e(Z)V": "setShowBoundingBox",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)V": "lambda$loadStructure$5",
        "a(Lnet/minecraft/world/level/block/entity/StructureBlockEntity;)Z": "lambda$getRelatedCorners$4",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)Lnet/minecraft/world/level/block/entity/StructureBlockEntity;": "lambda$getRelatedCorners$3",
        "b(Lnet/minecraft/world/level/block/entity/BlockEntity;)Z": "lambda$getRelatedCorners$2",
        "b(Lnet/minecraft/core/BlockPos;)Z": "lambda$getRelatedCorners$1",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Z": "lambda$detectSize$0"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityStructure$UpdateType": {
      "fields": {
        "a": "UPDATE_DATA",
        "b": "SAVE_AREA",
        "c": "LOAD_AREA",
        "d": "SCAN_AREA",
        "e": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/block/entity/StructureBlockEntity$UpdateType;": "$values"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityEndGateway": {
      "fields": {
        "a": "LOGGER",
        "b": "SPAWN_TIME",
        "c": "COOLDOWN_TIME",
        "d": "ATTENTION_INTERVAL",
        "e": "EVENT_COOLDOWN",
        "f": "GATEWAY_HEIGHT_ABOVE_SURFACE",
        "g": "age",
        "h": "teleportCooldown",
        "i": "exitPortal",
        "j": "exactTeleport"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/TheEndGatewayBlockEntity;)V": "beamAnimationTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/TheEndGatewayBlockEntity;)V": "teleportTick",
        "a(Lnet/minecraft/world/entity/Entity;)Z": "canEntityTeleport",
        "c()Z": "isSpawning",
        "d()Z": "isCoolingDown",
        "a(F)F": "getSpawnPercent",
        "b(F)F": "getCooldownPercent",
        "f()Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;": "getUpdatePacket",
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "c(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/TheEndGatewayBlockEntity;)V": "triggerCooldown",
        "a_(II)Z": "triggerEvent",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/level/block/entity/TheEndGatewayBlockEntity;)V": "teleportEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "findExitPosition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "findOrCreateValidTeleportPos",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "findExitPortalXZPosTentative",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;)Z": "isChunkEmpty",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;IZ)Lnet/minecraft/core/BlockPos;": "findTallestBlock",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/level/chunk/LevelChunk;": "getChunk",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;)Lnet/minecraft/core/BlockPos;": "findValidSpawnInChunk",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration;)V": "spawnGatewayPortal",
        "a(Lnet/minecraft/core/Direction;)Z": "shouldRenderFace",
        "g()I": "getParticleAmount",
        "a(Lnet/minecraft/core/BlockPos;Z)V": "setExitPosition",
        "h()Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityEnderPortal": {
      "methods": {
        "a(Lnet/minecraft/core/Direction;)Z": "shouldRenderFace"
      }
    },
    "net/minecraft/world/level/block/entity/TickingBlockEntity": {
      "methods": {
        "a()V": "tick",
        "b()Z": "isRemoved",
        "c()Lnet/minecraft/core/BlockPos;": "getPos",
        "d()Ljava/lang/String;": "getType"
      }
    },
    "net/minecraft/world/level/block/entity/TileEntityChestTrapped": {
      "methods": {
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;II)V": "signalOpenCount"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenMegaTreeProvider": {
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "growTree",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/resources/ResourceKey;": "getConfiguredMegaFeature",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;II)Z": "placeMega",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;II)Z": "isTwoByTwoSapling"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenTreeProvider": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "growTree",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "hasFlowers"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenTreeProviderAcacia": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature"
      }
    },
    "net/minecraft/world/level/block/grower/AzaleaTreeGrower": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenTreeProviderBirch": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature"
      }
    },
    "net/minecraft/world/level/block/grower/CherryTreeGrower": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenMegaTreeProviderDarkOak": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/resources/ResourceKey;": "getConfiguredMegaFeature"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenMegaTreeProviderJungle": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/resources/ResourceKey;": "getConfiguredMegaFeature"
      }
    },
    "net/minecraft/world/level/block/grower/MangroveTreeGrower": {
      "fields": {
        "a": "tallProbability"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenTreeProviderOak": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature"
      }
    },
    "net/minecraft/world/level/block/grower/WorldGenTreeProviderSpruce": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Z)Lnet/minecraft/resources/ResourceKey;": "getConfiguredFeature",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/resources/ResourceKey;": "getConfiguredMegaFeature"
      }
    },
    "net/minecraft/world/level/block/piston/BlockPistonMoving": {
      "fields": {
        "a": "FACING",
        "b": "TYPE"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newBlockEntity",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;ZZ)Lnet/minecraft/world/level/block/entity/BlockEntity;": "newMovingBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "destroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/piston/PistonMovingBlockEntity;": "getBlockEntity",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/piston/BlockPiston": {
      "fields": {
        "b": "EXTENDED",
        "c": "TRIGGER_EXTEND",
        "d": "TRIGGER_CONTRACT",
        "e": "TRIGGER_DROP",
        "f": "PLATFORM_THICKNESS",
        "g": "EAST_AABB",
        "h": "WEST_AABB",
        "i": "SOUTH_AABB",
        "j": "NORTH_AABB",
        "k": "UP_AABB",
        "l": "DOWN_AABB",
        "m": "isSticky"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)V": "setPlacedBy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Lnet/minecraft/world/level/block/state/BlockState;": "getStateForPlacement",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "checkIfExtend",
        "a(Lnet/minecraft/world/level/SignalGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "getNeighborSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;II)Z": "triggerEvent",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;ZLnet/minecraft/core/Direction;)Z": "isPushable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Z)Z": "moveBlocks",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable"
      }
    },
    "net/minecraft/world/level/block/piston/BlockPistonExtension": {
      "fields": {
        "b": "TYPE",
        "c": "SHORT",
        "d": "PLATFORM",
        "e": "EAST_AABB",
        "f": "WEST_AABB",
        "g": "SOUTH_AABB",
        "h": "NORTH_AABB",
        "i": "UP_AABB",
        "j": "DOWN_AABB",
        "k": "AABB_OFFSET",
        "l": "EDGE_MIN",
        "m": "EDGE_MAX",
        "n": "UP_ARM_AABB",
        "D": "DOWN_ARM_AABB",
        "E": "SOUTH_ARM_AABB",
        "F": "NORTH_ARM_AABB",
        "G": "EAST_ARM_AABB",
        "H": "WEST_ARM_AABB",
        "I": "SHORT_UP_ARM_AABB",
        "J": "SHORT_DOWN_ARM_AABB",
        "K": "SHORT_SOUTH_ARM_AABB",
        "L": "SHORT_NORTH_ARM_AABB",
        "M": "SHORT_EAST_ARM_AABB",
        "N": "SHORT_WEST_ARM_AABB",
        "O": "SHAPES_SHORT",
        "P": "SHAPES_LONG"
      },
      "methods": {
        "a(Z)[Lnet/minecraft/world/phys/shapes/VoxelShape;": "makeShapes",
        "a(Lnet/minecraft/core/Direction;Z)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isFittingBase",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V": "playerWillDestroy",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;": "getCloneItemStack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createBlockStateDefinition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "b(I)[Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$makeShapes$1",
        "a(ZLnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$makeShapes$0"
      }
    },
    "net/minecraft/world/level/block/piston/PistonUtil": {
      "methods": {
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/core/Direction;D)Lnet/minecraft/world/phys/AABB;": "getMovementArea"
      }
    },
    "net/minecraft/world/level/block/piston/TileEntityPiston": {
      "fields": {
        "b": "TICKS_TO_EXTEND",
        "c": "PUSH_OFFSET",
        "a": "TICK_MOVEMENT",
        "d": "movedState",
        "e": "direction",
        "f": "extending",
        "g": "isSourcePiston",
        "h": "NOCLIP",
        "i": "progress",
        "j": "progressO",
        "k": "lastTicked",
        "l": "deathTicks"
      },
      "methods": {
        "ao_()Lnet/minecraft/nbt/CompoundTag;": "getUpdateTag",
        "c()Z": "isExtending",
        "d()Lnet/minecraft/core/Direction;": "getDirection",
        "f()Z": "isSourcePiston",
        "a(F)F": "getProgress",
        "b(F)F": "getXOff",
        "c(F)F": "getYOff",
        "d(F)F": "getZOff",
        "e(F)F": "getExtendedProgress",
        "w()Lnet/minecraft/world/level/block/state/BlockState;": "getCollisionRelatedBlockState",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;FLnet/minecraft/world/level/block/piston/PistonMovingBlockEntity;)V": "moveCollidedEntities",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/entity/Entity;DLnet/minecraft/core/Direction;)V": "moveEntityByPiston",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;FLnet/minecraft/world/level/block/piston/PistonMovingBlockEntity;)V": "moveStuckEntities",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/BlockPos;)Z": "matchesStickyCritera",
        "x()Z": "isStickyForEntities",
        "g()Lnet/minecraft/core/Direction;": "getMovementDirection",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/core/Direction;Lnet/minecraft/world/phys/AABB;)D": "getMovement",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/level/block/piston/PistonMovingBlockEntity;)Lnet/minecraft/world/phys/AABB;": "moveByPositionAndProgress",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Direction;D)V": "fixEntityWithinPistonBase",
        "i()Lnet/minecraft/world/level/block/state/BlockState;": "getMovedState",
        "j()V": "finalTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/piston/PistonMovingBlockEntity;)V": "tick",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "saveAdditional",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "v()J": "getLastTicked",
        "a(Lnet/minecraft/world/level/Level;)V": "setLevel",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)Z": "lambda$moveStuckEntities$1",
        "y()Lnet/minecraft/core/Direction;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/piston/PistonExtendsChecker": {
      "fields": {
        "a": "MAX_PUSH_DEPTH",
        "b": "level",
        "c": "pistonPos",
        "d": "extending",
        "e": "startPos",
        "f": "pushDirection",
        "g": "toPush",
        "h": "toDestroy",
        "i": "pistonDirection"
      },
      "methods": {
        "a()Z": "resolve",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSticky",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canStickToEachOther",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "addBlockLine",
        "a(II)V": "reorderListAtCollision",
        "a(Lnet/minecraft/core/BlockPos;)Z": "addBranchingBlocks",
        "b()Lnet/minecraft/core/Direction;": "getPushDirection",
        "c()Ljava/util/List;": "getToPush",
        "d()Ljava/util/List;": "getToDestroy"
      }
    },
    "net/minecraft/world/level/block/state/BlockBase": {
      "fields": {
        "aD": "UPDATE_SHAPE_ORDER",
        "aE": "hasCollision",
        "aF": "explosionResistance",
        "aG": "isRandomlyTicking",
        "aH": "soundType",
        "aI": "friction",
        "aJ": "speedFactor",
        "aK": "jumpFactor",
        "aL": "dynamicShape",
        "aM": "requiredFeatures",
        "aN": "properties",
        "aO": "drops"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;II)V": "updateIndirectNeighbourShapes",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;II)Z": "triggerEvent",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "g_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "useShapeForLightOcclusion",
        "f_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isSignalSource",
        "c_(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "d_(Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasAnalogOutputSignal",
        "al_()F": "getMaxHorizontalOffset",
        "an_()F": "getMaxVerticalOffset",
        "m()Lnet/minecraft/world/flag/FeatureFlagSet;": "requiredFeatures",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)J": "getSeed",
        "f(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "b_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getInteractionShape",
        "g(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getLightBlock",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "c(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "a_(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isCollisionShapeFullBlock",
        "h(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isOcclusionShapeFullBlock",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getDestroyProgress",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "attack",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "b(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "r()Lnet/minecraft/resources/ResourceLocation;": "getLootTable",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "k()Lnet/minecraft/world/item/Item;": "asItem",
        "p()Lnet/minecraft/world/level/block/Block;": "asBlock",
        "s()Lnet/minecraft/world/level/material/MapColor;": "defaultMapColor",
        "t()F": "defaultDestroyTime"
      }
    },
    "net/minecraft/world/level/block/state/BlockBase$BlockData": {
      "fields": {
        "b": "lightEmission",
        "g": "useShapeForLightOcclusion",
        "h": "isAir",
        "i": "ignitedByLava",
        "j": "liquid",
        "k": "legacySolid",
        "l": "pushReaction",
        "m": "mapColor",
        "n": "destroySpeed",
        "o": "requiresCorrectToolForDrops",
        "p": "canOcclude",
        "q": "isRedstoneConductor",
        "r": "isSuffocating",
        "s": "isViewBlocking",
        "t": "hasPostProcess",
        "u": "emissiveRendering",
        "v": "offsetFunction",
        "w": "spawnParticlesOnBreak",
        "x": "instrument",
        "y": "replaceable",
        "a": "cache",
        "z": "fluidState",
        "A": "isRandomlyTicking"
      },
      "methods": {
        "D()Z": "calculateSolid",
        "a()V": "initCache",
        "b()Lnet/minecraft/world/level/block/Block;": "getBlock",
        "c()Lnet/minecraft/core/Holder;": "getBlockHolder",
        "d()Z": "blocksMotion",
        "e()Z": "isSolid",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/EntityType;)Z": "isValidSpawn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "propagatesSkylightDown",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)I": "getLightBlock",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getFaceOcclusionShape",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "f()Z": "hasLargeCollisionShape",
        "g()Z": "useShapeForLightOcclusion",
        "h()I": "getLightEmission",
        "i()Z": "isAir",
        "j()Z": "ignitedByLava",
        "k()Z": "liquid",
        "d(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/MapColor;": "getMapColor",
        "a(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;": "rotate",
        "a(Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;": "mirror",
        "l()Lnet/minecraft/world/level/block/RenderShape;": "getRenderShape",
        "e(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "emissiveRendering",
        "f(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getShadeBrightness",
        "g(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isRedstoneConductor",
        "m()Z": "isSignalSource",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getSignal",
        "n()Z": "hasAnalogOutputSignal",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)I": "getAnalogOutputSignal",
        "h(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getDestroySpeed",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getDestroyProgress",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDirectSignal",
        "o()Lnet/minecraft/world/level/material/PushReaction;": "getPistonPushReaction",
        "i(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isSolidRender",
        "p()Z": "canOcclude",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "skipRendering",
        "j(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "k(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "l(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getBlockSupportShape",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getVisualShape",
        "m(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getInteractionShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)Z": "entityCanStandOn",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/core/Direction;)Z": "entityCanStandOnFace",
        "n(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "getOffset",
        "q()Z": "hasOffsetFunction",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;II)Z": "triggerEvent",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;I)V": "updateNeighbourShapes",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;II)V": "updateNeighbourShapes",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;I)V": "updateIndirectNeighbourShapes",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;II)V": "updateIndirectNeighbourShapes",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onPlace",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "onRemove",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "tick",
        "b(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/Entity;)V": "entityInside",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/item/ItemStack;Z)V": "spawnAfterBreak",
        "a(Lnet/minecraft/world/level/storage/loot/LootParams$Builder;)Ljava/util/List;": "getDrops",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/phys/BlockHitResult;)Lnet/minecraft/world/InteractionResult;": "use",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)V": "attack",
        "o(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isSuffocating",
        "p(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isViewBlocking",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateShape",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z": "isPathfindable",
        "a(Lnet/minecraft/world/item/context/BlockPlaceContext;)Z": "canBeReplaced",
        "r()Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "canSurvive",
        "q(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "hasPostProcess",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/MenuProvider;": "getMenuProvider",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "a(Lnet/minecraft/tags/TagKey;Ljava/util/function/Predicate;)Z": "is",
        "a(Lnet/minecraft/core/HolderSet;)Z": "is",
        "s()Ljava/util/stream/Stream;": "getTags",
        "t()Z": "hasBlockEntity",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/block/entity/BlockEntityTicker;": "getTicker",
        "a(Lnet/minecraft/world/level/block/Block;)Z": "is",
        "u()Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "v()Z": "isRandomlyTicking",
        "a(Lnet/minecraft/core/BlockPos;)J": "getSeed",
        "w()Lnet/minecraft/world/level/block/SoundType;": "getSoundType",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/BlockHitResult;Lnet/minecraft/world/entity/projectile/Projectile;)V": "onProjectileHit",
        "d(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isFaceSturdy",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/SupportType;)Z": "isFaceSturdy",
        "r(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "isCollisionShapeFullBlock",
        "x()Lnet/minecraft/world/level/block/state/BlockState;": "asState",
        "y()Z": "requiresCorrectToolForDrops",
        "z()Z": "shouldSpawnParticlesOnBreak",
        "A()Lnet/minecraft/world/level/block/state/properties/NoteBlockInstrument;": "instrument"
      }
    },
    "net/minecraft/world/level/block/state/BlockBase$BlockData$Cache": {
      "fields": {
        "e": "DIRECTIONS",
        "f": "SUPPORT_TYPE_COUNT",
        "a": "solidRender",
        "g": "propagatesSkylightDown",
        "h": "lightBlock",
        "i": "occlusionShapes",
        "b": "collisionShape",
        "c": "largeCollisionShape",
        "j": "faceSturdy",
        "d": "isCollisionShapeFullBlock"
      },
      "methods": {
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/SupportType;)Z": "isFaceSturdy",
        "b(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/SupportType;)I": "getFaceSupportIndex"
      }
    },
    "net/minecraft/world/level/block/state/BlockBase$EnumRandomOffset": {
      "fields": {
        "a": "NONE",
        "b": "XZ",
        "c": "XYZ",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/block/state/BlockBase$Info": {
      "fields": {
        "a": "mapColor",
        "b": "hasCollision",
        "c": "soundType",
        "d": "lightEmission",
        "e": "explosionResistance",
        "f": "destroyTime",
        "g": "requiresCorrectToolForDrops",
        "h": "isRandomlyTicking",
        "i": "friction",
        "j": "speedFactor",
        "k": "jumpFactor",
        "l": "drops",
        "m": "canOcclude",
        "n": "isAir",
        "o": "ignitedByLava",
        "p": "liquid",
        "q": "forceSolidOff",
        "r": "forceSolidOn",
        "s": "pushReaction",
        "t": "spawnParticlesOnBreak",
        "u": "instrument",
        "v": "replaceable",
        "w": "isValidSpawn",
        "x": "isRedstoneConductor",
        "y": "isSuffocating",
        "z": "isViewBlocking",
        "A": "hasPostProcess",
        "B": "emissiveRendering",
        "C": "dynamicShape",
        "D": "requiredFeatures",
        "E": "offsetFunction"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "of",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "copy",
        "a(Lnet/minecraft/world/item/DyeColor;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "mapColor",
        "a(Lnet/minecraft/world/level/material/MapColor;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "mapColor",
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "mapColor",
        "b()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "noCollission",
        "c()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "noOcclusion",
        "a(F)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "friction",
        "b(F)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "speedFactor",
        "c(F)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "jumpFactor",
        "a(Lnet/minecraft/world/level/block/SoundType;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "sound",
        "a(Ljava/util/function/ToIntFunction;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "lightLevel",
        "a(FF)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "strength",
        "d()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "instabreak",
        "d(F)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "strength",
        "e()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "randomTicks",
        "f()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "dynamicShape",
        "g()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "noLootTable",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "dropsLike",
        "h()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "ignitedByLava",
        "i()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "liquid",
        "j()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "forceSolidOn",
        "k()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "forceSolidOff",
        "a(Lnet/minecraft/world/level/material/PushReaction;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "pushReaction",
        "l()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "air",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour$StateArgumentPredicate;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "isValidSpawn",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour$StatePredicate;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "isRedstoneConductor",
        "b(Lnet/minecraft/world/level/block/state/BlockBehaviour$StatePredicate;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "isSuffocating",
        "c(Lnet/minecraft/world/level/block/state/BlockBehaviour$StatePredicate;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "isViewBlocking",
        "d(Lnet/minecraft/world/level/block/state/BlockBehaviour$StatePredicate;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "hasPostProcess",
        "e(Lnet/minecraft/world/level/block/state/BlockBehaviour$StatePredicate;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "emissiveRendering",
        "m()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "requiresCorrectToolForDrops",
        "e(F)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "destroyTime",
        "f(F)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "explosionResistance",
        "a(Lnet/minecraft/world/level/block/state/BlockBehaviour$OffsetType;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "offsetType",
        "n()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "noParticlesOnBreak",
        "a([Lnet/minecraft/world/flag/FeatureFlag;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "requiredFeatures",
        "a(Lnet/minecraft/world/level/block/state/properties/NoteBlockInstrument;)Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "instrument",
        "o()Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;": "replaceable"
      }
    },
    "net/minecraft/world/level/block/state/IBlockData": {
      "fields": {
        "b": "CODEC"
      },
      "methods": {
        "x()Lnet/minecraft/world/level/block/state/BlockState;": "asState"
      }
    },
    "net/minecraft/world/level/block/state/BlockStateList": {
      "fields": {
        "a": "NAME_PATTERN",
        "b": "owner",
        "c": "propertiesByName",
        "d": "states"
      },
      "methods": {
        "a(Lcom/mojang/serialization/MapCodec;Ljava/util/function/Supplier;Ljava/lang/String;Lnet/minecraft/world/level/block/state/properties/Property;)Lcom/mojang/serialization/MapCodec;": "appendPropertyCodec",
        "a()Lcom/google/common/collect/ImmutableList;": "getPossibleStates",
        "b()Lnet/minecraft/world/level/block/state/StateHolder;": "any",
        "c()Ljava/lang/Object;": "getOwner",
        "d()Ljava/util/Collection;": "getProperties",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/block/state/properties/Property;": "getProperty",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Lnet/minecraft/world/level/block/state/StateHolder;)Lcom/mojang/datafixers/util/Pair;": "lambda$appendPropertyCodec$7",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Lcom/mojang/datafixers/util/Pair;)Lnet/minecraft/world/level/block/state/StateHolder;": "lambda$appendPropertyCodec$6",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/util/function/Supplier;)Lnet/minecraft/world/level/block/state/properties/Property$Value;": "lambda$appendPropertyCodec$5",
        "b(Ljava/lang/String;)V": "lambda$appendPropertyCodec$4",
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Factory;Ljava/lang/Object;Lcom/mojang/serialization/MapCodec;Ljava/util/Map;Ljava/util/List;Ljava/util/List;)V": "lambda$new$3",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/util/List;)Ljava/util/stream/Stream;": "lambda$new$2",
        "a(Ljava/util/List;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)Ljava/util/List;": "lambda$new$1",
        "a(Ljava/util/function/Function;Ljava/lang/Object;)Lnet/minecraft/world/level/block/state/StateHolder;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/block/state/IBlockDataHolder": {
      "fields": {
        "c": "NAME_TAG",
        "d": "PROPERTIES_TAG",
        "a": "PROPERTY_ENTRY_TO_STRING_FUNCTION",
        "e": "owner",
        "b": "values",
        "g": "neighbours",
        "f": "propertiesCodec"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/properties/Property;)Ljava/lang/Object;": "cycle",
        "a(Ljava/util/Collection;Ljava/lang/Object;)Ljava/lang/Object;": "findNextInCollection",
        "B()Ljava/util/Collection;": "getProperties",
        "b(Lnet/minecraft/world/level/block/state/properties/Property;)Z": "hasProperty",
        "c(Lnet/minecraft/world/level/block/state/properties/Property;)Ljava/lang/Comparable;": "getValue",
        "d(Lnet/minecraft/world/level/block/state/properties/Property;)Ljava/util/Optional;": "getOptionalValue",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)Ljava/lang/Object;": "setValue",
        "b(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)Ljava/lang/Object;": "trySetValue",
        "a(Ljava/util/Map;)V": "populateNeighbours",
        "c(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/lang/Comparable;)Ljava/util/Map;": "makeNeighbourValues",
        "C()Lcom/google/common/collect/ImmutableMap;": "getValues",
        "a(Lcom/mojang/serialization/Codec;Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Ljava/util/function/Function;Ljava/lang/Object;)Lcom/mojang/serialization/Codec;": "lambda$codec$2",
        "a(Lnet/minecraft/world/level/block/state/StateHolder;Ljava/util/Optional;)Lnet/minecraft/world/level/block/state/StateHolder;": "lambda$codec$1",
        "a(Lnet/minecraft/world/level/block/state/StateHolder;)Ljava/lang/Object;": "lambda$codec$0"
      }
    },
    "net/minecraft/world/level/block/state/pattern/ShapeDetectorBlock": {
      "fields": {
        "a": "level",
        "b": "pos",
        "c": "loadChunks",
        "d": "state",
        "e": "entity",
        "f": "cachedEntity"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "b()Lnet/minecraft/world/level/block/entity/BlockEntity;": "getEntity",
        "c()Lnet/minecraft/world/level/LevelReader;": "getLevel",
        "d()Lnet/minecraft/core/BlockPos;": "getPos",
        "a(Ljava/util/function/Predicate;)Ljava/util/function/Predicate;": "hasState",
        "a(Ljava/util/function/Predicate;Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$hasState$0"
      }
    },
    "net/minecraft/world/level/block/state/pattern/ShapeDetector": {
      "fields": {
        "a": "pattern",
        "b": "depth",
        "c": "height",
        "d": "width"
      },
      "methods": {
        "a()I": "getDepth",
        "b()I": "getHeight",
        "c()I": "getWidth",
        "d()[[[Ljava/util/function/Predicate;": "getPattern",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;": "matches",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Lcom/google/common/cache/LoadingCache;)Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;": "matches",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;": "find",
        "a(Lnet/minecraft/world/level/LevelReader;Z)Lcom/google/common/cache/LoadingCache;": "createLevelCache",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;III)Lnet/minecraft/core/BlockPos;": "translateAndRotate"
      }
    },
    "net/minecraft/world/level/block/state/pattern/ShapeDetector$BlockLoader": {
      "fields": {
        "a": "level",
        "b": "loadChunks"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;": "load"
      }
    },
    "net/minecraft/world/level/block/state/pattern/ShapeDetector$ShapeDetectorCollection": {
      "fields": {
        "a": "frontTopLeft",
        "b": "forwards",
        "c": "up",
        "d": "cache",
        "e": "width",
        "f": "height",
        "g": "depth"
      },
      "methods": {
        "a()Lnet/minecraft/core/BlockPos;": "getFrontTopLeft",
        "b()Lnet/minecraft/core/Direction;": "getForwards",
        "c()Lnet/minecraft/core/Direction;": "getUp",
        "d()I": "getWidth",
        "e()I": "getHeight",
        "f()I": "getDepth",
        "a(III)Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;": "getBlock"
      }
    },
    "net/minecraft/world/level/block/state/pattern/ShapeDetectorBuilder": {
      "fields": {
        "a": "COMMA_JOINED",
        "b": "pattern",
        "c": "lookup",
        "d": "height",
        "e": "width"
      },
      "methods": {
        "a([Ljava/lang/String;)Lnet/minecraft/world/level/block/state/pattern/BlockPatternBuilder;": "aisle",
        "a()Lnet/minecraft/world/level/block/state/pattern/BlockPatternBuilder;": "start",
        "a(CLjava/util/function/Predicate;)Lnet/minecraft/world/level/block/state/pattern/BlockPatternBuilder;": "where",
        "b()Lnet/minecraft/world/level/block/state/pattern/BlockPattern;": "build",
        "c()[[[Ljava/util/function/Predicate;": "createPattern",
        "d()V": "ensureAllCharactersMatched",
        "a(Lnet/minecraft/world/level/block/state/pattern/BlockInWorld;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/block/state/predicate/BlockPredicate": {
      "fields": {
        "a": "block"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/predicate/BlockPredicate;": "forBlock",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test"
      }
    },
    "net/minecraft/world/level/block/state/predicate/BlockStatePredicate": {
      "fields": {
        "a": "ANY",
        "b": "definition",
        "c": "properties"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/predicate/BlockStatePredicate;": "forBlock",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;Ljava/util/function/Predicate;)Z": "applies",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;Ljava/util/function/Predicate;)Lnet/minecraft/world/level/block/state/predicate/BlockStatePredicate;": "where",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyAttachPosition": {
      "fields": {
        "a": "FLOOR",
        "b": "WALL",
        "c": "CEILING",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/AttachFace;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyBambooSize": {
      "fields": {
        "a": "NONE",
        "b": "SMALL",
        "c": "LARGE",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/BambooLeaves;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyBedPart": {
      "fields": {
        "a": "HEAD",
        "b": "FOOT",
        "c": "name",
        "d": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/BedPart;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyBellAttach": {
      "fields": {
        "a": "FLOOR",
        "b": "CEILING",
        "c": "SINGLE_WALL",
        "d": "DOUBLE_WALL",
        "e": "name",
        "f": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/BellAttachType;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockSetType": {
      "fields": {
        "p": "name",
        "q": "canOpenByHand",
        "r": "soundType",
        "s": "doorClose",
        "t": "doorOpen",
        "u": "trapdoorClose",
        "v": "trapdoorOpen",
        "w": "pressurePlateClickOff",
        "x": "pressurePlateClickOn",
        "y": "buttonClickOff",
        "z": "buttonClickOn",
        "A": "VALUES",
        "a": "IRON",
        "b": "GOLD",
        "c": "STONE",
        "d": "POLISHED_BLACKSTONE",
        "e": "OAK",
        "f": "SPRUCE",
        "g": "BIRCH",
        "h": "ACACIA",
        "i": "CHERRY",
        "j": "JUNGLE",
        "k": "DARK_OAK",
        "l": "CRIMSON",
        "m": "WARPED",
        "n": "MANGROVE",
        "o": "BAMBOO"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/properties/BlockSetType;)Lnet/minecraft/world/level/block/state/properties/BlockSetType;": "register",
        "a()Ljava/util/stream/Stream;": "values",
        "b()Ljava/lang/String;": "name",
        "c()Z": "canOpenByHand",
        "d()Lnet/minecraft/world/level/block/SoundType;": "soundType",
        "e()Lnet/minecraft/sounds/SoundEvent;": "doorClose",
        "f()Lnet/minecraft/sounds/SoundEvent;": "doorOpen",
        "g()Lnet/minecraft/sounds/SoundEvent;": "trapdoorClose",
        "h()Lnet/minecraft/sounds/SoundEvent;": "trapdoorOpen",
        "i()Lnet/minecraft/sounds/SoundEvent;": "pressurePlateClickOff",
        "j()Lnet/minecraft/sounds/SoundEvent;": "pressurePlateClickOn",
        "k()Lnet/minecraft/sounds/SoundEvent;": "buttonClickOff",
        "l()Lnet/minecraft/sounds/SoundEvent;": "buttonClickOn"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockProperties": {
      "fields": {
        "a": "ATTACHED",
        "b": "BOTTOM",
        "c": "CONDITIONAL",
        "d": "DISARMED",
        "e": "DRAG",
        "f": "ENABLED",
        "g": "EXTENDED",
        "h": "EYE",
        "i": "FALLING",
        "j": "HANGING",
        "k": "HAS_BOTTLE_0",
        "l": "HAS_BOTTLE_1",
        "m": "HAS_BOTTLE_2",
        "n": "HAS_RECORD",
        "o": "HAS_BOOK",
        "p": "INVERTED",
        "q": "IN_WALL",
        "r": "LIT",
        "s": "LOCKED",
        "t": "OCCUPIED",
        "u": "OPEN",
        "v": "PERSISTENT",
        "w": "POWERED",
        "x": "SHORT",
        "y": "SIGNAL_FIRE",
        "z": "SNOWY",
        "A": "TRIGGERED",
        "B": "UNSTABLE",
        "C": "WATERLOGGED",
        "D": "BERRIES",
        "E": "BLOOM",
        "F": "SHRIEKING",
        "G": "CAN_SUMMON",
        "H": "HORIZONTAL_AXIS",
        "I": "AXIS",
        "J": "UP",
        "K": "DOWN",
        "L": "NORTH",
        "M": "EAST",
        "N": "SOUTH",
        "O": "WEST",
        "P": "FACING",
        "Q": "FACING_HOPPER",
        "R": "HORIZONTAL_FACING",
        "S": "FLOWER_AMOUNT",
        "T": "ORIENTATION",
        "U": "ATTACH_FACE",
        "V": "BELL_ATTACHMENT",
        "W": "EAST_WALL",
        "X": "NORTH_WALL",
        "Y": "SOUTH_WALL",
        "Z": "WEST_WALL",
        "aa": "EAST_REDSTONE",
        "ab": "NORTH_REDSTONE",
        "ac": "SOUTH_REDSTONE",
        "ad": "WEST_REDSTONE",
        "ae": "DOUBLE_BLOCK_HALF",
        "af": "HALF",
        "ag": "RAIL_SHAPE",
        "ah": "RAIL_SHAPE_STRAIGHT",
        "ai": "MAX_AGE_1",
        "aj": "MAX_AGE_2",
        "ak": "MAX_AGE_3",
        "al": "MAX_AGE_4",
        "am": "MAX_AGE_5",
        "an": "MAX_AGE_7",
        "ao": "MAX_AGE_15",
        "ap": "MAX_AGE_25",
        "aq": "AGE_1",
        "ar": "AGE_2",
        "as": "AGE_3",
        "at": "AGE_4",
        "au": "AGE_5",
        "av": "AGE_7",
        "aw": "AGE_15",
        "ax": "AGE_25",
        "ay": "BITES",
        "az": "CANDLES",
        "aA": "DELAY",
        "aB": "MAX_DISTANCE",
        "aC": "DISTANCE",
        "aD": "EGGS",
        "aE": "HATCH",
        "aF": "LAYERS",
        "aG": "MIN_LEVEL",
        "aH": "MIN_LEVEL_CAULDRON",
        "aI": "MAX_LEVEL_3",
        "aJ": "MAX_LEVEL_8",
        "aK": "LEVEL_CAULDRON",
        "aL": "LEVEL_COMPOSTER",
        "aM": "LEVEL_FLOWING",
        "aN": "LEVEL_HONEY",
        "aO": "MAX_LEVEL_15",
        "aP": "LEVEL",
        "aQ": "MOISTURE",
        "aR": "NOTE",
        "aS": "PICKLES",
        "aT": "POWER",
        "aU": "STAGE",
        "aV": "STABILITY_MAX_DISTANCE",
        "aW": "STABILITY_DISTANCE",
        "aX": "MIN_RESPAWN_ANCHOR_CHARGES",
        "aY": "MAX_RESPAWN_ANCHOR_CHARGES",
        "aZ": "RESPAWN_ANCHOR_CHARGES",
        "ba": "ROTATION_16",
        "bb": "BED_PART",
        "bc": "CHEST_TYPE",
        "bd": "MODE_COMPARATOR",
        "be": "DOOR_HINGE",
        "bf": "NOTEBLOCK_INSTRUMENT",
        "bg": "PISTON_TYPE",
        "bh": "SLAB_TYPE",
        "bi": "STAIRS_SHAPE",
        "bj": "STRUCTUREBLOCK_MODE",
        "bk": "BAMBOO_LEAVES",
        "bl": "TILT",
        "bm": "VERTICAL_DIRECTION",
        "bn": "DRIPSTONE_THICKNESS",
        "bo": "SCULK_SENSOR_PHASE",
        "bp": "CHISELED_BOOKSHELF_SLOT_0_OCCUPIED",
        "bq": "CHISELED_BOOKSHELF_SLOT_1_OCCUPIED",
        "br": "CHISELED_BOOKSHELF_SLOT_2_OCCUPIED",
        "bs": "CHISELED_BOOKSHELF_SLOT_3_OCCUPIED",
        "bt": "CHISELED_BOOKSHELF_SLOT_4_OCCUPIED",
        "bu": "CHISELED_BOOKSHELF_SLOT_5_OCCUPIED",
        "bv": "DUSTED",
        "bw": "CRACKED"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/properties/RailShape;)Z": "lambda$static$1",
        "a(Lnet/minecraft/core/Direction;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockStateBoolean": {
      "fields": {
        "a": "values"
      },
      "methods": {
        "a()Ljava/util/Collection;": "getPossibleValues",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/block/state/properties/BooleanProperty;": "create",
        "b(Ljava/lang/String;)Ljava/util/Optional;": "getValue",
        "a(Ljava/lang/Boolean;)Ljava/lang/String;": "getName",
        "b()I": "generateHashCode",
        "a(Ljava/lang/Comparable;)Ljava/lang/String;": "getName"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyChestType": {
      "fields": {
        "a": "SINGLE",
        "b": "LEFT",
        "c": "RIGHT",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Lnet/minecraft/world/level/block/state/properties/ChestType;": "getOpposite",
        "b()[Lnet/minecraft/world/level/block/state/properties/ChestType;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyComparatorMode": {
      "fields": {
        "a": "COMPARE",
        "b": "SUBTRACT",
        "c": "name",
        "d": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/ComparatorMode;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockStateDirection": {
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/block/state/properties/DirectionProperty;": "create",
        "a(Ljava/lang/String;Ljava/util/function/Predicate;)Lnet/minecraft/world/level/block/state/properties/DirectionProperty;": "create",
        "a(Ljava/lang/String;[Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/block/state/properties/DirectionProperty;": "create",
        "a(Ljava/lang/String;Ljava/util/Collection;)Lnet/minecraft/world/level/block/state/properties/DirectionProperty;": "create",
        "a(Lnet/minecraft/core/Direction;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyDoorHinge": {
      "fields": {
        "a": "LEFT",
        "b": "RIGHT",
        "c": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/DoorHingeSide;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyDoubleBlockHalf": {
      "fields": {
        "a": "UPPER",
        "b": "LOWER",
        "c": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/DoubleBlockHalf;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/DripstoneThickness": {
      "fields": {
        "a": "TIP_MERGE",
        "b": "TIP",
        "c": "FRUSTUM",
        "d": "MIDDLE",
        "e": "BASE",
        "f": "name",
        "g": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/DripstoneThickness;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockStateEnum": {
      "fields": {
        "a": "values",
        "b": "names"
      },
      "methods": {
        "a()Ljava/util/Collection;": "getPossibleValues",
        "b(Ljava/lang/String;)Ljava/util/Optional;": "getValue",
        "a(Ljava/lang/Enum;)Ljava/lang/String;": "getName",
        "b()I": "generateHashCode",
        "a(Ljava/lang/String;Ljava/lang/Class;)Lnet/minecraft/world/level/block/state/properties/EnumProperty;": "create",
        "a(Ljava/lang/String;Ljava/lang/Class;Ljava/util/function/Predicate;)Lnet/minecraft/world/level/block/state/properties/EnumProperty;": "create",
        "a(Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Enum;)Lnet/minecraft/world/level/block/state/properties/EnumProperty;": "create",
        "a(Ljava/lang/String;Ljava/lang/Class;Ljava/util/Collection;)Lnet/minecraft/world/level/block/state/properties/EnumProperty;": "create",
        "a(Ljava/lang/Comparable;)Ljava/lang/String;": "getName",
        "b(Ljava/lang/Enum;)Z": "lambda$create$0"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyHalf": {
      "fields": {
        "a": "TOP",
        "b": "BOTTOM",
        "c": "name",
        "d": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/Half;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockStateInteger": {
      "fields": {
        "a": "values",
        "b": "min",
        "c": "max"
      },
      "methods": {
        "a()Ljava/util/Collection;": "getPossibleValues",
        "b()I": "generateHashCode",
        "a(Ljava/lang/String;II)Lnet/minecraft/world/level/block/state/properties/IntegerProperty;": "create",
        "b(Ljava/lang/String;)Ljava/util/Optional;": "getValue",
        "a(Ljava/lang/Integer;)Ljava/lang/String;": "getName",
        "a(Ljava/lang/Comparable;)Ljava/lang/String;": "getName"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyInstrument": {
      "fields": {
        "a": "HARP",
        "b": "BASEDRUM",
        "c": "SNARE",
        "d": "HAT",
        "e": "BASS",
        "f": "FLUTE",
        "g": "BELL",
        "h": "GUITAR",
        "i": "CHIME",
        "j": "XYLOPHONE",
        "k": "IRON_XYLOPHONE",
        "l": "COW_BELL",
        "m": "DIDGERIDOO",
        "n": "BIT",
        "o": "BANJO",
        "p": "PLING",
        "q": "ZOMBIE",
        "r": "SKELETON",
        "s": "CREEPER",
        "t": "DRAGON",
        "u": "WITHER_SKELETON",
        "v": "PIGLIN",
        "w": "CUSTOM_HEAD",
        "x": "name",
        "y": "soundEvent",
        "z": "type",
        "A": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Lnet/minecraft/core/Holder;": "getSoundEvent",
        "b()Z": "isTunable",
        "d()Z": "hasCustomSound",
        "e()Z": "worksAboveNoteBlock",
        "f()[Lnet/minecraft/world/level/block/state/properties/NoteBlockInstrument;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyPistonType": {
      "fields": {
        "a": "DEFAULT",
        "b": "STICKY",
        "c": "name",
        "d": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/PistonType;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/IBlockState": {
      "fields": {
        "a": "clazz",
        "b": "name",
        "c": "hashCode",
        "d": "codec",
        "e": "valueCodec"
      },
      "methods": {
        "b(Ljava/lang/Comparable;)Lnet/minecraft/world/level/block/state/properties/Property$Value;": "value",
        "a(Lnet/minecraft/world/level/block/state/StateHolder;)Lnet/minecraft/world/level/block/state/properties/Property$Value;": "value",
        "c()Ljava/util/stream/Stream;": "getAllValues",
        "d()Lcom/mojang/serialization/Codec;": "codec",
        "e()Lcom/mojang/serialization/Codec;": "valueCodec",
        "f()Ljava/lang/String;": "getName",
        "g()Ljava/lang/Class;": "getValueClass",
        "a()Ljava/util/Collection;": "getPossibleValues",
        "a(Ljava/lang/Comparable;)Ljava/lang/String;": "getName",
        "b(Ljava/lang/String;)Ljava/util/Optional;": "getValue",
        "b()I": "generateHashCode",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/world/level/block/state/StateHolder;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "parseValue",
        "a(Lnet/minecraft/world/level/block/state/StateHolder;Ljava/lang/Comparable;)Lnet/minecraft/world/level/block/state/StateHolder;": "lambda$parseValue$3",
        "a(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$new$2",
        "c(Ljava/lang/String;)Lcom/mojang/serialization/DataResult;": "lambda$new$1",
        "d(Ljava/lang/String;)Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyTrackPosition": {
      "fields": {
        "a": "NORTH_SOUTH",
        "b": "EAST_WEST",
        "c": "ASCENDING_EAST",
        "d": "ASCENDING_WEST",
        "e": "ASCENDING_NORTH",
        "f": "ASCENDING_SOUTH",
        "g": "SOUTH_EAST",
        "h": "SOUTH_WEST",
        "i": "NORTH_WEST",
        "j": "NORTH_EAST",
        "k": "name",
        "l": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "b()Z": "isAscending",
        "c()Ljava/lang/String;": "getSerializedName",
        "d()[Lnet/minecraft/world/level/block/state/properties/RailShape;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyRedstoneSide": {
      "fields": {
        "a": "UP",
        "b": "SIDE",
        "c": "NONE",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Z": "isConnected",
        "b()[Lnet/minecraft/world/level/block/state/properties/RedstoneSide;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/RotationSegment": {
      "fields": {
        "a": "SEGMENTED_ANGLE16",
        "b": "MAX_SEGMENT_INDEX",
        "c": "NORTH_0",
        "d": "EAST_90",
        "e": "SOUTH_180",
        "f": "WEST_270"
      },
      "methods": {
        "a()I": "getMaxSegmentIndex",
        "a(Lnet/minecraft/core/Direction;)I": "convertToSegment",
        "a(F)I": "convertToSegment",
        "a(I)Ljava/util/Optional;": "convertToDirection",
        "b(I)F": "convertToDegrees"
      }
    },
    "net/minecraft/world/level/block/state/properties/SculkSensorPhase": {
      "fields": {
        "a": "INACTIVE",
        "b": "ACTIVE",
        "c": "COOLDOWN",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/SculkSensorPhase;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertySlabType": {
      "fields": {
        "a": "TOP",
        "b": "BOTTOM",
        "c": "DOUBLE",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/SlabType;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyStairsShape": {
      "fields": {
        "a": "STRAIGHT",
        "b": "INNER_LEFT",
        "c": "INNER_RIGHT",
        "d": "OUTER_LEFT",
        "e": "OUTER_RIGHT",
        "f": "name",
        "g": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/StairsShape;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyStructureMode": {
      "fields": {
        "a": "SAVE",
        "b": "LOAD",
        "c": "CORNER",
        "d": "DATA",
        "e": "name",
        "f": "displayName",
        "g": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "b()[Lnet/minecraft/world/level/block/state/properties/StructureMode;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/Tilt": {
      "fields": {
        "a": "NONE",
        "b": "UNSTABLE",
        "c": "PARTIAL",
        "d": "FULL",
        "e": "name",
        "f": "causesVibration",
        "g": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()Z": "causesVibration",
        "b()[Lnet/minecraft/world/level/block/state/properties/Tilt;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyWallHeight": {
      "fields": {
        "a": "NONE",
        "b": "LOW",
        "c": "TALL",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/block/state/properties/WallSide;": "$values"
      }
    },
    "net/minecraft/world/level/block/state/properties/BlockPropertyWood": {
      "fields": {
        "l": "name",
        "m": "setType",
        "n": "soundType",
        "o": "hangingSignSoundType",
        "p": "fenceGateClose",
        "q": "fenceGateOpen",
        "r": "VALUES",
        "a": "OAK",
        "b": "SPRUCE",
        "c": "BIRCH",
        "d": "ACACIA",
        "e": "CHERRY",
        "f": "JUNGLE",
        "g": "DARK_OAK",
        "h": "CRIMSON",
        "i": "WARPED",
        "j": "MANGROVE",
        "k": "BAMBOO"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/properties/WoodType;)Lnet/minecraft/world/level/block/state/properties/WoodType;": "register",
        "a()Ljava/util/stream/Stream;": "values",
        "b()Ljava/lang/String;": "name",
        "c()Lnet/minecraft/world/level/block/state/properties/BlockSetType;": "setType",
        "d()Lnet/minecraft/world/level/block/SoundType;": "soundType",
        "e()Lnet/minecraft/world/level/block/SoundType;": "hangingSignSoundType",
        "f()Lnet/minecraft/sounds/SoundEvent;": "fenceGateClose",
        "g()Lnet/minecraft/sounds/SoundEvent;": "fenceGateOpen"
      }
    },
    "net/minecraft/world/level/border/IWorldBorderListener": {
      "methods": {
        "a(Lnet/minecraft/world/level/border/WorldBorder;D)V": "onBorderSizeSet",
        "a(Lnet/minecraft/world/level/border/WorldBorder;DDJ)V": "onBorderSizeLerping",
        "a(Lnet/minecraft/world/level/border/WorldBorder;DD)V": "onBorderCenterSet",
        "a(Lnet/minecraft/world/level/border/WorldBorder;I)V": "onBorderSetWarningTime",
        "b(Lnet/minecraft/world/level/border/WorldBorder;I)V": "onBorderSetWarningBlocks",
        "b(Lnet/minecraft/world/level/border/WorldBorder;D)V": "onBorderSetDamagePerBlock",
        "c(Lnet/minecraft/world/level/border/WorldBorder;D)V": "onBorderSetDamageSafeZOne"
      }
    },
    "net/minecraft/world/level/border/BorderStatus": {
      "fields": {
        "a": "GROWING",
        "b": "SHRINKING",
        "c": "STATIONARY",
        "d": "color",
        "e": "$VALUES"
      },
      "methods": {
        "a()I": "getColor",
        "b()[Lnet/minecraft/world/level/border/BorderStatus;": "$values"
      }
    },
    "net/minecraft/world/level/border/WorldBorder": {
      "fields": {
        "c": "MAX_SIZE",
        "d": "MAX_CENTER_COORDINATE",
        "a": "listeners",
        "b": "damagePerBlock",
        "f": "damageSafeZone",
        "g": "warningTime",
        "h": "warningBlocks",
        "i": "centerX",
        "j": "centerZ",
        "k": "absoluteMaxSize",
        "l": "extent",
        "e": "DEFAULT_SETTINGS"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)Z": "isWithinBounds",
        "a(Lnet/minecraft/world/level/ChunkPos;)Z": "isWithinBounds",
        "a(DD)Z": "isWithinBounds",
        "a(DDD)Z": "isWithinBounds",
        "a(Lnet/minecraft/world/phys/AABB;)Z": "isWithinBounds",
        "b(DDD)Lnet/minecraft/core/BlockPos;": "clampToBounds",
        "a(Lnet/minecraft/world/entity/Entity;)D": "getDistanceToBorder",
        "c()Lnet/minecraft/world/phys/shapes/VoxelShape;": "getCollisionShape",
        "b(DD)D": "getDistanceToBorder",
        "a(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/AABB;)Z": "isInsideCloseToBorder",
        "d()Lnet/minecraft/world/level/border/BorderStatus;": "getStatus",
        "e()D": "getMinX",
        "f()D": "getMinZ",
        "g()D": "getMaxX",
        "h()D": "getMaxZ",
        "a()D": "getCenterX",
        "b()D": "getCenterZ",
        "c(DD)V": "setCenter",
        "i()D": "getSize",
        "j()J": "getLerpRemainingTime",
        "k()D": "getLerpTarget",
        "a(D)V": "setSize",
        "a(DDJ)V": "lerpSizeBetween",
        "l()Ljava/util/List;": "getListeners",
        "a(Lnet/minecraft/world/level/border/BorderChangeListener;)V": "addListener",
        "b(Lnet/minecraft/world/level/border/BorderChangeListener;)V": "removeListener",
        "a(I)V": "setAbsoluteMaxSize",
        "m()I": "getAbsoluteMaxSize",
        "n()D": "getDamageSafeZone",
        "b(D)V": "setDamageSafeZone",
        "o()D": "getDamagePerBlock",
        "c(D)V": "setDamagePerBlock",
        "p()D": "getLerpSpeed",
        "q()I": "getWarningTime",
        "b(I)V": "setWarningTime",
        "r()I": "getWarningBlocks",
        "c(I)V": "setWarningBlocks",
        "s()V": "tick",
        "t()Lnet/minecraft/world/level/border/WorldBorder$Settings;": "createSettings",
        "a(Lnet/minecraft/world/level/border/WorldBorder$Settings;)V": "applySettings"
      }
    },
    "net/minecraft/world/level/chunk/BlockColumn": {
      "methods": {
        "a(I)Lnet/minecraft/world/level/block/state/BlockState;": "getBlock",
        "a(ILnet/minecraft/world/level/block/state/BlockState;)V": "setBlock"
      }
    },
    "net/minecraft/world/level/chunk/BulkSectionAccess": {
      "fields": {
        "a": "level",
        "b": "acquiredSections",
        "c": "lastSection",
        "d": "lastSectionKey"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/chunk/LevelChunkSection;": "getSection",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "a(Lnet/minecraft/core/BlockPos;IJ)Lnet/minecraft/world/level/chunk/LevelChunkSection;": "lambda$getSection$0"
      }
    },
    "net/minecraft/world/level/chunk/CarvingMask": {
      "fields": {
        "a": "minY",
        "b": "mask",
        "c": "additionalMask"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/chunk/CarvingMask$Mask;)V": "setAdditionalMask",
        "c(III)I": "getIndex",
        "a(III)V": "set",
        "b(III)Z": "get",
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/stream/Stream;": "stream",
        "a()[J": "toArray",
        "a(Lnet/minecraft/world/level/ChunkPos;I)Lnet/minecraft/core/BlockPos;": "lambda$stream$1",
        "d(III)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/chunk/IChunkAccess": {
      "fields": {
        "a": "NO_FILLED_SECTION",
        "n": "LOGGER",
        "o": "EMPTY_REFERENCE_SET",
        "b": "postProcessing",
        "c": "unsaved",
        "p": "isLightCorrect",
        "d": "chunkPos",
        "q": "inhabitedTime",
        "r": "carverBiomeSettings",
        "e": "noiseChunk",
        "f": "upgradeData",
        "g": "blendingData",
        "h": "heightmaps",
        "i": "skyLightSources",
        "s": "structureStarts",
        "t": "structuresRefences",
        "j": "pendingBlockEntities",
        "k": "blockEntities",
        "l": "levelHeightAccessor",
        "m": "sections"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry;": "getListenerRegistry",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "setBlockEntity",
        "a(Lnet/minecraft/world/entity/Entity;)V": "addEntity",
        "a()I": "getHighestFilledSectionIndex",
        "b()I": "getHighestSectionPosition",
        "c()Ljava/util/Set;": "getBlockEntitiesPos",
        "d()[Lnet/minecraft/world/level/chunk/LevelChunkSection;": "getSections",
        "b(I)Lnet/minecraft/world/level/chunk/LevelChunkSection;": "getSection",
        "e()Ljava/util/Collection;": "getHeightmaps",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;[J)V": "setHeightmap",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;)Lnet/minecraft/world/level/levelgen/Heightmap;": "getOrCreateHeightmapUnprimed",
        "b(Lnet/minecraft/world/level/levelgen/Heightmap$Types;)Z": "hasPrimedHeightmap",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "f()Lnet/minecraft/world/level/ChunkPos;": "getPos",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStartForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "setStartForStructure",
        "g()Ljava/util/Map;": "getAllStarts",
        "a(Ljava/util/Map;)V": "setAllStarts",
        "b(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lit/unimi/dsi/fastutil/longs/LongSet;": "getReferencesForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;J)V": "addReferenceForStructure",
        "h()Ljava/util/Map;": "getAllReferences",
        "b(Ljava/util/Map;)V": "setAllReferences",
        "a(II)Z": "isYSpaceEmpty",
        "a(Z)V": "setUnsaved",
        "i()Z": "isUnsaved",
        "j()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getStatus",
        "k()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getHighestGeneratedStatus",
        "d(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntity",
        "e(Lnet/minecraft/core/BlockPos;)V": "markPosForPostprocessing",
        "n()[Lit/unimi/dsi/fastutil/shorts/ShortList;": "getPostProcessing",
        "a(SI)V": "addPackedPostProcess",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setBlockEntityNbt",
        "f(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityNbt",
        "g(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityNbtForSaving",
        "a(Ljava/util/function/BiConsumer;)V": "findBlockLightSources",
        "a(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)V": "findBlocks",
        "o()Lnet/minecraft/world/ticks/TickContainerAccess;": "getBlockTicks",
        "p()Lnet/minecraft/world/ticks/TickContainerAccess;": "getFluidTicks",
        "q()Lnet/minecraft/world/level/chunk/ChunkAccess$TicksToSave;": "getTicksForSerialization",
        "r()Lnet/minecraft/world/level/chunk/UpgradeData;": "getUpgradeData",
        "s()Z": "isOldNoiseGeneration",
        "t()Lnet/minecraft/world/level/levelgen/blending/BlendingData;": "getBlendingData",
        "a(Lnet/minecraft/world/level/levelgen/blending/BlendingData;)V": "setBlendingData",
        "u()J": "getInhabitedTime",
        "a(J)V": "incrementInhabitedTime",
        "b(J)V": "setInhabitedTime",
        "a([Lit/unimi/dsi/fastutil/shorts/ShortList;I)Lit/unimi/dsi/fastutil/shorts/ShortList;": "getOrCreateOffsetList",
        "v()Z": "isLightCorrect",
        "b(Z)V": "setLightCorrect",
        "C_()I": "getMinBuildHeight",
        "D_()I": "getHeight",
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/level/levelgen/NoiseChunk;": "getOrCreateNoiseChunk",
        "a(Ljava/util/function/Supplier;)Lnet/minecraft/world/level/biome/BiomeGenerationSettings;": "carverBiome",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;Lnet/minecraft/world/level/biome/Climate$Sampler;)V": "fillBiomesFromNoise",
        "w()Z": "hasAnyStructureReferences",
        "x()Lnet/minecraft/world/level/levelgen/BelowZeroRetrogen;": "getBelowZeroRetrogen",
        "y()Z": "isUpgrading",
        "z()Lnet/minecraft/world/level/LevelHeightAccessor;": "getHeightAccessorForGeneration",
        "A()V": "initializeLightSources",
        "B()Lnet/minecraft/world/level/lighting/ChunkSkyLightSources;": "getSkyLightSources"
      }
    },
    "net/minecraft/world/level/chunk/ChunkGenerator": {
      "fields": {
        "a": "CODEC",
        "b": "biomeSource",
        "c": "featuresPerStep",
        "d": "generationSettingsGetter"
      },
      "methods": {
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/core/HolderLookup;Lnet/minecraft/world/level/levelgen/RandomState;J)Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;": "createState",
        "b()Ljava/util/Optional;": "getTypeNameForDataFixer",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "createBiomes",
        "a(Lnet/minecraft/server/level/WorldGenRegion;JLnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/biome/BiomeManager;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)V": "applyCarvers",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/HolderSet;Lnet/minecraft/core/BlockPos;IZ)Lcom/mojang/datafixers/util/Pair;": "findNearestMapStructure",
        "a(Ljava/util/Set;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement;)Lcom/mojang/datafixers/util/Pair;": "getNearestGeneratedStructure",
        "a(Ljava/util/Set;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/StructureManager;IIIZJLnet/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement;)Lcom/mojang/datafixers/util/Pair;": "getNearestGeneratedStructure",
        "a(Ljava/util/Set;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/StructureManager;ZLnet/minecraft/world/level/levelgen/structure/placement/StructurePlacement;Lnet/minecraft/world/level/ChunkPos;)Lcom/mojang/datafixers/util/Pair;": "getStructureGeneratingAt",
        "a(Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Z": "tryAddReference",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/StructureManager;)V": "applyBiomeDecoration",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getWritableArea",
        "a(Lnet/minecraft/server/level/WorldGenRegion;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "buildSurface",
        "a(Lnet/minecraft/server/level/WorldGenRegion;)V": "spawnOriginalMobs",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;)I": "getSpawnHeight",
        "c()Lnet/minecraft/world/level/biome/BiomeSource;": "getBiomeSource",
        "d()I": "getGenDepth",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/entity/MobCategory;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/util/random/WeightedRandomList;": "getMobsAt",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;)V": "createStructures",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructureSet$StructureSelectionEntry;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;JLnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/SectionPos;)Z": "tryGenerateStructure",
        "a(Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/levelgen/structure/Structure;)I": "fetchReferences",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "createReferences",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "fillFromNoise",
        "e()I": "getSeaLevel",
        "f()I": "getMinY",
        "a(IILnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "getBaseHeight",
        "a(IILnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)Lnet/minecraft/world/level/NoiseColumn;": "getBaseColumn",
        "b(IILnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "getFirstFreeHeight",
        "c(IILnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "getFirstOccupiedHeight",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/core/BlockPos;)V": "addDebugScreenInfo",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/biome/BiomeGenerationSettings;": "getBiomeGenerationSettings",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Ljava/lang/String;": "lambda$createReferences$18",
        "b(Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Ljava/lang/String;": "lambda$createReferences$17",
        "a(Ljava/util/Optional;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Ljava/lang/String;": "lambda$createReferences$16",
        "a(Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/Holder;)V": "lambda$createStructures$14",
        "a(Lorg/apache/commons/lang3/mutable/MutableBoolean;Ljava/util/function/Predicate;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "lambda$getMobsAt$13",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Z": "lambda$getMobsAt$12",
        "a(Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)Z": "lambda$getMobsAt$11",
        "a(Lit/unimi/dsi/fastutil/ints/IntSet;Lnet/minecraft/world/level/biome/FeatureSorter$StepFeatureData;Lnet/minecraft/world/level/levelgen/placement/PlacedFeature;)V": "lambda$applyBiomeDecoration$9",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/WorldgenRandom;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "lambda$applyBiomeDecoration$8",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Ljava/util/Set;Lnet/minecraft/world/level/ChunkPos;)V": "lambda$applyBiomeDecoration$6",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Ljava/lang/Integer;": "lambda$applyBiomeDecoration$5",
        "a(Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacement;)Ljava/util/Set;": "lambda$findNearestMapStructure$4"
      }
    },
    "net/minecraft/world/level/chunk/ChunkGeneratorStructureState": {
      "fields": {
        "a": "LOGGER",
        "b": "randomState",
        "c": "biomeSource",
        "d": "levelSeed",
        "e": "concentricRingsSeed",
        "f": "placementsForStructure",
        "g": "ringPositions",
        "h": "hasGeneratedPositions",
        "i": "possibleStructureSets"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/RandomState;JLnet/minecraft/world/level/biome/BiomeSource;Ljava/util/stream/Stream;)Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;": "createForFlat",
        "a(Lnet/minecraft/world/level/levelgen/RandomState;JLnet/minecraft/world/level/biome/BiomeSource;Lnet/minecraft/core/HolderLookup;)Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;": "createForNormal",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructureSet;Lnet/minecraft/world/level/biome/BiomeSource;)Z": "hasBiomesForStructureSet",
        "a()Ljava/util/List;": "possibleStructureSets",
        "e()V": "generatePositions",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement;)Ljava/util/concurrent/CompletableFuture;": "generateRingPositions",
        "b()V": "ensureStructuresGenerated",
        "a(Lnet/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement;)Ljava/util/List;": "getRingPositionsFor",
        "a(Lnet/minecraft/core/Holder;)Ljava/util/List;": "getPlacementsForStructure",
        "c()Lnet/minecraft/world/level/levelgen/RandomState;": "randomState",
        "a(Lnet/minecraft/core/Holder;III)Z": "hasStructureChunkInRange",
        "d()J": "getLevelSeed",
        "a(Lcom/google/common/base/Stopwatch;Lnet/minecraft/core/Holder;Ljava/util/List;)Ljava/util/List;": "lambda$generateRingPositions$6",
        "a(IILnet/minecraft/core/HolderSet;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/ChunkPos;": "lambda$generateRingPositions$5",
        "a(Ljava/util/Set;Lnet/minecraft/core/Holder;)V": "lambda$generatePositions$4",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Ljava/util/List;": "lambda$generatePositions$3",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructureSet$StructureSelectionEntry;)Ljava/util/stream/Stream;": "lambda$hasBiomesForStructureSet$2"
      }
    },
    "net/minecraft/world/level/chunk/ChunkGenerators": {},
    "net/minecraft/world/level/chunk/IChunkProvider": {
      "methods": {
        "a(IIZ)Lnet/minecraft/world/level/chunk/LevelChunk;": "getChunk",
        "a(II)Lnet/minecraft/world/level/chunk/LevelChunk;": "getChunkNow",
        "c(II)Lnet/minecraft/world/level/chunk/LightChunk;": "getChunkForLighting",
        "b(II)Z": "hasChunk",
        "a(IILnet/minecraft/world/level/chunk/ChunkStatus;Z)Lnet/minecraft/world/level/chunk/ChunkAccess;": "getChunk",
        "a(Ljava/util/function/BooleanSupplier;Z)V": "tick",
        "e()Ljava/lang/String;": "gatherStats",
        "j()I": "getLoadedChunksCount",
        "p()Lnet/minecraft/world/level/lighting/LevelLightEngine;": "getLightEngine",
        "a(ZZ)V": "setSpawnSettings",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "updateChunkForced"
      }
    },
    "net/minecraft/world/level/chunk/ChunkStatus": {
      "fields": {
        "a": "MAX_STRUCTURE_DISTANCE",
        "o": "PRE_FEATURES",
        "b": "POST_FEATURES",
        "p": "PASSTHROUGH_LOAD_TASK",
        "c": "EMPTY",
        "d": "STRUCTURE_STARTS",
        "e": "STRUCTURE_REFERENCES",
        "f": "BIOMES",
        "g": "NOISE",
        "h": "SURFACE",
        "i": "CARVERS",
        "j": "FEATURES",
        "k": "INITIALIZE_LIGHT",
        "l": "LIGHT",
        "m": "SPAWN",
        "n": "FULL",
        "q": "STATUS_BY_RANGE",
        "r": "RANGE_BY_STATUS",
        "s": "index",
        "t": "parent",
        "u": "generationTask",
        "v": "loadingTask",
        "w": "range",
        "x": "hasLoadDependencies",
        "y": "chunkType",
        "z": "heightmapsAfter"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ThreadedLevelLightEngine;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "initializeLight",
        "b(Lnet/minecraft/server/level/ThreadedLevelLightEngine;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "lightChunk",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/chunk/ChunkStatus;ILjava/util/EnumSet;Lnet/minecraft/world/level/chunk/ChunkStatus$ChunkType;Lnet/minecraft/world/level/chunk/ChunkStatus$SimpleGenerationTask;)Lnet/minecraft/world/level/chunk/ChunkStatus;": "registerSimple",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/chunk/ChunkStatus;ILjava/util/EnumSet;Lnet/minecraft/world/level/chunk/ChunkStatus$ChunkType;Lnet/minecraft/world/level/chunk/ChunkStatus$GenerationTask;)Lnet/minecraft/world/level/chunk/ChunkStatus;": "register",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/chunk/ChunkStatus;IZLjava/util/EnumSet;Lnet/minecraft/world/level/chunk/ChunkStatus$ChunkType;Lnet/minecraft/world/level/chunk/ChunkStatus$GenerationTask;Lnet/minecraft/world/level/chunk/ChunkStatus$LoadingTask;)Lnet/minecraft/world/level/chunk/ChunkStatus;": "register",
        "a()Ljava/util/List;": "getStatusList",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)Z": "isLighted",
        "a(I)Lnet/minecraft/world/level/chunk/ChunkStatus;": "getStatusAroundFullChunk",
        "b()I": "maxDistance",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)I": "getDistance",
        "c()I": "getIndex",
        "d()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getParent",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/server/level/ThreadedLevelLightEngine;Ljava/util/function/Function;Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;": "generate",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/server/level/ThreadedLevelLightEngine;Ljava/util/function/Function;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "load",
        "e()I": "getRange",
        "f()Z": "hasLoadDependencies",
        "g()Lnet/minecraft/world/level/chunk/ChunkStatus$ChunkType;": "getChunkType",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/chunk/ChunkStatus;": "byName",
        "h()Ljava/util/EnumSet;": "heightmapsAfter",
        "b(Lnet/minecraft/world/level/chunk/ChunkStatus;)Z": "isOrAfter"
      }
    },
    "net/minecraft/world/level/chunk/ChunkStatus$Type": {
      "fields": {
        "a": "PROTOCHUNK",
        "b": "LEVELCHUNK",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/chunk/NibbleArray": {
      "fields": {
        "a": "LAYER_COUNT",
        "b": "LAYER_SIZE",
        "c": "SIZE",
        "e": "NIBBLE_SIZE",
        "d": "data",
        "f": "defaultValue"
      },
      "methods": {
        "a(III)I": "get",
        "a(IIII)V": "set",
        "b(III)I": "getIndex",
        "d(I)I": "get",
        "a(II)V": "set",
        "e(I)I": "getNibbleIndex",
        "f(I)I": "getByteIndex",
        "a(I)V": "fill",
        "g(I)B": "packFilled",
        "a()[B": "getData",
        "b()Lnet/minecraft/world/level/chunk/DataLayer;": "copy",
        "b(I)Ljava/lang/String;": "layerToString",
        "c()Z": "isDefinitelyHomogenous",
        "c(I)Z": "isDefinitelyFilledWith",
        "d()Z": "isEmpty"
      }
    },
    "net/minecraft/world/level/chunk/ChunkEmpty": {
      "fields": {
        "n": "biome"
      },
      "methods": {
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "h(Lnet/minecraft/core/BlockPos;)I": "getLightEmission",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/chunk/LevelChunk$EntityCreationType;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "b(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "addAndRegisterBlockEntity",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "setBlockEntity",
        "d(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntity",
        "C()Z": "isEmpty",
        "a(II)Z": "isYSpaceEmpty",
        "D()Lnet/minecraft/server/level/FullChunkStatus;": "getFullStatus"
      }
    },
    "net/minecraft/world/level/chunk/DataPaletteGlobal": {
      "fields": {
        "a": "registry"
      },
      "methods": {
        "a(ILnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PaletteResize;Ljava/util/List;)Lnet/minecraft/world/level/chunk/Palette;": "create",
        "a(Ljava/lang/Object;)I": "idFor",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "a(I)Ljava/lang/Object;": "valueFor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getSerializedSize",
        "b()I": "getSize",
        "c()Lnet/minecraft/world/level/chunk/Palette;": "copy"
      }
    },
    "net/minecraft/world/level/chunk/DataPaletteHash": {
      "fields": {
        "a": "registry",
        "b": "values",
        "c": "resizeHandler",
        "d": "bits"
      },
      "methods": {
        "a(ILnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PaletteResize;Ljava/util/List;)Lnet/minecraft/world/level/chunk/Palette;": "create",
        "a(Ljava/lang/Object;)I": "idFor",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "a(I)Ljava/lang/Object;": "valueFor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getSerializedSize",
        "d()Ljava/util/List;": "getEntries",
        "b()I": "getSize",
        "c()Lnet/minecraft/world/level/chunk/Palette;": "copy"
      }
    },
    "net/minecraft/world/level/chunk/ProtoChunkExtension": {
      "fields": {
        "n": "wrapped",
        "o": "allowWrites"
      },
      "methods": {
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "M()I": "getMaxLightLevel",
        "b(I)Lnet/minecraft/world/level/chunk/LevelChunkSection;": "getSection",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "setBlockEntity",
        "a(Lnet/minecraft/world/entity/Entity;)V": "addEntity",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)V": "setStatus",
        "d()[Lnet/minecraft/world/level/chunk/LevelChunkSection;": "getSections",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;[J)V": "setHeightmap",
        "c(Lnet/minecraft/world/level/levelgen/Heightmap$Types;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "fixType",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;)Lnet/minecraft/world/level/levelgen/Heightmap;": "getOrCreateHeightmapUnprimed",
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "f()Lnet/minecraft/world/level/ChunkPos;": "getPos",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStartForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "setStartForStructure",
        "g()Ljava/util/Map;": "getAllStarts",
        "a(Ljava/util/Map;)V": "setAllStarts",
        "b(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lit/unimi/dsi/fastutil/longs/LongSet;": "getReferencesForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;J)V": "addReferenceForStructure",
        "h()Ljava/util/Map;": "getAllReferences",
        "b(Ljava/util/Map;)V": "setAllReferences",
        "a(Z)V": "setUnsaved",
        "i()Z": "isUnsaved",
        "j()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getStatus",
        "d(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntity",
        "e(Lnet/minecraft/core/BlockPos;)V": "markPosForPostprocessing",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setBlockEntityNbt",
        "f(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityNbt",
        "g(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityNbtForSaving",
        "a(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)V": "findBlocks",
        "o()Lnet/minecraft/world/ticks/TickContainerAccess;": "getBlockTicks",
        "p()Lnet/minecraft/world/ticks/TickContainerAccess;": "getFluidTicks",
        "q()Lnet/minecraft/world/level/chunk/ChunkAccess$TicksToSave;": "getTicksForSerialization",
        "t()Lnet/minecraft/world/level/levelgen/blending/BlendingData;": "getBlendingData",
        "a(Lnet/minecraft/world/level/levelgen/blending/BlendingData;)V": "setBlendingData",
        "a(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/chunk/CarvingMask;": "getCarvingMask",
        "b(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/chunk/CarvingMask;": "getOrCreateCarvingMask",
        "C()Lnet/minecraft/world/level/chunk/LevelChunk;": "getWrapped",
        "v()Z": "isLightCorrect",
        "b(Z)V": "setLightCorrect",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;Lnet/minecraft/world/level/biome/Climate$Sampler;)V": "fillBiomesFromNoise",
        "A()V": "initializeLightSources",
        "B()Lnet/minecraft/world/level/lighting/ChunkSkyLightSources;": "getSkyLightSources"
      }
    },
    "net/minecraft/world/level/chunk/Chunk": {
      "fields": {
        "n": "LOGGER",
        "o": "NULL_TICKER",
        "p": "tickersInLevel",
        "q": "loaded",
        "r": "level",
        "s": "fullStatus",
        "t": "postLoad",
        "u": "gameEventListenerRegistrySections",
        "v": "blockTicks",
        "w": "fluidTicks"
      },
      "methods": {
        "o()Lnet/minecraft/world/ticks/TickContainerAccess;": "getBlockTicks",
        "p()Lnet/minecraft/world/ticks/TickContainerAccess;": "getFluidTicks",
        "q()Lnet/minecraft/world/level/chunk/ChunkAccess$TicksToSave;": "getTicksForSerialization",
        "a(I)Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry;": "getListenerRegistry",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(III)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "a(Lnet/minecraft/world/entity/Entity;)V": "addEntity",
        "j(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "createBlockEntity",
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/chunk/LevelChunk$EntityCreationType;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "b(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "addAndRegisterBlockEntity",
        "K()Z": "isInLevel",
        "k(Lnet/minecraft/core/BlockPos;)Z": "isTicking",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "setBlockEntity",
        "g(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityNbtForSaving",
        "d(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntity",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/server/level/ServerLevel;)V": "removeGameEventListener",
        "c(I)V": "removeGameEventListenerRegistry",
        "l(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntityTicker",
        "E()V": "runPostLoad",
        "C()Z": "isEmpty",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/nbt/CompoundTag;Ljava/util/function/Consumer;)V": "replaceWithPacketData",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "replaceBiomes",
        "c(Z)V": "setLoaded",
        "F()Lnet/minecraft/world/level/Level;": "getLevel",
        "G()Ljava/util/Map;": "getBlockEntities",
        "H()V": "postProcessGeneration",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "promotePendingBlockEntity",
        "c(J)V": "unpackTicks",
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "registerTickContainerInLevel",
        "b(Lnet/minecraft/server/level/ServerLevel;)V": "unregisterTickContainerFromLevel",
        "j()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getStatus",
        "D()Lnet/minecraft/server/level/FullChunkStatus;": "getFullStatus",
        "b(Ljava/util/function/Supplier;)V": "setFullStatus",
        "I()V": "clearAllBlockEntities",
        "J()V": "registerAllBlockEntitiesAfterLevelLoad",
        "b(Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/server/level/ServerLevel;)V": "addGameEventListener",
        "c(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "updateBlockEntityTicker",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/level/block/entity/BlockEntityTicker;)Lnet/minecraft/world/level/block/entity/TickingBlockEntity;": "createTicker",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/level/block/entity/BlockEntityTicker;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/chunk/LevelChunk$RebindableTickingBlockEntityWrapper;)Lnet/minecraft/world/level/chunk/LevelChunk$RebindableTickingBlockEntityWrapper;": "lambda$updateBlockEntityTicker$6",
        "d(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "lambda$registerAllBlockEntitiesAfterLevelLoad$5",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk$RebindableTickingBlockEntityWrapper;)V": "lambda$clearAllBlockEntities$4",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/nbt/CompoundTag;)V": "lambda$replaceWithPacketData$3",
        "b(III)Ljava/lang/String;": "lambda$getFluidState$2",
        "c(III)Ljava/lang/String;": "lambda$getBlockState$1"
      }
    },
    "net/minecraft/world/level/chunk/Chunk$EnumTileEntityState": {
      "fields": {
        "a": "IMMEDIATE",
        "b": "QUEUED",
        "c": "CHECK",
        "$VALUES": "$VALUES"
      }
    },
    "net/minecraft/world/level/chunk/ChunkSection": {
      "fields": {
        "a": "SECTION_WIDTH",
        "b": "SECTION_HEIGHT",
        "c": "SECTION_SIZE",
        "d": "BIOME_CONTAINER_BITS",
        "e": "nonEmptyBlockCount",
        "f": "tickingBlockCount",
        "g": "tickingFluidCount",
        "h": "states",
        "i": "biomes"
      },
      "methods": {
        "a(III)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b(III)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a()V": "acquire",
        "b()V": "release",
        "a(IIILnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "a(IIILnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "c()Z": "hasOnlyAir",
        "d()Z": "isRandomlyTicking",
        "e()Z": "isRandomlyTickingBlocks",
        "f()Z": "isRandomlyTickingFluids",
        "g()V": "recalcBlockCounts",
        "h()Lnet/minecraft/world/level/chunk/PalettedContainer;": "getStates",
        "i()Lnet/minecraft/world/level/chunk/PalettedContainerRO;": "getBiomes",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "readBiomes",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "j()I": "getSerializedSize",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "c(III)Lnet/minecraft/core/Holder;": "getNoiseBiome",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;Lnet/minecraft/world/level/biome/Climate$Sampler;III)V": "fillBiomesFromNoise"
      }
    },
    "net/minecraft/world/level/chunk/LightChunk": {
      "methods": {
        "a(Ljava/util/function/BiConsumer;)V": "findBlockLightSources",
        "B()Lnet/minecraft/world/level/lighting/ChunkSkyLightSources;": "getSkyLightSources"
      }
    },
    "net/minecraft/world/level/chunk/ILightAccess": {
      "methods": {
        "c(II)Lnet/minecraft/world/level/chunk/LightChunk;": "getChunkForLighting",
        "a(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;)V": "onLightUpdate",
        "q()Lnet/minecraft/world/level/BlockGetter;": "getLevel"
      }
    },
    "net/minecraft/world/level/chunk/DataPaletteLinear": {
      "fields": {
        "a": "registry",
        "b": "values",
        "c": "resizeHandler",
        "d": "bits",
        "e": "size"
      },
      "methods": {
        "a(ILnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PaletteResize;Ljava/util/List;)Lnet/minecraft/world/level/chunk/Palette;": "create",
        "a(Ljava/lang/Object;)I": "idFor",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "a(I)Ljava/lang/Object;": "valueFor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getSerializedSize",
        "b()I": "getSize",
        "c()Lnet/minecraft/world/level/chunk/Palette;": "copy"
      }
    },
    "net/minecraft/world/level/chunk/MissingPaletteEntryException": {},
    "net/minecraft/world/level/chunk/DataPalette": {
      "methods": {
        "a(Ljava/lang/Object;)I": "idFor",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "a(I)Ljava/lang/Object;": "valueFor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getSerializedSize",
        "b()I": "getSize",
        "c()Lnet/minecraft/world/level/chunk/Palette;": "copy"
      }
    },
    "net/minecraft/world/level/chunk/DataPaletteExpandable": {},
    "net/minecraft/world/level/chunk/DataPaletteBlock": {
      "fields": {
        "a": "MIN_PALETTE_BITS",
        "b": "dummyPaletteResize",
        "c": "registry",
        "d": "data",
        "e": "strategy",
        "f": "threadingDetector"
      },
      "methods": {
        "a()V": "acquire",
        "b()V": "release",
        "a(Lnet/minecraft/core/IdMap;Lcom/mojang/serialization/Codec;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Ljava/lang/Object;)Lcom/mojang/serialization/Codec;": "codecRW",
        "b(Lnet/minecraft/core/IdMap;Lcom/mojang/serialization/Codec;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Ljava/lang/Object;)Lcom/mojang/serialization/Codec;": "codecRO",
        "a(Lnet/minecraft/core/IdMap;Lcom/mojang/serialization/Codec;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Ljava/lang/Object;Lnet/minecraft/world/level/chunk/PalettedContainerRO$Unpacker;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/world/level/chunk/PalettedContainer$Data;I)Lnet/minecraft/world/level/chunk/PalettedContainer$Data;": "createOrReuseData",
        "a(IIILjava/lang/Object;)Ljava/lang/Object;": "getAndSet",
        "b(IIILjava/lang/Object;)Ljava/lang/Object;": "getAndSetUnchecked",
        "a(ILjava/lang/Object;)Ljava/lang/Object;": "getAndSet",
        "c(IIILjava/lang/Object;)V": "set",
        "b(ILjava/lang/Object;)V": "set",
        "a(III)Ljava/lang/Object;": "get",
        "a(I)Ljava/lang/Object;": "get",
        "a(Ljava/util/function/Consumer;)V": "getAll",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Lnet/minecraft/world/level/chunk/PalettedContainerRO$PackedData;)Lcom/mojang/serialization/DataResult;": "unpack",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;)Lnet/minecraft/world/level/chunk/PalettedContainerRO$PackedData;": "pack",
        "a([ILjava/util/function/IntUnaryOperator;)V": "swapPalette",
        "c()I": "getSerializedSize",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "d()Lnet/minecraft/world/level/chunk/PalettedContainer;": "copy",
        "e()Lnet/minecraft/world/level/chunk/PalettedContainer;": "recreate",
        "a(Lnet/minecraft/world/level/chunk/PalettedContainer$CountConsumer;)V": "count",
        "a(Lnet/minecraft/world/level/chunk/PalettedContainer$CountConsumer;Lit/unimi/dsi/fastutil/ints/Int2IntMap$Entry;)V": "lambda$count$13",
        "a(Lit/unimi/dsi/fastutil/ints/Int2IntOpenHashMap;I)V": "lambda$count$12",
        "a(Lnet/minecraft/world/level/chunk/HashMapPalette;I)I": "lambda$pack$11",
        "a(Lnet/minecraft/util/SimpleBitStorage$InitializationException;)Ljava/lang/String;": "lambda$unpack$10",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/Palette;I)I": "lambda$unpack$9",
        "c(ILjava/lang/Object;)I": "lambda$unpack$8",
        "f()Ljava/lang/String;": "lambda$unpack$7",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/chunk/Palette;I)V": "lambda$getAll$6",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Lnet/minecraft/world/level/chunk/PalettedContainerRO;)Lnet/minecraft/world/level/chunk/PalettedContainerRO$PackedData;": "lambda$codec$5",
        "a(Lnet/minecraft/world/level/chunk/PalettedContainerRO$Unpacker;Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Lnet/minecraft/world/level/chunk/PalettedContainerRO$PackedData;)Lcom/mojang/serialization/DataResult;": "lambda$codec$4",
        "a(Lcom/mojang/serialization/Codec;Ljava/lang/Object;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$3",
        "b(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Lnet/minecraft/world/level/chunk/PalettedContainerRO$PackedData;)Lcom/mojang/serialization/DataResult;": "lambda$codecRO$2",
        "a(Lnet/minecraft/world/level/chunk/PalettedContainer;)Lnet/minecraft/world/level/chunk/PalettedContainerRO;": "lambda$codecRO$1",
        "d(ILjava/lang/Object;)I": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/chunk/PalettedContainerRO": {
      "methods": {
        "a(III)Ljava/lang/Object;": "get",
        "a(Ljava/util/function/Consumer;)V": "getAll",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "c()I": "getSerializedSize",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "a(Lnet/minecraft/world/level/chunk/PalettedContainer$CountConsumer;)V": "count",
        "e()Lnet/minecraft/world/level/chunk/PalettedContainer;": "recreate",
        "a(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;)Lnet/minecraft/world/level/chunk/PalettedContainerRO$PackedData;": "pack"
      }
    },
    "net/minecraft/world/level/chunk/ProtoChunk": {
      "fields": {
        "n": "lightEngine",
        "o": "status",
        "p": "entities",
        "q": "carvingMasks",
        "r": "belowZeroRetrogen",
        "s": "blockTicks",
        "t": "fluidTicks"
      },
      "methods": {
        "o()Lnet/minecraft/world/ticks/TickContainerAccess;": "getBlockTicks",
        "p()Lnet/minecraft/world/ticks/TickContainerAccess;": "getFluidTicks",
        "q()Lnet/minecraft/world/level/chunk/ChunkAccess$TicksToSave;": "getTicksForSerialization",
        "a_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "b_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/material/FluidState;": "getFluidState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)Lnet/minecraft/world/level/block/state/BlockState;": "setBlockState",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntity;)V": "setBlockEntity",
        "c_(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;": "getBlockEntity",
        "D()Ljava/util/Map;": "getBlockEntities",
        "b(Lnet/minecraft/nbt/CompoundTag;)V": "addEntity",
        "a(Lnet/minecraft/world/entity/Entity;)V": "addEntity",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "setStartForStructure",
        "E()Ljava/util/List;": "getEntities",
        "j()Lnet/minecraft/world/level/chunk/ChunkStatus;": "getStatus",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)V": "setStatus",
        "j(Lnet/minecraft/core/BlockPos;)S": "packOffsetCoordinates",
        "a(SILnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/core/BlockPos;": "unpackOffsetCoordinates",
        "e(Lnet/minecraft/core/BlockPos;)V": "markPosForPostprocessing",
        "a(SI)V": "addPackedPostProcess",
        "F()Ljava/util/Map;": "getBlockEntityNbts",
        "g(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/nbt/CompoundTag;": "getBlockEntityNbtForSaving",
        "d(Lnet/minecraft/core/BlockPos;)V": "removeBlockEntity",
        "a(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/chunk/CarvingMask;": "getCarvingMask",
        "b(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/chunk/CarvingMask;": "getOrCreateCarvingMask",
        "a(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;Lnet/minecraft/world/level/chunk/CarvingMask;)V": "setCarvingMask",
        "a(Lnet/minecraft/world/level/lighting/LevelLightEngine;)V": "setLightEngine",
        "a(Lnet/minecraft/world/level/levelgen/BelowZeroRetrogen;)V": "setBelowZeroRetrogen",
        "x()Lnet/minecraft/world/level/levelgen/BelowZeroRetrogen;": "getBelowZeroRetrogen",
        "a(Lnet/minecraft/world/ticks/ProtoChunkTicks;)Lnet/minecraft/world/ticks/LevelChunkTicks;": "unpackTicks",
        "G()Lnet/minecraft/world/ticks/LevelChunkTicks;": "unpackBlockTicks",
        "H()Lnet/minecraft/world/ticks/LevelChunkTicks;": "unpackFluidTicks",
        "z()Lnet/minecraft/world/level/LevelHeightAccessor;": "getHeightAccessorForGeneration",
        "c(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/chunk/CarvingMask;": "lambda$getOrCreateCarvingMask$0"
      }
    },
    "net/minecraft/world/level/chunk/SingleValuePalette": {
      "fields": {
        "a": "registry",
        "b": "value",
        "c": "resizeHandler"
      },
      "methods": {
        "a(ILnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PaletteResize;Ljava/util/List;)Lnet/minecraft/world/level/chunk/Palette;": "create",
        "a(Ljava/lang/Object;)I": "idFor",
        "a(Ljava/util/function/Predicate;)Z": "maybeHas",
        "a(I)Ljava/lang/Object;": "valueFor",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "read",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)V": "write",
        "a()I": "getSerializedSize",
        "b()I": "getSize",
        "c()Lnet/minecraft/world/level/chunk/Palette;": "copy"
      }
    },
    "net/minecraft/world/level/chunk/StructureAccess": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "getStartForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "setStartForStructure",
        "b(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lit/unimi/dsi/fastutil/longs/LongSet;": "getReferencesForStructure",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;J)V": "addReferenceForStructure",
        "h()Ljava/util/Map;": "getAllReferences",
        "b(Ljava/util/Map;)V": "setAllReferences"
      }
    },
    "net/minecraft/world/level/chunk/ChunkConverter": {
      "fields": {
        "b": "LOGGER",
        "a": "EMPTY",
        "c": "TAG_INDICES",
        "d": "DIRECTIONS",
        "e": "sides",
        "f": "neighborBlockTicks",
        "g": "neighborFluidTicks",
        "h": "index",
        "i": "MAP",
        "j": "CHUNKY_FIXERS"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;Ljava/util/function/Function;Ljava/util/List;)V": "loadTicks",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;)V": "upgrade",
        "a(Lnet/minecraft/world/level/chunk/LevelChunk;Lnet/minecraft/core/Direction8;)V": "upgradeSides",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "updateState",
        "b(Lnet/minecraft/world/level/chunk/LevelChunk;)V": "upgradeInside",
        "a()Z": "isEmpty",
        "b()Lnet/minecraft/nbt/CompoundTag;": "write",
        "a(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/world/ticks/SavedTick;)V": "lambda$write$10",
        "b(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/world/ticks/SavedTick;)V": "lambda$write$8",
        "a(Lnet/minecraft/world/level/block/Block;)Ljava/lang/String;": "lambda$write$7",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/chunk/UpgradeData$BlockFixer;)V": "lambda$upgrade$6",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/ticks/SavedTick;)V": "lambda$upgrade$5",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/ticks/SavedTick;)V": "lambda$upgrade$4",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "lambda$new$3",
        "c()Ljava/util/Optional;": "lambda$new$2",
        "b(Ljava/lang/String;)Ljava/util/Optional;": "lambda$new$1",
        "d()Ljava/util/Optional;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/chunk/ChunkConverter$Type": {
      "fields": {
        "a": "BLACKLIST",
        "b": "DEFAULT",
        "c": "CHEST",
        "d": "LEAVES",
        "e": "STEM_BLOCK",
        "f": "DIRECTIONS",
        "g": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/chunk/UpgradeData$BlockFixers;": "$values"
      }
    },
    "net/minecraft/world/level/chunk/storage/ChunkScanAccess": {
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/StreamTagVisitor;)Ljava/util/concurrent/CompletableFuture;": "scanChunk"
      }
    },
    "net/minecraft/world/level/chunk/storage/ChunkRegionLoader": {
      "fields": {
        "h": "BLOCK_STATE_CODEC",
        "i": "LOGGER",
        "j": "TAG_UPGRADE_DATA",
        "k": "BLOCK_TICKS_TAG",
        "l": "FLUID_TICKS_TAG",
        "a": "X_POS_TAG",
        "b": "Z_POS_TAG",
        "c": "HEIGHTMAPS_TAG",
        "d": "IS_LIGHT_ON_TAG",
        "e": "SECTIONS_TAG",
        "f": "BLOCK_LIGHT_TAG",
        "g": "SKY_LIGHT_TAG"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/ai/village/poi/PoiManager;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/chunk/ProtoChunk;": "read",
        "a(Lnet/minecraft/world/level/ChunkPos;ILjava/lang/String;)V": "logErrors",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/nbt/CompoundTag;": "write",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/chunk/ChunkAccess$TicksToSave;)V": "saveTicks",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/chunk/ChunkStatus$ChunkType;": "getChunkTypeFromTag",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/chunk/LevelChunk$PostLoadProcessor;": "postLoadChunk",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/String;)Lnet/minecraft/nbt/ListTag;": "getListOfCompoundsOrNull",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/world/level/ChunkPos;Ljava/util/Map;Ljava/util/Map;)Lnet/minecraft/nbt/CompoundTag;": "packStructureData",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;J)Ljava/util/Map;": "unpackStructureStart",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)Ljava/util/Map;": "unpackStructureReferences",
        "a([Lit/unimi/dsi/fastutil/shorts/ShortList;)Lnet/minecraft/nbt/ListTag;": "packOffsets",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$write$7",
        "b(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$write$6",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "lambda$read$5",
        "b(Ljava/lang/String;)Ljava/util/Optional;": "lambda$read$4",
        "c(Ljava/lang/String;)Ljava/util/Optional;": "lambda$read$3",
        "d(Ljava/lang/String;)Ljava/util/Optional;": "lambda$read$2",
        "b(Lnet/minecraft/world/level/ChunkPos;ILjava/lang/String;)V": "lambda$read$1",
        "c(Lnet/minecraft/world/level/ChunkPos;ILjava/lang/String;)V": "lambda$read$0"
      }
    },
    "net/minecraft/world/level/chunk/storage/IChunkLoader": {
      "fields": {
        "c": "LAST_MONOLYTH_STRUCTURE_DATA_VERSION",
        "a": "worker",
        "d": "fixerUpper",
        "b": "legacyStructureHandler"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;I)Z": "isOldChunkAround",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/util/function/Supplier;Lnet/minecraft/nbt/CompoundTag;Ljava/util/Optional;)Lnet/minecraft/nbt/CompoundTag;": "upgradeChunkTag",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/util/function/Supplier;)Lnet/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler;": "getLegacyStructureHandler",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/resources/ResourceKey;Ljava/util/Optional;)V": "injectDatafixingContext",
        "a(Lnet/minecraft/nbt/CompoundTag;)I": "getVersion",
        "e(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "read",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)V": "write",
        "o()V": "flushWorker",
        "p()Lnet/minecraft/world/level/chunk/storage/ChunkScanAccess;": "chunkScanner"
      }
    },
    "net/minecraft/world/level/chunk/storage/EntityStorage": {
      "fields": {
        "b": "LOGGER",
        "c": "ENTITIES_TAG",
        "d": "POSITION_TAG",
        "e": "level",
        "f": "worker",
        "g": "emptyChunks",
        "h": "entityDeserializerQueue",
        "a": "fixerUpper"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "loadEntities",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/ChunkPos;": "readChunkPos",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/ChunkPos;)V": "writeChunkPos",
        "b(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/entity/ChunkEntities;": "emptyChunk",
        "a(Lnet/minecraft/world/level/entity/ChunkEntities;)V": "storeEntities",
        "a(Z)V": "flush",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "upgradeChunkTag",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Throwable;)Ljava/lang/Void;": "lambda$storeEntities$2",
        "a(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/world/entity/Entity;)V": "lambda$storeEntities$1",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/util/Optional;)Lnet/minecraft/world/level/entity/ChunkEntities;": "lambda$loadEntities$0"
      }
    },
    "net/minecraft/world/level/chunk/storage/IOWorker": {
      "fields": {
        "a": "LOGGER",
        "b": "shutdownRequested",
        "c": "mailbox",
        "d": "storage",
        "e": "pendingWrites",
        "f": "regionCacheForBlender",
        "g": "REGION_CACHE_SIZE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;I)Z": "isOldChunkAround",
        "a(II)Ljava/util/concurrent/CompletableFuture;": "getOrCreateOldDataForRegion",
        "b(II)Ljava/util/concurrent/CompletableFuture;": "createOldDataForRegion",
        "a(Lnet/minecraft/nbt/CompoundTag;)Z": "isOldChunk",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)Ljava/util/concurrent/CompletableFuture;": "store",
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "loadAsync",
        "a(Z)Ljava/util/concurrent/CompletableFuture;": "synchronize",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/StreamTagVisitor;)Ljava/util/concurrent/CompletableFuture;": "scanChunk",
        "a(Ljava/util/function/Supplier;)Ljava/util/concurrent/CompletableFuture;": "submitTask",
        "a()V": "storePendingChunk",
        "b()V": "tellStorePending",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/storage/IOWorker$PendingStore;)V": "runStore",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/util/thread/StrictQueue$IntRunnable;": "lambda$close$16",
        "b(Lnet/minecraft/util/thread/ProcessorHandle;)V": "lambda$close$15",
        "a(Ljava/util/function/Supplier;Lnet/minecraft/util/thread/ProcessorHandle;)Lnet/minecraft/util/thread/StrictQueue$IntRunnable;": "lambda$submitTask$14",
        "a(Lnet/minecraft/util/thread/ProcessorHandle;Ljava/util/function/Supplier;)V": "lambda$submitTask$13",
        "b(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/StreamTagVisitor;)Lcom/mojang/datafixers/util/Either;": "lambda$scanChunk$12",
        "a(Ljava/lang/Void;)Ljava/util/concurrent/CompletionStage;": "lambda$synchronize$11",
        "c()Lcom/mojang/datafixers/util/Either;": "lambda$synchronize$10",
        "b(Ljava/lang/Void;)Ljava/util/concurrent/CompletionStage;": "lambda$synchronize$9",
        "d()Lcom/mojang/datafixers/util/Either;": "lambda$synchronize$8",
        "e()Lcom/mojang/datafixers/util/Either;": "lambda$synchronize$7",
        "a(I)[Ljava/util/concurrent/CompletableFuture;": "lambda$synchronize$6",
        "a(Lnet/minecraft/world/level/chunk/storage/IOWorker$PendingStore;)Ljava/util/concurrent/CompletableFuture;": "lambda$synchronize$5",
        "b(Lnet/minecraft/world/level/ChunkPos;)Lcom/mojang/datafixers/util/Either;": "lambda$loadAsync$4",
        "b(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)Lcom/mojang/datafixers/util/Either;": "lambda$store$3",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/chunk/storage/IOWorker$PendingStore;": "lambda$store$2",
        "c(II)Ljava/util/BitSet;": "lambda$createOldDataForRegion$1",
        "a(Ljava/util/BitSet;Lnet/minecraft/world/level/ChunkPos;)V": "lambda$createOldDataForRegion$0"
      }
    },
    "net/minecraft/world/level/chunk/storage/IOWorker$Priority": {
      "fields": {
        "a": "FOREGROUND",
        "b": "BACKGROUND",
        "c": "SHUTDOWN",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/chunk/storage/IOWorker$Priority;": "$values"
      }
    },
    "net/minecraft/world/level/chunk/storage/RegionFileBitSet": {
      "fields": {
        "a": "used"
      },
      "methods": {
        "a(II)V": "force",
        "b(II)V": "free",
        "a(I)I": "allocate",
        "a()Lit/unimi/dsi/fastutil/ints/IntSet;": "getUsed"
      }
    },
    "net/minecraft/world/level/chunk/storage/RegionFile": {
      "fields": {
        "c": "LOGGER",
        "d": "SECTOR_BYTES",
        "a": "SECTOR_INTS",
        "e": "CHUNK_HEADER_SIZE",
        "f": "HEADER_OFFSET",
        "g": "PADDING_BUFFER",
        "h": "EXTERNAL_FILE_EXTENSION",
        "i": "EXTERNAL_STREAM_FLAG",
        "j": "EXTERNAL_CHUNK_THRESHOLD",
        "k": "CHUNK_NOT_PRESENT",
        "l": "file",
        "m": "externalFileDir",
        "n": "version",
        "o": "header",
        "p": "offsets",
        "q": "timestamps",
        "b": "usedSectors"
      },
      "methods": {
        "f(Lnet/minecraft/world/level/ChunkPos;)Ljava/nio/file/Path;": "getExternalChunkPath",
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/io/DataInputStream;": "getChunkDataInputStream",
        "b()I": "getTimestamp",
        "a(B)Z": "isExternalStreamChunk",
        "b(B)B": "getExternalChunkVersion",
        "a(Lnet/minecraft/world/level/ChunkPos;BLjava/io/InputStream;)Ljava/io/DataInputStream;": "createChunkInputStream",
        "a(Lnet/minecraft/world/level/ChunkPos;B)Ljava/io/DataInputStream;": "createExternalChunkInputStream",
        "a(Ljava/nio/ByteBuffer;I)Ljava/io/ByteArrayInputStream;": "createStream",
        "a(II)I": "packSectorOffset",
        "a(I)I": "getNumSectors",
        "b(I)I": "getSectorNumber",
        "c(I)I": "sizeToSectors",
        "b(Lnet/minecraft/world/level/ChunkPos;)Z": "doesChunkExist",
        "c(Lnet/minecraft/world/level/ChunkPos;)Ljava/io/DataOutputStream;": "getChunkDataOutputStream",
        "a()V": "flush",
        "d(Lnet/minecraft/world/level/ChunkPos;)V": "clear",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/nio/ByteBuffer;)V": "write",
        "c()Ljava/nio/ByteBuffer;": "createExternalStub",
        "a(Ljava/nio/file/Path;Ljava/nio/ByteBuffer;)Lnet/minecraft/world/level/chunk/storage/RegionFile$CommitOp;": "writeToExternalFile",
        "d()V": "writeHeader",
        "g(Lnet/minecraft/world/level/ChunkPos;)I": "getOffset",
        "e(Lnet/minecraft/world/level/ChunkPos;)Z": "hasChunk",
        "h(Lnet/minecraft/world/level/ChunkPos;)I": "getOffsetIndex",
        "e()V": "padToFullSector",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;)V": "lambda$writeToExternalFile$1",
        "i(Lnet/minecraft/world/level/ChunkPos;)V": "lambda$write$0"
      }
    },
    "net/minecraft/world/level/chunk/storage/RegionFile$ChunkBuffer": {
      "fields": {
        "b": "pos",
        "this$0": "this$0"
      }
    },
    "net/minecraft/world/level/chunk/storage/RegionFileCache": {
      "fields": {
        "a": "ANVIL_EXTENSION",
        "b": "MAX_CACHE_SIZE",
        "c": "regionCache",
        "d": "folder",
        "e": "sync"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/chunk/storage/RegionFile;": "getRegionFile",
        "a(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/nbt/CompoundTag;": "read",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/StreamTagVisitor;)V": "scanChunk",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/nbt/CompoundTag;)V": "write",
        "a()V": "flush"
      }
    },
    "net/minecraft/world/level/chunk/storage/RegionFileCompression": {
      "fields": {
        "d": "VERSIONS",
        "a": "VERSION_GZIP",
        "b": "VERSION_DEFLATE",
        "c": "VERSION_NONE",
        "e": "id",
        "f": "inputWrapper",
        "g": "outputWrapper"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/chunk/storage/RegionFileVersion;)Lnet/minecraft/world/level/chunk/storage/RegionFileVersion;": "register",
        "a(I)Lnet/minecraft/world/level/chunk/storage/RegionFileVersion;": "fromId",
        "b(I)Z": "isValidVersion",
        "a()I": "getId",
        "a(Ljava/io/OutputStream;)Ljava/io/OutputStream;": "wrap",
        "a(Ljava/io/InputStream;)Ljava/io/InputStream;": "wrap",
        "b(Ljava/io/OutputStream;)Ljava/io/OutputStream;": "lambda$static$5",
        "b(Ljava/io/InputStream;)Ljava/io/InputStream;": "lambda$static$4",
        "c(Ljava/io/OutputStream;)Ljava/io/OutputStream;": "lambda$static$3",
        "c(Ljava/io/InputStream;)Ljava/io/InputStream;": "lambda$static$2",
        "d(Ljava/io/OutputStream;)Ljava/io/OutputStream;": "lambda$static$1",
        "d(Ljava/io/InputStream;)Ljava/io/InputStream;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/chunk/storage/RegionFileSection": {
      "fields": {
        "a": "LOGGER",
        "b": "SECTIONS_TAG",
        "d": "worker",
        "e": "storage",
        "f": "dirty",
        "g": "codec",
        "h": "factory",
        "i": "fixerUpper",
        "j": "type",
        "k": "registryAccess",
        "c": "levelHeightAccessor"
      },
      "methods": {
        "a(Ljava/util/function/BooleanSupplier;)V": "tick",
        "a()Z": "hasWork",
        "c(J)Ljava/util/Optional;": "get",
        "d(J)Ljava/util/Optional;": "getOrLoad",
        "e(J)Z": "outsideStoredRange",
        "f(J)Ljava/lang/Object;": "getOrCreate",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "readColumn",
        "c(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "tryRead",
        "a(Lnet/minecraft/world/level/ChunkPos;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)V": "readColumn",
        "d(Lnet/minecraft/world/level/ChunkPos;)V": "writeColumn",
        "a(Lnet/minecraft/world/level/ChunkPos;Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/Dynamic;": "writeColumn",
        "a(Lnet/minecraft/world/level/ChunkPos;I)J": "getKey",
        "b(J)V": "onSectionLoad",
        "a(J)V": "setDirty",
        "a(Lcom/mojang/serialization/Dynamic;)I": "getVersion",
        "a(Lnet/minecraft/world/level/ChunkPos;)V": "flush",
        "a(Ljava/util/Map;Lcom/mojang/serialization/DynamicOps;Ljava/lang/String;Ljava/lang/Object;)V": "lambda$writeColumn$6",
        "g(J)V": "lambda$writeColumn$5",
        "a(JZLjava/lang/Object;)V": "lambda$readColumn$4",
        "a(JLcom/mojang/serialization/Dynamic;)Ljava/util/Optional;": "lambda$readColumn$3",
        "h(J)V": "lambda$readColumn$2",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Throwable;)Ljava/util/Optional;": "lambda$tryRead$1",
        "i(J)V": "lambda$getOrCreate$0"
      }
    },
    "net/minecraft/world/level/dimension/BuiltinDimensionTypes": {
      "fields": {
        "a": "OVERWORLD",
        "b": "NETHER",
        "c": "END",
        "d": "OVERWORLD_CAVES",
        "e": "OVERWORLD_EFFECTS",
        "f": "NETHER_EFFECTS",
        "g": "END_EFFECTS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "register"
      }
    },
    "net/minecraft/world/level/dimension/DimensionManager": {
      "fields": {
        "k": "fixedTime",
        "l": "hasSkyLight",
        "m": "hasCeiling",
        "n": "ultraWarm",
        "o": "natural",
        "p": "coordinateScale",
        "q": "bedWorks",
        "r": "respawnAnchorWorks",
        "s": "minY",
        "t": "height",
        "u": "logicalHeight",
        "v": "infiniburn",
        "w": "effectsLocation",
        "x": "ambientLight",
        "y": "monsterSettings",
        "a": "BITS_FOR_Y",
        "b": "MIN_HEIGHT",
        "c": "Y_SIZE",
        "d": "MAX_Y",
        "e": "MIN_Y",
        "f": "WAY_ABOVE_MAX_Y",
        "g": "WAY_BELOW_MIN_Y",
        "h": "DIRECT_CODEC",
        "z": "MOON_PHASES",
        "i": "MOON_BRIGHTNESS_PER_PHASE",
        "j": "CODEC"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;": "parseLegacy",
        "a(Lnet/minecraft/world/level/dimension/DimensionType;Lnet/minecraft/world/level/dimension/DimensionType;)D": "getTeleportationScale",
        "a(Lnet/minecraft/resources/ResourceKey;Ljava/nio/file/Path;)Ljava/nio/file/Path;": "getStorageFolder",
        "a()Z": "hasFixedTime",
        "a(J)F": "timeOfDay",
        "b(J)I": "moonPhase",
        "b()Z": "piglinSafe",
        "c()Z": "hasRaids",
        "d()Lnet/minecraft/util/valueproviders/IntProvider;": "monsterSpawnLightTest",
        "e()I": "monsterSpawnBlockLightLimit",
        "f()Ljava/util/OptionalLong;": "fixedTime",
        "g()Z": "hasSkyLight",
        "h()Z": "hasCeiling",
        "i()Z": "ultraWarm",
        "j()Z": "natural",
        "k()D": "coordinateScale",
        "l()Z": "bedWorks",
        "m()Z": "respawnAnchorWorks",
        "n()I": "minY",
        "o()I": "height",
        "p()I": "logicalHeight",
        "q()Lnet/minecraft/tags/TagKey;": "infiniburn",
        "r()Lnet/minecraft/resources/ResourceLocation;": "effectsLocation",
        "s()F": "ambientLight",
        "t()Lnet/minecraft/world/level/dimension/DimensionType$MonsterSettings;": "monsterSettings",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/dimension/WorldDimension": {
      "fields": {
        "e": "type",
        "f": "generator",
        "a": "CODEC",
        "b": "OVERWORLD",
        "c": "NETHER",
        "d": "END"
      },
      "methods": {
        "a()Lnet/minecraft/core/Holder;": "type",
        "b()Lnet/minecraft/world/level/chunk/ChunkGenerator;": "generator",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/dimension/end/EnumDragonRespawn": {
      "fields": {
        "a": "START",
        "b": "PREPARING_TO_SUMMON_PILLARS",
        "c": "SUMMONING_PILLARS",
        "d": "SUMMONING_DRAGON",
        "e": "END",
        "f": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/dimension/end/EndDragonFight;Ljava/util/List;ILnet/minecraft/core/BlockPos;)V": "tick",
        "a()[Lnet/minecraft/world/level/dimension/end/DragonRespawnAnimation;": "$values"
      }
    },
    "net/minecraft/world/level/dimension/end/EnderDragonBattle": {
      "fields": {
        "d": "LOGGER",
        "e": "MAX_TICKS_BEFORE_DRAGON_RESPAWN",
        "f": "TIME_BETWEEN_CRYSTAL_SCANS",
        "a": "TIME_BETWEEN_PLAYER_SCANS",
        "g": "ARENA_SIZE_CHUNKS",
        "b": "ARENA_TICKET_LEVEL",
        "h": "GATEWAY_COUNT",
        "i": "GATEWAY_DISTANCE",
        "c": "DRAGON_SPAWN_Y",
        "j": "validPlayer",
        "k": "dragonEvent",
        "l": "level",
        "m": "origin",
        "n": "gateways",
        "o": "exitPortalPattern",
        "p": "ticksSinceDragonSeen",
        "q": "crystalsAlive",
        "r": "ticksSinceCrystalsScanned",
        "s": "ticksSinceLastPlayerScan",
        "t": "dragonKilled",
        "u": "previouslyKilled",
        "v": "skipArenaLoadedCheck",
        "w": "dragonUUID",
        "x": "needsStateScanning",
        "y": "portalLocation",
        "z": "respawnStage",
        "A": "respawnTime",
        "B": "respawnCrystals"
      },
      "methods": {
        "a()V": "skipArenaLoadedCheck",
        "b()Lnet/minecraft/world/level/dimension/end/EndDragonFight$Data;": "saveData",
        "c()V": "tick",
        "j()V": "scanState",
        "k()V": "findOrCreateDragon",
        "a(Lnet/minecraft/world/level/dimension/end/DragonRespawnAnimation;)V": "setRespawnStage",
        "l()Z": "hasActiveExitPortal",
        "m()Lnet/minecraft/world/level/block/state/pattern/BlockPattern$BlockPatternMatch;": "findExitPortal",
        "n()Z": "isArenaLoaded",
        "o()V": "updatePlayers",
        "p()V": "updateCrystalCount",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EnderDragon;)V": "setDragonKilled",
        "d()V": "removeAllGateways",
        "q()V": "spawnNewGateway",
        "a(Lnet/minecraft/core/BlockPos;)V": "spawnNewGateway",
        "a(Z)V": "spawnExitPortal",
        "r()Lnet/minecraft/world/entity/boss/enderdragon/EnderDragon;": "createNewDragon",
        "b(Lnet/minecraft/world/entity/boss/enderdragon/EnderDragon;)V": "updateDragon",
        "e()I": "getCrystalsAlive",
        "a(Lnet/minecraft/world/entity/boss/enderdragon/EndCrystal;Lnet/minecraft/world/damagesource/DamageSource;)V": "onCrystalDestroyed",
        "f()Z": "hasPreviouslyKilledDragon",
        "g()V": "tryRespawn",
        "a(Ljava/util/List;)V": "respawnDragon",
        "h()V": "resetSpikeCrystals",
        "i()Ljava/util/UUID;": "getDragonUUID"
      }
    },
    "net/minecraft/world/level/entity/ChunkEntities": {
      "fields": {
        "a": "pos",
        "b": "entities"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/ChunkPos;": "getPos",
        "b()Ljava/util/stream/Stream;": "getEntities",
        "c()Z": "isEmpty"
      }
    },
    "net/minecraft/world/level/entity/ChunkStatusUpdateListener": {},
    "net/minecraft/world/level/entity/EntityAccess": {
      "methods": {
        "af()I": "getId",
        "ct()Ljava/util/UUID;": "getUUID",
        "di()Lnet/minecraft/core/BlockPos;": "blockPosition",
        "cE()Lnet/minecraft/world/phys/AABB;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/entity/EntityInLevelCallback;)V": "setLevelCallback",
        "cP()Ljava/util/stream/Stream;": "getSelfAndPassengers",
        "cQ()Ljava/util/stream/Stream;": "getPassengersAndSelf",
        "b(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "setRemoved",
        "dG()Z": "shouldBeSaved",
        "dH()Z": "isAlwaysTicking"
      }
    },
    "net/minecraft/world/level/entity/EntityInLevelCallback": {
      "fields": {
        "a": "NULL"
      },
      "methods": {
        "a()V": "onMove",
        "a(Lnet/minecraft/world/entity/Entity$RemovalReason;)V": "onRemove"
      }
    },
    "net/minecraft/world/level/entity/EntityLookup": {
      "fields": {
        "a": "LOGGER",
        "b": "byId",
        "c": "byUuid"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/util/AbortableIterationConsumer;)V": "getEntities",
        "a()Ljava/lang/Iterable;": "getAllEntities",
        "a(Lnet/minecraft/world/level/entity/EntityAccess;)V": "add",
        "b(Lnet/minecraft/world/level/entity/EntityAccess;)V": "remove",
        "a(I)Lnet/minecraft/world/level/entity/EntityAccess;": "getEntity",
        "a(Ljava/util/UUID;)Lnet/minecraft/world/level/entity/EntityAccess;": "getEntity",
        "b()I": "count"
      }
    },
    "net/minecraft/world/level/entity/EntityPersistentStorage": {
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;)Ljava/util/concurrent/CompletableFuture;": "loadEntities",
        "a(Lnet/minecraft/world/level/entity/ChunkEntities;)V": "storeEntities",
        "a(Z)V": "flush"
      }
    },
    "net/minecraft/world/level/entity/EntitySection": {
      "fields": {
        "a": "LOGGER",
        "b": "storage",
        "c": "chunkStatus"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/entity/EntityAccess;)V": "add",
        "b(Lnet/minecraft/world/level/entity/EntityAccess;)Z": "remove",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "getEntities",
        "a()Z": "isEmpty",
        "b()Ljava/util/stream/Stream;": "getEntities",
        "c()Lnet/minecraft/world/level/entity/Visibility;": "getStatus",
        "a(Lnet/minecraft/world/level/entity/Visibility;)Lnet/minecraft/world/level/entity/Visibility;": "updateChunkStatus",
        "d()I": "size"
      }
    },
    "net/minecraft/world/level/entity/EntitySectionStorage": {
      "fields": {
        "a": "entityClass",
        "b": "intialSectionVisibility",
        "c": "sections",
        "d": "sectionIds"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)V": "forEachAccessibleNonEmptySection",
        "a(J)Ljava/util/stream/LongStream;": "getExistingSectionPositionsInChunk",
        "a(II)Lit/unimi/dsi/fastutil/longs/LongSortedSet;": "getChunkSections",
        "b(J)Ljava/util/stream/Stream;": "getExistingSectionsInChunk",
        "f(J)J": "getChunkKeyFromSectionKey",
        "c(J)Lnet/minecraft/world/level/entity/EntitySection;": "getOrCreateSection",
        "d(J)Lnet/minecraft/world/level/entity/EntitySection;": "getSection",
        "g(J)Lnet/minecraft/world/level/entity/EntitySection;": "createSection",
        "a()Lit/unimi/dsi/fastutil/longs/LongSet;": "getAllChunksWithExistingSections",
        "b(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)V": "getEntities",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)V": "getEntities",
        "e(J)V": "remove",
        "b()I": "count",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;Lnet/minecraft/world/level/entity/EntitySection;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "lambda$getEntities$2",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;Lnet/minecraft/world/level/entity/EntitySection;)Lnet/minecraft/util/AbortableIterationConsumer$Continuation;": "lambda$getEntities$1",
        "a(Lit/unimi/dsi/fastutil/longs/LongSet;J)V": "lambda$getAllChunksWithExistingSections$0"
      }
    },
    "net/minecraft/world/level/entity/EntityTickList": {
      "fields": {
        "a": "active",
        "b": "passive",
        "c": "iterated"
      },
      "methods": {
        "a()V": "ensureActiveIsNotIterated",
        "a(Lnet/minecraft/world/entity/Entity;)V": "add",
        "b(Lnet/minecraft/world/entity/Entity;)V": "remove",
        "c(Lnet/minecraft/world/entity/Entity;)Z": "contains",
        "a(Ljava/util/function/Consumer;)V": "forEach"
      }
    },
    "net/minecraft/world/level/entity/EntityTypeTest": {
      "methods": {
        "a(Ljava/lang/Class;)Lnet/minecraft/world/level/entity/EntityTypeTest;": "forClass",
        "a(Ljava/lang/Object;)Ljava/lang/Object;": "tryCast",
        "a()Ljava/lang/Class;": "getBaseClass"
      }
    },
    "net/minecraft/world/level/entity/LevelCallback": {
      "methods": {
        "g(Ljava/lang/Object;)V": "onCreated",
        "f(Ljava/lang/Object;)V": "onDestroyed",
        "e(Ljava/lang/Object;)V": "onTickingStart",
        "d(Ljava/lang/Object;)V": "onTickingEnd",
        "c(Ljava/lang/Object;)V": "onTrackingStart",
        "b(Ljava/lang/Object;)V": "onTrackingEnd",
        "a(Ljava/lang/Object;)V": "onSectionChange"
      }
    },
    "net/minecraft/world/level/entity/LevelEntityGetter": {
      "methods": {
        "a(I)Lnet/minecraft/world/level/entity/EntityAccess;": "get",
        "a(Ljava/util/UUID;)Lnet/minecraft/world/level/entity/EntityAccess;": "get",
        "a()Ljava/lang/Iterable;": "getAll",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/util/AbortableIterationConsumer;)V": "get",
        "a(Lnet/minecraft/world/phys/AABB;Ljava/util/function/Consumer;)V": "get",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)V": "get"
      }
    },
    "net/minecraft/world/level/entity/LevelEntityGetterAdapter": {
      "fields": {
        "a": "visibleEntities",
        "b": "sectionStorage"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/entity/EntityAccess;": "get",
        "a(Ljava/util/UUID;)Lnet/minecraft/world/level/entity/EntityAccess;": "get",
        "a()Ljava/lang/Iterable;": "getAll",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/util/AbortableIterationConsumer;)V": "get",
        "a(Lnet/minecraft/world/phys/AABB;Ljava/util/function/Consumer;)V": "get",
        "a(Lnet/minecraft/world/level/entity/EntityTypeTest;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/AbortableIterationConsumer;)V": "get"
      }
    },
    "net/minecraft/world/level/entity/PersistentEntitySectionManager": {
      "fields": {
        "a": "LOGGER",
        "b": "knownUuids",
        "c": "callbacks",
        "d": "permanentStorage",
        "e": "visibleEntityStorage",
        "f": "sectionStorage",
        "g": "entityGetter",
        "h": "chunkVisibility",
        "i": "chunkLoadStatuses",
        "j": "chunksToUnload",
        "k": "loadingInbox"
      },
      "methods": {
        "a(JLnet/minecraft/world/level/entity/EntitySection;)V": "removeSectionIfEmpty",
        "b(Lnet/minecraft/world/level/entity/EntityAccess;)Z": "addEntityUuid",
        "a(Lnet/minecraft/world/level/entity/EntityAccess;)Z": "addNewEntity",
        "a(Lnet/minecraft/world/level/entity/EntityAccess;Z)Z": "addEntity",
        "a(Lnet/minecraft/world/level/entity/EntityAccess;Lnet/minecraft/world/level/entity/Visibility;)Lnet/minecraft/world/level/entity/Visibility;": "getEffectiveStatus",
        "a(Ljava/util/stream/Stream;)V": "addLegacyChunkEntities",
        "b(Ljava/util/stream/Stream;)V": "addWorldGenChunkEntities",
        "c(Lnet/minecraft/world/level/entity/EntityAccess;)V": "startTicking",
        "d(Lnet/minecraft/world/level/entity/EntityAccess;)V": "stopTicking",
        "e(Lnet/minecraft/world/level/entity/EntityAccess;)V": "startTracking",
        "f(Lnet/minecraft/world/level/entity/EntityAccess;)V": "stopTracking",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/server/level/FullChunkStatus;)V": "updateChunkStatus",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/entity/Visibility;)V": "updateChunkStatus",
        "b(J)V": "ensureChunkQueuedForLoad",
        "a(JLjava/util/function/Consumer;)Z": "storeChunkSections",
        "c(J)V": "requestChunkLoad",
        "d(J)Z": "processChunkUnload",
        "g(Lnet/minecraft/world/level/entity/EntityAccess;)V": "unloadEntity",
        "f()V": "processUnloads",
        "g()V": "processPendingLoads",
        "a()V": "tick",
        "h()Lit/unimi/dsi/fastutil/longs/LongSet;": "getAllChunksToSave",
        "b()V": "autoSave",
        "c()V": "saveAll",
        "a(Ljava/util/UUID;)Z": "isLoaded",
        "d()Lnet/minecraft/world/level/entity/LevelEntityGetter;": "getEntityGetter",
        "a(Lnet/minecraft/core/BlockPos;)Z": "canPositionTick",
        "a(Lnet/minecraft/world/level/ChunkPos;)Z": "canPositionTick",
        "a(J)Z": "areEntitiesLoaded",
        "a(Ljava/io/Writer;)V": "dumpSections",
        "e()Ljava/lang/String;": "gatherStats",
        "a(Lnet/minecraft/util/CsvOutput;J)V": "lambda$dumpSections$17",
        "a(Lnet/minecraft/util/CsvOutput;Lnet/minecraft/world/level/entity/PersistentEntitySectionManager$ChunkLoadStatus;J)V": "lambda$dumpSections$16",
        "e(J)Z": "lambda$saveAll$15",
        "h(Lnet/minecraft/world/level/entity/EntityAccess;)V": "lambda$saveAll$14",
        "f(J)V": "lambda$autoSave$13",
        "i(Lnet/minecraft/world/level/entity/EntityAccess;)V": "lambda$autoSave$12",
        "j(Lnet/minecraft/world/level/entity/EntityAccess;)V": "lambda$processPendingLoads$11",
        "g(J)Z": "lambda$processUnloads$10",
        "k(Lnet/minecraft/world/level/entity/EntityAccess;)V": "lambda$processChunkUnload$9",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/lang/Throwable;)Ljava/lang/Void;": "lambda$requestChunkLoad$8",
        "a(Lnet/minecraft/world/level/entity/EntitySection;)Ljava/util/stream/Stream;": "lambda$storeChunkSections$7",
        "a(Lnet/minecraft/world/level/entity/Visibility;Lnet/minecraft/world/level/entity/EntitySection;)V": "lambda$updateChunkStatus$6",
        "o(Lnet/minecraft/world/level/entity/EntityAccess;)Z": "lambda$updateChunkStatus$2",
        "p(Lnet/minecraft/world/level/entity/EntityAccess;)V": "lambda$addWorldGenChunkEntities$1",
        "q(Lnet/minecraft/world/level/entity/EntityAccess;)V": "lambda$addLegacyChunkEntities$0"
      }
    },
    "net/minecraft/world/level/entity/Visibility": {
      "fields": {
        "a": "HIDDEN",
        "b": "TRACKED",
        "c": "TICKING",
        "d": "accessible",
        "e": "ticking",
        "f": "$VALUES"
      },
      "methods": {
        "a()Z": "isTicking",
        "b()Z": "isAccessible",
        "a(Lnet/minecraft/server/level/FullChunkStatus;)Lnet/minecraft/world/level/entity/Visibility;": "fromFullChunkStatus",
        "c()[Lnet/minecraft/world/level/entity/Visibility;": "$values"
      }
    },
    "net/minecraft/world/level/gameevent/BlockPositionSource": {
      "fields": {
        "a": "CODEC",
        "c": "pos"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;)Ljava/util/Optional;": "getPosition",
        "a()Lnet/minecraft/world/level/gameevent/PositionSourceType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/gameevent/BlockPositionSource;)Lnet/minecraft/core/BlockPos;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/gameevent/DynamicGameEventListener": {
      "fields": {
        "a": "listener",
        "b": "lastSection"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;)V": "add",
        "a()Lnet/minecraft/world/level/gameevent/GameEventListener;": "getListener",
        "b(Lnet/minecraft/server/level/ServerLevel;)V": "remove",
        "c(Lnet/minecraft/server/level/ServerLevel;)V": "move",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/SectionPos;Ljava/util/function/Consumer;)V": "ifChunkExists",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/SectionPos;)V": "lambda$move$3",
        "a(Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry;)V": "lambda$move$2",
        "b(Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry;)V": "lambda$move$1",
        "c(Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry;)V": "lambda$remove$0"
      }
    },
    "net/minecraft/world/level/gameevent/EntityPositionSource": {
      "fields": {
        "a": "CODEC",
        "c": "entityOrUuidOrId",
        "d": "yOffset"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;)Ljava/util/Optional;": "getPosition",
        "b(Lnet/minecraft/world/level/Level;)V": "resolveEntity",
        "b()Ljava/util/UUID;": "getUuid",
        "c()I": "getId",
        "a()Lnet/minecraft/world/level/gameevent/PositionSourceType;": "getType",
        "a(Lcom/mojang/datafixers/util/Either;)Ljava/lang/Integer;": "lambda$getId$10",
        "a(Ljava/util/UUID;)Ljava/lang/Integer;": "lambda$getId$9",
        "b(Lcom/mojang/datafixers/util/Either;)Ljava/util/UUID;": "lambda$getUuid$8",
        "a(Ljava/lang/Integer;)Ljava/util/UUID;": "lambda$getUuid$7",
        "a(Lnet/minecraft/world/entity/Entity;)V": "lambda$resolveEntity$6",
        "a(Lnet/minecraft/world/level/Level;Lcom/mojang/datafixers/util/Either;)Ljava/util/Optional;": "lambda$resolveEntity$5",
        "a(Lnet/minecraft/world/level/Level;Ljava/util/UUID;)Lnet/minecraft/world/entity/Entity;": "lambda$resolveEntity$4",
        "b(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/phys/Vec3;": "lambda$getPosition$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Ljava/util/UUID;Ljava/lang/Float;)Lnet/minecraft/world/level/gameevent/EntityPositionSource;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/gameevent/EntityPositionSource;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/gameevent/EuclideanGameEventListenerRegistry": {
      "fields": {
        "b": "listeners",
        "c": "listenersToRemove",
        "d": "listenersToAdd",
        "e": "processing",
        "f": "level",
        "g": "sectionY",
        "h": "onEmptyAction"
      },
      "methods": {
        "a()Z": "isEmpty",
        "a(Lnet/minecraft/world/level/gameevent/GameEventListener;)V": "register",
        "b(Lnet/minecraft/world/level/gameevent/GameEventListener;)V": "unregister",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEvent$Context;Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry$ListenerVisitor;)Z": "visitInRangeListeners",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEventListener;)Ljava/util/Optional;": "getPostableListenerPosition"
      }
    },
    "net/minecraft/world/level/gameevent/GameEvent": {
      "fields": {
        "a": "BLOCK_ACTIVATE",
        "b": "BLOCK_ATTACH",
        "c": "BLOCK_CHANGE",
        "d": "BLOCK_CLOSE",
        "e": "BLOCK_DEACTIVATE",
        "f": "BLOCK_DESTROY",
        "g": "BLOCK_DETACH",
        "h": "BLOCK_OPEN",
        "i": "BLOCK_PLACE",
        "j": "CONTAINER_CLOSE",
        "k": "CONTAINER_OPEN",
        "l": "DRINK",
        "m": "EAT",
        "n": "ELYTRA_GLIDE",
        "o": "ENTITY_DAMAGE",
        "p": "ENTITY_DIE",
        "q": "ENTITY_DISMOUNT",
        "r": "ENTITY_INTERACT",
        "s": "ENTITY_MOUNT",
        "t": "ENTITY_PLACE",
        "u": "ENTITY_ROAR",
        "v": "ENTITY_SHAKE",
        "w": "EQUIP",
        "x": "EXPLODE",
        "y": "FLAP",
        "z": "FLUID_PICKUP",
        "A": "FLUID_PLACE",
        "B": "HIT_GROUND",
        "C": "INSTRUMENT_PLAY",
        "D": "ITEM_INTERACT_FINISH",
        "E": "ITEM_INTERACT_START",
        "F": "JUKEBOX_PLAY",
        "G": "JUKEBOX_STOP_PLAY",
        "H": "LIGHTNING_STRIKE",
        "I": "NOTE_BLOCK_PLAY",
        "J": "PRIME_FUSE",
        "K": "PROJECTILE_LAND",
        "L": "PROJECTILE_SHOOT",
        "M": "SCULK_SENSOR_TENDRILS_CLICKING",
        "N": "SHEAR",
        "O": "SHRIEK",
        "P": "SPLASH",
        "Q": "STEP",
        "R": "SWIM",
        "S": "TELEPORT",
        "T": "RESONATE_1",
        "U": "RESONATE_2",
        "V": "RESONATE_3",
        "W": "RESONATE_4",
        "X": "RESONATE_5",
        "Y": "RESONATE_6",
        "Z": "RESONATE_7",
        "aa": "RESONATE_8",
        "ab": "RESONATE_9",
        "ac": "RESONATE_10",
        "ad": "RESONATE_11",
        "ae": "RESONATE_12",
        "af": "RESONATE_13",
        "ag": "RESONATE_14",
        "ah": "RESONATE_15",
        "ai": "DEFAULT_NOTIFICATION_RADIUS",
        "aj": "name",
        "ak": "notificationRadius",
        "al": "builtInRegistryHolder"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "b()I": "getNotificationRadius",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/gameevent/GameEvent;": "register",
        "a(Ljava/lang/String;I)Lnet/minecraft/world/level/gameevent/GameEvent;": "register",
        "c()Lnet/minecraft/core/Holder$Reference;": "builtInRegistryHolder",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is"
      }
    },
    "net/minecraft/world/level/gameevent/GameEventDispatcher": {
      "fields": {
        "a": "level"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEvent$Context;)V": "post",
        "a(Ljava/util/List;)V": "handleGameEventMessagesInQueue"
      }
    },
    "net/minecraft/world/level/gameevent/GameEventListener": {
      "methods": {
        "a()Lnet/minecraft/world/level/gameevent/PositionSource;": "getListenerSource",
        "b()I": "getListenerRadius",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/level/gameevent/GameEvent$Context;Lnet/minecraft/world/phys/Vec3;)Z": "handleGameEvent",
        "c()Lnet/minecraft/world/level/gameevent/GameEventListener$DeliveryMode;": "getDeliveryMode"
      }
    },
    "net/minecraft/world/level/gameevent/GameEventListenerRegistry": {
      "fields": {
        "a": "NOOP"
      },
      "methods": {
        "a()Z": "isEmpty",
        "a(Lnet/minecraft/world/level/gameevent/GameEventListener;)V": "register",
        "b(Lnet/minecraft/world/level/gameevent/GameEventListener;)V": "unregister",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/gameevent/GameEvent$Context;Lnet/minecraft/world/level/gameevent/GameEventListenerRegistry$ListenerVisitor;)Z": "visitInRangeListeners"
      }
    },
    "net/minecraft/world/level/gameevent/PositionSource": {
      "fields": {
        "b": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/Level;)Ljava/util/Optional;": "getPosition",
        "a()Lnet/minecraft/world/level/gameevent/PositionSourceType;": "getType"
      }
    },
    "net/minecraft/world/level/gameevent/PositionSourceType": {
      "fields": {
        "a": "BLOCK",
        "b": "ENTITY"
      },
      "methods": {
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/level/gameevent/PositionSource;": "read",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/level/gameevent/PositionSource;)V": "write",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/gameevent/PositionSourceType;)Lnet/minecraft/world/level/gameevent/PositionSourceType;": "register",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/level/gameevent/PositionSource;": "fromNetwork",
        "a(Lnet/minecraft/world/level/gameevent/PositionSource;Lnet/minecraft/network/FriendlyByteBuf;)V": "toNetwork",
        "a(Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/IllegalArgumentException;": "lambda$fromNetwork$0"
      }
    },
    "net/minecraft/world/level/gameevent/vibrations/VibrationInfo": {
      "fields": {
        "b": "gameEvent",
        "c": "distance",
        "d": "pos",
        "e": "uuid",
        "f": "projectileOwnerUuid",
        "g": "entity",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)Ljava/util/UUID;": "getProjectileOwner",
        "a(Lnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "getEntity",
        "b(Lnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "getProjectileOwner",
        "a()Lnet/minecraft/world/level/gameevent/GameEvent;": "gameEvent",
        "b()F": "distance",
        "c()Lnet/minecraft/world/phys/Vec3;": "pos",
        "d()Ljava/util/UUID;": "uuid",
        "e()Ljava/util/UUID;": "projectileOwnerUuid",
        "f()Lnet/minecraft/world/entity/Entity;": "entity",
        "c(Lnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "lambda$getProjectileOwner$7",
        "b(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/entity/projectile/Projectile;": "lambda$getProjectileOwner$6",
        "c(Lnet/minecraft/world/entity/Entity;)Z": "lambda$getProjectileOwner$5",
        "d(Lnet/minecraft/server/level/ServerLevel;)Ljava/util/Optional;": "lambda$getEntity$4",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/gameevent/GameEvent;Ljava/lang/Float;Lnet/minecraft/world/phys/Vec3;Ljava/util/Optional;Ljava/util/Optional;)Lnet/minecraft/world/level/gameevent/vibrations/VibrationInfo;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/gameevent/vibrations/VibrationInfo;)Ljava/util/Optional;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/gameevent/vibrations/VibrationInfo;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/gameevent/vibrations/VibrationSelector": {
      "fields": {
        "a": "CODEC",
        "b": "currentVibrationData"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/gameevent/vibrations/VibrationInfo;J)V": "addCandidate",
        "b(Lnet/minecraft/world/level/gameevent/vibrations/VibrationInfo;J)Z": "shouldReplaceVibration",
        "a(J)Ljava/util/Optional;": "chosenCandidate",
        "a()V": "startOver",
        "a(JLnet/minecraft/world/level/gameevent/vibrations/VibrationInfo;)Lorg/apache/commons/lang3/tuple/Pair;": "lambda$new$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/gameevent/vibrations/VibrationSelector;)Ljava/lang/Long;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/gameevent/vibrations/VibrationSelector;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/gameevent/vibrations/VibrationSystem": {
      "fields": {
        "d_": "RESONANCE_EVENTS",
        "e_": "VIBRATION_FREQUENCY_FOR_EVENT"
      },
      "methods": {
        "gb()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$Data;": "getVibrationData",
        "gc()Lnet/minecraft/world/level/gameevent/vibrations/VibrationSystem$User;": "getVibrationUser",
        "a_(Lnet/minecraft/world/level/gameevent/GameEvent;)I": "getGameEventFrequency",
        "b(I)Lnet/minecraft/world/level/gameevent/GameEvent;": "getResonanceEventByFrequency",
        "a_(FI)I": "getRedstoneStrengthForDistance"
      }
    },
    "net/minecraft/world/level/levelgen/Aquifer": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/NoiseChunk;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/NoiseRouter;Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;IILnet/minecraft/world/level/levelgen/Aquifer$FluidPicker;)Lnet/minecraft/world/level/levelgen/Aquifer;": "create",
        "a(Lnet/minecraft/world/level/levelgen/Aquifer$FluidPicker;)Lnet/minecraft/world/level/levelgen/Aquifer;": "createDisabled",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;D)Lnet/minecraft/world/level/block/state/BlockState;": "computeSubstance",
        "a()Z": "shouldScheduleFluidUpdate"
      }
    },
    "net/minecraft/world/level/levelgen/Beardifier": {
      "fields": {
        "a": "BEARD_KERNEL_RADIUS",
        "f": "BEARD_KERNEL_SIZE",
        "g": "BEARD_KERNEL",
        "h": "pieceIterator",
        "i": "junctionIterator"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/levelgen/Beardifier;": "forStructuresInChunk",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;)D": "compute",
        "a()D": "minValue",
        "b()D": "maxValue",
        "a(III)D": "getBuryContribution",
        "a(IIII)D": "getBeardContribution",
        "a(I)Z": "isInKernelRange",
        "b(III)D": "computeBeardContribution",
        "a(IDI)D": "computeBeardContribution",
        "a(Lnet/minecraft/world/level/ChunkPos;Lit/unimi/dsi/fastutil/objects/ObjectList;IILit/unimi/dsi/fastutil/objects/ObjectList;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "lambda$forStructuresInChunk$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Z": "lambda$forStructuresInChunk$1",
        "a([F)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/BelowZeroRetrogen": {
      "fields": {
        "c": "EMPTY",
        "d": "BITSET_CODEC",
        "e": "NON_EMPTY_CHUNK_STATUS",
        "a": "CODEC",
        "f": "RETAINED_RETROGEN_BIOMES",
        "b": "UPGRADE_HEIGHT_ACCESSOR",
        "g": "targetStatus",
        "h": "missingBedrock"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/levelgen/BelowZeroRetrogen;": "read",
        "a(Lnet/minecraft/world/level/chunk/ProtoChunk;)V": "replaceOldBedrock",
        "b(Lnet/minecraft/world/level/chunk/ProtoChunk;)V": "applyBedrockMask",
        "a()Lnet/minecraft/world/level/chunk/ChunkStatus;": "targetStatus",
        "b()Z": "hasBedrockHoles",
        "a(II)Z": "hasBedrockHole",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;Lnet/minecraft/world/level/chunk/ChunkAccess;)Lnet/minecraft/world/level/biome/BiomeResolver;": "getBiomeResolver",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;Ljava/util/function/Predicate;Lnet/minecraft/world/level/chunk/ChunkAccess;IIILnet/minecraft/world/level/biome/Climate$Sampler;)Lnet/minecraft/core/Holder;": "lambda$getBiomeResolver$8",
        "a(Lnet/minecraft/world/level/chunk/ProtoChunk;Lnet/minecraft/core/BlockPos;)V": "lambda$applyBedrockMask$7",
        "b(Lnet/minecraft/world/level/chunk/ProtoChunk;Lnet/minecraft/core/BlockPos;)V": "lambda$replaceOldBedrock$6",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/BelowZeroRetrogen;)Ljava/util/Optional;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/chunk/ChunkStatus;)Lcom/mojang/serialization/DataResult;": "lambda$static$3",
        "c()Ljava/lang/String;": "lambda$static$2",
        "a(Ljava/util/BitSet;)Ljava/util/stream/LongStream;": "lambda$static$1",
        "a(Ljava/util/stream/LongStream;)Ljava/util/BitSet;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/BitRandomSource": {
      "fields": {
        "b": "FLOAT_MULTIPLIER",
        "c": "DOUBLE_MULTIPLIER"
      },
      "methods": {
        "c(I)I": "next",
        "f()I": "nextInt",
        "a(I)I": "nextInt",
        "g()J": "nextLong",
        "h()Z": "nextBoolean",
        "i()F": "nextFloat",
        "j()D": "nextDouble"
      }
    },
    "net/minecraft/world/level/levelgen/Column": {
      "methods": {
        "a(II)Lnet/minecraft/world/level/levelgen/Column$Range;": "around",
        "b(II)Lnet/minecraft/world/level/levelgen/Column$Range;": "inside",
        "a(I)Lnet/minecraft/world/level/levelgen/Column;": "below",
        "b(I)Lnet/minecraft/world/level/levelgen/Column;": "fromHighest",
        "c(I)Lnet/minecraft/world/level/levelgen/Column;": "above",
        "d(I)Lnet/minecraft/world/level/levelgen/Column;": "fromLowest",
        "a()Lnet/minecraft/world/level/levelgen/Column;": "line",
        "a(Ljava/util/OptionalInt;Ljava/util/OptionalInt;)Lnet/minecraft/world/level/levelgen/Column;": "create",
        "b()Ljava/util/OptionalInt;": "getCeiling",
        "c()Ljava/util/OptionalInt;": "getFloor",
        "d()Ljava/util/OptionalInt;": "getHeight",
        "a(Ljava/util/OptionalInt;)Lnet/minecraft/world/level/levelgen/Column;": "withFloor",
        "b(Ljava/util/OptionalInt;)Lnet/minecraft/world/level/levelgen/Column;": "withCeiling",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;ILjava/util/function/Predicate;Ljava/util/function/Predicate;)Ljava/util/Optional;": "scan",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;ILjava/util/function/Predicate;Ljava/util/function/Predicate;Lnet/minecraft/core/BlockPos$MutableBlockPos;ILnet/minecraft/core/Direction;)Ljava/util/OptionalInt;": "scanDirection"
      }
    },
    "net/minecraft/world/level/levelgen/ChunkProviderDebug": {
      "fields": {
        "c": "CODEC",
        "h": "BLOCK_MARGIN",
        "i": "ALL_BLOCKS",
        "j": "GRID_WIDTH",
        "k": "GRID_HEIGHT",
        "d": "AIR",
        "e": "BARRIER",
        "f": "HEIGHT",
        "g": "BARRIER_HEIGHT"
      },
      "methods": {
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "a(Lnet/minecraft/server/level/WorldGenRegion;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "buildSurface",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/StructureManager;)V": "applyBiomeDecoration",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "fillFromNoise",
        "a(IILnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "getBaseHeight",
        "a(IILnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)Lnet/minecraft/world/level/NoiseColumn;": "getBaseColumn",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/core/BlockPos;)V": "addDebugScreenInfo",
        "a(II)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockStateFor",
        "a(Lnet/minecraft/server/level/WorldGenRegion;JLnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/biome/BiomeManager;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)V": "applyCarvers",
        "a(Lnet/minecraft/server/level/WorldGenRegion;)V": "spawnOriginalMobs",
        "f()I": "getMinY",
        "d()I": "getGenDepth",
        "e()I": "getSeaLevel",
        "a(Lnet/minecraft/world/level/block/Block;)Ljava/util/stream/Stream;": "lambda$static$1",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/DensityFunction": {
      "fields": {
        "b": "DIRECT_CODEC",
        "c": "CODEC",
        "d": "HOLDER_HELPER_CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;)D": "compute",
        "a([DLnet/minecraft/world/level/levelgen/DensityFunction$ContextProvider;)V": "fillArray",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$Visitor;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "mapAll",
        "a()D": "minValue",
        "b()D": "maxValue",
        "c()Lnet/minecraft/util/KeyDispatchDataCodec;": "codec",
        "a(DD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "clamp",
        "d()Lnet/minecraft/world/level/levelgen/DensityFunction;": "abs",
        "e()Lnet/minecraft/world/level/levelgen/DensityFunction;": "square",
        "f()Lnet/minecraft/world/level/levelgen/DensityFunction;": "cube",
        "g()Lnet/minecraft/world/level/levelgen/DensityFunction;": "halfNegative",
        "h()Lnet/minecraft/world/level/levelgen/DensityFunction;": "quarterNegative",
        "i()Lnet/minecraft/world/level/levelgen/DensityFunction;": "squeeze",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/DensityFunctions": {
      "fields": {
        "c": "CODEC",
        "a": "MAX_REASONABLE_NOISE_VALUE",
        "d": "NOISE_VALUE_CODEC",
        "b": "DIRECT_CODEC"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Codec;Ljava/util/function/Function;Ljava/util/function/Function;)Lnet/minecraft/util/KeyDispatchDataCodec;": "singleArgumentCodec",
        "a(Ljava/util/function/Function;Ljava/util/function/Function;)Lnet/minecraft/util/KeyDispatchDataCodec;": "singleFunctionArgumentCodec",
        "a(Ljava/util/function/BiFunction;Ljava/util/function/Function;Ljava/util/function/Function;)Lnet/minecraft/util/KeyDispatchDataCodec;": "doubleFunctionArgumentCodec",
        "a(Lcom/mojang/serialization/MapCodec;)Lnet/minecraft/util/KeyDispatchDataCodec;": "makeCodec",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "interpolated",
        "b(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "flatCache",
        "c(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "cache2d",
        "d(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "cacheOnce",
        "e(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "cacheAllInCell",
        "a(Lnet/minecraft/core/Holder;DDDD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "mappedNoise",
        "a(Lnet/minecraft/core/Holder;DDD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "mappedNoise",
        "a(Lnet/minecraft/core/Holder;DD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "mappedNoise",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;DLnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "shiftedNoise2d",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "noise",
        "b(Lnet/minecraft/core/Holder;DD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "noise",
        "a(Lnet/minecraft/core/Holder;D)Lnet/minecraft/world/level/levelgen/DensityFunction;": "noise",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;DDLnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "rangeChoice",
        "b(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "shiftA",
        "c(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "shiftB",
        "d(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "shift",
        "f(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "blendDensity",
        "a(J)Lnet/minecraft/world/level/levelgen/DensityFunction;": "endIslands",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/levelgen/DensityFunctions$WeirdScaledSampler$RarityValueMapper;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "weirdScaledSampler",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "add",
        "b(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "mul",
        "c(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "min",
        "d(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "max",
        "a(Lnet/minecraft/util/CubicSpline;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "spline",
        "a()Lnet/minecraft/world/level/levelgen/DensityFunction;": "zero",
        "a(D)Lnet/minecraft/world/level/levelgen/DensityFunction;": "constant",
        "a(IIDD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "yClampedGradient",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunctions$Mapped$Type;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "map",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;DD)Lnet/minecraft/world/level/levelgen/DensityFunction;": "mapFromUnitTo",
        "b()Lnet/minecraft/world/level/levelgen/DensityFunction;": "blendAlpha",
        "c()Lnet/minecraft/world/level/levelgen/DensityFunction;": "blendOffset",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "lerp",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;DLnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "lerp",
        "a(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BiFunction;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$doubleFunctionArgumentCodec$3",
        "g(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lcom/mojang/datafixers/util/Either;": "lambda$static$2",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "lambda$static$1",
        "h(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lcom/mojang/serialization/Codec;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/ChunkProviderFlat": {
      "fields": {
        "c": "CODEC",
        "d": "settings"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderLookup;Lnet/minecraft/world/level/levelgen/RandomState;J)Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;": "createState",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "g()Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;": "settings",
        "a(Lnet/minecraft/server/level/WorldGenRegion;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "buildSurface",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;)I": "getSpawnHeight",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "fillFromNoise",
        "a(IILnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "getBaseHeight",
        "a(IILnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)Lnet/minecraft/world/level/NoiseColumn;": "getBaseColumn",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/core/BlockPos;)V": "addDebugScreenInfo",
        "a(Lnet/minecraft/server/level/WorldGenRegion;JLnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/biome/BiomeManager;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)V": "applyCarvers",
        "a(Lnet/minecraft/server/level/WorldGenRegion;)V": "spawnOriginalMobs",
        "f()I": "getMinY",
        "d()I": "getGenDepth",
        "e()I": "getSeaLevel"
      }
    },
    "net/minecraft/world/level/levelgen/WorldGenStage": {},
    "net/minecraft/world/level/levelgen/WorldGenStage$Features": {
      "fields": {
        "a": "AIR",
        "b": "LIQUID",
        "c": "CODEC",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()[Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/WorldGenStage$Decoration": {
      "fields": {
        "a": "RAW_GENERATION",
        "b": "LAKES",
        "c": "LOCAL_MODIFICATIONS",
        "d": "UNDERGROUND_STRUCTURES",
        "e": "SURFACE_STRUCTURES",
        "f": "STRONGHOLDS",
        "g": "UNDERGROUND_ORES",
        "h": "UNDERGROUND_DECORATION",
        "i": "FLUID_SPRINGS",
        "j": "VEGETAL_DECORATION",
        "k": "TOP_LAYER_MODIFICATION",
        "l": "CODEC",
        "m": "name",
        "n": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "c()Ljava/lang/String;": "getSerializedName",
        "b()[Lnet/minecraft/world/level/levelgen/GenerationStep$Decoration;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/GeodeBlockSettings": {
      "fields": {
        "a": "fillingProvider",
        "b": "innerLayerProvider",
        "c": "alternateInnerLayerProvider",
        "d": "middleLayerProvider",
        "e": "outerLayerProvider",
        "f": "innerPlacements",
        "g": "cannotReplace",
        "h": "invalidBlocks",
        "i": "CODEC"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$8",
        "a(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/tags/TagKey;": "lambda$static$7",
        "b(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/tags/TagKey;": "lambda$static$6",
        "c(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Ljava/util/List;": "lambda$static$5",
        "d(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$4",
        "e(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$3",
        "f(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$2",
        "g(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$1",
        "h(Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/GeodeCrackSettings": {
      "fields": {
        "a": "CODEC",
        "b": "generateCrackChance",
        "c": "baseCrackSize",
        "d": "crackPointOffset"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/GeodeCrackSettings;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/GeodeCrackSettings;)Ljava/lang/Double;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/GeodeCrackSettings;)Ljava/lang/Double;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/GeodeLayerSettings": {
      "fields": {
        "f": "LAYER_RANGE",
        "a": "CODEC",
        "b": "filling",
        "c": "innerLayer",
        "d": "middleLayer",
        "e": "outerLayer"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/GeodeLayerSettings;)Ljava/lang/Double;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/GeodeLayerSettings;)Ljava/lang/Double;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/GeodeLayerSettings;)Ljava/lang/Double;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/GeodeLayerSettings;)Ljava/lang/Double;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/HeightMap": {
      "fields": {
        "a": "LOGGER",
        "b": "NOT_AIR",
        "c": "MATERIAL_MOTION_BLOCKING",
        "d": "data",
        "e": "isOpaque",
        "f": "chunk"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/Set;)V": "primeHeightmaps",
        "a(IIILnet/minecraft/world/level/block/state/BlockState;)Z": "update",
        "a(II)I": "getFirstAvailable",
        "b(II)I": "getHighestTaken",
        "a(I)I": "getFirstAvailable",
        "a(III)V": "setHeight",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/Heightmap$Types;[J)V": "setRawData",
        "a()[J": "getRawData",
        "c(II)I": "getIndex",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/HeightMap$Type": {
      "fields": {
        "a": "WORLD_SURFACE_WG",
        "b": "WORLD_SURFACE",
        "c": "OCEAN_FLOOR_WG",
        "d": "OCEAN_FLOOR",
        "e": "MOTION_BLOCKING",
        "f": "MOTION_BLOCKING_NO_LEAVES",
        "g": "CODEC",
        "h": "serializationKey",
        "i": "usage",
        "j": "isOpaque",
        "k": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getSerializationKey",
        "b()Z": "sendToClient",
        "d()Z": "keepAfterWorldgen",
        "e()Ljava/util/function/Predicate;": "isOpaque",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$static$1",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$static$0",
        "f()[Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/HeightMap$Use": {
      "fields": {
        "a": "WORLDGEN",
        "b": "LIVE_WORLD",
        "c": "CLIENT",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/levelgen/Heightmap$Usage;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/LegacyRandomSource": {
      "fields": {
        "d": "MODULUS_BITS",
        "e": "MODULUS_MASK",
        "f": "MULTIPLIER",
        "g": "INCREMENT",
        "h": "seed",
        "i": "gaussianSource"
      },
      "methods": {
        "d()Lnet/minecraft/util/RandomSource;": "fork",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "forkPositional",
        "b(J)V": "setSeed",
        "c(I)I": "next",
        "k()D": "nextGaussian"
      }
    },
    "net/minecraft/world/level/levelgen/MarsagliaPolarGaussian": {
      "fields": {
        "a": "randomSource",
        "b": "nextNextGaussian",
        "c": "haveNextNextGaussian"
      },
      "methods": {
        "a()V": "reset",
        "b()D": "nextGaussian"
      }
    },
    "net/minecraft/world/level/levelgen/ChunkGeneratorAbstract": {
      "fields": {
        "c": "CODEC",
        "d": "AIR",
        "e": "settings",
        "f": "globalFluidPicker"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;)Lnet/minecraft/world/level/levelgen/Aquifer$FluidPicker;": "createFluidPicker",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "createBiomes",
        "a(Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "doCreateBiomes",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/levelgen/RandomState;)Lnet/minecraft/world/level/levelgen/NoiseChunk;": "createNoiseChunk",
        "a()Lcom/mojang/serialization/Codec;": "codec",
        "g()Lnet/minecraft/core/Holder;": "generatorSettings",
        "a(Lnet/minecraft/resources/ResourceKey;)Z": "stable",
        "a(IILnet/minecraft/world/level/levelgen/Heightmap$Types;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "getBaseHeight",
        "a(IILnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)Lnet/minecraft/world/level/NoiseColumn;": "getBaseColumn",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/core/BlockPos;)V": "addDebugScreenInfo",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;IILorg/apache/commons/lang3/mutable/MutableObject;Ljava/util/function/Predicate;)Ljava/util/OptionalInt;": "iterateNoiseColumn",
        "a(Lnet/minecraft/server/level/WorldGenRegion;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "buildSurface",
        "a(Lnet/minecraft/server/level/WorldGenRegion;JLnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/biome/BiomeManager;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)V": "applyCarvers",
        "a(Ljava/util/concurrent/Executor;Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkAccess;)Ljava/util/concurrent/CompletableFuture;": "fillFromNoise",
        "a(Lnet/minecraft/world/level/levelgen/blending/Blender;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/chunk/ChunkAccess;II)Lnet/minecraft/world/level/chunk/ChunkAccess;": "doFill",
        "a(Lnet/minecraft/world/level/levelgen/NoiseChunk;IIILnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "debugPreliminarySurfaceLevel",
        "d()I": "getGenDepth",
        "e()I": "getSeaLevel",
        "f()I": "getMinY",
        "a(Lnet/minecraft/server/level/WorldGenRegion;)V": "spawnOriginalMobs",
        "a(Lnet/minecraft/world/level/levelgen/Aquifer$FluidStatus;ILnet/minecraft/world/level/levelgen/Aquifer$FluidStatus;Lnet/minecraft/world/level/levelgen/Aquifer$FluidStatus;III)Lnet/minecraft/world/level/levelgen/Aquifer$FluidStatus;": "lambda$createFluidPicker$4"
      }
    },
    "net/minecraft/world/level/levelgen/NoiseChunk": {
      "fields": {
        "a": "noiseSettings",
        "b": "cellCountXZ",
        "c": "cellCountY",
        "d": "cellNoiseMinY",
        "e": "firstCellX",
        "f": "firstCellZ",
        "g": "firstNoiseX",
        "h": "firstNoiseZ",
        "i": "interpolators",
        "j": "cellCaches",
        "k": "wrapped",
        "l": "preliminarySurfaceLevel",
        "m": "aquifer",
        "n": "initialDensityNoJaggedness",
        "o": "blockStateRule",
        "p": "blender",
        "q": "blendAlpha",
        "r": "blendOffset",
        "s": "beardifier",
        "t": "lastBlendingDataPos",
        "u": "lastBlendingOutput",
        "v": "noiseSizeXZ",
        "w": "cellWidth",
        "x": "cellHeight",
        "y": "interpolating",
        "z": "fillingCell",
        "A": "cellStartBlockX",
        "B": "cellStartBlockY",
        "C": "cellStartBlockZ",
        "D": "inCellX",
        "E": "inCellY",
        "F": "inCellZ",
        "G": "interpolationCounter",
        "H": "arrayInterpolationCounter",
        "I": "arrayIndex",
        "J": "sliceFillingContextProvider"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/levelgen/DensityFunctions$BeardifierOrMarker;Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;Lnet/minecraft/world/level/levelgen/Aquifer$FluidPicker;Lnet/minecraft/world/level/levelgen/blending/Blender;)Lnet/minecraft/world/level/levelgen/NoiseChunk;": "forChunk",
        "a(Lnet/minecraft/world/level/levelgen/NoiseRouter;Ljava/util/List;)Lnet/minecraft/world/level/biome/Climate$Sampler;": "cachedClimateSampler",
        "e()Lnet/minecraft/world/level/block/state/BlockState;": "getInterpolatedState",
        "a()I": "blockX",
        "b()I": "blockY",
        "c()I": "blockZ",
        "a(II)I": "preliminarySurfaceLevel",
        "a(J)I": "computePreliminarySurfaceLevel",
        "d()Lnet/minecraft/world/level/levelgen/blending/Blender;": "getBlender",
        "a(ZI)V": "fillSlice",
        "f()V": "initializeForFirstCellX",
        "b(I)V": "advanceCellX",
        "c(I)Lnet/minecraft/world/level/levelgen/NoiseChunk;": "forIndex",
        "a([DLnet/minecraft/world/level/levelgen/DensityFunction;)V": "fillAllDirectly",
        "b(II)V": "selectCellYZ",
        "a(ID)V": "updateForY",
        "b(ID)V": "updateForX",
        "c(ID)V": "updateForZ",
        "g()V": "stopInterpolation",
        "h()V": "swapSlices",
        "i()Lnet/minecraft/world/level/levelgen/Aquifer;": "aquifer",
        "j()I": "cellWidth",
        "k()I": "cellHeight",
        "c(II)Lnet/minecraft/world/level/levelgen/blending/Blender$BlendingOutput;": "getOrComputeBlendingOutput",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "wrap",
        "b(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "wrapNew",
        "a(I)Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;": "forIndex",
        "a(DLnet/minecraft/world/level/levelgen/NoiseChunk$NoiseInterpolator;)V": "lambda$updateForZ$4",
        "b(DLnet/minecraft/world/level/levelgen/NoiseChunk$NoiseInterpolator;)V": "lambda$updateForX$3",
        "c(DLnet/minecraft/world/level/levelgen/NoiseChunk$NoiseInterpolator;)V": "lambda$updateForY$2",
        "a(IILnet/minecraft/world/level/levelgen/NoiseChunk$NoiseInterpolator;)V": "lambda$selectCellYZ$1",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/levelgen/GeneratorSettingBase": {
      "fields": {
        "j": "noiseSettings",
        "k": "defaultBlock",
        "l": "defaultFluid",
        "m": "noiseRouter",
        "n": "surfaceRule",
        "o": "spawnTarget",
        "p": "seaLevel",
        "q": "disableMobGeneration",
        "r": "aquifersEnabled",
        "s": "oreVeinsEnabled",
        "t": "useLegacyRandomSource",
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "OVERWORLD",
        "d": "LARGE_BIOMES",
        "e": "AMPLIFIED",
        "f": "NETHER",
        "g": "END",
        "h": "CAVES",
        "i": "FLOATING_ISLANDS"
      },
      "methods": {
        "a()Z": "disableMobGeneration",
        "b()Z": "isAquifersEnabled",
        "c()Z": "oreVeinsEnabled",
        "d()Lnet/minecraft/world/level/levelgen/WorldgenRandom$Algorithm;": "getRandomSource",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "b(Lnet/minecraft/data/worldgen/BootstapContext;)Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;": "end",
        "c(Lnet/minecraft/data/worldgen/BootstapContext;)Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;": "nether",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;ZZ)Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;": "overworld",
        "d(Lnet/minecraft/data/worldgen/BootstapContext;)Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;": "caves",
        "e(Lnet/minecraft/data/worldgen/BootstapContext;)Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;": "floatingIslands",
        "e()Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;": "dummy",
        "f()Lnet/minecraft/world/level/levelgen/NoiseSettings;": "noiseSettings",
        "g()Lnet/minecraft/world/level/block/state/BlockState;": "defaultBlock",
        "h()Lnet/minecraft/world/level/block/state/BlockState;": "defaultFluid",
        "i()Lnet/minecraft/world/level/levelgen/NoiseRouter;": "noiseRouter",
        "j()Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "surfaceRule",
        "k()Ljava/util/List;": "spawnTarget",
        "l()I": "seaLevel",
        "m()Z": "aquifersEnabled",
        "n()Z": "useLegacyRandomSource",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/NoiseRouter": {
      "fields": {
        "b": "barrierNoise",
        "c": "fluidLevelFloodednessNoise",
        "d": "fluidLevelSpreadNoise",
        "e": "lavaNoise",
        "f": "temperature",
        "g": "vegetation",
        "h": "continents",
        "i": "erosion",
        "j": "depth",
        "k": "ridges",
        "l": "initialDensityWithoutJaggedness",
        "m": "finalDensity",
        "n": "veinToggle",
        "o": "veinRidged",
        "p": "veinGap",
        "a": "CODEC"
      },
      "methods": {
        "a(Ljava/lang/String;Ljava/util/function/Function;)Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "field",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$Visitor;)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "mapAll",
        "a()Lnet/minecraft/world/level/levelgen/DensityFunction;": "barrierNoise",
        "b()Lnet/minecraft/world/level/levelgen/DensityFunction;": "fluidLevelFloodednessNoise",
        "c()Lnet/minecraft/world/level/levelgen/DensityFunction;": "fluidLevelSpreadNoise",
        "d()Lnet/minecraft/world/level/levelgen/DensityFunction;": "lavaNoise",
        "e()Lnet/minecraft/world/level/levelgen/DensityFunction;": "temperature",
        "f()Lnet/minecraft/world/level/levelgen/DensityFunction;": "vegetation",
        "g()Lnet/minecraft/world/level/levelgen/DensityFunction;": "continents",
        "h()Lnet/minecraft/world/level/levelgen/DensityFunction;": "erosion",
        "i()Lnet/minecraft/world/level/levelgen/DensityFunction;": "depth",
        "j()Lnet/minecraft/world/level/levelgen/DensityFunction;": "ridges",
        "k()Lnet/minecraft/world/level/levelgen/DensityFunction;": "initialDensityWithoutJaggedness",
        "l()Lnet/minecraft/world/level/levelgen/DensityFunction;": "finalDensity",
        "m()Lnet/minecraft/world/level/levelgen/DensityFunction;": "veinToggle",
        "n()Lnet/minecraft/world/level/levelgen/DensityFunction;": "veinRidged",
        "o()Lnet/minecraft/world/level/levelgen/DensityFunction;": "veinGap",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/NoiseRouterData": {
      "fields": {
        "a": "GLOBAL_OFFSET",
        "n": "ORE_THICKNESS",
        "o": "VEININESS_FREQUENCY",
        "p": "NOODLE_SPACING_AND_STRAIGHTNESS",
        "q": "SURFACE_DENSITY_THRESHOLD",
        "r": "CHEESE_NOISE_TARGET",
        "b": "ISLAND_CHUNK_DISTANCE",
        "c": "ISLAND_CHUNK_DISTANCE_SQR",
        "s": "BLENDING_FACTOR",
        "t": "BLENDING_JAGGEDNESS",
        "u": "ZERO",
        "v": "Y",
        "w": "SHIFT_X",
        "x": "SHIFT_Z",
        "y": "BASE_3D_NOISE_OVERWORLD",
        "z": "BASE_3D_NOISE_NETHER",
        "A": "BASE_3D_NOISE_END",
        "d": "CONTINENTS",
        "e": "EROSION",
        "f": "RIDGES",
        "g": "RIDGES_FOLDED",
        "h": "OFFSET",
        "i": "FACTOR",
        "j": "JAGGEDNESS",
        "k": "DEPTH",
        "B": "SLOPED_CHEESE",
        "l": "CONTINENTS_LARGE",
        "m": "EROSION_LARGE",
        "C": "OFFSET_LARGE",
        "D": "FACTOR_LARGE",
        "E": "JAGGEDNESS_LARGE",
        "F": "DEPTH_LARGE",
        "G": "SLOPED_CHEESE_LARGE",
        "H": "OFFSET_AMPLIFIED",
        "I": "FACTOR_AMPLIFIED",
        "J": "JAGGEDNESS_AMPLIFIED",
        "K": "DEPTH_AMPLIFIED",
        "L": "SLOPED_CHEESE_AMPLIFIED",
        "M": "SLOPED_CHEESE_END",
        "N": "SPAGHETTI_ROUGHNESS_FUNCTION",
        "O": "ENTRANCES",
        "P": "NOODLE",
        "Q": "PILLARS",
        "R": "SPAGHETTI_2D_THICKNESS_MODULATOR",
        "S": "SPAGHETTI_2D"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)Lnet/minecraft/core/Holder;": "bootstrap",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/core/HolderGetter;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/core/Holder;Lnet/minecraft/core/Holder;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;Z)V": "registerTerrainNoises",
        "a(Lnet/minecraft/data/worldgen/BootstapContext;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "registerAndWrap",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "getFunction",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "peaksAndValleys",
        "a(F)F": "peaksAndValleys",
        "b(Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "spaghettiRoughnessFunction",
        "d(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "entrances",
        "e(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "noodle",
        "c(Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "pillars",
        "f(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "spaghetti2D",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "underground",
        "b(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "postProcess",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;ZZ)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "overworld",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "noNewCaves",
        "a(ZLnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "slideOverworld",
        "a(Lnet/minecraft/core/HolderGetter;II)Lnet/minecraft/world/level/levelgen/DensityFunction;": "slideNetherLike",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;II)Lnet/minecraft/world/level/levelgen/DensityFunction;": "slideEndLike",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "nether",
        "b(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "caves",
        "c(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "floatingIslands",
        "c(Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "slideEnd",
        "a(Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/NoiseRouter;": "end",
        "a()Lnet/minecraft/world/level/levelgen/NoiseRouter;": "none",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "splineWithBlending",
        "b(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;)Lnet/minecraft/world/level/levelgen/DensityFunction;": "noiseGradientDensity",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;III)Lnet/minecraft/world/level/levelgen/DensityFunction;": "yLimitedInterpolatable",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;IIIIDIID)Lnet/minecraft/world/level/levelgen/DensityFunction;": "slide",
        "a(Lnet/minecraft/world/level/levelgen/OreVeinifier$VeinType;)I": "lambda$overworld$1",
        "b(Lnet/minecraft/world/level/levelgen/OreVeinifier$VeinType;)I": "lambda$overworld$0"
      }
    },
    "net/minecraft/world/level/levelgen/NoiseSettings": {
      "fields": {
        "g": "minY",
        "h": "height",
        "i": "noiseSizeHorizontal",
        "j": "noiseSizeVertical",
        "a": "CODEC",
        "b": "OVERWORLD_NOISE_SETTINGS",
        "c": "NETHER_NOISE_SETTINGS",
        "d": "END_NOISE_SETTINGS",
        "e": "CAVES_NOISE_SETTINGS",
        "f": "FLOATING_ISLANDS_NOISE_SETTINGS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/NoiseSettings;)Lcom/mojang/serialization/DataResult;": "guardY",
        "a(IIII)Lnet/minecraft/world/level/levelgen/NoiseSettings;": "create",
        "a()I": "getCellHeight",
        "b()I": "getCellWidth",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;)Lnet/minecraft/world/level/levelgen/NoiseSettings;": "clampToHeightAccessor",
        "c()I": "minY",
        "d()I": "height",
        "e()I": "noiseSizeHorizontal",
        "f()I": "noiseSizeVertical",
        "a(Lcom/mojang/serialization/DataResult$PartialResult;)V": "lambda$create$4",
        "g()Ljava/lang/String;": "lambda$guardY$3",
        "h()Ljava/lang/String;": "lambda$guardY$2",
        "i()Ljava/lang/String;": "lambda$guardY$1",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/Noises": {
      "fields": {
        "a": "TEMPERATURE",
        "b": "VEGETATION",
        "c": "CONTINENTALNESS",
        "d": "EROSION",
        "e": "TEMPERATURE_LARGE",
        "f": "VEGETATION_LARGE",
        "g": "CONTINENTALNESS_LARGE",
        "h": "EROSION_LARGE",
        "i": "RIDGE",
        "j": "SHIFT",
        "k": "AQUIFER_BARRIER",
        "l": "AQUIFER_FLUID_LEVEL_FLOODEDNESS",
        "m": "AQUIFER_LAVA",
        "n": "AQUIFER_FLUID_LEVEL_SPREAD",
        "o": "PILLAR",
        "p": "PILLAR_RARENESS",
        "q": "PILLAR_THICKNESS",
        "r": "SPAGHETTI_2D",
        "s": "SPAGHETTI_2D_ELEVATION",
        "t": "SPAGHETTI_2D_MODULATOR",
        "u": "SPAGHETTI_2D_THICKNESS",
        "v": "SPAGHETTI_3D_1",
        "w": "SPAGHETTI_3D_2",
        "x": "SPAGHETTI_3D_RARITY",
        "y": "SPAGHETTI_3D_THICKNESS",
        "z": "SPAGHETTI_ROUGHNESS",
        "A": "SPAGHETTI_ROUGHNESS_MODULATOR",
        "B": "CAVE_ENTRANCE",
        "C": "CAVE_LAYER",
        "D": "CAVE_CHEESE",
        "E": "ORE_VEININESS",
        "F": "ORE_VEIN_A",
        "G": "ORE_VEIN_B",
        "H": "ORE_GAP",
        "I": "NOODLE",
        "J": "NOODLE_THICKNESS",
        "K": "NOODLE_RIDGE_A",
        "L": "NOODLE_RIDGE_B",
        "M": "JAGGED",
        "N": "SURFACE",
        "O": "SURFACE_SECONDARY",
        "P": "CLAY_BANDS_OFFSET",
        "Q": "BADLANDS_PILLAR",
        "R": "BADLANDS_PILLAR_ROOF",
        "S": "BADLANDS_SURFACE",
        "T": "ICEBERG_PILLAR",
        "U": "ICEBERG_PILLAR_ROOF",
        "V": "ICEBERG_SURFACE",
        "W": "SWAMP",
        "X": "CALCITE",
        "Y": "GRAVEL",
        "Z": "POWDER_SNOW",
        "aa": "PACKED_ICE",
        "ab": "ICE",
        "ac": "SOUL_SAND_LAYER",
        "ad": "GRAVEL_LAYER",
        "ae": "PATCH",
        "af": "NETHERRACK",
        "ag": "NETHER_WART",
        "ah": "NETHER_STATE_SELECTOR"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise;": "instantiate"
      }
    },
    "net/minecraft/world/level/levelgen/OreVeinifier": {
      "fields": {
        "a": "VEININESS_THRESHOLD",
        "b": "EDGE_ROUNDOFF_BEGIN",
        "c": "MAX_EDGE_ROUNDOFF",
        "d": "VEIN_SOLIDNESS",
        "e": "MIN_RICHNESS",
        "f": "MAX_RICHNESS",
        "g": "MAX_RICHNESS_THRESHOLD",
        "h": "CHANCE_OF_RAW_ORE_BLOCK",
        "i": "SKIP_ORE_IF_GAP_NOISE_IS_BELOW"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;)Lnet/minecraft/world/level/levelgen/NoiseChunk$BlockStateFiller;": "create",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction;Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$create$0"
      }
    },
    "net/minecraft/world/level/levelgen/MobSpawnerPatrol": {
      "fields": {
        "a": "nextTick"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;ZZ)I": "tick",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Z)Z": "spawnPatrolMember"
      }
    },
    "net/minecraft/world/level/levelgen/MobSpawnerPhantom": {
      "fields": {
        "a": "nextTick"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;ZZ)I": "tick"
      }
    },
    "net/minecraft/world/level/levelgen/PositionalRandomFactory": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/util/RandomSource;": "at",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/util/RandomSource;": "fromHashOf",
        "a(Ljava/lang/String;)Lnet/minecraft/util/RandomSource;": "fromHashOf",
        "a(III)Lnet/minecraft/util/RandomSource;": "at",
        "a(Ljava/lang/StringBuilder;)V": "parityConfigString"
      }
    },
    "net/minecraft/world/level/levelgen/RandomState": {
      "fields": {
        "a": "random",
        "b": "noises",
        "c": "router",
        "d": "sampler",
        "e": "surfaceSystem",
        "f": "aquiferRandom",
        "g": "oreRandom",
        "h": "noiseIntances",
        "i": "positionalRandoms"
      },
      "methods": {
        "a(Lnet/minecraft/core/HolderGetter$Provider;Lnet/minecraft/resources/ResourceKey;J)Lnet/minecraft/world/level/levelgen/RandomState;": "create",
        "a(Lnet/minecraft/world/level/levelgen/NoiseGeneratorSettings;Lnet/minecraft/core/HolderGetter;J)Lnet/minecraft/world/level/levelgen/RandomState;": "create",
        "a(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise;": "getOrCreateNoise",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "getOrCreateRandomFactory",
        "a()Lnet/minecraft/world/level/levelgen/NoiseRouter;": "router",
        "b()Lnet/minecraft/world/level/biome/Climate$Sampler;": "sampler",
        "c()Lnet/minecraft/world/level/levelgen/SurfaceSystem;": "surfaceSystem",
        "d()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "aquiferRandom",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "oreRandom",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "lambda$getOrCreateRandomFactory$1",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise;": "lambda$getOrCreateNoise$0"
      }
    },
    "net/minecraft/world/level/levelgen/RandomSupport": {
      "fields": {
        "a": "GOLDEN_RATIO_64",
        "b": "SILVER_RATIO_64",
        "c": "MD5_128",
        "d": "SEED_UNIQUIFIER"
      },
      "methods": {
        "a(J)J": "mixStafford13",
        "b(J)Lnet/minecraft/world/level/levelgen/RandomSupport$Seed128bit;": "upgradeSeedTo128bitUnmixed",
        "c(J)Lnet/minecraft/world/level/levelgen/RandomSupport$Seed128bit;": "upgradeSeedTo128bit",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/levelgen/RandomSupport$Seed128bit;": "seedFromHashOf",
        "a()J": "generateUniqueSeed",
        "d(J)J": "lambda$generateUniqueSeed$0"
      }
    },
    "net/minecraft/world/level/levelgen/SingleThreadedRandomSource": {
      "fields": {
        "d": "MODULUS_BITS",
        "e": "MODULUS_MASK",
        "f": "MULTIPLIER",
        "g": "INCREMENT",
        "h": "seed",
        "i": "gaussianSource"
      },
      "methods": {
        "d()Lnet/minecraft/util/RandomSource;": "fork",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "forkPositional",
        "b(J)V": "setSeed",
        "c(I)I": "next",
        "k()D": "nextGaussian"
      }
    },
    "net/minecraft/world/level/levelgen/SurfaceRules": {
      "fields": {
        "a": "ON_FLOOR",
        "b": "UNDER_FLOOR",
        "c": "DEEP_UNDER_FLOOR",
        "d": "VERY_DEEP_UNDER_FLOOR",
        "e": "ON_CEILING",
        "f": "UNDER_CEILING"
      },
      "methods": {
        "a(IZLnet/minecraft/world/level/levelgen/placement/CaveSurface;)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "stoneDepthCheck",
        "a(IZILnet/minecraft/world/level/levelgen/placement/CaveSurface;)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "stoneDepthCheck",
        "a(Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "not",
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;I)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "yBlockCheck",
        "b(Lnet/minecraft/world/level/levelgen/VerticalAnchor;I)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "yStartCheck",
        "a(II)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "waterBlockCheck",
        "b(II)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "waterStartCheck",
        "a([Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "isBiome",
        "a(Ljava/util/List;)Lnet/minecraft/world/level/levelgen/SurfaceRules$BiomeConditionSource;": "isBiome",
        "a(Lnet/minecraft/resources/ResourceKey;D)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "noiseCondition",
        "a(Lnet/minecraft/resources/ResourceKey;DD)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "noiseCondition",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "verticalGradient",
        "a()Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "steep",
        "b()Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "hole",
        "c()Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "abovePreliminarySurface",
        "d()Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;": "temperature",
        "a(Lnet/minecraft/world/level/levelgen/SurfaceRules$ConditionSource;Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;)Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "ifTrue",
        "a([Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;)Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "sequence",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "state",
        "e()Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;": "bandlands"
      }
    },
    "net/minecraft/world/level/levelgen/SurfaceSystem": {
      "fields": {
        "a": "WHITE_TERRACOTTA",
        "b": "ORANGE_TERRACOTTA",
        "c": "TERRACOTTA",
        "d": "YELLOW_TERRACOTTA",
        "e": "BROWN_TERRACOTTA",
        "f": "RED_TERRACOTTA",
        "g": "LIGHT_GRAY_TERRACOTTA",
        "h": "PACKED_ICE",
        "i": "SNOW_BLOCK",
        "j": "defaultBlock",
        "k": "seaLevel",
        "l": "clayBands",
        "m": "clayBandsOffsetNoise",
        "n": "badlandsPillarNoise",
        "o": "badlandsPillarRoofNoise",
        "p": "badlandsSurfaceNoise",
        "q": "icebergPillarNoise",
        "r": "icebergPillarRoofNoise",
        "s": "icebergSurfaceNoise",
        "t": "noiseRandom",
        "u": "surfaceNoise",
        "v": "surfaceSecondaryNoise"
      },
      "methods": {
        "a(II)I": "getSurfaceDepth",
        "b(II)D": "getSurfaceSecondary",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isStone",
        "a(Lnet/minecraft/world/level/levelgen/SurfaceRules$RuleSource;Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Ljava/util/function/Function;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/world/level/levelgen/NoiseChunk;Lnet/minecraft/core/BlockPos;Z)Ljava/util/Optional;": "topMaterial",
        "a(Lnet/minecraft/world/level/chunk/BlockColumn;IIILnet/minecraft/world/level/LevelHeightAccessor;)V": "erodedBadlandsExtension",
        "a(ILnet/minecraft/world/level/biome/Biome;Lnet/minecraft/world/level/chunk/BlockColumn;Lnet/minecraft/core/BlockPos$MutableBlockPos;III)V": "frozenOceanExtension",
        "a(Lnet/minecraft/util/RandomSource;)[Lnet/minecraft/world/level/block/state/BlockState;": "generateBands",
        "a(Lnet/minecraft/util/RandomSource;[Lnet/minecraft/world/level/block/state/BlockState;ILnet/minecraft/world/level/block/state/BlockState;)V": "makeBands",
        "a(III)Lnet/minecraft/world/level/block/state/BlockState;": "getBand"
      }
    },
    "net/minecraft/world/level/levelgen/ThreadSafeLegacyRandomSource": {
      "fields": {
        "d": "MODULUS_BITS",
        "e": "MODULUS_MASK",
        "f": "MULTIPLIER",
        "g": "INCREMENT",
        "h": "seed",
        "i": "gaussianSource"
      },
      "methods": {
        "d()Lnet/minecraft/util/RandomSource;": "fork",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "forkPositional",
        "b(J)V": "setSeed",
        "c(I)I": "next",
        "k()D": "nextGaussian"
      }
    },
    "net/minecraft/world/level/levelgen/VerticalAnchor": {
      "fields": {
        "a": "CODEC",
        "b": "BOTTOM",
        "c": "TOP"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "absolute",
        "b(I)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "aboveBottom",
        "c(I)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "belowTop",
        "a()Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "bottom",
        "b()Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "top",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "merge",
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lcom/mojang/datafixers/util/Either;": "split",
        "a(Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "resolveY",
        "b(Lcom/mojang/datafixers/util/Either;)Ljava/lang/Record;": "lambda$merge$0"
      }
    },
    "net/minecraft/world/level/levelgen/WorldDimensions": {
      "fields": {
        "a": "CODEC",
        "c": "BUILTIN_ORDER",
        "d": "VANILLA_DIMENSION_COUNT"
      },
      "methods": {
        "a(Ljava/util/stream/Stream;)Ljava/util/stream/Stream;": "keysInOrder",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/level/chunk/ChunkGenerator;)Lnet/minecraft/world/level/levelgen/WorldDimensions;": "replaceOverworldGenerator",
        "a()Lnet/minecraft/world/level/chunk/ChunkGenerator;": "overworld",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "get",
        "b()Lcom/google/common/collect/ImmutableSet;": "levels",
        "c()Z": "isDebug",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/dimension/LevelStem;)Lcom/mojang/serialization/Lifecycle;": "checkStability",
        "b(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/dimension/LevelStem;)Z": "isVanillaLike",
        "a(Lnet/minecraft/world/level/dimension/LevelStem;)Z": "isStableOverworld",
        "b(Lnet/minecraft/world/level/dimension/LevelStem;)Z": "isStableNether",
        "c(Lnet/minecraft/world/level/dimension/LevelStem;)Z": "isStableEnd",
        "a(Lnet/minecraft/core/WritableRegistry;Lnet/minecraft/world/level/levelgen/WorldDimensions$1Entry;)V": "lambda$bake$6",
        "a(Ljava/util/List;Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/dimension/LevelStem;)V": "lambda$bake$4",
        "b(Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;": "lambda$bake$3",
        "d(Lnet/minecraft/world/level/dimension/LevelStem;)Lnet/minecraft/world/level/storage/PrimaryLevelData$SpecialWorldProperty;": "lambda$specialWorldProperty$2",
        "c(Lnet/minecraft/resources/ResourceKey;)Z": "lambda$keysInOrder$1",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/GeneratorSettings": {
      "fields": {
        "b": "options",
        "c": "dimensions",
        "a": "CODEC"
      },
      "methods": {
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/world/level/levelgen/WorldOptions;Lnet/minecraft/world/level/levelgen/WorldDimensions;)Lcom/mojang/serialization/DataResult;": "encode",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/world/level/levelgen/WorldOptions;Lnet/minecraft/core/RegistryAccess;)Lcom/mojang/serialization/DataResult;": "encode",
        "a()Lnet/minecraft/world/level/levelgen/WorldOptions;": "options",
        "b()Lnet/minecraft/world/level/levelgen/WorldDimensions;": "dimensions",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/WorldGenerationContext": {
      "fields": {
        "a": "minY",
        "b": "height"
      },
      "methods": {
        "a()I": "getMinGenY",
        "b()I": "getGenDepth"
      }
    },
    "net/minecraft/world/level/levelgen/WorldOptions": {
      "fields": {
        "a": "CODEC",
        "b": "DEMO_OPTIONS",
        "c": "seed",
        "d": "generateStructures",
        "e": "generateBonusChest",
        "f": "legacyCustomOptions"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/WorldOptions;": "defaultWithRandomSeed",
        "b()J": "seed",
        "c()Z": "generateStructures",
        "d()Z": "generateBonusChest",
        "e()Z": "isOldCustomizedWorld",
        "a(Z)Lnet/minecraft/world/level/levelgen/WorldOptions;": "withBonusChest",
        "b(Z)Lnet/minecraft/world/level/levelgen/WorldOptions;": "withStructures",
        "a(Ljava/util/OptionalLong;)Lnet/minecraft/world/level/levelgen/WorldOptions;": "withSeed",
        "a(Ljava/lang/String;)Ljava/util/OptionalLong;": "parseSeed",
        "f()J": "randomSeed",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/WorldOptions;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/SeededRandom": {
      "fields": {
        "d": "randomSource",
        "e": "count"
      },
      "methods": {
        "l()I": "getCount",
        "d()Lnet/minecraft/util/RandomSource;": "fork",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "forkPositional",
        "c(I)I": "next",
        "b(J)V": "setSeed",
        "a(JII)J": "setDecorationSeed",
        "b(JII)V": "setFeatureSeed",
        "c(JII)V": "setLargeFeatureSeed",
        "a(JIII)V": "setLargeFeatureWithSalt",
        "a(IIJJ)Lnet/minecraft/util/RandomSource;": "seedSlimeChunk"
      }
    },
    "net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus": {
      "fields": {
        "b": "seedLo",
        "c": "seedHi",
        "a": "CODEC"
      },
      "methods": {
        "a()J": "nextLong",
        "a(Lnet/minecraft/world/level/levelgen/Xoroshiro128PlusPlus;)Ljava/util/stream/LongStream;": "lambda$static$2",
        "a(Ljava/util/stream/LongStream;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "a([J)Lnet/minecraft/world/level/levelgen/Xoroshiro128PlusPlus;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/XoroshiroRandomSource": {
      "fields": {
        "c": "FLOAT_UNIT",
        "d": "DOUBLE_UNIT",
        "b": "CODEC",
        "e": "randomNumberGenerator",
        "f": "gaussianSource"
      },
      "methods": {
        "d()Lnet/minecraft/util/RandomSource;": "fork",
        "e()Lnet/minecraft/world/level/levelgen/PositionalRandomFactory;": "forkPositional",
        "b(J)V": "setSeed",
        "f()I": "nextInt",
        "a(I)I": "nextInt",
        "g()J": "nextLong",
        "h()Z": "nextBoolean",
        "i()F": "nextFloat",
        "j()D": "nextDouble",
        "k()D": "nextGaussian",
        "b(I)V": "consumeCount",
        "c(I)J": "nextBits",
        "a(Lnet/minecraft/world/level/levelgen/XoroshiroRandomSource;)Lnet/minecraft/world/level/levelgen/Xoroshiro128PlusPlus;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/Xoroshiro128PlusPlus;)Lnet/minecraft/world/level/levelgen/XoroshiroRandomSource;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blending/Blender": {
      "fields": {
        "a": "EMPTY",
        "b": "SHIFT_NOISE",
        "c": "HEIGHT_BLENDING_RANGE_CELLS",
        "d": "HEIGHT_BLENDING_RANGE_CHUNKS",
        "e": "DENSITY_BLENDING_RANGE_CELLS",
        "f": "DENSITY_BLENDING_RANGE_CHUNKS",
        "g": "OLD_CHUNK_XZ_RADIUS",
        "h": "heightAndBiomeBlendingData",
        "i": "densityBlendingData"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/blending/Blender;": "empty",
        "a(Lnet/minecraft/server/level/WorldGenRegion;)Lnet/minecraft/world/level/levelgen/blending/Blender;": "of",
        "a(II)Lnet/minecraft/world/level/levelgen/blending/Blender$BlendingOutput;": "blendOffsetAndFactor",
        "a(D)D": "heightToOffset",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;D)D": "blendDensity",
        "a(IIILnet/minecraft/world/level/levelgen/blending/Blender$CellValueGetter;)D": "getBlendingDataValue",
        "a(Lnet/minecraft/world/level/levelgen/blending/Blender$CellValueGetter;IIIII)D": "getBlendingDataValue",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;)Lnet/minecraft/world/level/biome/BiomeResolver;": "getBiomeResolver",
        "a(III)Lnet/minecraft/core/Holder;": "blendBiome",
        "a(Lnet/minecraft/server/level/WorldGenRegion;Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "generateBorderTicks",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos;)V": "generateBorderTick",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ProtoChunk;)V": "addAroundOldChunksCarvingMaskFilter",
        "a(Lnet/minecraft/world/level/levelgen/blending/BlendingData;Ljava/util/Map;)Lnet/minecraft/world/level/levelgen/blending/Blender$DistanceGetter;": "makeOldChunkDistanceGetter",
        "a(Lnet/minecraft/core/Direction8;Lnet/minecraft/world/level/levelgen/blending/BlendingData;)Lnet/minecraft/world/level/levelgen/blending/Blender$DistanceGetter;": "makeOffsetOldChunkDistanceGetter",
        "a(DDDDDD)D": "distanceToCube",
        "a(DDDDDDD)D": "lambda$makeOffsetOldChunkDistanceGetter$11",
        "a(Ljava/util/List;DDD)D": "lambda$makeOldChunkDistanceGetter$10",
        "a(Ljava/util/List;Lnet/minecraft/core/Direction8;Lnet/minecraft/world/level/levelgen/blending/BlendingData;)V": "lambda$makeOldChunkDistanceGetter$9",
        "a(Lnet/minecraft/world/level/chunk/CarvingMask$Mask;Lnet/minecraft/world/level/chunk/CarvingMask;)V": "lambda$addAroundOldChunksCarvingMaskFilter$8",
        "a(Lnet/minecraft/world/level/levelgen/blending/Blender$DistanceGetter;III)Z": "lambda$addAroundOldChunksCarvingMaskFilter$7",
        "a(IIILorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableObject;Ljava/lang/Long;Lnet/minecraft/world/level/levelgen/blending/BlendingData;)V": "lambda$blendBiome$6",
        "a(IILorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableObject;IILnet/minecraft/core/Holder;)V": "lambda$blendBiome$5",
        "a(Lnet/minecraft/world/level/biome/BiomeResolver;IIILnet/minecraft/world/level/biome/Climate$Sampler;)Lnet/minecraft/core/Holder;": "lambda$getBiomeResolver$4",
        "a(IIILorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;Ljava/lang/Long;Lnet/minecraft/world/level/levelgen/blending/BlendingData;)V": "lambda$blendDensity$3",
        "a(IIILorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;IIID)V": "lambda$blendDensity$2",
        "a(IILorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;Ljava/lang/Long;Lnet/minecraft/world/level/levelgen/blending/BlendingData;)V": "lambda$blendOffsetAndFactor$1",
        "a(IILorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;Lorg/apache/commons/lang3/mutable/MutableDouble;IID)V": "lambda$blendOffsetAndFactor$0"
      }
    },
    "net/minecraft/world/level/levelgen/blending/BlendingData": {
      "fields": {
        "f": "BLENDING_DENSITY_FACTOR",
        "a": "CELL_WIDTH",
        "b": "CELL_HEIGHT",
        "c": "CELL_RATIO",
        "g": "SOLID_DENSITY",
        "h": "AIR_DENSITY",
        "i": "CELLS_PER_SECTION_Y",
        "j": "QUARTS_PER_SECTION",
        "k": "CELL_HORIZONTAL_MAX_INDEX_INSIDE",
        "l": "CELL_HORIZONTAL_MAX_INDEX_OUTSIDE",
        "m": "CELL_COLUMN_INSIDE_COUNT",
        "n": "CELL_COLUMN_OUTSIDE_COUNT",
        "o": "CELL_COLUMN_COUNT",
        "p": "areaWithOldGeneration",
        "q": "SURFACE_BLOCKS",
        "d": "NO_VALUE",
        "r": "hasCalculatedData",
        "s": "heights",
        "t": "biomes",
        "u": "densities",
        "v": "DOUBLE_ARRAY_CODEC",
        "e": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/blending/BlendingData;)Lcom/mojang/serialization/DataResult;": "validateArraySize",
        "a(Lnet/minecraft/server/level/WorldGenRegion;II)Lnet/minecraft/world/level/levelgen/blending/BlendingData;": "getOrUpdateBlendingData",
        "a(Lnet/minecraft/world/level/WorldGenLevel;IIZ)Ljava/util/Set;": "sideByGenerationAge",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/Set;)V": "calculateData",
        "a(ILnet/minecraft/world/level/chunk/ChunkAccess;II)V": "addValuesForColumn",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;II)I": "getHeightAtXZ",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos$MutableBlockPos;)D": "read1",
        "b(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos$MutableBlockPos;)D": "read7",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;III)[D": "getDensityColumn",
        "b(Lnet/minecraft/world/level/chunk/ChunkAccess;II)Ljava/util/List;": "getBiomeColumn",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos;)Z": "isGround",
        "a(III)D": "getHeight",
        "a([DI)D": "getDensity",
        "b(III)D": "getDensity",
        "a(IIILnet/minecraft/world/level/levelgen/blending/BlendingData$BiomeConsumer;)V": "iterateBiomes",
        "a(IILnet/minecraft/world/level/levelgen/blending/BlendingData$HeightConsumer;)V": "iterateHeights",
        "a(IIIILnet/minecraft/world/level/levelgen/blending/BlendingData$DensityConsumer;)V": "iterateDensities",
        "b()I": "cellCountPerColumn",
        "c()I": "quartCountPerColumn",
        "d()I": "getColumnMinY",
        "e()I": "getMinY",
        "a(I)I": "getCellYIndex",
        "a(II)I": "getInsideIndex",
        "b(II)I": "getOutsideIndex",
        "b(I)I": "getX",
        "c(I)I": "getZ",
        "d(I)I": "zeroIfNegative",
        "a()Lnet/minecraft/world/level/LevelHeightAccessor;": "getAreaWithOldGeneration",
        "a([D)V": "lambda$new$6",
        "f()Ljava/lang/String;": "lambda$validateArraySize$5",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/blending/BlendingData;)Ljava/util/Optional;": "lambda$static$3",
        "a(D)Z": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/blending/BlendingData;)Ljava/lang/Integer;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/blending/BlendingData;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/AllOfPredicate": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/AnyOfPredicate": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/BlockPredicate": {
      "fields": {
        "b": "CODEC",
        "c": "ONLY_IN_AIR_PREDICATE",
        "d": "ONLY_IN_AIR_OR_WATER_PREDICATE"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "a(Ljava/util/List;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "allOf",
        "a([Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "allOf",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "allOf",
        "b(Ljava/util/List;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "anyOf",
        "b([Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "anyOf",
        "b(Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "anyOf",
        "a(Lnet/minecraft/core/Vec3i;Ljava/util/List;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesBlocks",
        "c(Ljava/util/List;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesBlocks",
        "a(Lnet/minecraft/core/Vec3i;[Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesBlocks",
        "a([Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesBlocks",
        "a(Lnet/minecraft/core/Vec3i;Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesTag",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesTag",
        "b(Lnet/minecraft/core/Vec3i;Ljava/util/List;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "matchesFluids",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "not",
        "a(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "replaceable",
        "b()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "replaceable",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "wouldSurvive",
        "a(Lnet/minecraft/core/Vec3i;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "hasSturdyFace",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "hasSturdyFace",
        "b(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "solid",
        "c()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "solid",
        "d()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "noFluid",
        "c(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "noFluid",
        "d(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "insideWorld",
        "e()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "alwaysTrue"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType": {
      "fields": {
        "a": "MATCHING_BLOCKS",
        "b": "MATCHING_BLOCK_TAG",
        "c": "MATCHING_FLUIDS",
        "d": "HAS_STURDY_FACE",
        "e": "SOLID",
        "f": "REPLACEABLE",
        "g": "WOULD_SURVIVE",
        "h": "INSIDE_WORLD_BOUNDS",
        "i": "ANY_OF",
        "j": "ALL_OF",
        "k": "NOT",
        "l": "TRUE"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/CombiningPredicate": {
      "fields": {
        "e": "predicates"
      },
      "methods": {
        "a(Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "codec",
        "a(Ljava/util/function/Function;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$codec$1",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/CombiningPredicate;)Ljava/util/List;": "lambda$codec$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/HasSturdyFacePredicate": {
      "fields": {
        "e": "offset",
        "f": "direction",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/HasSturdyFacePredicate;)Lnet/minecraft/core/Direction;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/blockpredicates/HasSturdyFacePredicate;)Lnet/minecraft/core/Vec3i;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/InsideWorldBoundsPredicate": {
      "fields": {
        "a": "CODEC",
        "e": "offset"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/InsideWorldBoundsPredicate;)Lnet/minecraft/core/Vec3i;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/MatchingBlockTagPredicate": {
      "fields": {
        "a": "tag",
        "e": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/MatchingBlockTagPredicate;)Lnet/minecraft/tags/TagKey;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/MatchingBlocksPredicate": {
      "fields": {
        "e": "blocks",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/MatchingBlocksPredicate;)Lnet/minecraft/core/HolderSet;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/MatchingFluidsPredicate": {
      "fields": {
        "e": "fluids",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/MatchingFluidsPredicate;)Lnet/minecraft/core/HolderSet;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/NotPredicate": {
      "fields": {
        "a": "CODEC",
        "e": "predicate"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/NotPredicate;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/ReplaceablePredicate": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/SolidPredicate": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/StateTestingPredicate": {
      "fields": {
        "f": "offset"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P1;": "stateTestingCodec",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "test",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/StateTestingPredicate;)Lnet/minecraft/core/Vec3i;": "lambda$stateTestingCodec$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/TrueBlockPredicate": {
      "fields": {
        "a": "INSTANCE",
        "e": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "f()Lnet/minecraft/world/level/levelgen/blockpredicates/TrueBlockPredicate;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/blockpredicates/WouldSurvivePredicate": {
      "fields": {
        "a": "CODEC",
        "e": "offset",
        "f": "state"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicateType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/WouldSurvivePredicate;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/blockpredicates/WouldSurvivePredicate;)Lnet/minecraft/core/Vec3i;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "verticalRotation",
        "c": "shape"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;)Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration$CanyonShapeConfiguration;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;)Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/WorldGenCanyon": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;Lnet/minecraft/util/RandomSource;)Z": "isStartChunk",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/Aquifer;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/CarvingMask;)Z": "carve",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;JLnet/minecraft/world/level/levelgen/Aquifer;DDDFFFIIDLnet/minecraft/world/level/chunk/CarvingMask;)V": "doCarve",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;Lnet/minecraft/util/RandomSource;)[F": "initWidthFactors",
        "a(Lnet/minecraft/world/level/levelgen/carver/CanyonCarverConfiguration;Lnet/minecraft/util/RandomSource;DFF)D": "updateVerticalRadius",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;[FDDDI)Z": "shouldSkip",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/util/RandomSource;)Z": "isStartChunk",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/Aquifer;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/CarvingMask;)Z": "carve",
        "a([FLnet/minecraft/world/level/levelgen/carver/CarvingContext;DDDI)Z": "lambda$doCarve$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/WorldGenCarverConfiguration": {
      "fields": {
        "d": "CODEC",
        "e": "y",
        "f": "yScale",
        "g": "lavaLevel",
        "h": "debugSettings",
        "i": "replaceable"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$6",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Lnet/minecraft/core/HolderSet;": "lambda$static$5",
        "b(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Lnet/minecraft/world/level/levelgen/carver/CarverDebugSettings;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$3",
        "d(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$2",
        "e(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;": "lambda$static$1",
        "f(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/CarverDebugSettings": {
      "fields": {
        "a": "DEFAULT",
        "b": "CODEC",
        "c": "debugMode",
        "d": "airState",
        "e": "waterState",
        "f": "lavaState",
        "g": "barrierState"
      },
      "methods": {
        "a(ZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/levelgen/carver/CarverDebugSettings;": "of",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/levelgen/carver/CarverDebugSettings;": "of",
        "a(ZLnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/levelgen/carver/CarverDebugSettings;": "of",
        "a()Z": "isDebugMode",
        "b()Lnet/minecraft/world/level/block/state/BlockState;": "getAirState",
        "c()Lnet/minecraft/world/level/block/state/BlockState;": "getWaterState",
        "d()Lnet/minecraft/world/level/block/state/BlockState;": "getLavaState",
        "e()Lnet/minecraft/world/level/block/state/BlockState;": "getBarrierState",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/CarvingContext": {
      "fields": {
        "a": "registryAccess",
        "b": "noiseChunk",
        "c": "randomState",
        "d": "surfaceRule"
      },
      "methods": {
        "a(Ljava/util/function/Function;Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos;Z)Ljava/util/Optional;": "topMaterial",
        "c()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "d()Lnet/minecraft/world/level/levelgen/RandomState;": "randomState"
      }
    },
    "net/minecraft/world/level/levelgen/carver/CaveCarverConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "horizontalRadiusMultiplier",
        "c": "verticalRadiusMultiplier",
        "j": "floorLevel"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;)Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/WorldGenCaves": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;Lnet/minecraft/util/RandomSource;)Z": "isStartChunk",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/Aquifer;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/CarvingMask;)Z": "carve",
        "a()I": "getCaveBound",
        "a(Lnet/minecraft/util/RandomSource;)F": "getThickness",
        "b()D": "getYScale",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/world/level/levelgen/Aquifer;DDDFDLnet/minecraft/world/level/chunk/CarvingMask;Lnet/minecraft/world/level/levelgen/carver/WorldCarver$CarveSkipChecker;)V": "createRoom",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;JLnet/minecraft/world/level/levelgen/Aquifer;DDDDDFFFIIDLnet/minecraft/world/level/chunk/CarvingMask;Lnet/minecraft/world/level/levelgen/carver/WorldCarver$CarveSkipChecker;)V": "createTunnel",
        "a(DDDD)Z": "shouldSkip",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/util/RandomSource;)Z": "isStartChunk",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/Aquifer;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/CarvingMask;)Z": "carve",
        "a(DLnet/minecraft/world/level/levelgen/carver/CarvingContext;DDDI)Z": "lambda$carve$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/WorldGenCarverWrapper": {
      "fields": {
        "d": "worldCarver",
        "e": "config",
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "LIST_CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;)Z": "isStartChunk",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/Aquifer;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/CarvingMask;)Z": "carve",
        "a()Lnet/minecraft/world/level/levelgen/carver/WorldCarver;": "worldCarver",
        "b()Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;": "config",
        "a(Lnet/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver;)Lnet/minecraft/world/level/levelgen/carver/WorldCarver;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/carver/WorldGenCavesHell": {
      "methods": {
        "a()I": "getCaveBound",
        "a(Lnet/minecraft/util/RandomSource;)F": "getThickness",
        "b()D": "getYScale",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CaveCarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/world/level/chunk/CarvingMask;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/Aquifer;Lorg/apache/commons/lang3/mutable/MutableBoolean;)Z": "carveBlock",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/world/level/chunk/CarvingMask;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/Aquifer;Lorg/apache/commons/lang3/mutable/MutableBoolean;)Z": "carveBlock"
      }
    },
    "net/minecraft/world/level/levelgen/carver/WorldGenCarverAbstract": {
      "fields": {
        "a": "CAVE",
        "b": "NETHER_CAVE",
        "c": "CANYON",
        "d": "AIR",
        "e": "CAVE_AIR",
        "f": "WATER",
        "g": "LAVA",
        "h": "liquids",
        "i": "configuredCodec"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/levelgen/carver/WorldCarver;)Lnet/minecraft/world/level/levelgen/carver/WorldCarver;": "register",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Lnet/minecraft/world/level/levelgen/carver/ConfiguredWorldCarver;": "configured",
        "c()Lcom/mojang/serialization/Codec;": "configuredCodec",
        "d()I": "getRange",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/world/level/levelgen/Aquifer;DDDDDLnet/minecraft/world/level/chunk/CarvingMask;Lnet/minecraft/world/level/levelgen/carver/WorldCarver$CarveSkipChecker;)Z": "carveEllipsoid",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/world/level/chunk/CarvingMask;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/Aquifer;Lorg/apache/commons/lang3/mutable/MutableBoolean;)Z": "carveBlock",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/Aquifer;)Lnet/minecraft/world/level/block/state/BlockState;": "getCarveState",
        "b(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getDebugState",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarvingContext;Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/chunk/ChunkAccess;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/Aquifer;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/chunk/CarvingMask;)Z": "carve",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/util/RandomSource;)Z": "isStartChunk",
        "a(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canReplaceBlock",
        "a(Lnet/minecraft/world/level/ChunkPos;DDIIF)Z": "canReach",
        "b(Lnet/minecraft/world/level/levelgen/carver/CarverConfiguration;)Z": "isDebugEnabled",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$carveBlock$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenMushrooms": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;ILnet/minecraft/core/BlockPos$MutableBlockPos;)V": "placeTrunk",
        "a(Lnet/minecraft/util/RandomSource;)I": "getTreeHeight",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)Z": "isValidPosition",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(IIII)I": "getTreeRadiusForHeight",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)V": "makeCap"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureBamboo": {
      "fields": {
        "a": "BAMBOO_TRUNK",
        "b": "BAMBOO_FINAL_LARGE",
        "c": "BAMBOO_TOP_LARGE",
        "d": "BAMBOO_TOP_SMALL"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureBasaltColumns": {
      "fields": {
        "a": "CANNOT_PLACE_ON",
        "b": "CLUSTERED_REACH",
        "c": "CLUSTERED_SIZE",
        "d": "UNCLUSTERED_REACH",
        "an": "UNCLUSTERED_SIZE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;ILnet/minecraft/core/BlockPos;II)Z": "placeColumn",
        "a(Lnet/minecraft/world/level/LevelAccessor;ILnet/minecraft/core/BlockPos$MutableBlockPos;I)Lnet/minecraft/core/BlockPos;": "findSurface",
        "a(Lnet/minecraft/world/level/LevelAccessor;ILnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "canPlaceAt",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos$MutableBlockPos;I)Lnet/minecraft/core/BlockPos;": "findAir",
        "a(Lnet/minecraft/world/level/LevelAccessor;ILnet/minecraft/core/BlockPos;)Z": "isAirOrLavaOcean"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureBasaltPillar": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)V": "placeBaseHangOff",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "placeHangOff"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenTaigaStructure": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/BlockColumnFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a([IIIZ)V": "truncate"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureBlockPile": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "mayPlaceOn",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration;)V": "tryPlaceBlock"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureBlueIce": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenBonusChest": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureChorusPlant": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureConfigured": {
      "fields": {
        "d": "feature",
        "e": "config",
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "LIST_CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "place",
        "a()Ljava/util/stream/Stream;": "getFeatures",
        "b()Lnet/minecraft/world/level/levelgen/feature/Feature;": "feature",
        "c()Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;": "config",
        "a(Lnet/minecraft/world/level/levelgen/feature/ConfiguredFeature;)Lnet/minecraft/world/level/levelgen/feature/Feature;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureCoralClaw": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeFeature"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureCoral": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeFeature",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeCoralBlock",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "lambda$placeCoralBlock$4",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/HolderSet$Named;)Ljava/util/Optional;": "lambda$placeCoralBlock$3",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;)V": "lambda$placeCoralBlock$2",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/HolderSet$Named;)Ljava/util/Optional;": "lambda$placeCoralBlock$1",
        "c(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/HolderSet$Named;)Ljava/util/Optional;": "lambda$place$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureCoralMushroom": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeFeature"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureCoralTree": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "placeFeature"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureDelta": {
      "fields": {
        "a": "CANNOT_REPLACE",
        "b": "DIRECTIONS",
        "c": "RIM_SPAWN_CHANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration;)Z": "isClear"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenDesertWell": {
      "fields": {
        "a": "IS_SAND",
        "b": "sand",
        "c": "sandSlab",
        "d": "sandstone",
        "an": "water"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "b(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)V": "placeSusSand",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BrushableBlockEntity;)V": "lambda$placeSusSand$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/DiskFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/DiskConfiguration;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;IILnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "placeColumn"
      }
    },
    "net/minecraft/world/level/levelgen/feature/DripstoneClusterFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;IIFDIFLnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)V": "placeColumn",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isLava",
        "a(Lnet/minecraft/util/RandomSource;IIFILnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)I": "getDripstoneHeight",
        "b(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "canPlacePool",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "canBeAdjacentToWater",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/Direction;)V": "replaceBlocksWithDripstoneBlocks",
        "a(IIIILnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)D": "getChanceOfStalagmiteOrStalactite",
        "a(Lnet/minecraft/util/RandomSource;FFFF)F": "randomBetweenBiased"
      }
    },
    "net/minecraft/world/level/levelgen/feature/DripstoneUtils": {
      "methods": {
        "a(DDDD)D": "getDripstoneHeight",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;I)Z": "isCircleMostlyEmbeddedInStone",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isEmptyOrWater",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isEmptyOrWaterOrLava",
        "a(Lnet/minecraft/core/Direction;IZLjava/util/function/Consumer;)V": "buildBaseToTipColumn",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;IZ)V": "growPointedDripstone",
        "c(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "placeDripstoneBlockIfPossible",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/properties/DripstoneThickness;)Lnet/minecraft/world/level/block/state/BlockState;": "createPointedDripstone",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isDripstoneBaseOrLava",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isDripstoneBase",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isEmptyOrWater",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isNeitherEmptyNorWater",
        "e(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isEmptyOrWaterOrLava",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$growPointedDripstone$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenEndGateway": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration;Lnet/minecraft/core/BlockPos;)V": "lambda$place$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenEndIsland": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenEndTrophy": {
      "fields": {
        "a": "PODIUM_RADIUS",
        "b": "PODIUM_PILLAR_HEIGHT",
        "c": "RIM_RADIUS",
        "d": "CORNER_ROUNDING",
        "an": "END_PODIUM_LOCATION",
        "ao": "active"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "getLocation",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenerator": {
      "fields": {
        "e": "NO_OP",
        "f": "TREE",
        "g": "FLOWER",
        "h": "NO_BONEMEAL_FLOWER",
        "i": "RANDOM_PATCH",
        "j": "BLOCK_PILE",
        "k": "SPRING",
        "l": "CHORUS_PLANT",
        "m": "REPLACE_SINGLE_BLOCK",
        "n": "VOID_START_PLATFORM",
        "o": "DESERT_WELL",
        "p": "FOSSIL",
        "q": "HUGE_RED_MUSHROOM",
        "r": "HUGE_BROWN_MUSHROOM",
        "s": "ICE_SPIKE",
        "t": "GLOWSTONE_BLOB",
        "u": "FREEZE_TOP_LAYER",
        "v": "VINES",
        "w": "BLOCK_COLUMN",
        "x": "VEGETATION_PATCH",
        "y": "WATERLOGGED_VEGETATION_PATCH",
        "z": "ROOT_SYSTEM",
        "A": "MULTIFACE_GROWTH",
        "B": "UNDERWATER_MAGMA",
        "C": "MONSTER_ROOM",
        "D": "BLUE_ICE",
        "E": "ICEBERG",
        "F": "FOREST_ROCK",
        "G": "DISK",
        "H": "LAKE",
        "I": "ORE",
        "J": "END_SPIKE",
        "K": "END_ISLAND",
        "L": "END_GATEWAY",
        "M": "SEAGRASS",
        "N": "KELP",
        "O": "CORAL_TREE",
        "P": "CORAL_MUSHROOM",
        "Q": "CORAL_CLAW",
        "R": "SEA_PICKLE",
        "S": "SIMPLE_BLOCK",
        "T": "BAMBOO",
        "U": "HUGE_FUNGUS",
        "V": "NETHER_FOREST_VEGETATION",
        "W": "WEEPING_VINES",
        "X": "TWISTING_VINES",
        "Y": "BASALT_COLUMNS",
        "Z": "DELTA_FEATURE",
        "aa": "REPLACE_BLOBS",
        "ab": "FILL_LAYER",
        "ac": "BONUS_CHEST",
        "ad": "BASALT_PILLAR",
        "ae": "SCATTERED_ORE",
        "af": "RANDOM_SELECTOR",
        "ag": "SIMPLE_RANDOM_SELECTOR",
        "ah": "RANDOM_BOOLEAN_SELECTOR",
        "ai": "GEODE",
        "aj": "DRIPSTONE_CLUSTER",
        "ak": "LARGE_DRIPSTONE",
        "al": "POINTED_DRIPSTONE",
        "am": "SCULK_PATCH",
        "a": "configuredCodec"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/levelgen/feature/Feature;)Lnet/minecraft/world/level/levelgen/feature/Feature;": "register",
        "a()Lcom/mojang/serialization/Codec;": "configuredCodec",
        "a(Lnet/minecraft/world/level/LevelWriter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlock",
        "a(Lnet/minecraft/tags/TagKey;)Ljava/util/function/Predicate;": "isReplaceable",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/function/Predicate;)V": "safeSetBlock",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "place",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isStone",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isDirt",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "isGrassOrDirt",
        "a(Ljava/util/function/Function;Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;)Z": "checkNeighbors",
        "a(Ljava/util/function/Function;Lnet/minecraft/core/BlockPos;)Z": "isAdjacentToAir",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)V": "markAboveForPostProcessing",
        "a(Lnet/minecraft/tags/TagKey;Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$isReplaceable$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;)Lnet/minecraft/world/level/levelgen/feature/ConfiguredFeature;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/FeaturePlaceContext": {
      "fields": {
        "a": "topFeature",
        "b": "level",
        "c": "chunkGenerator",
        "d": "random",
        "e": "origin",
        "f": "config"
      },
      "methods": {
        "a()Ljava/util/Optional;": "topFeature",
        "b()Lnet/minecraft/world/level/WorldGenLevel;": "level",
        "c()Lnet/minecraft/world/level/chunk/ChunkGenerator;": "chunkGenerator",
        "d()Lnet/minecraft/util/RandomSource;": "random",
        "e()Lnet/minecraft/core/BlockPos;": "origin",
        "f()Lnet/minecraft/world/level/levelgen/feature/configurations/FeatureConfiguration;": "config"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureFill": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFossils": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)I": "countEmptyCorners",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/core/BlockPos;)V": "lambda$countEmptyCorners$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/FossilFeatureConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "fossilStructures",
        "c": "overlayStructures",
        "d": "fossilProcessors",
        "e": "overlayProcessors",
        "f": "maxEmptyCornersAllowed"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/FossilFeatureConfiguration;)Ljava/lang/Integer;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/feature/FossilFeatureConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/feature/FossilFeatureConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/feature/FossilFeatureConfiguration;)Ljava/util/List;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/feature/FossilFeatureConfiguration;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/GeodeFeature": {
      "fields": {
        "a": "DIRECTIONS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenLightStone1": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenHugeMushroomBrown": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)V": "makeCap",
        "a(IIII)I": "getTreeRadiusForHeight"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureHugeFungiConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "validBaseState",
        "c": "stemState",
        "d": "hatState",
        "e": "decorState",
        "f": "replaceableBlocks",
        "g": "planted"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$6",
        "a(Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;)Ljava/lang/Boolean;": "lambda$static$5",
        "b(Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$3",
        "d(Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$2",
        "e(Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$1",
        "f(Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureHugeFungi": {
      "fields": {
        "a": "HUGE_PROBABILITY"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;Z)Z": "isReplaceable",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;Lnet/minecraft/core/BlockPos;IZ)V": "placeStem",
        "b(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;Lnet/minecraft/core/BlockPos;IZ)V": "placeHat",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/HugeFungusConfiguration;Lnet/minecraft/core/BlockPos$MutableBlockPos;FFF)V": "placeHatBlock",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "placeHatDropBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;)V": "tryPlaceWeepingVines"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenHugeMushroomRed": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)V": "makeCap",
        "a(IIII)I": "getTreeRadiusForHeight"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenPackedIce2": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureIceburg": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;IILnet/minecraft/core/BlockPos;ZIDI)V": "generateCutOut",
        "a(IILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelAccessor;ZDLnet/minecraft/core/BlockPos;II)V": "carve",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "removeFloatingSnowLayer",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;IIIIIIZIDZLnet/minecraft/world/level/block/state/BlockState;)V": "generateIcebergBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;IIZZLnet/minecraft/world/level/block/state/BlockState;)V": "setIcebergBlock",
        "a(III)I": "getEllipseC",
        "a(IILnet/minecraft/core/BlockPos;ILnet/minecraft/util/RandomSource;)D": "signedDistanceCircle",
        "a(IILnet/minecraft/core/BlockPos;IID)D": "signedDistanceEllipse",
        "a(Lnet/minecraft/util/RandomSource;III)I": "heightDependentRadiusRound",
        "b(III)I": "heightDependentRadiusEllipse",
        "b(Lnet/minecraft/util/RandomSource;III)I": "heightDependentRadiusSteep",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isIcebergState",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "belowIsAir",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;IIZI)V": "smooth"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureKelp": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenLakes": {
      "fields": {
        "a": "AIR"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "canReplaceBlock"
      }
    },
    "net/minecraft/world/level/levelgen/feature/LargeDripstoneFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/core/BlockPos;ZLnet/minecraft/util/RandomSource;ILnet/minecraft/util/valueproviders/FloatProvider;Lnet/minecraft/util/valueproviders/FloatProvider;)Lnet/minecraft/world/level/levelgen/feature/LargeDripstoneFeature$LargeDripstone;": "makeDripstone",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/Column$Range;Lnet/minecraft/world/level/levelgen/feature/LargeDripstoneFeature$WindOffsetter;)V": "placeDebugMarkers"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenDungeons": {
      "fields": {
        "a": "LOGGER",
        "b": "MOBS",
        "c": "AIR"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/entity/EntityType;": "randomEntityId"
      }
    },
    "net/minecraft/world/level/levelgen/feature/MultifaceGrowthFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;Lnet/minecraft/util/RandomSource;Ljava/util/List;)Z": "placeGrowthIfPossible",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isAirOrWater"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureNetherForestVegetation": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureEmpty": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenMinable": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration;DDDDDDIIIII)Z": "doPlace",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Ljava/util/function/Function;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration;Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration$TargetBlockState;Lnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "canPlaceOre",
        "a(Lnet/minecraft/util/RandomSource;F)Z": "shouldSkipAirCheck"
      }
    },
    "net/minecraft/world/level/levelgen/feature/PointedDripstoneFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;": "getTipDirection",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/PointedDripstoneConfiguration;)V": "createPatchOfDripstoneBlocks"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureChoice": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureRandomPatch": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureRandomChoice": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureNetherrackReplaceBlobs": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/core/BlockPos;": "findTarget"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureReplaceBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/RootSystemFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;Lnet/minecraft/core/BlockPos;)Z": "spaceForTree",
        "a(Lnet/minecraft/world/level/block/state/BlockState;II)Z": "isAllowedTreeSpace",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/BlockPos;)Z": "placeDirtAndTree",
        "a(Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;Lnet/minecraft/util/RandomSource;)V": "placeDirt",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;Lnet/minecraft/util/RandomSource;IILnet/minecraft/core/BlockPos$MutableBlockPos;)V": "placeRootedDirt",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;)V": "placeRoots",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$placeRootedDirt$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/ScatteredOreFeature": {
      "fields": {
        "a": "MAX_DIST_FROM_ORIGIN"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;I)V": "offsetTargetPos",
        "a(Lnet/minecraft/util/RandomSource;I)I": "getRandomPlacementInOneAxisRelativeToOrigin"
      }
    },
    "net/minecraft/world/level/levelgen/feature/SculkPatchFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "canSpreadFrom",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "lambda$canSpreadFrom$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureSeaPickel": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureSeaGrass": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureBlock": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureRandom2Configuration": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureIceSnow": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenEnder": {
      "fields": {
        "a": "NUMBER_OF_SPIKES",
        "b": "SPIKE_DISTANCE",
        "c": "SPIKE_CACHE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;)Ljava/util/List;": "getSpikesForLevel",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration;Lnet/minecraft/world/level/levelgen/feature/SpikeFeature$EndSpike;)V": "placeSpike"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenEnder$Spike": {
      "fields": {
        "a": "CODEC",
        "b": "centerX",
        "c": "centerZ",
        "d": "radius",
        "e": "height",
        "f": "guarded",
        "g": "topBoundingBox"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)Z": "isCenterWithinChunk",
        "a()I": "getCenterX",
        "b()I": "getCenterZ",
        "c()I": "getRadius",
        "d()I": "getHeight",
        "e()Z": "isGuarded",
        "f()Lnet/minecraft/world/phys/AABB;": "getTopBoundingBox",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/SpikeFeature$EndSpike;)Ljava/lang/Boolean;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/feature/SpikeFeature$EndSpike;)Ljava/lang/Integer;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/feature/SpikeFeature$EndSpike;)Ljava/lang/Integer;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/feature/SpikeFeature$EndSpike;)Ljava/lang/Integer;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/feature/SpikeFeature$EndSpike;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenLiquids": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenTrees": {
      "fields": {
        "a": "BLOCK_UPDATE_FLAGS"
      },
      "methods": {
        "d(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "isVine",
        "b(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "isAirOrLeaves",
        "b(Lnet/minecraft/world/level/LevelWriter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlockKnownShape",
        "c(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "validTreePos",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Z": "doPlace",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "getMaxFreeTreeHeight",
        "a(Lnet/minecraft/world/level/LevelWriter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "setBlock",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;)Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;": "updateLeaves",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Ljava/lang/Boolean;": "lambda$place$9",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator;)V": "lambda$place$8",
        "a(Ljava/util/Set;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$place$7",
        "b(Ljava/util/Set;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$place$6",
        "c(Ljava/util/Set;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$place$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;)V": "lambda$doPlace$4",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacer;)Lnet/minecraft/core/BlockPos;": "lambda$doPlace$3",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$validTreePos$2",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$isAirOrLeaves$1",
        "e(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$isVine$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureTwistingVines": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "findFirstAirBlockAboveGround",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos$MutableBlockPos;III)V": "placeWeepingVinesColumn",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isInvalidPlacementLocation"
      }
    },
    "net/minecraft/world/level/levelgen/feature/UnderwaterMagmaFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/UnderwaterMagmaConfiguration;)Ljava/util/OptionalInt;": "getFloorY",
        "b(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "isValidPlacement",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "isWaterOrAir",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$getFloorY$4",
        "d(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$getFloorY$3",
        "c(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)I": "lambda$place$2",
        "d(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)Z": "lambda$place$1",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/UnderwaterMagmaConfiguration;Lnet/minecraft/core/BlockPos;)Z": "lambda$place$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/VegetationPatchFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;II)Ljava/util/Set;": "placeGroundPatch",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Lnet/minecraft/util/RandomSource;Ljava/util/Set;II)V": "distributeVegetation",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "placeVegetation",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Ljava/util/function/Predicate;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos$MutableBlockPos;I)Z": "placeGround",
        "c(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$placeGroundPatch$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$place$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenVines": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureEndPlatform": {
      "fields": {
        "a": "PLATFORM_OFFSET",
        "b": "PLATFORM_ORIGIN_CHUNK",
        "c": "PLATFORM_RADIUS",
        "d": "PLATFORM_RADIUS_CHUNKS"
      },
      "methods": {
        "a(IIII)I": "checkerboardDistance",
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WaterloggedVegetationPatchFeature": {
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;II)Ljava/util/Set;": "placeGroundPatch",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Ljava/util/Set;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "isExposed",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/Direction;)Z": "isExposedDirection",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "placeVegetation"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WorldGenFeatureWeepingVines": {
      "fields": {
        "a": "DIRECTIONS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/FeaturePlaceContext;)Z": "place",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)V": "placeRoofNetherWart",
        "b(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)V": "placeRoofWeepingVines",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos$MutableBlockPos;III)V": "placeWeepingVinesColumn"
      }
    },
    "net/minecraft/world/level/levelgen/feature/WeightedPlacedFeature": {
      "fields": {
        "a": "CODEC",
        "b": "feature",
        "c": "chance"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "place",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/WeightedPlacedFeature;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/WeightedPlacedFeature;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration": {
      "fields": {
        "b": "layers",
        "c": "direction",
        "d": "allowedPlacement",
        "e": "prioritizeTip",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/valueproviders/IntProvider;Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;)Lnet/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration$Layer;": "layer",
        "b(Lnet/minecraft/util/valueproviders/IntProvider;Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;)Lnet/minecraft/world/level/levelgen/feature/configurations/BlockColumnConfiguration;": "simple",
        "a()Ljava/util/List;": "layers",
        "b()Lnet/minecraft/core/Direction;": "direction",
        "c()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "allowedPlacement",
        "d()Z": "prioritizeTip",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureBlockPileConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "stateProvider"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/BlockPileConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureLakeConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "state"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/BlockStateConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureBasaltColumnsConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "reach",
        "c": "height"
      },
      "methods": {
        "a()Lnet/minecraft/util/valueproviders/IntProvider;": "reach",
        "b()Lnet/minecraft/util/valueproviders/IntProvider;": "height",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/ColumnFeatureConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenDecoratorFrequencyConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "count"
      },
      "methods": {
        "a()Lnet/minecraft/util/valueproviders/IntProvider;": "count"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureDeltaConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "contents",
        "c": "rim",
        "d": "size",
        "e": "rimSize"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "contents",
        "b()Lnet/minecraft/world/level/block/state/BlockState;": "rim",
        "c()Lnet/minecraft/util/valueproviders/IntProvider;": "size",
        "d()Lnet/minecraft/util/valueproviders/IntProvider;": "rimSize",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/DeltaFeatureConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureCircleConfiguration": {
      "fields": {
        "b": "stateProvider",
        "c": "target",
        "d": "radius",
        "e": "halfHeight",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider;": "stateProvider",
        "b()Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "target",
        "c()Lnet/minecraft/util/valueproviders/IntProvider;": "radius",
        "d()I": "halfHeight",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "floorToCeilingSearchRange",
        "c": "height",
        "d": "radius",
        "e": "maxStalagmiteStalactiteHeightDiff",
        "f": "heightDeviation",
        "g": "dripstoneBlockLayerThickness",
        "h": "density",
        "i": "wetness",
        "j": "chanceOfDripstoneColumnAtMaxDistanceFromCenter",
        "k": "maxDistanceFromEdgeAffectingChanceOfDripstoneColumn",
        "l": "maxDistanceFromCenterAffectingHeightBias"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$11",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Ljava/lang/Integer;": "lambda$static$10",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Ljava/lang/Integer;": "lambda$static$9",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Ljava/lang/Float;": "lambda$static$8",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$7",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$6",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$5",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Ljava/lang/Integer;": "lambda$static$4",
        "h(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Ljava/lang/Integer;": "lambda$static$3",
        "i(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$2",
        "j(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "k(Lnet/minecraft/world/level/levelgen/feature/configurations/DripstoneClusterConfiguration;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenEndGatewayConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "exit",
        "c": "exact"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Z)Lnet/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration;": "knownExit",
        "a()Lnet/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration;": "delayedExitSearch",
        "b()Ljava/util/Optional;": "getExit",
        "c()Z": "isExitExact",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration;)Ljava/lang/Boolean;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/EndGatewayConfiguration;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureConfiguration": {
      "fields": {
        "m": "NONE"
      },
      "methods": {
        "e()Ljava/util/stream/Stream;": "getFeatures"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration": {
      "fields": {
        "a": "CHANCE_RANGE",
        "b": "CODEC",
        "c": "geodeBlockSettings",
        "d": "geodeLayerSettings",
        "e": "geodeCrackSettings",
        "f": "usePotentialPlacementsChance",
        "g": "useAlternateLayer0Chance",
        "h": "placementsRequireLayer0Alternate",
        "i": "outerWallDistance",
        "j": "distributionPoints",
        "k": "pointOffset",
        "l": "minGenOffset",
        "n": "maxGenOffset",
        "o": "noiseMultiplier",
        "p": "invalidBlocksThreshold"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$13",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Integer;": "lambda$static$12",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Double;": "lambda$static$11",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Integer;": "lambda$static$10",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Integer;": "lambda$static$9",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$8",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$7",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$6",
        "h(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Boolean;": "lambda$static$5",
        "i(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Double;": "lambda$static$4",
        "j(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Ljava/lang/Double;": "lambda$static$3",
        "k(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Lnet/minecraft/world/level/levelgen/GeodeCrackSettings;": "lambda$static$2",
        "l(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Lnet/minecraft/world/level/levelgen/GeodeLayerSettings;": "lambda$static$1",
        "m(Lnet/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration;)Lnet/minecraft/world/level/levelgen/GeodeBlockSettings;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureMushroomConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "capProvider",
        "c": "stemProvider",
        "d": "foliageRadius"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/HugeMushroomFeatureConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "floorToCeilingSearchRange",
        "c": "columnRadius",
        "d": "heightScale",
        "e": "maxColumnRadiusToCaveHeightRatio",
        "f": "stalactiteBluntness",
        "g": "stalagmiteBluntness",
        "h": "windSpeed",
        "i": "minRadiusForWind",
        "j": "minBluntnessForWind"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$9",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Ljava/lang/Float;": "lambda$static$8",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Ljava/lang/Integer;": "lambda$static$7",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$6",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$5",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$4",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Ljava/lang/Float;": "lambda$static$3",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Lnet/minecraft/util/valueproviders/FloatProvider;": "lambda$static$2",
        "h(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "i(Lnet/minecraft/world/level/levelgen/feature/configurations/LargeDripstoneConfiguration;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureFillConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "height",
        "c": "state"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/LayerConfiguration;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "placeBlock",
        "c": "searchRange",
        "d": "canPlaceOnFloor",
        "e": "canPlaceOnCeiling",
        "f": "canPlaceOnWall",
        "g": "chanceOfSpreading",
        "h": "canBePlacedOn",
        "i": "validDirections"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;)Lcom/mojang/serialization/DataResult;": "apply",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/Direction;)Ljava/util/List;": "getShuffledDirectionsExcept",
        "a(Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledDirections",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)Z": "lambda$getShuffledDirectionsExcept$9",
        "a()Ljava/lang/String;": "lambda$apply$8",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$7",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Lnet/minecraft/core/HolderSet;": "lambda$static$6",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Ljava/lang/Float;": "lambda$static$5",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Ljava/lang/Boolean;": "lambda$static$4",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Ljava/lang/Boolean;": "lambda$static$3",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Ljava/lang/Boolean;": "lambda$static$2",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Ljava/lang/Integer;": "lambda$static$1",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/MultifaceGrowthConfiguration;)Lnet/minecraft/world/level/block/MultifaceBlock;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/NetherForestVegetationConfig": {
      "fields": {
        "c": "CODEC",
        "d": "spreadWidth",
        "e": "spreadHeight"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/NetherForestVegetationConfig;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/NetherForestVegetationConfig;)Ljava/lang/Integer;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/NetherForestVegetationConfig;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureEmptyConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/configurations/NoneFeatureConfiguration;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureOreConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "targetStates",
        "c": "size",
        "d": "discardChanceOnAirExposure"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTest;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration$TargetBlockState;": "target",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration;)Ljava/lang/Float;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration;)Ljava/lang/Integer;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/OreConfiguration;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/PointedDripstoneConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "chanceOfTallerDripstone",
        "c": "chanceOfDirectionalSpread",
        "d": "chanceOfSpreadRadius2",
        "e": "chanceOfSpreadRadius3"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/PointedDripstoneConfiguration;)Ljava/lang/Float;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/PointedDripstoneConfiguration;)Ljava/lang/Float;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/PointedDripstoneConfiguration;)Ljava/lang/Float;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/PointedDripstoneConfiguration;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureConfigurationChance": {
      "fields": {
        "k": "CODEC",
        "l": "probability"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/ProbabilityFeatureConfiguration;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureChoiceConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "featureTrue",
        "c": "featureFalse"
      },
      "methods": {
        "e()Ljava/util/stream/Stream;": "getFeatures",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/RandomBooleanFeatureConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureRandomChoiceConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "features",
        "c": "defaultFeature"
      },
      "methods": {
        "e()Ljava/util/stream/Stream;": "getFeatures",
        "a(Lnet/minecraft/world/level/levelgen/feature/WeightedPlacedFeature;)Ljava/util/stream/Stream;": "lambda$getFeatures$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/RandomFeatureConfiguration;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureRandomPatchConfiguration": {
      "fields": {
        "b": "tries",
        "c": "xzSpread",
        "d": "ySpread",
        "e": "feature",
        "a": "CODEC"
      },
      "methods": {
        "a()I": "tries",
        "b()I": "xzSpread",
        "c()I": "ySpread",
        "d()Lnet/minecraft/core/Holder;": "feature",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureReplaceBlockConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "targetStates"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/ReplaceBlockConfiguration;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureRadiusConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "targetState",
        "c": "replaceState",
        "d": "radius"
      },
      "methods": {
        "a()Lnet/minecraft/util/valueproviders/IntProvider;": "radius",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/ReplaceSphereConfiguration;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "treeFeature",
        "c": "requiredVerticalSpaceForTree",
        "d": "rootRadius",
        "e": "rootReplaceable",
        "f": "rootStateProvider",
        "g": "rootPlacementAttempts",
        "h": "rootColumnMaxHeight",
        "i": "hangingRootRadius",
        "j": "hangingRootsVerticalSpan",
        "k": "hangingRootStateProvider",
        "l": "hangingRootPlacementAttempts",
        "n": "allowedVerticalWaterForTree",
        "o": "allowedTreePosition"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$13",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "lambda$static$12",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$11",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$10",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$9",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$8",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$7",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$6",
        "h(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$5",
        "i(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$4",
        "j(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Lnet/minecraft/tags/TagKey;": "lambda$static$3",
        "k(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$2",
        "l(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Ljava/lang/Integer;": "lambda$static$1",
        "m(Lnet/minecraft/world/level/levelgen/feature/configurations/RootSystemConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/SculkPatchConfiguration": {
      "fields": {
        "b": "chargeCount",
        "c": "amountPerCharge",
        "d": "spreadAttempts",
        "e": "growthRounds",
        "f": "spreadRounds",
        "g": "extraRareGrowths",
        "h": "catalystChance",
        "a": "CODEC"
      },
      "methods": {
        "a()I": "chargeCount",
        "b()I": "amountPerCharge",
        "c()I": "spreadAttempts",
        "d()I": "growthRounds",
        "f()I": "spreadRounds",
        "g()Lnet/minecraft/util/valueproviders/IntProvider;": "extraRareGrowths",
        "h()F": "catalystChance",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureBlockConfiguration": {
      "fields": {
        "b": "toPlace",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "toPlace",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/SimpleBlockConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureRandom2": {
      "fields": {
        "a": "CODEC",
        "b": "features"
      },
      "methods": {
        "e()Ljava/util/stream/Stream;": "getFeatures",
        "a(Lnet/minecraft/core/Holder;)Ljava/util/stream/Stream;": "lambda$getFeatures$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/SimpleRandomFeatureConfiguration;)Lnet/minecraft/core/HolderSet;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureEndSpikeConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "crystalInvulnerable",
        "c": "spikes",
        "d": "crystalBeamTarget"
      },
      "methods": {
        "a()Z": "isCrystalInvulnerable",
        "b()Ljava/util/List;": "getSpikes",
        "c()Lnet/minecraft/core/BlockPos;": "getCrystalBeamTarget",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration;)Ljava/util/Optional;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration;)Ljava/util/List;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/SpikeConfiguration;)Ljava/lang/Boolean;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureHellFlowingLavaConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "state",
        "c": "requiresBlockBelow",
        "d": "rockCount",
        "e": "holeCount",
        "f": "validBlocks"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration;)Lnet/minecraft/core/HolderSet;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration;)Ljava/lang/Integer;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration;)Ljava/lang/Integer;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration;)Ljava/lang/Boolean;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/SpringConfiguration;)Lnet/minecraft/world/level/material/FluidState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/WorldGenFeatureTreeConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "trunkProvider",
        "c": "dirtProvider",
        "d": "trunkPlacer",
        "e": "foliageProvider",
        "f": "foliagePlacer",
        "g": "rootPlacer",
        "h": "minimumSize",
        "i": "decorators",
        "j": "ignoreVines",
        "k": "forceDirt"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$10",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/lang/Boolean;": "lambda$static$9",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/lang/Boolean;": "lambda$static$8",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "lambda$static$7",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Lnet/minecraft/world/level/levelgen/feature/featuresize/FeatureSize;": "lambda$static$6",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$5",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/Optional;": "lambda$static$4",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer;": "lambda$static$3",
        "h(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$2",
        "i(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer;": "lambda$static$1",
        "j(Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/TwistingVinesConfig": {
      "fields": {
        "b": "spreadWidth",
        "c": "spreadHeight",
        "d": "maxHeight",
        "a": "CODEC"
      },
      "methods": {
        "a()I": "spreadWidth",
        "b()I": "spreadHeight",
        "c()I": "maxHeight",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/UnderwaterMagmaConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "floorSearchRange",
        "c": "placementRadiusAroundFloor",
        "d": "placementProbabilityPerValidPosition"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/UnderwaterMagmaConfiguration;)Ljava/lang/Float;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/UnderwaterMagmaConfiguration;)Ljava/lang/Integer;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/UnderwaterMagmaConfiguration;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration": {
      "fields": {
        "a": "CODEC",
        "b": "replaceable",
        "c": "groundState",
        "d": "vegetationFeature",
        "e": "surface",
        "f": "depth",
        "g": "extraBottomBlockChance",
        "h": "verticalRange",
        "i": "vegetationChance",
        "j": "xzRadius",
        "k": "extraEdgeColumnChance"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$10",
        "a(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Ljava/lang/Float;": "lambda$static$9",
        "b(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$8",
        "c(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Ljava/lang/Float;": "lambda$static$7",
        "d(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Ljava/lang/Integer;": "lambda$static$6",
        "e(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Ljava/lang/Float;": "lambda$static$5",
        "f(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$4",
        "g(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Lnet/minecraft/world/level/levelgen/placement/CaveSurface;": "lambda$static$3",
        "h(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Lnet/minecraft/core/Holder;": "lambda$static$2",
        "i(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$1",
        "j(Lnet/minecraft/world/level/levelgen/feature/configurations/VegetationPatchConfiguration;)Lnet/minecraft/tags/TagKey;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/featuresize/FeatureSize": {
      "fields": {
        "a": "CODEC",
        "b": "MAX_WIDTH",
        "c": "minClippedHeight"
      },
      "methods": {
        "a()Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "minClippedHeightCodec",
        "b()Lnet/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeType;": "type",
        "a(II)I": "getSizeAtHeight",
        "c()Ljava/util/OptionalInt;": "minClippedHeight",
        "a(Lnet/minecraft/world/level/levelgen/feature/featuresize/FeatureSize;)Ljava/util/OptionalInt;": "lambda$minClippedHeightCodec$2",
        "a(Ljava/util/OptionalInt;)Ljava/util/Optional;": "lambda$minClippedHeightCodec$1",
        "a(Ljava/util/Optional;)Ljava/util/OptionalInt;": "lambda$minClippedHeightCodec$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeType": {
      "fields": {
        "a": "TWO_LAYERS_FEATURE_SIZE",
        "b": "THREE_LAYERS_FEATURE_SIZE",
        "c": "codec"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeType;": "register",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeThreeLayers": {
      "fields": {
        "d": "CODEC",
        "e": "limit",
        "f": "upperLimit",
        "g": "lowerSize",
        "h": "middleSize",
        "i": "upperSize"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeType;": "type",
        "a(II)I": "getSizeAtHeight",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/feature/featuresize/ThreeLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeTwoLayers": {
      "fields": {
        "d": "CODEC",
        "e": "limit",
        "f": "lowerSize",
        "g": "upperSize"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/levelgen/feature/featuresize/FeatureSizeType;": "type",
        "a(II)I": "getSizeAtHeight",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/featuresize/TwoLayersFeatureSize;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerAcacia": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerBlob": {
      "fields": {
        "a": "CODEC",
        "b": "height"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P3;": "blobParts",
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/BlobFoliagePlacer;)Ljava/lang/Integer;": "lambda$blobParts$1",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerBush": {
      "fields": {
        "c": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/CherryFoliagePlacer": {
      "fields": {
        "a": "CODEC",
        "b": "height",
        "c": "wideBottomLayerHoleChance",
        "g": "cornerHoleChance",
        "h": "hangingLeavesChance",
        "i": "hangingLeavesExtensionChance"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/CherryFoliagePlacer;)Ljava/lang/Float;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/CherryFoliagePlacer;)Ljava/lang/Float;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/CherryFoliagePlacer;)Ljava/lang/Float;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/CherryFoliagePlacer;)Ljava/lang/Float;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/CherryFoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerDarkOak": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "b(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocationSigned",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerFancy": {
      "fields": {
        "c": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacer": {
      "fields": {
        "d": "CODEC",
        "e": "radius",
        "f": "offset"
      },
      "methods": {
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P2;": "foliagePlacerParts",
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;II)V": "createFoliage",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;I)I": "foliageRadius",
        "a(Lnet/minecraft/util/RandomSource;)I": "offset",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "b(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocationSigned",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Lnet/minecraft/core/BlockPos;IIZ)V": "placeLeavesRow",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Lnet/minecraft/core/BlockPos;IIZFF)V": "placeLeavesRowWithHangingLeavesBelow",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;FLnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "tryPlaceExtension",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Lnet/minecraft/core/BlockPos;)Z": "tryPlaceLeaf",
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "lambda$tryPlaceLeaf$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$foliagePlacerParts$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$foliagePlacerParts$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacers": {
      "fields": {
        "a": "BLOB_FOLIAGE_PLACER",
        "b": "SPRUCE_FOLIAGE_PLACER",
        "c": "PINE_FOLIAGE_PLACER",
        "d": "ACACIA_FOLIAGE_PLACER",
        "e": "BUSH_FOLIAGE_PLACER",
        "f": "FANCY_FOLIAGE_PLACER",
        "g": "MEGA_JUNGLE_FOLIAGE_PLACER",
        "h": "MEGA_PINE_FOLIAGE_PLACER",
        "i": "DARK_OAK_FOLIAGE_PLACER",
        "j": "RANDOM_SPREAD_FOLIAGE_PLACER",
        "k": "CHERRY_FOLIAGE_PLACER",
        "l": "codec"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "register",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerJungle": {
      "fields": {
        "a": "CODEC",
        "b": "height"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/MegaJungleFoliagePlacer;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerMegaPine": {
      "fields": {
        "a": "CODEC",
        "b": "crownHeight"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/MegaPineFoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerPine": {
      "fields": {
        "a": "CODEC",
        "b": "height"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;I)I": "foliageRadius",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/PineFoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/RandomSpreadFoliagePlacer": {
      "fields": {
        "a": "CODEC",
        "b": "foliageHeight",
        "c": "leafPlacementAttempts"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/RandomSpreadFoliagePlacer;)Ljava/lang/Integer;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/RandomSpreadFoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/foliageplacers/WorldGenFoilagePlacerSpruce": {
      "fields": {
        "a": "CODEC",
        "b": "trunkHeight"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageSetter;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;ILnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;III)V": "createFoliage",
        "a(Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)I": "foliageHeight",
        "a(Lnet/minecraft/util/RandomSource;IIIIZ)Z": "shouldSkipLocation",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/foliageplacers/SpruceFoliagePlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement": {
      "fields": {
        "b": "aboveRootProvider",
        "c": "aboveRootPlacementChance",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "aboveRootProvider",
        "b()F": "aboveRootPlacementChance",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/rootplacers/AboveRootPlacement;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement": {
      "fields": {
        "b": "canGrowThrough",
        "c": "muddyRootsIn",
        "d": "muddyRootsProvider",
        "e": "maxRootWidth",
        "f": "maxRootLength",
        "g": "randomSkewChance",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/core/HolderSet;": "canGrowThrough",
        "b()Lnet/minecraft/core/HolderSet;": "muddyRootsIn",
        "c()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "muddyRootsProvider",
        "d()I": "maxRootWidth",
        "e()I": "maxRootLength",
        "f()F": "randomSkewChance",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$6",
        "a(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;)Ljava/lang/Float;": "lambda$static$5",
        "b(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;)Ljava/lang/Integer;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;)Ljava/lang/Integer;": "lambda$static$3",
        "d(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$2",
        "e(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;)Lnet/minecraft/core/HolderSet;": "lambda$static$1",
        "f(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;)Lnet/minecraft/core/HolderSet;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacer": {
      "fields": {
        "a": "ROOT_WIDTH_LIMIT",
        "b": "ROOT_LENGTH_LIMIT",
        "c": "CODEC",
        "h": "mangroveRootPlacement"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Z": "placeRoots",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;Ljava/util/List;I)Z": "simulateRoots",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/List;": "potentialRootPositions",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "canPlaceRoot",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)V": "placeRoot",
        "a()Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacerType;": "type",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$placeRoot$3",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$canPlaceRoot$2",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacer;)Lnet/minecraft/world/level/levelgen/feature/rootplacers/MangroveRootPlacement;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/rootplacers/RootPlacer": {
      "fields": {
        "d": "CODEC",
        "e": "trunkOffsetY",
        "f": "rootProvider",
        "g": "aboveRootPlacement"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P3;": "rootPlacerParts",
        "a()Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Z": "placeRoots",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "canPlaceRoot",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)V": "placeRoot",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getPotentiallyWaterloggedState",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/core/BlockPos;": "getTrunkOrigin",
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "lambda$getPotentiallyWaterloggedState$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacer;)Ljava/util/Optional;": "lambda$rootPlacerParts$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacer;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$rootPlacerParts$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$rootPlacerParts$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/rootplacers/RootPlacerType": {
      "fields": {
        "a": "MANGROVE_ROOT_PLACER",
        "b": "codec"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/feature/rootplacers/RootPlacerType;": "register",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/WorldGenFeatureStateProvider": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider;": "simple",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider;": "simple",
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/WorldGenFeatureStateProviders": {
      "fields": {
        "a": "SIMPLE_STATE_PROVIDER",
        "b": "WEIGHTED_STATE_PROVIDER",
        "c": "NOISE_THRESHOLD_PROVIDER",
        "d": "NOISE_PROVIDER",
        "e": "DUAL_NOISE_PROVIDER",
        "f": "ROTATED_BLOCK_PROVIDER",
        "g": "RANDOMIZED_INT_STATE_PROVIDER",
        "h": "codec"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "register",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/DualNoiseProvider": {
      "fields": {
        "b": "CODEC",
        "i": "variety",
        "j": "slowNoiseParameters",
        "k": "slowScale",
        "l": "slowNoise"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/core/BlockPos;)D": "getSlowNoiseValue",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/DualNoiseProvider;)Ljava/lang/Float;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/stateproviders/DualNoiseProvider;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise$NoiseParameters;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/stateproviders/DualNoiseProvider;)Lnet/minecraft/util/InclusiveRange;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/NoiseBasedStateProvider": {
      "fields": {
        "c": "seed",
        "d": "parameters",
        "e": "scale",
        "f": "noise"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P3;": "noiseCodec",
        "a(Lnet/minecraft/core/BlockPos;D)D": "getNoiseValue",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseBasedStateProvider;)Ljava/lang/Float;": "lambda$noiseCodec$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseBasedStateProvider;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise$NoiseParameters;": "lambda$noiseCodec$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseBasedStateProvider;)Ljava/lang/Long;": "lambda$noiseCodec$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/NoiseProvider": {
      "fields": {
        "g": "CODEC",
        "h": "states"
      },
      "methods": {
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P4;": "noiseProviderCodec",
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Ljava/util/List;Lnet/minecraft/core/BlockPos;D)Lnet/minecraft/world/level/block/state/BlockState;": "getRandomState",
        "a(Ljava/util/List;D)Lnet/minecraft/world/level/block/state/BlockState;": "getRandomState",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseProvider;)Ljava/util/List;": "lambda$noiseProviderCodec$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/NoiseThresholdProvider": {
      "fields": {
        "b": "CODEC",
        "g": "threshold",
        "h": "highChance",
        "i": "defaultState",
        "j": "lowStates",
        "k": "highStates"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseThresholdProvider;)Ljava/util/List;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseThresholdProvider;)Ljava/util/List;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseThresholdProvider;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseThresholdProvider;)Ljava/lang/Float;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/feature/stateproviders/NoiseThresholdProvider;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/RandomizedIntStateProvider": {
      "fields": {
        "b": "CODEC",
        "c": "source",
        "d": "propertyName",
        "e": "property",
        "f": "values"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Ljava/lang/String;)Lnet/minecraft/world/level/block/state/properties/IntegerProperty;": "findProperty",
        "a(Ljava/lang/String;)Ljava/lang/IllegalArgumentException;": "lambda$findProperty$7",
        "a(Lnet/minecraft/world/level/block/state/properties/Property;)Lnet/minecraft/world/level/block/state/properties/IntegerProperty;": "lambda$findProperty$6",
        "b(Lnet/minecraft/world/level/block/state/properties/Property;)Z": "lambda$findProperty$5",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/block/state/properties/Property;)Z": "lambda$findProperty$4",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/RandomizedIntStateProvider;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/stateproviders/RandomizedIntStateProvider;)Ljava/lang/String;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/stateproviders/RandomizedIntStateProvider;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/WorldGenFeatureStateProviderRotatedBlock": {
      "fields": {
        "b": "CODEC",
        "c": "block"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/RotatedBlockProvider;)Lnet/minecraft/world/level/block/Block;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider": {
      "fields": {
        "b": "fallback",
        "c": "rules",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider;": "simple",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/RuleBasedBlockStateProvider;": "simple",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "fallback",
        "b()Ljava/util/List;": "rules",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/WorldGenFeatureStateProviderSimpl": {
      "fields": {
        "b": "CODEC",
        "c": "state"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/SimpleStateProvider;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/stateproviders/WorldGenFeatureStateProviderWeighted": {
      "fields": {
        "b": "CODEC",
        "c": "weightedList"
      },
      "methods": {
        "a(Lnet/minecraft/util/random/SimpleWeightedRandomList;)Lcom/mojang/serialization/DataResult;": "create",
        "a()Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProviderType;": "type",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "b()Ljava/lang/String;": "lambda$create$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/stateproviders/WeightedStateProvider;)Lnet/minecraft/util/random/SimpleWeightedRandomList;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTreeAlterGround": {
      "fields": {
        "a": "CODEC",
        "b": "provider"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)V": "placeCircle",
        "b(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)V": "placeBlockAt",
        "c(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)V": "lambda$place$2",
        "a(ILnet/minecraft/core/BlockPos;)Z": "lambda$place$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AlterGroundDecorator;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator": {
      "fields": {
        "a": "CODEC",
        "b": "probability",
        "c": "exclusionRadiusXZ",
        "d": "exclusionRadiusY",
        "e": "blockProvider",
        "f": "requiredEmptyBlocks",
        "g": "directions"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "hasRequiredEmptyBlocks",
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$6",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator;)Ljava/util/List;": "lambda$static$5",
        "b(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator;)Ljava/lang/Integer;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator;)Lnet/minecraft/world/level/levelgen/feature/stateproviders/BlockStateProvider;": "lambda$static$3",
        "d(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator;)Ljava/lang/Integer;": "lambda$static$2",
        "e(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator;)Ljava/lang/Integer;": "lambda$static$1",
        "f(Lnet/minecraft/world/level/levelgen/feature/treedecorators/AttachedToLeavesDecorator;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTreeBeehive": {
      "fields": {
        "a": "CODEC",
        "b": "WORLDGEN_FACING",
        "c": "SPAWN_DIRECTIONS",
        "d": "probability"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/entity/BeehiveBlockEntity;)V": "lambda$place$6",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)Z": "lambda$place$5",
        "a(Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "lambda$place$4",
        "a(ILnet/minecraft/core/BlockPos;)Z": "lambda$place$3",
        "a(I)[Lnet/minecraft/core/Direction;": "lambda$static$2",
        "a(Lnet/minecraft/core/Direction;)Z": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/BeehiveDecorator;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTreeCocoa": {
      "fields": {
        "a": "CODEC",
        "b": "probability"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)V": "lambda$place$2",
        "a(ILnet/minecraft/core/BlockPos;)Z": "lambda$place$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTreeVineLeaves": {
      "fields": {
        "a": "CODEC",
        "b": "probability"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/properties/BooleanProperty;Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "addHangingVine",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)V": "lambda$place$1",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/LeaveVineDecorator;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTree": {
      "fields": {
        "h": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTrees": {
      "fields": {
        "a": "TRUNK_VINE",
        "b": "LEAVE_VINE",
        "c": "COCOA",
        "d": "BEEHIVE",
        "e": "ALTER_GROUND",
        "f": "ATTACHED_TO_LEAVES",
        "g": "codec"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "register",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/world/level/levelgen/feature/treedecorators/WorldGenFeatureTreeVineTrunk": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecoratorType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;)V": "place",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/feature/treedecorators/TreeDecorator$Context;Lnet/minecraft/core/BlockPos;)V": "lambda$place$1",
        "b()Lnet/minecraft/world/level/levelgen/feature/treedecorators/TrunkVineDecorator;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/BendingTrunkPlacer": {
      "fields": {
        "a": "CODEC",
        "b": "minHeightForLeaves",
        "h": "bendLength"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/BendingTrunkPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/BendingTrunkPlacer;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/CherryTrunkPlacer": {
      "fields": {
        "b": "BRANCH_START_CODEC",
        "a": "CODEC",
        "h": "branchCount",
        "i": "branchHorizontalLength",
        "j": "branchStartOffsetFromTop",
        "k": "secondBranchStartOffsetFromTop",
        "l": "branchEndOffsetFromTop"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Ljava/util/function/Function;Lnet/minecraft/core/Direction;IZLnet/minecraft/core/BlockPos$MutableBlockPos;)Lnet/minecraft/world/level/levelgen/feature/foliageplacers/FoliagePlacer$FoliageAttachment;": "generateBranch",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$placeTrunk$7",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$6",
        "a(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/CherryTrunkPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$5",
        "b(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/CherryTrunkPlacer;)Lnet/minecraft/util/valueproviders/UniformInt;": "lambda$static$4",
        "c(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/CherryTrunkPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$3",
        "d(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/CherryTrunkPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$2",
        "a(Lnet/minecraft/util/valueproviders/UniformInt;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "b()Ljava/lang/String;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerDarkOak": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerFancy": {
      "fields": {
        "a": "CODEC",
        "b": "TRUNK_HEIGHT_SCALE",
        "h": "CLUSTER_DENSITY_MAGIC",
        "i": "BRANCH_SLOPE",
        "j": "BRANCH_LENGTH_MAGIC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Z": "makeLimb",
        "a(Lnet/minecraft/core/BlockPos;)I": "getSteps",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/Direction$Axis;": "getLogAxis",
        "a(II)Z": "trimBranches",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Ljava/util/List;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)V": "makeBranches",
        "b(II)F": "treeShape",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$makeLimb$1",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerForking": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerGiant": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Lnet/minecraft/core/BlockPos;III)V": "placeLogIfFreeWithOffset",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerMegaJungle": {
      "fields": {
        "b": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerStraight": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer": {
      "fields": {
        "c": "CODEC",
        "a": "MAX_BASE_HEIGHT",
        "b": "MAX_RAND",
        "d": "MAX_HEIGHT",
        "e": "baseHeight",
        "f": "heightRandA",
        "g": "heightRandB"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P3;": "trunkPlacerParts",
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "a(Lnet/minecraft/util/RandomSource;)I": "getTreeHeight",
        "c(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "isDirt",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)V": "setDirtAt",
        "b(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Z": "placeLog",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Ljava/util/function/Function;)Z": "placeLog",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)V": "placeLogIfFree",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "validTreePos",
        "b(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "isFree",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$isFree$4",
        "b(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$isDirt$3",
        "a(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer;)Ljava/lang/Integer;": "lambda$trunkPlacerParts$2",
        "b(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer;)Ljava/lang/Integer;": "lambda$trunkPlacerParts$1",
        "c(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacer;)Ljava/lang/Integer;": "lambda$trunkPlacerParts$0"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacers": {
      "fields": {
        "a": "STRAIGHT_TRUNK_PLACER",
        "b": "FORKING_TRUNK_PLACER",
        "c": "GIANT_TRUNK_PLACER",
        "d": "MEGA_JUNGLE_TRUNK_PLACER",
        "e": "DARK_OAK_TRUNK_PLACER",
        "f": "FANCY_TRUNK_PLACER",
        "g": "BENDING_TRUNK_PLACER",
        "h": "UPWARDS_BRANCHING_TRUNK_PLACER",
        "i": "CHERRY_TRUNK_PLACER",
        "j": "codec"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "register",
        "a()Lcom/mojang/serialization/Codec;": "codec"
      }
    },
    "net/minecraft/world/level/levelgen/feature/trunkplacers/UpwardsBranchingTrunkPlacer": {
      "fields": {
        "a": "CODEC",
        "b": "extraBranchSteps",
        "h": "placeBranchPerLogProbability",
        "i": "extraBranchLength",
        "j": "canGrowThrough"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/feature/trunkplacers/TrunkPlacerType;": "type",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;)Ljava/util/List;": "placeTrunk",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Ljava/util/function/BiConsumer;Lnet/minecraft/util/RandomSource;ILnet/minecraft/world/level/levelgen/feature/configurations/TreeConfiguration;Ljava/util/List;Lnet/minecraft/core/BlockPos$MutableBlockPos;ILnet/minecraft/core/Direction;II)V": "placeBranch",
        "a(Lnet/minecraft/world/level/LevelSimulatedReader;Lnet/minecraft/core/BlockPos;)Z": "validTreePos",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$validTreePos$5",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/UpwardsBranchingTrunkPlacer;)Lnet/minecraft/core/HolderSet;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/UpwardsBranchingTrunkPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/UpwardsBranchingTrunkPlacer;)Ljava/lang/Float;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/feature/trunkplacers/UpwardsBranchingTrunkPlacer;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/flat/WorldGenFlatLayerInfo": {
      "fields": {
        "a": "CODEC",
        "b": "block",
        "c": "height"
      },
      "methods": {
        "a()I": "getHeight",
        "b()Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/flat/FlatLayerInfo;)Lnet/minecraft/world/level/block/Block;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset": {
      "fields": {
        "c": "displayItem",
        "d": "settings",
        "a": "DIRECT_CODEC",
        "b": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/core/Holder;": "displayItem",
        "b()Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;": "settings",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset;)Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPreset;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/flat/FlatLevelGeneratorPresets": {
      "fields": {
        "a": "CLASSIC_FLAT",
        "b": "TUNNELERS_DREAM",
        "c": "WATER_WORLD",
        "d": "OVERWORLD",
        "e": "SNOWY_KINGDOM",
        "f": "BOTTOMLESS_PIT",
        "g": "DESERT",
        "h": "REDSTONE_READY",
        "i": "THE_VOID"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "register"
      }
    },
    "net/minecraft/world/level/levelgen/flat/GeneratorSettingsFlat": {
      "fields": {
        "b": "LOGGER",
        "a": "CODEC",
        "c": "structureOverrides",
        "d": "layersInfo",
        "e": "biome",
        "f": "layers",
        "g": "voidGen",
        "h": "decoration",
        "i": "addLakes",
        "j": "lakes"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;)Lcom/mojang/serialization/DataResult;": "validateHeight",
        "a(Ljava/util/Optional;Lnet/minecraft/core/Holder;)Lnet/minecraft/core/Holder;": "getBiome",
        "a(Ljava/util/List;Ljava/util/Optional;Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;": "withBiomeAndLayers",
        "a()V": "setDecoration",
        "b()V": "setAddLakes",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/biome/BiomeGenerationSettings;": "adjustGenerationSettings",
        "c()Ljava/util/Optional;": "structureOverrides",
        "d()Lnet/minecraft/core/Holder;": "getBiome",
        "e()Ljava/util/List;": "getLayersInfo",
        "f()Ljava/util/List;": "getLayers",
        "g()V": "updateLayers",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;": "getDefault",
        "a(Lnet/minecraft/core/HolderGetter;)Lnet/minecraft/core/Holder;": "getDefaultBiome",
        "b(Lnet/minecraft/core/HolderGetter;)Ljava/util/List;": "createLakesList",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "lambda$updateLayers$6",
        "h()Ljava/lang/String;": "lambda$validateHeight$5",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;)Ljava/util/Optional;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;)Ljava/lang/Boolean;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;)Ljava/lang/Boolean;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/flat/FlatLevelGeneratorSettings;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight": {
      "fields": {
        "a": "CODEC",
        "b": "LOGGER",
        "d": "minInclusive",
        "e": "maxInclusive",
        "f": "inner"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;I)Lnet/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/heightproviders/BiasedToBottomHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/ConstantHeight": {
      "fields": {
        "a": "ZERO",
        "b": "CODEC",
        "d": "value"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lnet/minecraft/world/level/levelgen/heightproviders/ConstantHeight;": "of",
        "b()Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "getValue",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/ConstantHeight;)Lcom/mojang/datafixers/util/Either;": "lambda$static$4",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/world/level/levelgen/heightproviders/ConstantHeight;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/heightproviders/ConstantHeight;)Lnet/minecraft/world/level/levelgen/heightproviders/ConstantHeight;": "lambda$static$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/heightproviders/ConstantHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/HeightProvider": {
      "fields": {
        "a": "CONSTANT_OR_DISPATCH_CODEC",
        "c": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;)Lcom/mojang/datafixers/util/Either;": "lambda$static$2",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/HeightProviderType": {
      "fields": {
        "a": "CONSTANT",
        "b": "UNIFORM",
        "c": "BIASED_TO_BOTTOM",
        "d": "VERY_BIASED_TO_BOTTOM",
        "e": "TRAPEZOID",
        "f": "WEIGHTED_LIST"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/TrapezoidHeight": {
      "fields": {
        "a": "CODEC",
        "b": "LOGGER",
        "d": "minInclusive",
        "e": "maxInclusive",
        "f": "plateau"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;I)Lnet/minecraft/world/level/levelgen/heightproviders/TrapezoidHeight;": "of",
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lnet/minecraft/world/level/levelgen/heightproviders/TrapezoidHeight;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/TrapezoidHeight;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/heightproviders/TrapezoidHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/heightproviders/TrapezoidHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/UniformHeight": {
      "fields": {
        "a": "CODEC",
        "b": "LOGGER",
        "d": "minInclusive",
        "e": "maxInclusive",
        "f": "warnedFor"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lnet/minecraft/world/level/levelgen/heightproviders/UniformHeight;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/UniformHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/heightproviders/UniformHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/VeryBiasedToBottomHeight": {
      "fields": {
        "a": "CODEC",
        "b": "LOGGER",
        "d": "minInclusive",
        "e": "maxInclusive",
        "f": "inner"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;I)Lnet/minecraft/world/level/levelgen/heightproviders/VeryBiasedToBottomHeight;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/VeryBiasedToBottomHeight;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/heightproviders/VeryBiasedToBottomHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/heightproviders/VeryBiasedToBottomHeight;)Lnet/minecraft/world/level/levelgen/VerticalAnchor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/heightproviders/WeightedListHeight": {
      "fields": {
        "a": "CODEC",
        "b": "distribution"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/WorldGenerationContext;)I": "sample",
        "a()Lnet/minecraft/world/level/levelgen/heightproviders/HeightProviderType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/WeightedListHeight;)Lnet/minecraft/util/random/SimpleWeightedRandomList;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/material/MaterialRuleList": {
      "fields": {
        "a": "materialRuleList"
      },
      "methods": {
        "a()Ljava/util/List;": "materialRuleList"
      }
    },
    "net/minecraft/world/level/levelgen/placement/BiomeFilter": {
      "fields": {
        "c": "INSTANCE",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/placement/BiomeFilter;": "biome",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "shouldPlace",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "c()Ljava/lang/IllegalStateException;": "lambda$shouldPlace$1",
        "d()Lnet/minecraft/world/level/levelgen/placement/BiomeFilter;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/BlockPredicateFilter": {
      "fields": {
        "a": "CODEC",
        "c": "predicate"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;)Lnet/minecraft/world/level/levelgen/placement/BlockPredicateFilter;": "forPredicate",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "shouldPlace",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/placement/BlockPredicateFilter;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/CarvingMaskPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "step"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/levelgen/placement/CarvingMaskPlacement;": "forStep",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/placement/CarvingMaskPlacement;)Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/CaveSurface": {
      "fields": {
        "a": "CEILING",
        "b": "FLOOR",
        "c": "CODEC",
        "d": "direction",
        "e": "y",
        "f": "id",
        "g": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/core/Direction;": "getDirection",
        "b()I": "getY",
        "c()Ljava/lang/String;": "getSerializedName",
        "d()[Lnet/minecraft/world/level/levelgen/placement/CaveSurface;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/placement/CountOnEveryLayerPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "count"
      },
      "methods": {
        "a(Lnet/minecraft/util/valueproviders/IntProvider;)Lnet/minecraft/world/level/levelgen/placement/CountOnEveryLayerPlacement;": "of",
        "a(I)Lnet/minecraft/world/level/levelgen/placement/CountOnEveryLayerPlacement;": "of",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;IIII)I": "findOnGroundYPosition",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isEmpty",
        "a(Lnet/minecraft/world/level/levelgen/placement/CountOnEveryLayerPlacement;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/CountPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "count"
      },
      "methods": {
        "a(Lnet/minecraft/util/valueproviders/IntProvider;)Lnet/minecraft/world/level/levelgen/placement/CountPlacement;": "of",
        "a(I)Lnet/minecraft/world/level/levelgen/placement/CountPlacement;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)I": "count",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/placement/CountPlacement;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement": {
      "fields": {
        "c": "directionOfSearch",
        "d": "targetCondition",
        "e": "allowedSearchCondition",
        "f": "maxSteps",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;I)Lnet/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement;": "scanningFor",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;I)Lnet/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement;": "scanningFor",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement;)Ljava/lang/Integer;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement;)Lnet/minecraft/world/level/levelgen/blockpredicates/BlockPredicate;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/placement/EnvironmentScanPlacement;)Lnet/minecraft/core/Direction;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/HeightRangePlacement": {
      "fields": {
        "a": "CODEC",
        "c": "height"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;)Lnet/minecraft/world/level/levelgen/placement/HeightRangePlacement;": "of",
        "a(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lnet/minecraft/world/level/levelgen/placement/HeightRangePlacement;": "uniform",
        "b(Lnet/minecraft/world/level/levelgen/VerticalAnchor;Lnet/minecraft/world/level/levelgen/VerticalAnchor;)Lnet/minecraft/world/level/levelgen/placement/HeightRangePlacement;": "triangle",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/placement/HeightRangePlacement;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/HeightmapPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "heightmap"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;)Lnet/minecraft/world/level/levelgen/placement/HeightmapPlacement;": "onHeightmap",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/placement/HeightmapPlacement;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/InSquarePlacement": {
      "fields": {
        "c": "INSTANCE",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/placement/InSquarePlacement;": "spread",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "c()Lnet/minecraft/world/level/levelgen/placement/InSquarePlacement;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/NoiseBasedCountPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "noiseToCountRatio",
        "d": "noiseFactor",
        "e": "noiseOffset"
      },
      "methods": {
        "a(IDD)Lnet/minecraft/world/level/levelgen/placement/NoiseBasedCountPlacement;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)I": "count",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/placement/NoiseBasedCountPlacement;)Ljava/lang/Double;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/placement/NoiseBasedCountPlacement;)Ljava/lang/Double;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/placement/NoiseBasedCountPlacement;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/NoiseThresholdCountPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "noiseLevel",
        "d": "belowNoise",
        "e": "aboveNoise"
      },
      "methods": {
        "a(DII)Lnet/minecraft/world/level/levelgen/placement/NoiseThresholdCountPlacement;": "of",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)I": "count",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/placement/NoiseThresholdCountPlacement;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/placement/NoiseThresholdCountPlacement;)Ljava/lang/Integer;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/placement/NoiseThresholdCountPlacement;)Ljava/lang/Double;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/PlacedFeature": {
      "fields": {
        "e": "feature",
        "f": "placement",
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "LIST_CODEC",
        "d": "LIST_OF_LISTS_CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "place",
        "b(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "placeWithBiomeCheck",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "placeWithContext",
        "a()Ljava/util/stream/Stream;": "getFeatures",
        "b()Lnet/minecraft/core/Holder;": "feature",
        "c()Ljava/util/List;": "placement",
        "a(Lnet/minecraft/world/level/levelgen/feature/ConfiguredFeature;Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lorg/apache/commons/lang3/mutable/MutableBoolean;Lnet/minecraft/core/BlockPos;)V": "lambda$placeWithContext$4",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementModifier;Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "lambda$placeWithContext$3",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacedFeature;)Ljava/util/List;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/placement/PlacedFeature;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/PlacementContext": {
      "fields": {
        "a": "level",
        "b": "generator",
        "c": "topFeature"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)I": "getHeight",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/GenerationStep$Carving;)Lnet/minecraft/world/level/chunk/CarvingMask;": "getCarvingMask",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlockState",
        "c()I": "getMinBuildHeight",
        "d()Lnet/minecraft/world/level/WorldGenLevel;": "getLevel",
        "e()Ljava/util/Optional;": "topFeature",
        "f()Lnet/minecraft/world/level/chunk/ChunkGenerator;": "generator"
      }
    },
    "net/minecraft/world/level/levelgen/placement/PlacementFilter": {
      "methods": {
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "shouldPlace"
      }
    },
    "net/minecraft/world/level/levelgen/placement/PlacementModifier": {
      "fields": {
        "b": "CODEC"
      },
      "methods": {
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type"
      }
    },
    "net/minecraft/world/level/levelgen/placement/PlacementModifierType": {
      "fields": {
        "a": "BLOCK_PREDICATE_FILTER",
        "b": "RARITY_FILTER",
        "c": "SURFACE_RELATIVE_THRESHOLD_FILTER",
        "d": "SURFACE_WATER_DEPTH_FILTER",
        "e": "BIOME_FILTER",
        "f": "COUNT",
        "g": "NOISE_BASED_COUNT",
        "h": "NOISE_THRESHOLD_COUNT",
        "i": "COUNT_ON_EVERY_LAYER",
        "j": "ENVIRONMENT_SCAN",
        "k": "HEIGHTMAP",
        "l": "HEIGHT_RANGE",
        "m": "IN_SQUARE",
        "n": "RANDOM_OFFSET",
        "o": "CARVING_MASK_PLACEMENT"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/RandomOffsetPlacement": {
      "fields": {
        "a": "CODEC",
        "c": "xzSpread",
        "d": "ySpread"
      },
      "methods": {
        "a(Lnet/minecraft/util/valueproviders/IntProvider;Lnet/minecraft/util/valueproviders/IntProvider;)Lnet/minecraft/world/level/levelgen/placement/RandomOffsetPlacement;": "of",
        "a(Lnet/minecraft/util/valueproviders/IntProvider;)Lnet/minecraft/world/level/levelgen/placement/RandomOffsetPlacement;": "vertical",
        "b(Lnet/minecraft/util/valueproviders/IntProvider;)Lnet/minecraft/world/level/levelgen/placement/RandomOffsetPlacement;": "horizontal",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/placement/RandomOffsetPlacement;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/placement/RandomOffsetPlacement;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/RarityFilter": {
      "fields": {
        "a": "CODEC",
        "c": "chance"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/levelgen/placement/RarityFilter;": "onAverageOnceEvery",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "shouldPlace",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/placement/RarityFilter;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/RepeatingPlacement": {
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)I": "count",
        "a_(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;": "getPositions",
        "a(Lnet/minecraft/core/BlockPos;I)Lnet/minecraft/core/BlockPos;": "lambda$getPositions$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/SurfaceRelativeThresholdFilter": {
      "fields": {
        "a": "CODEC",
        "c": "heightmap",
        "d": "minInclusive",
        "e": "maxInclusive"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/Heightmap$Types;II)Lnet/minecraft/world/level/levelgen/placement/SurfaceRelativeThresholdFilter;": "of",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "shouldPlace",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/placement/SurfaceRelativeThresholdFilter;)Ljava/lang/Integer;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/placement/SurfaceRelativeThresholdFilter;)Ljava/lang/Integer;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/placement/SurfaceRelativeThresholdFilter;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/placement/SurfaceWaterDepthFilter": {
      "fields": {
        "a": "CODEC",
        "c": "maxWaterDepth"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/level/levelgen/placement/SurfaceWaterDepthFilter;": "forMaxDepth",
        "a(Lnet/minecraft/world/level/levelgen/placement/PlacementContext;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Z": "shouldPlace",
        "b()Lnet/minecraft/world/level/levelgen/placement/PlacementModifierType;": "type",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/placement/SurfaceWaterDepthFilter;)Ljava/lang/Integer;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/presets/WorldPreset": {
      "fields": {
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "dimensions"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/WorldDimensions;": "createWorldDimensions",
        "b()Ljava/util/Optional;": "overworld",
        "a(Lnet/minecraft/world/level/levelgen/presets/WorldPreset;)Lcom/mojang/serialization/DataResult;": "requireOverworld",
        "d()Ljava/lang/String;": "lambda$requireOverworld$3",
        "a(Lnet/minecraft/core/WritableRegistry;Lnet/minecraft/resources/ResourceKey;)V": "lambda$createRegistry$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/presets/WorldPreset;)Ljava/util/Map;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/presets/WorldPresets": {
      "fields": {
        "a": "NORMAL",
        "b": "FLAT",
        "c": "LARGE_BIOMES",
        "d": "AMPLIFIED",
        "e": "SINGLE_BIOME_SURFACE",
        "f": "DEBUG"
      },
      "methods": {
        "a(Lnet/minecraft/data/worldgen/BootstapContext;)V": "bootstrap",
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "register",
        "a(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/level/levelgen/WorldDimensions;": "createNormalWorldDimensions",
        "b(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/world/level/dimension/LevelStem;": "getNormalOverworld",
        "a(Lnet/minecraft/world/level/dimension/LevelStem;)Ljava/util/Optional;": "lambda$fromSettings$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureBoundingBox": {
      "fields": {
        "b": "LOGGER",
        "a": "CODEC",
        "c": "minX",
        "d": "minY",
        "e": "minZ",
        "f": "maxX",
        "g": "maxY",
        "h": "maxZ"
      },
      "methods": {
        "a(Lnet/minecraft/core/Vec3i;Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "fromCorners",
        "a()Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "infinite",
        "a(IIIIIIIIILnet/minecraft/core/Direction;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "orientBox",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Z": "intersects",
        "a(IIII)Z": "intersects",
        "a(Ljava/lang/Iterable;)Ljava/util/Optional;": "encapsulatingPositions",
        "b(Ljava/lang/Iterable;)Ljava/util/Optional;": "encapsulatingBoxes",
        "b(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "encapsulate",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "encapsulate",
        "a(III)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "move",
        "a(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "move",
        "b(III)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "moved",
        "a(I)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "inflatedBy",
        "b(Lnet/minecraft/core/Vec3i;)Z": "isInside",
        "c(III)Z": "isInside",
        "b()Lnet/minecraft/core/Vec3i;": "getLength",
        "c()I": "getXSpan",
        "d()I": "getYSpan",
        "e()I": "getZSpan",
        "f()Lnet/minecraft/core/BlockPos;": "getCenter",
        "a(Ljava/util/function/Consumer;)V": "forAllCorners",
        "g()I": "minX",
        "h()I": "minY",
        "i()I": "minZ",
        "j()I": "maxX",
        "k()I": "maxY",
        "l()I": "maxZ",
        "c(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Ljava/util/stream/IntStream;": "lambda$static$2",
        "a(Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "a([I)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/BuiltinStructureSets": {
      "fields": {
        "a": "VILLAGES",
        "b": "DESERT_PYRAMIDS",
        "c": "IGLOOS",
        "d": "JUNGLE_TEMPLES",
        "e": "SWAMP_HUTS",
        "f": "PILLAGER_OUTPOSTS",
        "g": "OCEAN_MONUMENTS",
        "h": "WOODLAND_MANSIONS",
        "i": "BURIED_TREASURES",
        "j": "MINESHAFTS",
        "k": "RUINED_PORTALS",
        "l": "SHIPWRECKS",
        "m": "OCEAN_RUINS",
        "n": "NETHER_COMPLEXES",
        "o": "NETHER_FOSSILS",
        "p": "END_CITIES",
        "q": "ANCIENT_CITIES",
        "r": "STRONGHOLDS",
        "s": "TRAIL_RUINS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "register"
      }
    },
    "net/minecraft/world/level/levelgen/structure/BuiltinStructures": {
      "fields": {
        "a": "PILLAGER_OUTPOST",
        "b": "MINESHAFT",
        "c": "MINESHAFT_MESA",
        "d": "WOODLAND_MANSION",
        "e": "JUNGLE_TEMPLE",
        "f": "DESERT_PYRAMID",
        "g": "IGLOO",
        "h": "SHIPWRECK",
        "i": "SHIPWRECK_BEACHED",
        "j": "SWAMP_HUT",
        "k": "STRONGHOLD",
        "l": "OCEAN_MONUMENT",
        "m": "OCEAN_RUIN_COLD",
        "n": "OCEAN_RUIN_WARM",
        "o": "FORTRESS",
        "p": "NETHER_FOSSIL",
        "q": "END_CITY",
        "r": "BURIED_TREASURE",
        "s": "BASTION_REMNANT",
        "t": "VILLAGE_PLAINS",
        "u": "VILLAGE_DESERT",
        "v": "VILLAGE_SAVANNA",
        "w": "VILLAGE_SNOWY",
        "x": "VILLAGE_TAIGA",
        "y": "RUINED_PORTAL_STANDARD",
        "z": "RUINED_PORTAL_DESERT",
        "A": "RUINED_PORTAL_JUNGLE",
        "B": "RUINED_PORTAL_SWAMP",
        "C": "RUINED_PORTAL_MOUNTAIN",
        "D": "RUINED_PORTAL_OCEAN",
        "E": "RUINED_PORTAL_NETHER",
        "F": "ANCIENT_CITY",
        "G": "TRAIL_RUINS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceKey;": "createKey"
      }
    },
    "net/minecraft/world/level/levelgen/structure/PersistentStructureLegacy": {
      "fields": {
        "a": "CURRENT_TO_LEGACY_MAP",
        "b": "LEGACY_TO_CURRENT_MAP",
        "c": "OLD_STRUCTURE_REGISTRY_KEYS",
        "d": "hasLegacyData",
        "e": "dataMap",
        "f": "indexMap",
        "g": "legacyKeys",
        "h": "currentKeys"
      },
      "methods": {
        "a(J)V": "removeIndex",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "updateFromLegacy",
        "a(IILjava/lang/String;)Z": "hasLegacyStart",
        "a(II)Z": "isUnhandledStructureStart",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/nbt/CompoundTag;": "updateStructureStart",
        "a(Lnet/minecraft/world/level/storage/DimensionDataStorage;)V": "populateCaches",
        "a(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/level/storage/DimensionDataStorage;)Lnet/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler;": "getLegacyStructureHandler"
      }
    },
    "net/minecraft/world/level/levelgen/structure/WorldGenFeaturePillagerOutpostPoolPiece": {
      "fields": {
        "d": "LOGGER",
        "a": "element",
        "b": "position",
        "h": "groundLevelDelta",
        "c": "rotation",
        "i": "junctions",
        "j": "structureTemplateManager"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/BlockPos;Z)V": "place",
        "a(III)V": "move",
        "a()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "b()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;": "getElement",
        "c()Lnet/minecraft/core/BlockPos;": "getPosition",
        "d()I": "getGroundLevelDelta",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/JigsawJunction;)V": "addJunction",
        "e()Ljava/util/List;": "getJunctions",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$addAdditionalSaveData$2",
        "a(Lcom/mojang/serialization/DynamicOps;Lnet/minecraft/nbt/Tag;)V": "lambda$new$1",
        "l()Ljava/lang/IllegalStateException;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/WorldGenScatteredPiece": {
      "fields": {
        "a": "width",
        "b": "height",
        "c": "depth",
        "d": "heightPosition"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;I)Z": "updateAverageGroundHeight",
        "a(Lnet/minecraft/world/level/LevelAccessor;I)Z": "updateHeightPositionToLowestGroundHeight"
      }
    },
    "net/minecraft/world/level/levelgen/structure/SinglePieceStructure": {
      "fields": {
        "d": "constructor",
        "e": "width",
        "f": "depth"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/Structure": {
      "fields": {
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "c": "settings"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "settingsCodec",
        "a(Ljava/util/function/Function;)Lcom/mojang/serialization/Codec;": "simpleCodec",
        "a()Lnet/minecraft/core/HolderSet;": "biomes",
        "b()Ljava/util/Map;": "spawnOverrides",
        "c()Lnet/minecraft/world/level/levelgen/GenerationStep$Decoration;": "step",
        "d()Lnet/minecraft/world/level/levelgen/structure/TerrainAdjustment;": "terrainAdaptation",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "adjustBoundingBox",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/biome/BiomeSource;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;JLnet/minecraft/world/level/ChunkPos;ILnet/minecraft/world/level/LevelHeightAccessor;Ljava/util/function/Predicate;)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "generate",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/Heightmap$Types;Ljava/util/function/Consumer;)Ljava/util/Optional;": "onTopOfChunkCenter",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationStub;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Z": "isValidBiome",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;)V": "afterPlace",
        "b(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;IIII)[I": "getCornerHeights",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;II)I": "getLowestY",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;IIII)I": "getLowestY",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;": "getLowestYIn5by5BoxOffset7Blocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "b(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findValidGenerationPoint",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationStub;)Z": "lambda$findValidGenerationPoint$2",
        "a(Ljava/util/function/Function;Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$simpleCodec$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lnet/minecraft/world/level/levelgen/structure/Structure$StructureSettings;": "lambda$settingsCodec$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureCheck": {
      "fields": {
        "a": "LOGGER",
        "b": "NO_STRUCTURE",
        "c": "storageAccess",
        "d": "registryAccess",
        "g": "structureTemplateManager",
        "h": "dimension",
        "i": "chunkGenerator",
        "j": "randomState",
        "k": "heightAccessor",
        "l": "biomeSource",
        "m": "seed",
        "n": "fixerUpper",
        "o": "loadedChunks",
        "p": "featureChecks"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/Structure;Z)Lnet/minecraft/world/level/levelgen/structure/StructureCheckResult;": "checkStart",
        "b(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/Structure;)Z": "canCreateStructure",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/Structure;ZJ)Lnet/minecraft/world/level/levelgen/structure/StructureCheckResult;": "tryLoadFromStorage",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lit/unimi/dsi/fastutil/objects/Object2IntMap;": "loadStructures",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap;)Lit/unimi/dsi/fastutil/objects/Object2IntMap;": "deduplicateEmptyMap",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap;Lnet/minecraft/world/level/levelgen/structure/Structure;Z)Lnet/minecraft/world/level/levelgen/structure/StructureCheckResult;": "checkStructureInfo",
        "a(Lnet/minecraft/world/level/ChunkPos;Ljava/util/Map;)V": "onStructureLoad",
        "a(JLit/unimi/dsi/fastutil/objects/Object2IntMap;)V": "storeFullResults",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/Structure;)V": "incrementReference",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Ljava/lang/Long;Lit/unimi/dsi/fastutil/objects/Object2IntMap;)Lit/unimi/dsi/fastutil/objects/Object2IntMap;": "lambda$incrementReference$5",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;Ljava/lang/Integer;)Ljava/lang/Integer;": "lambda$incrementReference$4",
        "a(JLit/unimi/dsi/fastutil/longs/Long2BooleanMap;)V": "lambda$storeFullResults$3",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap;Lnet/minecraft/world/level/levelgen/structure/Structure;Lnet/minecraft/world/level/levelgen/structure/StructureStart;)V": "lambda$onStructureLoad$2",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/Structure;J)Z": "lambda$checkStart$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure;)Lit/unimi/dsi/fastutil/longs/Long2BooleanMap;": "lambda$checkStart$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureCheckResult": {
      "fields": {
        "a": "START_PRESENT",
        "b": "START_NOT_PRESENT",
        "c": "CHUNK_LOAD_NEEDED",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/levelgen/structure/StructureCheckResult;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/structure/PersistentIndexed": {
      "fields": {
        "a": "TAG_REMAINING_INDEXES",
        "b": "TAG_All_INDEXES",
        "c": "all",
        "d": "remaining"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/levelgen/structure/StructureFeatureIndexSavedData;": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(J)V": "addIndex",
        "b(J)Z": "hasStartIndex",
        "c(J)Z": "hasUnhandledIndex",
        "d(J)V": "removeIndex",
        "a()Lit/unimi/dsi/fastutil/longs/LongSet;": "getAll"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructurePiece": {
      "fields": {
        "a": "LOGGER",
        "e": "CAVE_AIR",
        "f": "boundingBox",
        "b": "orientation",
        "c": "mirror",
        "d": "rotation",
        "g": "genDepth",
        "h": "type",
        "i": "SHAPE_CHECK_BLOCKS"
      },
      "methods": {
        "a(IIILnet/minecraft/core/Direction;III)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "makeBoundingBox",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/core/Direction;": "getRandomHorizontalDirection",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;)Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructurePiece;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;)V": "addChildren",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess",
        "f()Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "g()I": "getGenDepth",
        "a(I)V": "setGenDepth",
        "a(Lnet/minecraft/world/level/ChunkPos;I)Z": "isCloseToChunk",
        "h()Lnet/minecraft/core/BlockPos;": "getLocatorPosition",
        "b(III)Lnet/minecraft/core/BlockPos$MutableBlockPos;": "getWorldPos",
        "a(II)I": "getWorldX",
        "b(I)I": "getWorldY",
        "b(II)I": "getWorldZ",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/block/state/BlockState;IIILnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "placeBlock",
        "a(Lnet/minecraft/world/level/LevelReader;IIILnet/minecraft/world/level/levelgen/structure/BoundingBox;)Z": "canBeReplaced",
        "a(Lnet/minecraft/world/level/BlockGetter;IIILnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/block/state/BlockState;": "getBlock",
        "b(Lnet/minecraft/world/level/LevelReader;IIILnet/minecraft/world/level/levelgen/structure/BoundingBox;)Z": "isInterior",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;IIIIII)V": "generateAirBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;IIIIIILnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "generateBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Z)V": "generateBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;IIIIIIZLnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/StructurePiece$BlockSelector;)V": "generateBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;ZLnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/StructurePiece$BlockSelector;)V": "generateBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;FIIIIIILnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;ZZ)V": "generateMaybeBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;FIIILnet/minecraft/world/level/block/state/BlockState;)V": "maybeGenerateBlock",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;IIIIIILnet/minecraft/world/level/block/state/BlockState;Z)V": "generateUpperHalfSphere",
        "b(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/block/state/BlockState;IIILnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "fillColumnDown",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isReplaceableByStructures",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/resources/ResourceLocation;)Z": "createChest",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "reorient",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/level/block/state/BlockState;)Z": "createChest",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;Lnet/minecraft/resources/ResourceLocation;)Z": "createDispenser",
        "a(III)V": "move",
        "a(Ljava/util/stream/Stream;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "createBoundingBox",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/levelgen/structure/StructurePiece;": "findCollisionPiece",
        "i()Lnet/minecraft/core/Direction;": "getOrientation",
        "a(Lnet/minecraft/core/Direction;)V": "setOrientation",
        "a()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "j()Lnet/minecraft/world/level/block/Mirror;": "getMirror",
        "k()Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType;": "getType",
        "b()Ljava/lang/IllegalStateException;": "lambda$createBoundingBox$2",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$createTag$1",
        "c()Ljava/lang/IllegalArgumentException;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructurePiece$StructurePieceBlockSelector": {
      "fields": {
        "a": "next"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;IIIZ)V": "next",
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "getNext"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructurePieceAccessor": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/StructurePiece;)V": "addPiece",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/levelgen/structure/StructurePiece;": "findCollisionPiece"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureSet": {
      "fields": {
        "c": "structures",
        "d": "placement",
        "a": "DIRECT_CODEC",
        "b": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/core/Holder;I)Lnet/minecraft/world/level/levelgen/structure/StructureSet$StructureSelectionEntry;": "entry",
        "a(Lnet/minecraft/core/Holder;)Lnet/minecraft/world/level/levelgen/structure/StructureSet$StructureSelectionEntry;": "entry",
        "a()Ljava/util/List;": "structures",
        "b()Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacement;": "placement",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureSpawnOverride": {
      "fields": {
        "b": "boundingBox",
        "c": "spawns",
        "a": "CODEC"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/structure/StructureSpawnOverride$BoundingBoxType;": "boundingBox",
        "b()Lnet/minecraft/util/random/WeightedRandomList;": "spawns",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureStart": {
      "fields": {
        "a": "INVALID_START_ID",
        "b": "INVALID_START",
        "c": "LOGGER",
        "d": "structure",
        "e": "pieceContainer",
        "f": "chunkPos",
        "g": "references",
        "h": "cachedBoundingBox"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;J)Lnet/minecraft/world/level/levelgen/structure/StructureStart;": "loadStaticStart",
        "a()Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;)V": "placeInChunk",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "b()Z": "isValid",
        "c()Lnet/minecraft/world/level/ChunkPos;": "getChunkPos",
        "d()Z": "canBeReferenced",
        "e()V": "addReference",
        "f()I": "getReferences",
        "g()I": "getMaxReferences",
        "h()Lnet/minecraft/world/level/levelgen/structure/Structure;": "getStructure",
        "i()Ljava/util/List;": "getPieces"
      }
    },
    "net/minecraft/world/level/levelgen/structure/StructureType": {
      "fields": {
        "a": "BURIED_TREASURE",
        "b": "DESERT_PYRAMID",
        "c": "END_CITY",
        "d": "FORTRESS",
        "e": "IGLOO",
        "f": "JIGSAW",
        "g": "JUNGLE_TEMPLE",
        "h": "MINESHAFT",
        "i": "NETHER_FOSSIL",
        "j": "OCEAN_MONUMENT",
        "k": "OCEAN_RUIN",
        "l": "RUINED_PORTAL",
        "m": "SHIPWRECK",
        "n": "STRONGHOLD",
        "o": "SWAMP_HUT",
        "p": "WOODLAND_MANSION"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/StructureType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/DefinedStructurePiece": {
      "fields": {
        "h": "LOGGER",
        "a": "templateName",
        "b": "template",
        "c": "placeSettings",
        "d": "templatePosition"
      },
      "methods": {
        "b()Lnet/minecraft/resources/ResourceLocation;": "makeTemplateLocation",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "handleDataMarker",
        "a(III)V": "move",
        "a()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "c()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;": "template",
        "d()Lnet/minecraft/core/BlockPos;": "templatePosition",
        "e()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "placeSettings"
      }
    },
    "net/minecraft/world/level/levelgen/structure/TerrainAdjustment": {
      "fields": {
        "a": "NONE",
        "b": "BURY",
        "c": "BEARD_THIN",
        "d": "BEARD_BOX",
        "e": "CODEC",
        "f": "id",
        "g": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a()[Lnet/minecraft/world/level/levelgen/structure/TerrainAdjustment;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pieces/PiecesContainer": {
      "fields": {
        "a": "pieces",
        "b": "LOGGER",
        "c": "JIGSAW_RENAME",
        "d": "RENAMES"
      },
      "methods": {
        "a()Z": "isEmpty",
        "a(Lnet/minecraft/core/BlockPos;)Z": "isInsidePiece",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;)Lnet/minecraft/nbt/Tag;": "save",
        "a(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;)Lnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;": "load",
        "b()Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "calculateBoundingBox",
        "c()Ljava/util/List;": "pieces"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext": {
      "fields": {
        "b": "registryAccess",
        "c": "structureTemplateManager"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;": "fromLevel",
        "b()Lnet/minecraft/core/RegistryAccess;": "registryAccess",
        "c()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;": "structureTemplateManager"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pieces/WorldGenFeatureStructurePieceType": {
      "fields": {
        "a": "MINE_SHAFT_CORRIDOR",
        "b": "MINE_SHAFT_CROSSING",
        "c": "MINE_SHAFT_ROOM",
        "d": "MINE_SHAFT_STAIRS",
        "e": "NETHER_FORTRESS_BRIDGE_CROSSING",
        "f": "NETHER_FORTRESS_BRIDGE_END_FILLER",
        "g": "NETHER_FORTRESS_BRIDGE_STRAIGHT",
        "h": "NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS",
        "i": "NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY",
        "j": "NETHER_FORTRESS_CASTLE_ENTRANCE",
        "k": "NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING",
        "l": "NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN",
        "m": "NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR",
        "n": "NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN",
        "o": "NETHER_FORTRESS_CASTLE_STALK_ROOM",
        "p": "NETHER_FORTRESS_MONSTER_THRONE",
        "q": "NETHER_FORTRESS_ROOM_CROSSING",
        "r": "NETHER_FORTRESS_STAIRS_ROOM",
        "s": "NETHER_FORTRESS_START",
        "t": "STRONGHOLD_CHEST_CORRIDOR",
        "u": "STRONGHOLD_FILLER_CORRIDOR",
        "v": "STRONGHOLD_FIVE_CROSSING",
        "w": "STRONGHOLD_LEFT_TURN",
        "x": "STRONGHOLD_LIBRARY",
        "y": "STRONGHOLD_PORTAL_ROOM",
        "z": "STRONGHOLD_PRISON_HALL",
        "A": "STRONGHOLD_RIGHT_TURN",
        "B": "STRONGHOLD_ROOM_CROSSING",
        "C": "STRONGHOLD_STAIRS_DOWN",
        "D": "STRONGHOLD_START",
        "E": "STRONGHOLD_STRAIGHT",
        "F": "STRONGHOLD_STRAIGHT_STAIRS_DOWN",
        "G": "JUNGLE_PYRAMID_PIECE",
        "H": "OCEAN_RUIN",
        "I": "IGLOO",
        "J": "RUINED_PORTAL",
        "K": "SWAMPLAND_HUT",
        "L": "DESERT_PYRAMID_PIECE",
        "M": "OCEAN_MONUMENT_BUILDING",
        "N": "OCEAN_MONUMENT_CORE_ROOM",
        "O": "OCEAN_MONUMENT_DOUBLE_X_ROOM",
        "P": "OCEAN_MONUMENT_DOUBLE_XY_ROOM",
        "Q": "OCEAN_MONUMENT_DOUBLE_Y_ROOM",
        "R": "OCEAN_MONUMENT_DOUBLE_YZ_ROOM",
        "S": "OCEAN_MONUMENT_DOUBLE_Z_ROOM",
        "T": "OCEAN_MONUMENT_ENTRY_ROOM",
        "U": "OCEAN_MONUMENT_PENTHOUSE",
        "V": "OCEAN_MONUMENT_SIMPLE_ROOM",
        "W": "OCEAN_MONUMENT_SIMPLE_TOP_ROOM",
        "X": "OCEAN_MONUMENT_WING_ROOM",
        "Y": "END_CITY_PIECE",
        "Z": "WOODLAND_MANSION_PIECE",
        "aa": "BURIED_TREASURE_PIECE",
        "ab": "SHIPWRECK_PIECE",
        "ac": "NETHER_FOSSIL",
        "ad": "JIGSAW"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType;Ljava/lang/String;)Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType;": "setFullContextPieceId",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType$ContextlessType;Ljava/lang/String;)Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType;": "setPieceId",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType$StructureTemplateType;Ljava/lang/String;)Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceType;": "setTemplatePieceId"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder": {
      "fields": {
        "a": "pieces"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/StructurePiece;)V": "addPiece",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/levelgen/structure/StructurePiece;": "findCollisionPiece",
        "a(I)V": "offsetPiecesVertically",
        "a(IILnet/minecraft/util/RandomSource;I)I": "moveBelowSeaLevel",
        "a(Lnet/minecraft/util/RandomSource;II)V": "moveInsideHeights",
        "a()Lnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;": "build",
        "b()V": "clear",
        "c()Z": "isEmpty",
        "d()Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox"
      }
    },
    "net/minecraft/world/level/levelgen/structure/placement/ConcentricRingsStructurePlacement": {
      "fields": {
        "a": "CODEC",
        "c": "distance",
        "d": "spread",
        "e": "count",
        "f": "preferredBiomes"
      },
      "methods": {
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P9;": "codec",
        "a()I": "distance",
        "b()I": "spread",
        "c()I": "count",
        "d()Lnet/minecraft/core/HolderSet;": "preferredBiomes",
        "a(Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;II)Z": "isPlacementChunk",
        "e()Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacementType;": "type",
        "c(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement": {
      "fields": {
        "a": "CODEC",
        "c": "spacing",
        "d": "separation",
        "e": "spreadType"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/placement/RandomSpreadStructurePlacement;)Lcom/mojang/serialization/DataResult;": "validate",
        "a()I": "spacing",
        "b()I": "separation",
        "c()Lnet/minecraft/world/level/levelgen/structure/placement/RandomSpreadType;": "spreadType",
        "a(JII)Lnet/minecraft/world/level/ChunkPos;": "getPotentialStructureChunk",
        "a(Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;II)Z": "isPlacementChunk",
        "e()Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacementType;": "type",
        "d()Ljava/lang/String;": "lambda$validate$1",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/placement/RandomSpreadType": {
      "fields": {
        "a": "LINEAR",
        "b": "TRIANGULAR",
        "c": "CODEC",
        "d": "id",
        "e": "$VALUES"
      },
      "methods": {
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Lnet/minecraft/util/RandomSource;I)I": "evaluate",
        "a()[Lnet/minecraft/world/level/levelgen/structure/placement/RandomSpreadType;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/structure/placement/StructurePlacement": {
      "fields": {
        "b": "CODEC",
        "a": "HIGHLY_ARBITRARY_RANDOM_SALT",
        "c": "locateOffset",
        "d": "frequencyReductionMethod",
        "e": "frequency",
        "f": "salt",
        "g": "exclusionZone"
      },
      "methods": {
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/Products$P5;": "placementCodec",
        "f()Lnet/minecraft/core/Vec3i;": "locateOffset",
        "g()Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacement$FrequencyReductionMethod;": "frequencyReductionMethod",
        "h()F": "frequency",
        "i()I": "salt",
        "j()Ljava/util/Optional;": "exclusionZone",
        "b(Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;II)Z": "isStructureChunk",
        "a(Lnet/minecraft/world/level/chunk/ChunkGeneratorStructureState;II)Z": "isPlacementChunk",
        "a(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/core/BlockPos;": "getLocatePos",
        "e()Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacementType;": "type",
        "a(JIIIF)Z": "probabilityReducer",
        "b(JIIIF)Z": "legacyProbabilityReducerWithDouble",
        "c(JIIIF)Z": "legacyArbitrarySaltProbabilityReducer",
        "d(JIIIF)Z": "legacyPillagerOutpostReducer"
      }
    },
    "net/minecraft/world/level/levelgen/structure/placement/StructurePlacementType": {
      "fields": {
        "a": "RANDOM_SPREAD",
        "b": "CONCENTRIC_RINGS"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/placement/StructurePlacementType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolEmpty": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledJigsawBlocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;Z)Z": "place",
        "a()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "getType",
        "b()Lnet/minecraft/world/level/levelgen/structure/pools/EmptyPoolElement;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolFeature": {
      "fields": {
        "a": "CODEC",
        "b": "feature",
        "c": "defaultJigsawNBT"
      },
      "methods": {
        "b()Lnet/minecraft/nbt/CompoundTag;": "fillDefaultJigsawNBT",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledJigsawBlocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;Z)Z": "place",
        "a()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/FeaturePoolElement;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructureJigsawJunction": {
      "fields": {
        "a": "sourceX",
        "b": "sourceGroundY",
        "c": "sourceZ",
        "d": "deltaY",
        "e": "destProjection"
      },
      "methods": {
        "a()I": "getSourceX",
        "b()I": "getSourceGroundY",
        "c()I": "getSourceZ",
        "d()I": "getDeltaY",
        "e()Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;": "getDestProjection",
        "a(Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/Dynamic;": "serialize",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/level/levelgen/structure/pools/JigsawJunction;": "deserialize"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructureJigsawPlacement": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/core/Holder;Ljava/util/Optional;ILnet/minecraft/core/BlockPos;ZLjava/util/Optional;I)Ljava/util/Optional;": "addPieces",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/levelgen/WorldgenRandom;)Ljava/util/Optional;": "getRandomNamedJigsaw",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/Holder;Lnet/minecraft/resources/ResourceLocation;ILnet/minecraft/core/BlockPos;Z)Z": "generateJigsaw",
        "a(Lnet/minecraft/core/Holder;)Z": "lambda$generateJigsaw$2",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/lang/String;": "lambda$addPieces$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolLegacySingle": {
      "fields": {
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Z)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "getSettings",
        "a()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolList": {
      "fields": {
        "a": "CODEC",
        "b": "elements"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledJigsawBlocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;Z)Z": "place",
        "a()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;": "setProjection",
        "b(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)V": "setProjectionOnEachElement",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;)V": "lambda$setProjectionOnEachElement$5",
        "b()Ljava/lang/IllegalStateException;": "lambda$getBoundingBox$4",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "lambda$getBoundingBox$3",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;)Z": "lambda$getBoundingBox$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/ListPoolElement;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolSingle": {
      "fields": {
        "a": "TEMPLATE_CODEC",
        "b": "CODEC",
        "c": "template",
        "d": "processors"
      },
      "methods": {
        "a(Lcom/mojang/datafixers/util/Either;Lcom/mojang/serialization/DynamicOps;Ljava/lang/Object;)Lcom/mojang/serialization/DataResult;": "encodeTemplate",
        "b()Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "processorsCodec",
        "c()Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "templateCodec",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;": "getTemplate",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Z)Ljava/util/List;": "getDataMarkers",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledJigsawBlocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;Z)Z": "place",
        "a(Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Z)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "getSettings",
        "a()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/SinglePoolElement;)Lcom/mojang/datafixers/util/Either;": "lambda$templateCodec$3",
        "b(Lnet/minecraft/world/level/levelgen/structure/pools/SinglePoolElement;)Lnet/minecraft/core/Holder;": "lambda$processorsCodec$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "h()Ljava/lang/String;": "lambda$encodeTemplate$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolStructure": {
      "fields": {
        "e": "CODEC",
        "a": "EMPTY",
        "b": "projection"
      },
      "methods": {
        "d()Lcom/mojang/serialization/codecs/RecordCodecBuilder;": "projectionCodec",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledJigsawBlocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/util/RandomSource;Z)Z": "place",
        "a()Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "getType",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "handleDataMarker",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;": "setProjection",
        "e()Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;": "getProjection",
        "f()I": "getGroundLevelDelta",
        "g()Ljava/util/function/Function;": "empty",
        "a(Ljava/lang/String;)Ljava/util/function/Function;": "legacy",
        "a(Ljava/lang/String;Lnet/minecraft/core/Holder;)Ljava/util/function/Function;": "legacy",
        "b(Ljava/lang/String;)Ljava/util/function/Function;": "single",
        "b(Ljava/lang/String;Lnet/minecraft/core/Holder;)Ljava/util/function/Function;": "single",
        "a(Lnet/minecraft/core/Holder;)Ljava/util/function/Function;": "feature",
        "a(Ljava/util/List;)Ljava/util/function/Function;": "list",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/ListPoolElement;": "lambda$list$7",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;Ljava/util/function/Function;)Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;": "lambda$list$6",
        "a(Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/FeaturePoolElement;": "lambda$feature$5",
        "a(Ljava/lang/String;Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/SinglePoolElement;": "lambda$single$4",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/SinglePoolElement;": "lambda$single$3",
        "b(Ljava/lang/String;Lnet/minecraft/core/Holder;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/LegacySinglePoolElement;": "lambda$legacy$2",
        "b(Ljava/lang/String;Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/LegacySinglePoolElement;": "lambda$legacy$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;)Lnet/minecraft/world/level/levelgen/structure/pools/EmptyPoolElement;": "lambda$empty$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePools": {
      "fields": {
        "a": "SINGLE",
        "b": "LIST",
        "c": "FEATURE",
        "d": "EMPTY",
        "e": "LEGACY"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElementType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolTemplate": {
      "fields": {
        "c": "SIZE_UNSET",
        "d": "CODEC_REFERENCE",
        "a": "DIRECT_CODEC",
        "b": "CODEC",
        "e": "rawTemplates",
        "f": "templates",
        "g": "fallback",
        "h": "maxSize"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;)I": "getMaxSize",
        "a()Lnet/minecraft/core/Holder;": "getFallback",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;": "getRandomTemplate",
        "b(Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getShuffledTemplates",
        "b()I": "size",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;)I": "lambda$getMaxSize$3",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructurePoolElement;)Z": "lambda$getMaxSize$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/pools/WorldGenFeatureDefinedStructurePoolTemplate$Matching": {
      "fields": {
        "a": "TERRAIN_MATCHING",
        "b": "RIGID",
        "c": "CODEC",
        "d": "name",
        "e": "processors",
        "f": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getName",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;": "byName",
        "b()Lcom/google/common/collect/ImmutableList;": "getProcessors",
        "c()Ljava/lang/String;": "getSerializedName",
        "d()[Lnet/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool$Projection;": "$values"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/BuriedTreasurePieces": {},
    "net/minecraft/world/level/levelgen/structure/structures/BuriedTreasureStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/DesertPyramidPiece": {
      "fields": {
        "h": "WIDTH",
        "i": "DEPTH",
        "j": "hasPlacedChest",
        "k": "potentialSuspiciousSandWorldPositions",
        "l": "randomCollapsedRoofPos"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "addCellar",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "addCellarStairs",
        "b(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "addCellarRoom",
        "c(III)V": "placeSand",
        "a(IIIIII)V": "placeSandBox",
        "a(Lnet/minecraft/world/level/WorldGenLevel;IIILnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "placeCollapsedRoofPiece",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;IIIII)V": "placeCollapsedRoof",
        "b()Ljava/util/List;": "getPotentialSuspiciousSandWorldPositions",
        "c()Lnet/minecraft/core/BlockPos;": "getRandomCollapsedRoofPos"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/DesertPyramidStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;)V": "afterPlace",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)V": "placeSuspiciousSand",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BrushableBlockEntity;)V": "lambda$placeSuspiciousSand$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/EndCityPieces": {
      "fields": {
        "a": "MAX_GEN_DEPTH",
        "b": "HOUSE_TOWER_GENERATOR",
        "c": "TOWER_BRIDGES",
        "d": "TOWER_GENERATOR",
        "e": "TOWER_BRIDGE_GENERATOR",
        "f": "FAT_TOWER_BRIDGES",
        "g": "FAT_TOWER_GENERATOR"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/levelgen/structure/structures/EndCityPieces$EndCityPiece;Lnet/minecraft/core/BlockPos;Ljava/lang/String;Lnet/minecraft/world/level/block/Rotation;Z)Lnet/minecraft/world/level/levelgen/structure/structures/EndCityPieces$EndCityPiece;": "addPiece",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Ljava/util/List;Lnet/minecraft/util/RandomSource;)V": "startHouseTower",
        "a(Ljava/util/List;Lnet/minecraft/world/level/levelgen/structure/structures/EndCityPieces$EndCityPiece;)Lnet/minecraft/world/level/levelgen/structure/structures/EndCityPieces$EndCityPiece;": "addHelper",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/levelgen/structure/structures/EndCityPieces$SectionGenerator;ILnet/minecraft/world/level/levelgen/structure/structures/EndCityPieces$EndCityPiece;Lnet/minecraft/core/BlockPos;Ljava/util/List;Lnet/minecraft/util/RandomSource;)Z": "recursiveChildren"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/EndCityStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/IglooPieces": {
      "fields": {
        "a": "GENERATION_HEIGHT",
        "b": "STRUCTURE_LOCATION_IGLOO",
        "c": "STRUCTURE_LOCATION_LADDER",
        "d": "STRUCTURE_LOCATION_LABORATORY",
        "e": "PIVOTS",
        "f": "OFFSETS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;)V": "addPieces"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/IglooStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/JigsawStructure": {
      "fields": {
        "d": "MAX_TOTAL_STRUCTURE_RANGE",
        "e": "CODEC",
        "f": "startPool",
        "g": "startJigsawName",
        "h": "maxDepth",
        "i": "startHeight",
        "j": "useExpansionHack",
        "k": "projectStartToHeightmap",
        "l": "maxDistanceFromCenter"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Lcom/mojang/serialization/DataResult;": "verifyRange",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "f()Ljava/lang/String;": "lambda$verifyRange$8",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$7",
        "b(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Ljava/lang/Integer;": "lambda$static$6",
        "c(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Ljava/util/Optional;": "lambda$static$5",
        "d(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Ljava/lang/Boolean;": "lambda$static$4",
        "e(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;": "lambda$static$3",
        "f(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Ljava/lang/Integer;": "lambda$static$2",
        "g(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Ljava/util/Optional;": "lambda$static$1",
        "h(Lnet/minecraft/world/level/levelgen/structure/structures/JigsawStructure;)Lnet/minecraft/core/Holder;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/JungleTemplePiece": {
      "fields": {
        "h": "WIDTH",
        "i": "DEPTH",
        "j": "placedMainChest",
        "k": "placedHiddenChest",
        "l": "placedTrap1",
        "m": "placedTrap2",
        "n": "STONE_SELECTOR"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/JungleTempleStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/MineshaftPieces": {
      "fields": {
        "b": "LOGGER",
        "c": "DEFAULT_SHAFT_WIDTH",
        "d": "DEFAULT_SHAFT_HEIGHT",
        "e": "DEFAULT_SHAFT_LENGTH",
        "f": "MAX_PILLAR_HEIGHT",
        "g": "MAX_CHAIN_HEIGHT",
        "h": "MAX_DEPTH",
        "a": "MAGIC_START_Y"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;ILnet/minecraft/world/level/levelgen/structure/structures/MineshaftStructure$Type;)Lnet/minecraft/world/level/levelgen/structure/structures/MineshaftPieces$MineShaftPiece;": "createRandomShaftPiece",
        "a(Lnet/minecraft/world/level/levelgen/structure/StructurePiece;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;I)Lnet/minecraft/world/level/levelgen/structure/structures/MineshaftPieces$MineShaftPiece;": "generateAndAddPiece"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/MineshaftStructure": {
      "fields": {
        "d": "CODEC",
        "e": "type"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)I": "generatePiecesAndAdjust",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/MineshaftStructure;)Lnet/minecraft/world/level/levelgen/structure/structures/MineshaftStructure$Type;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces": {
      "fields": {
        "b": "MAX_DEPTH",
        "c": "LOWEST_Y_POSITION",
        "a": "MAGIC_START_Y",
        "d": "BRIDGE_PIECE_WEIGHTS",
        "e": "CASTLE_PIECE_WEIGHTS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces$PieceWeight;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;I)Lnet/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces$NetherBridgePiece;": "findAndCreateBridgePieceFactory"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/NetherFortressStructure": {
      "fields": {
        "d": "FORTRESS_ENEMIES",
        "e": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/NetherFossilPieces": {
      "fields": {
        "a": "FOSSILS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)V": "addPieces"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/NetherFossilStructure": {
      "fields": {
        "d": "CODEC",
        "e": "height"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/WorldgenRandom;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$2",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/NetherFossilStructure;)Lnet/minecraft/world/level/levelgen/heightproviders/HeightProvider;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/OceanMonumentPieces": {},
    "net/minecraft/world/level/levelgen/structure/structures/OceanMonumentStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/WorldgenRandom;)Lnet/minecraft/world/level/levelgen/structure/StructurePiece;": "createTopPiece",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "a(Lnet/minecraft/world/level/ChunkPos;JLnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;)Lnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;": "regeneratePiecesAfterLoad",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/OceanRuinPieces": {
      "fields": {
        "a": "WARM_SUSPICIOUS_BLOCK_PROCESSOR",
        "b": "COLD_SUSPICIOUS_BLOCK_PROCESSOR",
        "c": "WARM_RUINS",
        "d": "RUINS_BRICK",
        "e": "RUINS_CRACKED",
        "f": "RUINS_MOSSY",
        "g": "BIG_RUINS_BRICK",
        "h": "BIG_RUINS_MOSSY",
        "i": "BIG_RUINS_CRACKED",
        "j": "BIG_WARM_RUINS"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessor;": "archyRuleProcessor",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/resources/ResourceLocation;": "getSmallWarmRuin",
        "b(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/resources/ResourceLocation;": "getBigWarmRuin",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure;)V": "addPieces",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;)V": "addClusterRuins",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/core/BlockPos;)Ljava/util/List;": "allPositions",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure;ZF)V": "addPiece"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure": {
      "fields": {
        "d": "CODEC",
        "e": "biomeTemp",
        "f": "largeProbability",
        "g": "clusterProbability"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$4",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$3",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure;)Ljava/lang/Float;": "lambda$static$2",
        "b(Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure;)Ljava/lang/Float;": "lambda$static$1",
        "c(Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure;)Lnet/minecraft/world/level/levelgen/structure/structures/OceanRuinStructure$Type;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece": {
      "fields": {
        "h": "LOGGER",
        "i": "PROBABILITY_OF_GOLD_GONE",
        "j": "PROBABILITY_OF_MAGMA_INSTEAD_OF_NETHERRACK",
        "k": "PROBABILITY_OF_MAGMA_INSTEAD_OF_LAVA",
        "l": "verticalPlacement",
        "m": "properties"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "makeSettings",
        "a(Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$VerticalPlacement;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$Properties;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "makeSettings",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$VerticalPlacement;Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$Properties;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;": "getLavaProcessorRule",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "handleDataMarker",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "maybeAddVines",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "maybeAddLeavesAbove",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;)V": "addNetherrackDripColumnsBelowPortal",
        "c(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "addNetherrackDripColumn",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;)V": "spreadNetherrack",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "canBlockBeReplacedByNetherrackOrMagma",
        "d(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "placeNetherrackOrMagma",
        "a(Lnet/minecraft/world/level/LevelAccessor;IILnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$VerticalPlacement;)I": "getSurfaceY",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$VerticalPlacement;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "getHeightMapType",
        "a(Lnet/minecraft/world/level/block/Block;FLnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;": "getBlockReplaceRule",
        "a(Lnet/minecraft/world/level/block/Block;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;": "getBlockReplaceRule",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/core/BlockPos;)V": "lambda$postProcess$2",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$addAdditionalSaveData$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure": {
      "fields": {
        "e": "STRUCTURE_LOCATION_PORTALS",
        "f": "STRUCTURE_LOCATION_GIANT_PORTALS",
        "g": "PROBABILITY_OF_GIANT_PORTAL",
        "h": "MIN_Y_INDEX",
        "i": "setups",
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/WorldgenRandom;F)Z": "sample",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Holder;)Z": "isCold",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$VerticalPlacement;ZIILnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;)I": "findSuitableY",
        "a(Lnet/minecraft/util/RandomSource;II)I": "getRandomWithinInterval",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/world/level/LevelHeightAccessor;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/NoiseColumn;": "lambda$findSuitableY$3",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure$Setup;Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalPiece$Properties;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/RandomState;Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$2",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/RuinedPortalStructure;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/ShipwreckPieces": {
      "fields": {
        "a": "PIVOT",
        "b": "STRUCTURE_LOCATION_BEACHED",
        "c": "STRUCTURE_LOCATION_OCEAN",
        "d": "MARKERS_TO_LOOT"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;Z)V": "addPieces"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/ShipwreckStructure": {
      "fields": {
        "d": "CODEC",
        "e": "isBeached"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$2",
        "b(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/ShipwreckStructure;)Ljava/lang/Boolean;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces": {
      "fields": {
        "b": "SMALL_DOOR_WIDTH",
        "c": "SMALL_DOOR_HEIGHT",
        "d": "MAX_DEPTH",
        "e": "LOWEST_Y_POSITION",
        "f": "CHECK_AIR",
        "a": "MAGIC_START_Y",
        "g": "STRONGHOLD_PIECE_WEIGHTS",
        "h": "currentPieces",
        "i": "imposedPiece",
        "j": "totalWeight",
        "k": "SMOOTH_STONE_SELECTOR"
      },
      "methods": {
        "a()V": "resetPieces",
        "b()Z": "updatePieceWeight",
        "a(Ljava/lang/Class;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;I)Lnet/minecraft/world/level/levelgen/structure/structures/StrongholdPieces$StrongholdPiece;": "findAndCreatePieceFactory",
        "a(Lnet/minecraft/world/level/levelgen/structure/structures/StrongholdPieces$StartPiece;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;I)Lnet/minecraft/world/level/levelgen/structure/structures/StrongholdPieces$StrongholdPiece;": "generatePieceFromSmallDoor",
        "b(Lnet/minecraft/world/level/levelgen/structure/structures/StrongholdPieces$StartPiece;Lnet/minecraft/world/level/levelgen/structure/StructurePieceAccessor;Lnet/minecraft/util/RandomSource;IIILnet/minecraft/core/Direction;I)Lnet/minecraft/world/level/levelgen/structure/StructurePiece;": "generateAndAddPiece"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/StrongholdStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece": {
      "fields": {
        "h": "spawnedWitch",
        "i": "spawnedCat"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePieceSerializationContext;Lnet/minecraft/nbt/CompoundTag;)V": "addAdditionalSaveData",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/core/BlockPos;)V": "postProcess",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "spawnCat"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/SwampHutStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)V": "generatePieces",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/WoodlandMansionPieces": {
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Ljava/util/List;Lnet/minecraft/util/RandomSource;)V": "generateMansion",
        "a([Ljava/lang/String;)V": "main"
      }
    },
    "net/minecraft/world/level/levelgen/structure/structures/WoodlandMansionStructure": {
      "fields": {
        "d": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;)Ljava/util/Optional;": "findGenerationPoint",
        "a(Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;)V": "generatePieces",
        "a(Lnet/minecraft/world/level/WorldGenLevel;Lnet/minecraft/world/level/StructureManager;Lnet/minecraft/world/level/chunk/ChunkGenerator;Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/level/levelgen/structure/pieces/PiecesContainer;)V": "afterPlace",
        "e()Lnet/minecraft/world/level/levelgen/structure/StructureType;": "type",
        "a(Lnet/minecraft/world/level/levelgen/structure/Structure$GenerationContext;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/world/level/levelgen/structure/pieces/StructurePiecesBuilder;)V": "lambda$findGenerationPoint$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureTestTrue": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/AlwaysTrueTest;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestAxisAlignedLinear": {
      "fields": {
        "a": "CODEC",
        "b": "minChance",
        "d": "maxChance",
        "e": "minDist",
        "f": "maxDist",
        "g": "axis"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest;)Lnet/minecraft/core/Direction$Axis;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest;)Ljava/lang/Integer;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest;)Ljava/lang/Integer;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest;)Ljava/lang/Float;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/structure/templatesystem/AxisAlignedLinearPosTest;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorBlackstoneReplace": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE",
        "c": "replacements"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Ljava/util/HashMap;)V": "lambda$new$1",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlackstoneReplaceProcessor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorBlockAge": {
      "fields": {
        "a": "CODEC",
        "b": "PROBABILITY_OF_REPLACING_FULL_BLOCK",
        "c": "PROBABILITY_OF_REPLACING_STAIRS",
        "d": "PROBABILITY_OF_REPLACING_OBSIDIAN",
        "e": "NON_MOSSY_REPLACEMENTS",
        "f": "mossiness"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "maybeReplaceFullStoneBlock",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "maybeReplaceStairs",
        "b(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "maybeReplaceSlab",
        "c(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "maybeReplaceWall",
        "d(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/block/state/BlockState;": "maybeReplaceObsidian",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/block/state/BlockState;": "getRandomFacingStairs",
        "a(Lnet/minecraft/util/RandomSource;[Lnet/minecraft/world/level/block/state/BlockState;[Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getRandomBlock",
        "a(Lnet/minecraft/util/RandomSource;[Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/block/state/BlockState;": "getRandomBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlockAgeProcessor;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorBlockIgnore": {
      "fields": {
        "a": "CODEC",
        "b": "STRUCTURE_BLOCK",
        "c": "AIR",
        "d": "STRUCTURE_AND_AIR",
        "e": "toIgnore"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlockIgnoreProcessor;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureTestBlock": {
      "fields": {
        "a": "CODEC",
        "b": "block"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlockMatchTest;)Lnet/minecraft/world/level/block/Block;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorRotation": {
      "fields": {
        "a": "CODEC",
        "b": "rottableBlocks",
        "c": "integrity"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlockRotProcessor;)Ljava/util/Optional;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureTestBlockState": {
      "fields": {
        "a": "CODEC",
        "b": "blockState"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/BlockStateMatchTest;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/CappedProcessor": {
      "fields": {
        "a": "CODEC",
        "b": "delegate",
        "c": "limit"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Ljava/util/List;Ljava/util/List;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Ljava/util/List;": "finalizeProcessing",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/CappedProcessor;)Lnet/minecraft/util/valueproviders/IntProvider;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/CappedProcessor;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorGravity": {
      "fields": {
        "a": "CODEC",
        "b": "heightmap",
        "c": "offset"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor;)Ljava/lang/Integer;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/GravityProcessor;)Lnet/minecraft/world/level/levelgen/Heightmap$Types;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorJigsawReplacement": {
      "fields": {
        "c": "LOGGER",
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/JigsawReplacementProcessor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorLavaSubmergedBlock": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/LavaSubmergedBlockProcessor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestLinear": {
      "fields": {
        "a": "CODEC",
        "b": "minChance",
        "d": "maxChance",
        "e": "minDist",
        "f": "maxDist"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$4",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest;)Ljava/lang/Integer;": "lambda$static$3",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest;)Ljava/lang/Integer;": "lambda$static$2",
        "c(Lnet/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest;)Ljava/lang/Float;": "lambda$static$1",
        "d(Lnet/minecraft/world/level/levelgen/structure/templatesystem/LinearPosTest;)Ljava/lang/Float;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorNop": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/NopProcessor;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestTrue": {
      "fields": {
        "a": "CODEC",
        "b": "INSTANCE"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType;": "getType",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosAlwaysTrueTest;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest": {
      "fields": {
        "c": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType;": "getType"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType": {
      "fields": {
        "a": "ALWAYS_TRUE_TEST",
        "b": "LINEAR_POS_TEST",
        "c": "AXIS_ALIGNED_LINEAR_POS_TEST"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTestType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorPredicates": {
      "fields": {
        "a": "DEFAULT_BLOCK_ENTITY_MODIFIER",
        "b": "CODEC",
        "c": "inputPredicate",
        "d": "locPredicate",
        "e": "posPredicate",
        "f": "outputState",
        "g": "blockEntityModifier"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/block/state/BlockState;": "getOutputState",
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "getOutputTag",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifier;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/PosRuleTest;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTest;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProcessorRule;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTest;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/ProtectedBlockProcessor": {
      "fields": {
        "a": "cannotReplace",
        "b": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/ProtectedBlockProcessor;)Lnet/minecraft/tags/TagKey;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureTestRandomBlock": {
      "fields": {
        "a": "CODEC",
        "b": "block",
        "d": "probability"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockMatchTest;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockMatchTest;)Lnet/minecraft/world/level/block/Block;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureTestRandomBlockState": {
      "fields": {
        "a": "CODEC",
        "b": "blockState",
        "d": "probability"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockStateMatchTest;)Ljava/lang/Float;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/RandomBlockStateMatchTest;)Lnet/minecraft/world/level/block/state/BlockState;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessorRule": {
      "fields": {
        "a": "CODEC",
        "b": "rules"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleProcessor;)Ljava/util/List;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureRuleTest": {
      "fields": {
        "c": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureRuleTestType": {
      "fields": {
        "a": "ALWAYS_TRUE_TEST",
        "b": "BLOCK_TEST",
        "c": "BLOCKSTATE_TEST",
        "d": "TAG_TEST",
        "e": "RANDOM_BLOCK_TEST",
        "f": "RANDOM_BLOCKSTATE_TEST"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureInfo": {
      "fields": {
        "a": "mirror",
        "b": "rotation",
        "c": "rotationPivot",
        "d": "ignoreEntities",
        "e": "boundingBox",
        "f": "keepLiquids",
        "g": "random",
        "h": "palette",
        "i": "processors",
        "j": "knownShape",
        "k": "finalizeEntities"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "copy",
        "a(Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setMirror",
        "a(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setRotation",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setRotationPivot",
        "a(Z)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setIgnoreEntities",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setBoundingBox",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setRandom",
        "b(Z)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setKeepLiquids",
        "c(Z)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setKnownShape",
        "b()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "clearProcessors",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessor;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "addProcessor",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessor;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "popProcessor",
        "c()Lnet/minecraft/world/level/block/Mirror;": "getMirror",
        "d()Lnet/minecraft/world/level/block/Rotation;": "getRotation",
        "e()Lnet/minecraft/core/BlockPos;": "getRotationPivot",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/util/RandomSource;": "getRandom",
        "f()Z": "isIgnoreEntities",
        "g()Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "h()Z": "getKnownShape",
        "i()Ljava/util/List;": "getProcessors",
        "j()Z": "shouldKeepLiquids",
        "a(Ljava/util/List;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$Palette;": "getRandomPalette",
        "d(Z)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;": "setFinalizeEntities",
        "k()Z": "shouldFinalizeEntities"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureProcessor": {
      "methods": {
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;": "processBlock",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "getType",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Ljava/util/List;Ljava/util/List;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;)Ljava/util/List;": "finalizeProcessing"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/ProcessorList": {
      "fields": {
        "a": "list"
      },
      "methods": {
        "a()Ljava/util/List;": "list"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureStructureProcessorType": {
      "fields": {
        "a": "SINGLE_CODEC",
        "b": "LIST_OBJECT_CODEC",
        "c": "DIRECT_CODEC",
        "d": "LIST_CODEC",
        "e": "BLOCK_IGNORE",
        "f": "BLOCK_ROT",
        "g": "GRAVITY",
        "h": "JIGSAW_REPLACEMENT",
        "i": "RULE",
        "j": "NOP",
        "k": "BLOCK_AGE",
        "l": "BLACKSTONE_REPLACE",
        "m": "LAVA_SUBMERGED_BLOCK",
        "n": "PROTECTED_BLOCKS",
        "o": "CAPPED"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$3",
        "a(Lcom/mojang/datafixers/util/Either;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorList;": "lambda$static$2",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorList;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorList;": "lambda$static$1",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorList;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureProcessorList;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructure": {
      "fields": {
        "a": "PALETTE_TAG",
        "b": "PALETTE_LIST_TAG",
        "c": "ENTITIES_TAG",
        "d": "BLOCKS_TAG",
        "e": "BLOCK_TAG_POS",
        "f": "BLOCK_TAG_STATE",
        "g": "BLOCK_TAG_NBT",
        "h": "ENTITY_TAG_POS",
        "i": "ENTITY_TAG_BLOCKPOS",
        "j": "ENTITY_TAG_NBT",
        "k": "SIZE_TAG",
        "l": "palettes",
        "m": "entityInfoList",
        "n": "size",
        "o": "author"
      },
      "methods": {
        "a()Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Ljava/lang/String;)V": "setAuthor",
        "b()Ljava/lang/String;": "getAuthor",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Vec3i;ZLnet/minecraft/world/level/block/Block;)V": "fillFromWorld",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate$StructureBlockInfo;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V": "addToLists",
        "a(Ljava/util/List;Ljava/util/List;Ljava/util/List;)Ljava/util/List;": "buildInfoList",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)V": "fillEntityList",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/world/level/block/Block;)Ljava/util/List;": "filterBlocks",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/world/level/block/Block;Z)Lit/unimi/dsi/fastutil/objects/ObjectArrayList;": "filterBlocks",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "calculateConnectedPosition",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "calculateRelativePosition",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/util/RandomSource;I)Z": "placeInWorld",
        "a(Lnet/minecraft/world/level/LevelAccessor;ILnet/minecraft/world/phys/shapes/DiscreteVoxelShape;III)V": "updateShapeAtEdge",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Ljava/util/List;)Ljava/util/List;": "processBlockInfos",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Z)V": "placeEntities",
        "a(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/nbt/CompoundTag;)Ljava/util/Optional;": "createEntityIgnoreException",
        "a(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/Vec3i;": "getSize",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "transform",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "transform",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;": "getZeroPositionWithTransform",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/world/level/block/Rotation;II)Lnet/minecraft/core/BlockPos;": "getZeroPositionWithTransform",
        "b(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Rotation;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Mirror;Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/level/levelgen/structure/BoundingBox;": "getBoundingBox",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/nbt/CompoundTag;)V": "load",
        "a(Lnet/minecraft/core/HolderGetter;Lnet/minecraft/nbt/ListTag;Lnet/minecraft/nbt/ListTag;)V": "loadPalette",
        "a([I)Lnet/minecraft/nbt/ListTag;": "newIntegerList",
        "a([D)Lnet/minecraft/nbt/ListTag;": "newDoubleList"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructure$BlockInfo": {
      "fields": {
        "a": "pos",
        "b": "state",
        "c": "nbt"
      },
      "methods": {
        "a()Lnet/minecraft/core/BlockPos;": "pos",
        "b()Lnet/minecraft/world/level/block/state/BlockState;": "state",
        "c()Lnet/minecraft/nbt/CompoundTag;": "nbt"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructure$EntityInfo": {
      "fields": {
        "a": "pos",
        "b": "blockPos",
        "c": "nbt"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager": {
      "fields": {
        "a": "LOGGER",
        "b": "STRUCTURE_DIRECTORY_NAME",
        "c": "TEST_STRUCTURES_DIR",
        "d": "STRUCTURE_FILE_EXTENSION",
        "e": "STRUCTURE_TEXT_FILE_EXTENSION",
        "f": "structureRepository",
        "g": "fixerUpper",
        "i": "generatedDir",
        "j": "sources",
        "k": "blockLookup",
        "l": "LISTER"
      },
      "methods": {
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;": "getOrCreate",
        "b(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "get",
        "a()Ljava/util/stream/Stream;": "listTemplates",
        "e(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "tryLoad",
        "f(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "loadFromResource",
        "b()Ljava/util/stream/Stream;": "listResources",
        "g(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "loadFromTestStructures",
        "c()Ljava/util/stream/Stream;": "listTestStructures",
        "h(Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "loadFromGenerated",
        "d()Ljava/util/stream/Stream;": "listGenerated",
        "a(Ljava/nio/file/Path;)Ljava/util/stream/Stream;": "listGeneratedInNamespace",
        "a(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;)Ljava/util/stream/Stream;": "listFolderContents",
        "a(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/lang/String;": "relativize",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/nio/file/Path;)Ljava/util/Optional;": "loadFromSnbt",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager$InputStreamOpener;Ljava/util/function/Consumer;)Ljava/util/Optional;": "load",
        "a(Ljava/io/InputStream;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;": "readStructure",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate;": "readStructure",
        "c(Lnet/minecraft/resources/ResourceLocation;)Z": "save",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/lang/String;)Ljava/nio/file/Path;": "getPathToGeneratedStructure",
        "a(Ljava/nio/file/Path;Lnet/minecraft/resources/ResourceLocation;Ljava/lang/String;)Ljava/nio/file/Path;": "createPathToStructure",
        "b(Ljava/nio/file/Path;Lnet/minecraft/resources/ResourceLocation;Ljava/lang/String;)Ljava/nio/file/Path;": "createAndValidatePathToStructure",
        "d(Lnet/minecraft/resources/ResourceLocation;)V": "remove",
        "a(Ljava/lang/String;Ljava/util/function/Function;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/util/function/Consumer;)V": "lambda$listFolderContents$9",
        "a(Ljava/lang/String;Ljava/nio/file/Path;)Z": "lambda$listFolderContents$8",
        "a(ILjava/lang/String;)Ljava/lang/String;": "lambda$listFolderContents$7",
        "b(Ljava/nio/file/Path;)Ljava/util/stream/Stream;": "lambda$listGenerated$6",
        "c(Ljava/nio/file/Path;)Z": "lambda$listGenerated$5",
        "a(Ljava/nio/file/Path;Ljava/lang/Throwable;)V": "lambda$loadFromGenerated$4",
        "d(Ljava/nio/file/Path;)Ljava/io/InputStream;": "lambda$loadFromGenerated$3",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/lang/Throwable;)V": "lambda$loadFromResource$2",
        "i(Lnet/minecraft/resources/ResourceLocation;)Ljava/io/InputStream;": "lambda$loadFromResource$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager$Source;)Ljava/util/stream/Stream;": "lambda$listTemplates$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/DefinedStructureTestTag": {
      "fields": {
        "a": "CODEC",
        "b": "tag"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/util/RandomSource;)Z": "test",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType;": "getType",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/TagMatchTest;)Lnet/minecraft/tags/TagKey;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/AppendLoot": {
      "fields": {
        "b": "LOGGER",
        "a": "CODEC",
        "d": "lootTable"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "apply",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType;": "getType",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/Tag;)V": "lambda$apply$2",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/AppendLoot;)Lnet/minecraft/resources/ResourceLocation;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/AppendStatic": {
      "fields": {
        "a": "CODEC",
        "b": "tag"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "apply",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType;": "getType",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$1",
        "a(Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/AppendStatic;)Lnet/minecraft/nbt/CompoundTag;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/Clear": {
      "fields": {
        "b": "INSTANCE",
        "a": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "apply",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType;": "getType"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/Passthrough": {
      "fields": {
        "a": "INSTANCE",
        "b": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "apply",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType;": "getType"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifier": {
      "fields": {
        "c": "CODEC"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "apply",
        "a()Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType;": "getType"
      }
    },
    "net/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType": {
      "fields": {
        "a": "CLEAR",
        "b": "PASSTHROUGH",
        "c": "APPEND_STATIC",
        "d": "APPEND_LOOT"
      },
      "methods": {
        "a(Ljava/lang/String;Lcom/mojang/serialization/Codec;)Lnet/minecraft/world/level/levelgen/structure/templatesystem/rule/blockentity/RuleBlockEntityModifierType;": "register",
        "a(Lcom/mojang/serialization/Codec;)Lcom/mojang/serialization/Codec;": "lambda$register$0"
      }
    },
    "net/minecraft/world/level/levelgen/synth/BlendedNoise": {
      "fields": {
        "e": "SCALE_RANGE",
        "f": "DATA_CODEC",
        "a": "CODEC",
        "g": "minLimitNoise",
        "h": "maxLimitNoise",
        "i": "mainNoise",
        "j": "xzMultiplier",
        "k": "yMultiplier",
        "l": "xzFactor",
        "m": "yFactor",
        "n": "smearScaleMultiplier",
        "o": "maxValue",
        "p": "xzScale",
        "q": "yScale"
      },
      "methods": {
        "a(DDDDD)Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;": "createUnseeded",
        "a(Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;": "withNewRandom",
        "a(Lnet/minecraft/world/level/levelgen/DensityFunction$FunctionContext;)D": "compute",
        "a()D": "minValue",
        "b()D": "maxValue",
        "a(Ljava/lang/StringBuilder;)V": "parityConfigString",
        "c()Lnet/minecraft/util/KeyDispatchDataCodec;": "codec",
        "a(Lcom/mojang/serialization/codecs/RecordCodecBuilder$Instance;)Lcom/mojang/datafixers/kinds/App;": "lambda$static$5",
        "a(Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;)Ljava/lang/Double;": "lambda$static$4",
        "b(Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;)Ljava/lang/Double;": "lambda$static$3",
        "c(Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;)Ljava/lang/Double;": "lambda$static$2",
        "d(Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;)Ljava/lang/Double;": "lambda$static$1",
        "e(Lnet/minecraft/world/level/levelgen/synth/BlendedNoise;)Ljava/lang/Double;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/levelgen/synth/NoiseGeneratorPerlin": {
      "fields": {
        "d": "SHIFT_UP_EPSILON",
        "e": "p",
        "a": "xo",
        "b": "yo",
        "c": "zo"
      },
      "methods": {
        "a(DDD)D": "noise",
        "a(DDDDD)D": "noise",
        "a(DDD[D)D": "noiseWithDerivative",
        "a(IDDD)D": "gradDot",
        "a(I)I": "p",
        "a(IIIDDDD)D": "sampleAndLerp",
        "a(IIIDDD[D)D": "sampleWithDerivative",
        "a(Ljava/lang/StringBuilder;)V": "parityConfigString"
      }
    },
    "net/minecraft/world/level/levelgen/synth/NoiseUtils": {
      "methods": {
        "a(DD)D": "biasTowardsExtreme",
        "a(Ljava/lang/StringBuilder;DDD[B)V": "parityNoiseOctaveConfigString",
        "a(Ljava/lang/StringBuilder;DDD[I)V": "parityNoiseOctaveConfigString"
      }
    },
    "net/minecraft/world/level/levelgen/synth/NoiseGeneratorNormal": {
      "fields": {
        "a": "INPUT_FACTOR",
        "b": "TARGET_DEVIATION",
        "c": "valueFactor",
        "d": "first",
        "e": "second",
        "f": "maxValue",
        "g": "parameters"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/synth/NormalNoise$NoiseParameters;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise;": "createLegacyNetherBiome",
        "a(Lnet/minecraft/util/RandomSource;I[D)Lnet/minecraft/world/level/levelgen/synth/NormalNoise;": "create",
        "b(Lnet/minecraft/util/RandomSource;Lnet/minecraft/world/level/levelgen/synth/NormalNoise$NoiseParameters;)Lnet/minecraft/world/level/levelgen/synth/NormalNoise;": "create",
        "a()D": "maxValue",
        "a(I)D": "expectedDeviation",
        "a(DDD)D": "getValue",
        "b()Lnet/minecraft/world/level/levelgen/synth/NormalNoise$NoiseParameters;": "parameters",
        "a(Ljava/lang/StringBuilder;)V": "parityConfigString"
      }
    },
    "net/minecraft/world/level/levelgen/synth/NoiseGeneratorOctaves": {
      "fields": {
        "a": "ROUND_OFF",
        "b": "noiseLevels",
        "c": "firstOctave",
        "d": "amplitudes",
        "e": "lowestFreqValueFactor",
        "f": "lowestFreqInputFactor",
        "g": "maxValue"
      },
      "methods": {
        "a(Lnet/minecraft/util/RandomSource;Ljava/util/stream/IntStream;)Lnet/minecraft/world/level/levelgen/synth/PerlinNoise;": "createLegacyForBlendedNoise",
        "a(Lnet/minecraft/util/RandomSource;ILit/unimi/dsi/fastutil/doubles/DoubleList;)Lnet/minecraft/world/level/levelgen/synth/PerlinNoise;": "createLegacyForLegacyNetherBiome",
        "b(Lnet/minecraft/util/RandomSource;Ljava/util/stream/IntStream;)Lnet/minecraft/world/level/levelgen/synth/PerlinNoise;": "create",
        "a(Lnet/minecraft/util/RandomSource;Ljava/util/List;)Lnet/minecraft/world/level/levelgen/synth/PerlinNoise;": "create",
        "a(Lnet/minecraft/util/RandomSource;ID[D)Lnet/minecraft/world/level/levelgen/synth/PerlinNoise;": "create",
        "b(Lnet/minecraft/util/RandomSource;ILit/unimi/dsi/fastutil/doubles/DoubleList;)Lnet/minecraft/world/level/levelgen/synth/PerlinNoise;": "create",
        "a(Lit/unimi/dsi/fastutil/ints/IntSortedSet;)Lcom/mojang/datafixers/util/Pair;": "makeAmplitudes",
        "a()D": "maxValue",
        "a(Lnet/minecraft/util/RandomSource;)V": "skipOctave",
        "a(DDD)D": "getValue",
        "a(DDDDDZ)D": "getValue",
        "a(D)D": "maxBrokenValue",
        "c(D)D": "edgeValue",
        "a(I)Lnet/minecraft/world/level/levelgen/synth/ImprovedNoise;": "getOctaveNoise",
        "b(D)D": "wrap",
        "b()I": "firstOctave",
        "c()Lit/unimi/dsi/fastutil/doubles/DoubleList;": "amplitudes",
        "a(Ljava/lang/StringBuilder;)V": "parityConfigString",
        "a(Ljava/lang/Double;)Ljava/lang/String;": "lambda$parityConfigString$1",
        "b(Ljava/lang/Double;)Z": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/levelgen/synth/NoiseGenerator3": {
      "fields": {
        "a": "noiseLevels",
        "b": "highestFreqValueFactor",
        "c": "highestFreqInputFactor"
      },
      "methods": {
        "a(DDZ)D": "getValue"
      }
    },
    "net/minecraft/world/level/levelgen/synth/NoiseGenerator3Handler": {
      "fields": {
        "a": "GRADIENT",
        "e": "SQRT_3",
        "f": "F2",
        "g": "G2",
        "h": "p",
        "b": "xo",
        "c": "yo",
        "d": "zo"
      },
      "methods": {
        "a(I)I": "p",
        "a([IDDD)D": "dot",
        "a(IDDDD)D": "getCornerNoise3D",
        "a(DD)D": "getValue",
        "a(DDD)D": "getValue"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineBlock": {
      "fields": {
        "g": "mutablePos"
      },
      "methods": {
        "a(J)V": "checkNode",
        "a(JJI)V": "propagateIncrease",
        "a(JJ)V": "propagateDecrease",
        "a(JLnet/minecraft/world/level/block/state/BlockState;)I": "getEmission",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "propagateLightSources",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "lambda$propagateLightSources$0"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineStorageBlock": {
      "methods": {
        "a(J)I": "getLightValue"
      }
    },
    "net/minecraft/world/level/lighting/ChunkSkyLightSources": {
      "fields": {
        "b": "SIZE",
        "a": "NEGATIVE_INFINITY",
        "c": "minY",
        "d": "heightmap",
        "e": "mutablePos1",
        "f": "mutablePos2"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;)V": "fillFrom",
        "a(Lnet/minecraft/world/level/chunk/ChunkAccess;III)I": "findLowestSourceY",
        "a(Lnet/minecraft/world/level/BlockGetter;III)Z": "update",
        "a(Lnet/minecraft/world/level/BlockGetter;IILnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "updateEdge",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)I": "findLowestSourceBelow",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "isEdgeOccluded",
        "a(II)I": "getLowestSourceY",
        "a()I": "getHighestLowestSourceY",
        "a(I)V": "fill",
        "b(II)V": "set",
        "b(I)I": "get",
        "c(I)I": "extendSourcesBelowWorld",
        "c(II)I": "index"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineStorageArray": {
      "fields": {
        "b": "CACHE_SIZE",
        "c": "lastSectionKeys",
        "d": "lastSections",
        "e": "cacheEnabled",
        "a": "map"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/lighting/DataLayerStorageMap;": "copy",
        "a(J)Lnet/minecraft/world/level/chunk/DataLayer;": "copyDataLayer",
        "b(J)Z": "hasLayer",
        "c(J)Lnet/minecraft/world/level/chunk/DataLayer;": "getLayer",
        "d(J)Lnet/minecraft/world/level/chunk/DataLayer;": "removeLayer",
        "a(JLnet/minecraft/world/level/chunk/DataLayer;)V": "setLayer",
        "c()V": "clearCache",
        "d()V": "disableCache"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineGraph": {
      "fields": {
        "e": "SOURCE",
        "a": "NO_COMPUTED_LEVEL",
        "f": "levelCount",
        "b": "priorityQueue",
        "c": "computedLevels",
        "d": "hasWork"
      },
      "methods": {
        "e(J)V": "removeFromQueue",
        "a(Ljava/util/function/LongPredicate;)V": "removeIf",
        "a(II)I": "calculatePriority",
        "f(J)V": "checkNode",
        "a(JJIZ)V": "checkEdge",
        "a(JJIIIZ)V": "checkEdge",
        "b(JJIZ)V": "checkNeighbor",
        "b()Z": "hasWork",
        "b(I)I": "runUpdates",
        "c()I": "getQueueSize",
        "a(J)Z": "isSource",
        "a(JJI)I": "getComputedLevel",
        "a(JIZ)V": "checkNeighborsAfterUpdate",
        "c(J)I": "getLevel",
        "a(JI)V": "setLevel",
        "b(JJI)I": "computeLevelFromNeighbor",
        "a(Ljava/util/function/LongPredicate;Lit/unimi/dsi/fastutil/longs/LongList;J)V": "lambda$removeIf$0"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineLayerEventListener": {
      "methods": {
        "a(Lnet/minecraft/core/SectionPos;)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayerData",
        "b(Lnet/minecraft/core/BlockPos;)I": "getLightValue"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineLayerEventListener$Void": {
      "fields": {
        "a": "INSTANCE",
        "b": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/core/SectionPos;)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayerData",
        "b(Lnet/minecraft/core/BlockPos;)I": "getLightValue",
        "a(Lnet/minecraft/core/BlockPos;)V": "checkBlock",
        "E_()Z": "hasLightWork",
        "a()I": "runLightUpdates",
        "a(Lnet/minecraft/core/SectionPos;Z)V": "updateSectionStatus",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "setLightEnabled",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "propagateLightSources",
        "c()[Lnet/minecraft/world/level/lighting/LayerLightEventListener$DummyLightLayerEventListener;": "$values"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineStorage": {
      "fields": {
        "i": "layer",
        "a": "chunkSource",
        "b": "sectionStates",
        "j": "columnsWithSources",
        "c": "visibleSectionData",
        "d": "updatingSectionData",
        "e": "changedSections",
        "f": "sectionsAffectedByLightUpdates",
        "g": "queuedSections",
        "k": "columnsToRetainQueuedDataFor",
        "l": "toRemove",
        "h": "hasInconsistencies"
      },
      "methods": {
        "b(J)Z": "storingLightForSection",
        "a(JZ)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayer",
        "a(Lnet/minecraft/world/level/lighting/DataLayerStorageMap;J)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayer",
        "c(J)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayerToWrite",
        "d(J)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayerData",
        "a(J)I": "getLightValue",
        "e(J)I": "getStoredLevel",
        "a(JI)V": "setStoredLevel",
        "f(J)V": "markSectionAndNeighborsAsAffected",
        "g(J)Lnet/minecraft/world/level/chunk/DataLayer;": "createDataLayer",
        "a()Z": "hasInconsistencies",
        "a(Lnet/minecraft/world/level/lighting/LightEngine;)V": "markNewInconsistencies",
        "h(J)V": "onNodeAdded",
        "i(J)V": "onNodeRemoved",
        "b(JZ)V": "setLightEnabled",
        "j(J)Z": "lightOnInSection",
        "c(JZ)V": "retainData",
        "a(JLnet/minecraft/world/level/chunk/DataLayer;)V": "queueSectionData",
        "d(JZ)V": "updateSectionStatus",
        "a(JB)V": "putSectionState",
        "l(J)V": "initializeSection",
        "m(J)V": "removeSection",
        "b()V": "swapSectionMap",
        "k(J)Lnet/minecraft/world/level/lighting/LayerLightSectionStorage$SectionType;": "getDebugSectionType"
      }
    },
    "net/minecraft/world/level/lighting/LevelLightEngine": {
      "fields": {
        "b": "LIGHT_SECTION_PADDING",
        "c": "levelHeightAccessor",
        "a": "blockEngine",
        "d": "skyEngine"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)V": "checkBlock",
        "E_()Z": "hasLightWork",
        "a()I": "runLightUpdates",
        "a(Lnet/minecraft/core/SectionPos;Z)V": "updateSectionStatus",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "setLightEnabled",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "propagateLightSources",
        "a(Lnet/minecraft/world/level/LightLayer;)Lnet/minecraft/world/level/lighting/LayerLightEventListener;": "getLayerListener",
        "a(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;)Ljava/lang/String;": "getDebugData",
        "b(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;)Lnet/minecraft/world/level/lighting/LayerLightSectionStorage$SectionType;": "getDebugSectionType",
        "a(Lnet/minecraft/world/level/LightLayer;Lnet/minecraft/core/SectionPos;Lnet/minecraft/world/level/chunk/DataLayer;)V": "queueSectionData",
        "b(Lnet/minecraft/world/level/ChunkPos;Z)V": "retainData",
        "a(Lnet/minecraft/core/BlockPos;I)I": "getRawBrightness",
        "a(Lnet/minecraft/core/SectionPos;)Z": "lightOnInSection",
        "c()I": "getLightSectionCount",
        "d()I": "getMinLightSection",
        "e()I": "getMaxLightSection"
      }
    },
    "net/minecraft/world/level/lighting/LeveledPriorityQueue": {
      "fields": {
        "a": "levelCount",
        "b": "queues",
        "c": "firstQueuedLevel"
      },
      "methods": {
        "a()J": "removeFirstLong",
        "b()Z": "isEmpty",
        "a(JII)V": "dequeue",
        "a(JI)V": "enqueue",
        "a(I)V": "checkFirstQueuedLevel"
      }
    },
    "net/minecraft/world/level/lighting/LightEngine": {
      "fields": {
        "a": "MAX_LEVEL",
        "b": "MIN_OPACITY",
        "c": "PULL_LIGHT_IN_ENTRY",
        "g": "MIN_QUEUE_SIZE",
        "d": "PROPAGATION_DIRECTIONS",
        "e": "chunkSource",
        "f": "storage",
        "h": "blockNodesToCheck",
        "i": "decreaseQueue",
        "j": "increaseQueue",
        "k": "mutablePos",
        "l": "CACHE_SIZE",
        "m": "lastChunkPos",
        "n": "lastChunk"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Z": "hasDifferentLightProperties",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;I)I": "getLightBlockInto",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isEmptyShape",
        "c(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;": "getState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)I": "getOpacity",
        "a(JLnet/minecraft/world/level/block/state/BlockState;JLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;)Z": "shapeOccludes",
        "a(Lnet/minecraft/world/level/block/state/BlockState;JLnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getOcclusionShape",
        "a(II)Lnet/minecraft/world/level/chunk/LightChunk;": "getChunk",
        "c()V": "clearChunkCache",
        "a(Lnet/minecraft/core/BlockPos;)V": "checkBlock",
        "a(JLnet/minecraft/world/level/chunk/DataLayer;)V": "queueSectionData",
        "b(Lnet/minecraft/world/level/ChunkPos;Z)V": "retainData",
        "a(Lnet/minecraft/core/SectionPos;Z)V": "updateSectionStatus",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "setLightEnabled",
        "a()I": "runLightUpdates",
        "d()I": "propagateIncreases",
        "e()I": "propagateDecreases",
        "b(JJ)V": "enqueueDecrease",
        "c(JJ)V": "enqueueIncrease",
        "E_()Z": "hasLightWork",
        "a(Lnet/minecraft/core/SectionPos;)Lnet/minecraft/world/level/chunk/DataLayer;": "getDataLayerData",
        "b(Lnet/minecraft/core/BlockPos;)I": "getLightValue",
        "b(J)Ljava/lang/String;": "getDebugData",
        "c(J)Lnet/minecraft/world/level/lighting/LayerLightSectionStorage$SectionType;": "getDebugSectionType",
        "a(J)V": "checkNode",
        "a(JJI)V": "propagateIncrease",
        "a(JJ)V": "propagateDecrease"
      }
    },
    "net/minecraft/world/level/lighting/ILightEngine": {
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;)V": "checkBlock",
        "E_()Z": "hasLightWork",
        "a()I": "runLightUpdates",
        "a(Lnet/minecraft/core/BlockPos;Z)V": "updateSectionStatus",
        "a(Lnet/minecraft/core/SectionPos;Z)V": "updateSectionStatus",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "setLightEnabled",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "propagateLightSources"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineSky": {
      "fields": {
        "g": "REMOVE_TOP_SKY_SOURCE_ENTRY",
        "h": "REMOVE_SKY_SOURCE_ENTRY",
        "i": "ADD_SKY_SOURCE_ENTRY",
        "j": "mutablePos",
        "k": "emptyChunkSources"
      },
      "methods": {
        "a(I)Z": "isSourceLevel",
        "a(III)I": "getLowestSourceY",
        "b(II)Lnet/minecraft/world/level/lighting/ChunkSkyLightSources;": "getChunkSources",
        "a(J)V": "checkNode",
        "b(III)V": "updateSourcesInColumn",
        "a(IIII)V": "removeSourcesBelow",
        "b(IIII)V": "addSourcesAbove",
        "a(JJI)V": "propagateIncrease",
        "a(JJ)V": "propagateDecrease",
        "d(J)I": "countEmptySectionsBelowIfAtBorder",
        "a(JLnet/minecraft/core/Direction;IZI)V": "propagateFromEmptySections",
        "a(Lnet/minecraft/core/Direction;II)Z": "crossedSectionEdge",
        "a(Lnet/minecraft/world/level/ChunkPos;Z)V": "setLightEnabled",
        "b(Lnet/minecraft/world/level/ChunkPos;)V": "propagateLightSources"
      }
    },
    "net/minecraft/world/level/lighting/LightEngineStorageSky": {
      "methods": {
        "a(J)I": "getLightValue",
        "e(JZ)I": "getLightValue",
        "h(J)V": "onNodeAdded",
        "i(J)V": "onNodeRemoved",
        "g(J)Lnet/minecraft/world/level/chunk/DataLayer;": "createDataLayer",
        "a(Lnet/minecraft/world/level/chunk/DataLayer;)Lnet/minecraft/world/level/chunk/DataLayer;": "repeatFirstLayer",
        "a(I)Z": "hasLightDataAtOrBelow",
        "l(J)Z": "isAboveData",
        "m(J)I": "getTopSectionY",
        "c()I": "getBottomSectionY"
      }
    },
    "net/minecraft/world/level/material/FluidTypeEmpty": {
      "methods": {
        "a()Lnet/minecraft/world/item/Item;": "getBucket",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/phys/Vec3;": "getFlow",
        "a(Lnet/minecraft/world/level/LevelReader;)I": "getTickDelay",
        "b()Z": "isEmpty",
        "c()F": "getExplosionResistance",
        "a(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getHeight",
        "a(Lnet/minecraft/world/level/material/FluidState;)F": "getOwnHeight",
        "b(Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/level/block/state/BlockState;": "createLegacyBlock",
        "c(Lnet/minecraft/world/level/material/FluidState;)Z": "isSource",
        "d(Lnet/minecraft/world/level/material/FluidState;)I": "getAmount",
        "b(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape"
      }
    },
    "net/minecraft/world/level/material/FluidTypeFlowing": {
      "fields": {
        "a": "FALLING",
        "b": "LEVEL",
        "e": "CACHE_SIZE",
        "f": "OCCLUSION_CACHE",
        "g": "shapes"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createFluidStateDefinition",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/phys/Vec3;": "getFlow",
        "g(Lnet/minecraft/world/level/material/FluidState;)Z": "affectsFlow",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)Z": "isSolidFace",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)V": "spread",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/block/state/BlockState;)V": "spreadToSides",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/level/material/FluidState;": "getNewLiquid",
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Z": "canPassThroughWall",
        "a(IZ)Lnet/minecraft/world/level/material/FluidState;": "getFlowing",
        "a(Z)Lnet/minecraft/world/level/material/FluidState;": "getSource",
        "a(Lnet/minecraft/world/level/Level;)Z": "canConvertToSource",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/material/FluidState;)V": "spreadTo",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "beforeDestroyingBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)S": "getCacheKey",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lit/unimi/dsi/fastutil/shorts/Short2ObjectMap;Lit/unimi/dsi/fastutil/shorts/Short2BooleanMap;)I": "getSlopeDistance",
        "h(Lnet/minecraft/world/level/material/FluidState;)Z": "isSourceBlockOfThisType",
        "b(Lnet/minecraft/world/level/LevelReader;)I": "getSlopeFindDistance",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)I": "sourceNeighborCount",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Ljava/util/Map;": "getSpread",
        "c(Lnet/minecraft/world/level/LevelReader;)I": "getDropOff",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/material/FluidState;)I": "getSpreadDelay",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)V": "tick",
        "e(Lnet/minecraft/world/level/material/FluidState;)I": "getLegacyLevel",
        "c(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "hasSameAbove",
        "a(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getHeight",
        "a(Lnet/minecraft/world/level/material/FluidState;)F": "getOwnHeight",
        "d(Lnet/minecraft/world/level/material/FluidState;)I": "getAmount",
        "b(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "lambda$getShape$5",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;S)Z": "lambda$getSpread$4",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;S)Lcom/mojang/datafixers/util/Pair;": "lambda$getSpread$3",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/level/block/state/BlockState;S)Z": "lambda$getSlopeDistance$2",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;S)Lcom/mojang/datafixers/util/Pair;": "lambda$getSlopeDistance$1"
      }
    },
    "net/minecraft/world/level/material/FluidType": {
      "fields": {
        "c": "FLUID_STATE_REGISTRY",
        "d": "stateDefinition",
        "a": "defaultFluidState",
        "b": "builtInRegistryHolder"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V": "createFluidStateDefinition",
        "f()Lnet/minecraft/world/level/block/state/StateDefinition;": "getStateDefinition",
        "f(Lnet/minecraft/world/level/material/FluidState;)V": "registerDefaultState",
        "g()Lnet/minecraft/world/level/material/FluidState;": "defaultFluidState",
        "a()Lnet/minecraft/world/item/Item;": "getBucket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)V": "tick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "h()Lnet/minecraft/core/particles/ParticleOptions;": "getDripParticle",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/phys/Vec3;": "getFlow",
        "a(Lnet/minecraft/world/level/LevelReader;)I": "getTickDelay",
        "i()Z": "isRandomlyTicking",
        "b()Z": "isEmpty",
        "c()F": "getExplosionResistance",
        "a(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getHeight",
        "a(Lnet/minecraft/world/level/material/FluidState;)F": "getOwnHeight",
        "b(Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/level/block/state/BlockState;": "createLegacyBlock",
        "c(Lnet/minecraft/world/level/material/FluidState;)Z": "isSource",
        "d(Lnet/minecraft/world/level/material/FluidState;)I": "getAmount",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "b(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "j()Ljava/util/Optional;": "getPickupSound",
        "k()Lnet/minecraft/core/Holder$Reference;": "builtInRegistryHolder"
      }
    },
    "net/minecraft/world/level/material/Fluid": {
      "fields": {
        "a": "CODEC",
        "b": "AMOUNT_MAX",
        "g": "AMOUNT_FULL"
      },
      "methods": {
        "b()Z": "isSource",
        "c()Z": "isEmpty",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)F": "getHeight",
        "d()F": "getOwnHeight",
        "e()I": "getAmount",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z": "shouldRenderBackwardUpFace",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V": "tick",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "f()Z": "isRandomlyTicking",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "c(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/Vec3;": "getFlow",
        "g()Lnet/minecraft/world/level/block/state/BlockState;": "createLegacyBlock",
        "h()Lnet/minecraft/core/particles/ParticleOptions;": "getDripParticle",
        "a(Lnet/minecraft/tags/TagKey;)Z": "is",
        "a(Lnet/minecraft/core/HolderSet;)Z": "is",
        "i()F": "getExplosionResistance",
        "d(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getShape",
        "j()Lnet/minecraft/core/Holder;": "holder",
        "k()Ljava/util/stream/Stream;": "getTags"
      }
    },
    "net/minecraft/world/level/material/FluidTypes": {
      "fields": {
        "b": "FLOWING_WATER",
        "c": "WATER",
        "d": "FLOWING_LAVA",
        "e": "LAVA"
      }
    },
    "net/minecraft/world/level/material/FluidTypeLava": {
      "fields": {
        "e": "MIN_LEVEL_CUTOFF"
      },
      "methods": {
        "a()Lnet/minecraft/world/item/Item;": "getBucket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "b(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/util/RandomSource;)V": "randomTick",
        "a(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "hasFlammableNeighbours",
        "b(Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z": "isFlammable",
        "h()Lnet/minecraft/core/particles/ParticleOptions;": "getDripParticle",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "beforeDestroyingBlock",
        "b(Lnet/minecraft/world/level/LevelReader;)I": "getSlopeFindDistance",
        "b(Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/level/block/state/BlockState;": "createLegacyBlock",
        "c(Lnet/minecraft/world/level/LevelReader;)I": "getDropOff",
        "a(Lnet/minecraft/world/level/LevelReader;)I": "getTickDelay",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/material/FluidState;)I": "getSpreadDelay",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)V": "fizz",
        "a(Lnet/minecraft/world/level/Level;)Z": "canConvertToSource",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/material/FluidState;)V": "spreadTo",
        "i()Z": "isRandomlyTicking",
        "c()F": "getExplosionResistance",
        "j()Ljava/util/Optional;": "getPickupSound"
      }
    },
    "net/minecraft/world/level/material/MaterialMapColor": {
      "fields": {
        "am": "MATERIAL_COLORS",
        "a": "NONE",
        "b": "GRASS",
        "c": "SAND",
        "d": "WOOL",
        "e": "FIRE",
        "f": "ICE",
        "g": "METAL",
        "h": "PLANT",
        "i": "SNOW",
        "j": "CLAY",
        "k": "DIRT",
        "l": "STONE",
        "m": "WATER",
        "n": "WOOD",
        "o": "QUARTZ",
        "p": "COLOR_ORANGE",
        "q": "COLOR_MAGENTA",
        "r": "COLOR_LIGHT_BLUE",
        "s": "COLOR_YELLOW",
        "t": "COLOR_LIGHT_GREEN",
        "u": "COLOR_PINK",
        "v": "COLOR_GRAY",
        "w": "COLOR_LIGHT_GRAY",
        "x": "COLOR_CYAN",
        "y": "COLOR_PURPLE",
        "z": "COLOR_BLUE",
        "A": "COLOR_BROWN",
        "B": "COLOR_GREEN",
        "C": "COLOR_RED",
        "D": "COLOR_BLACK",
        "E": "GOLD",
        "F": "DIAMOND",
        "G": "LAPIS",
        "H": "EMERALD",
        "I": "PODZOL",
        "J": "NETHER",
        "K": "TERRACOTTA_WHITE",
        "L": "TERRACOTTA_ORANGE",
        "M": "TERRACOTTA_MAGENTA",
        "N": "TERRACOTTA_LIGHT_BLUE",
        "O": "TERRACOTTA_YELLOW",
        "P": "TERRACOTTA_LIGHT_GREEN",
        "Q": "TERRACOTTA_PINK",
        "R": "TERRACOTTA_GRAY",
        "S": "TERRACOTTA_LIGHT_GRAY",
        "T": "TERRACOTTA_CYAN",
        "U": "TERRACOTTA_PURPLE",
        "V": "TERRACOTTA_BLUE",
        "W": "TERRACOTTA_BROWN",
        "X": "TERRACOTTA_GREEN",
        "Y": "TERRACOTTA_RED",
        "Z": "TERRACOTTA_BLACK",
        "aa": "CRIMSON_NYLIUM",
        "ab": "CRIMSON_STEM",
        "ac": "CRIMSON_HYPHAE",
        "ad": "WARPED_NYLIUM",
        "ae": "WARPED_STEM",
        "af": "WARPED_HYPHAE",
        "ag": "WARPED_WART_BLOCK",
        "ah": "DEEPSLATE",
        "ai": "RAW_IRON",
        "aj": "GLOW_LICHEN",
        "ak": "col",
        "al": "id"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/material/MapColor$Brightness;)I": "calculateRGBColor",
        "a(I)Lnet/minecraft/world/level/material/MapColor;": "byId",
        "c(I)Lnet/minecraft/world/level/material/MapColor;": "byIdUnsafe",
        "b(I)I": "getColorFromPackedId",
        "b(Lnet/minecraft/world/level/material/MapColor$Brightness;)B": "getPackedId"
      }
    },
    "net/minecraft/world/level/material/EnumPistonReaction": {
      "fields": {
        "a": "NORMAL",
        "b": "DESTROY",
        "c": "BLOCK",
        "d": "IGNORE",
        "e": "PUSH_ONLY",
        "f": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/material/PushReaction;": "$values"
      }
    },
    "net/minecraft/world/level/material/FluidTypeWater": {
      "methods": {
        "a()Lnet/minecraft/world/item/Item;": "getBucket",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/util/RandomSource;)V": "animateTick",
        "h()Lnet/minecraft/core/particles/ParticleOptions;": "getDripParticle",
        "a(Lnet/minecraft/world/level/Level;)Z": "canConvertToSource",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V": "beforeDestroyingBlock",
        "b(Lnet/minecraft/world/level/LevelReader;)I": "getSlopeFindDistance",
        "b(Lnet/minecraft/world/level/material/FluidState;)Lnet/minecraft/world/level/block/state/BlockState;": "createLegacyBlock",
        "c(Lnet/minecraft/world/level/LevelReader;)I": "getDropOff",
        "a(Lnet/minecraft/world/level/LevelReader;)I": "getTickDelay",
        "c()F": "getExplosionResistance",
        "j()Ljava/util/Optional;": "getPickupSound"
      }
    },
    "net/minecraft/world/level/pathfinder/AmphibiousNodeEvaluator": {
      "fields": {
        "l": "prefersShallowSwimming",
        "m": "oldWalkableCost",
        "n": "oldWaterBorderCost"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/PathNavigationRegion;Lnet/minecraft/world/entity/Mob;)V": "prepare",
        "b()V": "done",
        "a()Lnet/minecraft/world/level/pathfinder/Node;": "getStart",
        "a(DDD)Lnet/minecraft/world/level/pathfinder/Target;": "getGoal",
        "a([Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)I": "getNeighbors",
        "b(Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)Z": "isVerticalNeighborValid",
        "c()Z": "isAmphibious",
        "a(Lnet/minecraft/world/level/BlockGetter;III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType"
      }
    },
    "net/minecraft/world/level/pathfinder/Path": {
      "fields": {
        "a": "heap",
        "b": "size"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/pathfinder/Node;)Lnet/minecraft/world/level/pathfinder/Node;": "insert",
        "a()V": "clear",
        "b()Lnet/minecraft/world/level/pathfinder/Node;": "peek",
        "c()Lnet/minecraft/world/level/pathfinder/Node;": "pop",
        "b(Lnet/minecraft/world/level/pathfinder/Node;)V": "remove",
        "a(Lnet/minecraft/world/level/pathfinder/Node;F)V": "changeCost",
        "d()I": "size",
        "a(I)V": "upHeap",
        "b(I)V": "downHeap",
        "e()Z": "isEmpty",
        "f()[Lnet/minecraft/world/level/pathfinder/Node;": "getHeap"
      }
    },
    "net/minecraft/world/level/pathfinder/PathType": {
      "fields": {
        "a": "BLOCKED",
        "b": "OPEN",
        "c": "WALKABLE",
        "d": "WALKABLE_DOOR",
        "e": "TRAPDOOR",
        "f": "POWDER_SNOW",
        "g": "DANGER_POWDER_SNOW",
        "h": "FENCE",
        "i": "LAVA",
        "j": "WATER",
        "k": "WATER_BORDER",
        "l": "RAIL",
        "m": "UNPASSABLE_RAIL",
        "n": "DANGER_FIRE",
        "o": "DAMAGE_FIRE",
        "p": "DANGER_OTHER",
        "q": "DAMAGE_OTHER",
        "r": "DOOR_OPEN",
        "s": "DOOR_WOOD_CLOSED",
        "t": "DOOR_IRON_CLOSED",
        "u": "BREACH",
        "v": "LEAVES",
        "w": "STICKY_HONEY",
        "x": "COCOA",
        "y": "DAMAGE_CAUTIOUS",
        "z": "malus",
        "A": "$VALUES"
      },
      "methods": {
        "a()F": "getMalus",
        "b()[Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "$values"
      }
    },
    "net/minecraft/world/level/pathfinder/PathfinderFlying": {
      "fields": {
        "l": "pathTypeByPosCache",
        "m": "SMALL_MOB_INFLATED_START_NODE_BOUNDING_BOX",
        "n": "MAX_START_NODE_CANDIDATES"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/PathNavigationRegion;Lnet/minecraft/world/entity/Mob;)V": "prepare",
        "b()V": "done",
        "a()Lnet/minecraft/world/level/pathfinder/Node;": "getStart",
        "a(Lnet/minecraft/core/BlockPos;)Z": "canStartAt",
        "a(DDD)Lnet/minecraft/world/level/pathfinder/Target;": "getGoal",
        "a([Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)I": "getNeighbors",
        "b(Lnet/minecraft/world/level/pathfinder/Node;)Z": "hasMalus",
        "c(Lnet/minecraft/world/level/pathfinder/Node;)Z": "isOpen",
        "a(III)Lnet/minecraft/world/level/pathfinder/Node;": "findAcceptedNode",
        "c(III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getCachedBlockPathType",
        "a(Lnet/minecraft/world/level/BlockGetter;IIILnet/minecraft/world/entity/Mob;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/level/BlockGetter;III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/entity/Mob;)Ljava/lang/Iterable;": "iteratePathfindingStartNodeCandidatePositions",
        "a(IIIJ)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "lambda$getCachedBlockPathType$0"
      }
    },
    "net/minecraft/world/level/pathfinder/PathPoint": {
      "fields": {
        "a": "x",
        "b": "y",
        "c": "z",
        "m": "hash",
        "d": "heapIdx",
        "g": "g",
        "f": "f",
        "h": "cameFrom",
        "i": "closed",
        "j": "walkedDistance",
        "k": "costMalus",
        "l": "type"
      },
      "methods": {
        "a(III)Lnet/minecraft/world/level/pathfinder/Node;": "cloneAndMove",
        "b(III)I": "createHash",
        "a(Lnet/minecraft/world/level/pathfinder/Node;)F": "distanceTo",
        "b(Lnet/minecraft/world/level/pathfinder/Node;)F": "distanceToXZ",
        "a(Lnet/minecraft/core/BlockPos;)F": "distanceTo",
        "c(Lnet/minecraft/world/level/pathfinder/Node;)F": "distanceToSqr",
        "b(Lnet/minecraft/core/BlockPos;)F": "distanceToSqr",
        "d(Lnet/minecraft/world/level/pathfinder/Node;)F": "distanceManhattan",
        "c(Lnet/minecraft/core/BlockPos;)F": "distanceManhattan",
        "a()Lnet/minecraft/core/BlockPos;": "asBlockPos",
        "b()Lnet/minecraft/world/phys/Vec3;": "asVec3",
        "c()Z": "inOpenSet",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToStream",
        "b(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/level/pathfinder/Node;": "createFromStream",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/level/pathfinder/Node;)V": "readContents"
      }
    },
    "net/minecraft/world/level/pathfinder/PathfinderAbstract": {
      "fields": {
        "a": "level",
        "b": "mob",
        "c": "nodes",
        "d": "entityWidth",
        "e": "entityHeight",
        "f": "entityDepth",
        "g": "canPassDoors",
        "h": "canOpenDoors",
        "i": "canFloat",
        "j": "canWalkOverFences"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/PathNavigationRegion;Lnet/minecraft/world/entity/Mob;)V": "prepare",
        "b()V": "done",
        "b(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/pathfinder/Node;": "getNode",
        "b(III)Lnet/minecraft/world/level/pathfinder/Node;": "getNode",
        "a()Lnet/minecraft/world/level/pathfinder/Node;": "getStart",
        "a(DDD)Lnet/minecraft/world/level/pathfinder/Target;": "getGoal",
        "a(Lnet/minecraft/world/level/pathfinder/Node;)Lnet/minecraft/world/level/pathfinder/Target;": "getTargetFromNode",
        "a([Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)I": "getNeighbors",
        "a(Lnet/minecraft/world/level/BlockGetter;IIILnet/minecraft/world/entity/Mob;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/level/BlockGetter;III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Z)V": "setCanPassDoors",
        "b(Z)V": "setCanOpenDoors",
        "c(Z)V": "setCanFloat",
        "d(Z)V": "setCanWalkOverFences",
        "d()Z": "canPassDoors",
        "e()Z": "canOpenDoors",
        "f()Z": "canFloat",
        "g()Z": "canWalkOverFences",
        "a(IIII)Lnet/minecraft/world/level/pathfinder/Node;": "lambda$getNode$0"
      }
    },
    "net/minecraft/world/level/pathfinder/PathEntity": {
      "fields": {
        "a": "nodes",
        "b": "openSet",
        "c": "closedSet",
        "d": "targetNodes",
        "e": "nextNodeIndex",
        "f": "target",
        "g": "distToTarget",
        "h": "reached"
      },
      "methods": {
        "a()V": "advance",
        "b()Z": "notStarted",
        "c()Z": "isDone",
        "d()Lnet/minecraft/world/level/pathfinder/Node;": "getEndNode",
        "a(I)Lnet/minecraft/world/level/pathfinder/Node;": "getNode",
        "b(I)V": "truncateNodes",
        "a(ILnet/minecraft/world/level/pathfinder/Node;)V": "replaceNode",
        "e()I": "getNodeCount",
        "f()I": "getNextNodeIndex",
        "c(I)V": "setNextNodeIndex",
        "a(Lnet/minecraft/world/entity/Entity;I)Lnet/minecraft/world/phys/Vec3;": "getEntityPosAtNode",
        "d(I)Lnet/minecraft/core/BlockPos;": "getNodePos",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/phys/Vec3;": "getNextEntityPos",
        "g()Lnet/minecraft/core/BlockPos;": "getNextNodePos",
        "h()Lnet/minecraft/world/level/pathfinder/Node;": "getNextNode",
        "i()Lnet/minecraft/world/level/pathfinder/Node;": "getPreviousNode",
        "j()Z": "canReach",
        "a([Lnet/minecraft/world/level/pathfinder/Node;[Lnet/minecraft/world/level/pathfinder/Node;Ljava/util/Set;)V": "setDebug",
        "k()[Lnet/minecraft/world/level/pathfinder/Node;": "getOpenSet",
        "l()[Lnet/minecraft/world/level/pathfinder/Node;": "getClosedSet",
        "a(Lnet/minecraft/network/FriendlyByteBuf;)V": "writeToStream",
        "m()Lnet/minecraft/core/BlockPos;": "getTarget",
        "n()F": "getDistToTarget",
        "a(Lnet/minecraft/network/FriendlyByteBuf;Lnet/minecraft/world/level/pathfinder/Target;)V": "lambda$writeToStream$0"
      }
    },
    "net/minecraft/world/level/pathfinder/PathMode": {
      "fields": {
        "a": "LAND",
        "b": "WATER",
        "c": "AIR",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/level/pathfinder/PathComputationType;": "$values"
      }
    },
    "net/minecraft/world/level/pathfinder/Pathfinder": {
      "fields": {
        "a": "FUDGING",
        "b": "neighbors",
        "c": "maxVisitedNodes",
        "d": "nodeEvaluator",
        "e": "DEBUG",
        "f": "openSet"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)F": "distance",
        "a(Lnet/minecraft/world/level/pathfinder/Node;Ljava/util/Set;)F": "getBestH",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/pathfinder/Target;": "lambda$findPath$0"
      }
    },
    "net/minecraft/world/level/pathfinder/PathfinderWater": {
      "fields": {
        "k": "allowBreaching",
        "l": "pathTypesByPosCache"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/PathNavigationRegion;Lnet/minecraft/world/entity/Mob;)V": "prepare",
        "b()V": "done",
        "a()Lnet/minecraft/world/level/pathfinder/Node;": "getStart",
        "a(DDD)Lnet/minecraft/world/level/pathfinder/Target;": "getGoal",
        "a([Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)I": "getNeighbors",
        "b(Lnet/minecraft/world/level/pathfinder/Node;)Z": "isNodeValid",
        "a(Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)Z": "isDiagonalNodeValid",
        "a(III)Lnet/minecraft/world/level/pathfinder/Node;": "findAcceptedNode",
        "c(III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getCachedBlockType",
        "a(Lnet/minecraft/world/level/BlockGetter;III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/level/BlockGetter;IIILnet/minecraft/world/entity/Mob;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(IIIJ)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "lambda$getCachedBlockType$0"
      }
    },
    "net/minecraft/world/level/pathfinder/PathDestination": {
      "fields": {
        "m": "bestHeuristic",
        "n": "bestNode",
        "o": "reached"
      },
      "methods": {
        "a(FLnet/minecraft/world/level/pathfinder/Node;)V": "updateBest",
        "d()Lnet/minecraft/world/level/pathfinder/Node;": "getBestNode",
        "e()V": "setReached",
        "f()Z": "isReached",
        "c(Lnet/minecraft/network/FriendlyByteBuf;)Lnet/minecraft/world/level/pathfinder/Target;": "createFromStream"
      }
    },
    "net/minecraft/world/level/pathfinder/PathfinderNormal": {
      "fields": {
        "k": "SPACE_BETWEEN_WALL_POSTS",
        "l": "DEFAULT_MOB_JUMP_HEIGHT",
        "m": "pathTypesByPosCache",
        "n": "collisionCache"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/PathNavigationRegion;Lnet/minecraft/world/entity/Mob;)V": "prepare",
        "b()V": "done",
        "a()Lnet/minecraft/world/level/pathfinder/Node;": "getStart",
        "c(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/pathfinder/Node;": "getStartNode",
        "a(Lnet/minecraft/core/BlockPos;)Z": "canStartAt",
        "a(DDD)Lnet/minecraft/world/level/pathfinder/Target;": "getGoal",
        "a([Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)I": "getNeighbors",
        "a(Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)Z": "isNeighborValid",
        "a(Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;Lnet/minecraft/world/level/pathfinder/Node;)Z": "isDiagonalValid",
        "a(Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)Z": "doesBlockHavePartialCollision",
        "b(Lnet/minecraft/world/level/pathfinder/Node;)Z": "canReachWithoutCollision",
        "d(Lnet/minecraft/core/BlockPos;)D": "getFloorLevel",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)D": "getFloorLevel",
        "c()Z": "isAmphibious",
        "a(IIIIDLnet/minecraft/core/Direction;Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)Lnet/minecraft/world/level/pathfinder/Node;": "findAcceptedNode",
        "h()D": "getMobJumpHeight",
        "a(IIILnet/minecraft/world/level/pathfinder/BlockPathTypes;F)Lnet/minecraft/world/level/pathfinder/Node;": "getNodeAndUpdateCostToMax",
        "a(III)Lnet/minecraft/world/level/pathfinder/Node;": "getBlockedNode",
        "a(Lnet/minecraft/world/phys/AABB;)Z": "hasCollisions",
        "a(Lnet/minecraft/world/level/BlockGetter;IIILnet/minecraft/world/entity/Mob;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/level/BlockGetter;IIILjava/util/EnumSet;Lnet/minecraft/world/level/pathfinder/BlockPathTypes;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathTypes",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "evaluateBlockPathType",
        "a(Lnet/minecraft/world/entity/Mob;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/entity/Mob;III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getCachedBlockType",
        "a(Lnet/minecraft/world/level/BlockGetter;III)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathType",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos$MutableBlockPos;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathTypeStatic",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/world/level/pathfinder/BlockPathTypes;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "checkNeighbourBlocks",
        "b(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "getBlockPathTypeRaw",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isBurningBlock",
        "a(IIILnet/minecraft/world/entity/Mob;J)Lnet/minecraft/world/level/pathfinder/BlockPathTypes;": "lambda$getCachedBlockType$1",
        "a(Lnet/minecraft/world/phys/AABB;Ljava/lang/Object;)Z": "lambda$hasCollisions$0"
      }
    },
    "net/minecraft/world/level/portal/PortalTravelAgent": {
      "fields": {
        "a": "TICKET_RADIUS",
        "b": "SEARCH_RADIUS",
        "c": "CREATE_RADIUS",
        "d": "FRAME_HEIGHT",
        "e": "FRAME_WIDTH",
        "f": "FRAME_BOX",
        "g": "FRAME_HEIGHT_START",
        "h": "FRAME_HEIGHT_END",
        "i": "FRAME_WIDTH_START",
        "j": "FRAME_WIDTH_END",
        "k": "FRAME_BOX_START",
        "l": "FRAME_BOX_END",
        "m": "NOTHING_FOUND",
        "n": "level"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;ZLnet/minecraft/world/level/border/WorldBorder;)Ljava/util/Optional;": "findPortalAround",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction$Axis;)Ljava/util/Optional;": "createPortal",
        "a(Lnet/minecraft/core/BlockPos$MutableBlockPos;)Z": "canPortalReplaceBlock",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos$MutableBlockPos;Lnet/minecraft/core/Direction;I)Z": "canHostFrame",
        "a(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Lnet/minecraft/BlockUtil$FoundRectangle;": "lambda$findPortalAround$6",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z": "lambda$findPortalAround$5",
        "b(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$findPortalAround$4",
        "c(Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)I": "lambda$findPortalAround$3",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)D": "lambda$findPortalAround$2",
        "a(Lnet/minecraft/world/level/border/WorldBorder;Lnet/minecraft/world/entity/ai/village/poi/PoiRecord;)Z": "lambda$findPortalAround$1"
      }
    },
    "net/minecraft/world/level/portal/ShapeDetectorShape": {
      "fields": {
        "a": "pos",
        "b": "speed",
        "c": "yRot",
        "d": "xRot"
      }
    },
    "net/minecraft/world/level/portal/BlockPortalShape": {
      "fields": {
        "c": "MIN_WIDTH",
        "a": "MAX_WIDTH",
        "d": "MIN_HEIGHT",
        "b": "MAX_HEIGHT",
        "e": "FRAME",
        "f": "SAFE_TRAVEL_MAX_ENTITY_XY",
        "g": "SAFE_TRAVEL_MAX_VERTICAL_DELTA",
        "h": "level",
        "i": "axis",
        "j": "rightDir",
        "k": "numPortalBlocks",
        "l": "bottomLeft",
        "m": "height",
        "n": "width"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction$Axis;)Ljava/util/Optional;": "findEmptyPortalShape",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Ljava/util/function/Predicate;Lnet/minecraft/core/Direction$Axis;)Ljava/util/Optional;": "findPortalShape",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/core/BlockPos;": "calculateBottomLeft",
        "d()I": "calculateWidth",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;)I": "getDistanceUntilEdgeAboveFrame",
        "e()I": "calculateHeight",
        "a(Lnet/minecraft/core/BlockPos$MutableBlockPos;I)Z": "hasTopFrame",
        "a(Lnet/minecraft/core/BlockPos$MutableBlockPos;)I": "getDistanceUntilTop",
        "a(Lnet/minecraft/world/level/block/state/BlockState;)Z": "isEmpty",
        "a()Z": "isValid",
        "b()V": "createPortalBlocks",
        "c()Z": "isComplete",
        "a(Lnet/minecraft/BlockUtil$FoundRectangle;Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/EntityDimensions;)Lnet/minecraft/world/phys/Vec3;": "getRelativePosition",
        "a(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/BlockUtil$FoundRectangle;Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;FF)Lnet/minecraft/world/level/portal/PortalInfo;": "createPortalInfo",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/EntityDimensions;)Lnet/minecraft/world/phys/Vec3;": "findCollisionFreePosition",
        "a(DLnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "lambda$findCollisionFreePosition$3"
      }
    },
    "net/minecraft/world/level/redstone/CollectingNeighborUpdater": {
      "fields": {
        "b": "LOGGER",
        "c": "level",
        "d": "maxChainedNeighborUpdates",
        "e": "stack",
        "f": "addedThisLayer",
        "g": "count"
      },
      "methods": {
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;II)V": "shapeUpdate",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/Direction;)V": "updateNeighborsAtExceptFromFacing",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/redstone/CollectingNeighborUpdater$NeighborUpdates;)V": "addAndRun",
        "a()V": "runUpdates"
      }
    },
    "net/minecraft/world/level/redstone/NeighborUpdater": {
      "fields": {
        "a": "UPDATE_ORDER"
      },
      "methods": {
        "a(Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;II)V": "shapeUpdate",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;)V": "neighborChanged",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "neighborChanged",
        "a(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/Direction;)V": "updateNeighborsAtExceptFromFacing",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;II)V": "executeShapeUpdate",
        "a(Lnet/minecraft/world/level/Level;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V": "executeUpdate"
      }
    },
    "net/minecraft/world/level/saveddata/PersistentBase": {
      "fields": {
        "a": "LOGGER",
        "b": "dirty"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "b()V": "setDirty",
        "a(Z)V": "setDirty",
        "c()Z": "isDirty",
        "a(Ljava/io/File;)V": "save"
      }
    },
    "net/minecraft/world/level/saveddata/maps/MapIconBanner": {
      "fields": {
        "a": "pos",
        "b": "color",
        "c": "name"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/saveddata/maps/MapBanner;": "load",
        "a(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/saveddata/maps/MapBanner;": "fromWorld",
        "a()Lnet/minecraft/core/BlockPos;": "getPos",
        "b()Lnet/minecraft/world/item/DyeColor;": "getColor",
        "c()Lnet/minecraft/world/level/saveddata/maps/MapDecoration$Type;": "getDecoration",
        "d()Lnet/minecraft/network/chat/Component;": "getName",
        "e()Lnet/minecraft/nbt/CompoundTag;": "save",
        "f()Ljava/lang/String;": "getId"
      }
    },
    "net/minecraft/world/level/saveddata/maps/MapIcon": {
      "fields": {
        "a": "type",
        "b": "x",
        "c": "y",
        "d": "rot",
        "e": "name"
      },
      "methods": {
        "a()B": "getImage",
        "b()Lnet/minecraft/world/level/saveddata/maps/MapDecoration$Type;": "getType",
        "c()B": "getX",
        "d()B": "getY",
        "e()B": "getRot",
        "f()Z": "renderOnFrame",
        "g()Lnet/minecraft/network/chat/Component;": "getName"
      }
    },
    "net/minecraft/world/level/saveddata/maps/MapIcon$Type": {
      "fields": {
        "a": "PLAYER",
        "b": "FRAME",
        "c": "RED_MARKER",
        "d": "BLUE_MARKER",
        "e": "TARGET_X",
        "f": "TARGET_POINT",
        "g": "PLAYER_OFF_MAP",
        "h": "PLAYER_OFF_LIMITS",
        "i": "MANSION",
        "j": "MONUMENT",
        "k": "BANNER_WHITE",
        "l": "BANNER_ORANGE",
        "m": "BANNER_MAGENTA",
        "n": "BANNER_LIGHT_BLUE",
        "o": "BANNER_YELLOW",
        "p": "BANNER_LIME",
        "q": "BANNER_PINK",
        "r": "BANNER_GRAY",
        "s": "BANNER_LIGHT_GRAY",
        "t": "BANNER_CYAN",
        "u": "BANNER_PURPLE",
        "v": "BANNER_BLUE",
        "w": "BANNER_BROWN",
        "x": "BANNER_GREEN",
        "y": "BANNER_RED",
        "z": "BANNER_BLACK",
        "A": "RED_X",
        "B": "icon",
        "C": "renderedOnFrame",
        "D": "mapColor",
        "E": "trackCount",
        "F": "$VALUES"
      },
      "methods": {
        "a()B": "getIcon",
        "b()Z": "isRenderedOnFrame",
        "c()Z": "hasMapColor",
        "d()I": "getMapColor",
        "a(B)Lnet/minecraft/world/level/saveddata/maps/MapDecoration$Type;": "byIcon",
        "e()Z": "shouldTrackCount",
        "f()[Lnet/minecraft/world/level/saveddata/maps/MapDecoration$Type;": "$values"
      }
    },
    "net/minecraft/world/level/saveddata/maps/WorldMapFrame": {
      "fields": {
        "a": "pos",
        "b": "rotation",
        "c": "entityId"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/saveddata/maps/MapFrame;": "load",
        "a()Lnet/minecraft/nbt/CompoundTag;": "save",
        "b()Lnet/minecraft/core/BlockPos;": "getPos",
        "c()I": "getRotation",
        "d()I": "getEntityId",
        "e()Ljava/lang/String;": "getId",
        "a(Lnet/minecraft/core/BlockPos;)Ljava/lang/String;": "frameId"
      }
    },
    "net/minecraft/world/level/saveddata/maps/PersistentIdCounts": {
      "fields": {
        "a": "FILE_NAME",
        "b": "usedAuxIds"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/saveddata/maps/MapIndex;": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a()I": "getFreeAuxValueForMap"
      }
    },
    "net/minecraft/world/level/saveddata/maps/WorldMap": {
      "fields": {
        "i": "LOGGER",
        "j": "MAP_SIZE",
        "k": "HALF_MAP_SIZE",
        "a": "MAX_SCALE",
        "b": "TRACKED_DECORATION_LIMIT",
        "c": "centerX",
        "d": "centerZ",
        "e": "dimension",
        "l": "trackingPosition",
        "m": "unlimitedTracking",
        "f": "scale",
        "g": "colors",
        "h": "locked",
        "n": "carriedBy",
        "o": "carriedByPlayers",
        "p": "bannerMarkers",
        "q": "decorations",
        "r": "frameMarkers",
        "s": "trackedDecorationCount"
      },
      "methods": {
        "a(DDBZZLnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "createFresh",
        "a(BZLnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "createForClient",
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "load",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a()Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "locked",
        "a(I)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData;": "scaled",
        "a(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)V": "tickCarriedBy",
        "a(Ljava/lang/String;)V": "removeDecoration",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/core/BlockPos;Ljava/lang/String;Lnet/minecraft/world/level/saveddata/maps/MapDecoration$Type;)V": "addTargetDecoration",
        "a(Lnet/minecraft/world/level/saveddata/maps/MapDecoration$Type;Lnet/minecraft/world/level/LevelAccessor;Ljava/lang/String;DDDLnet/minecraft/network/chat/Component;)V": "addDecoration",
        "a(ILnet/minecraft/world/entity/player/Player;)Lnet/minecraft/network/protocol/Packet;": "getUpdatePacket",
        "a(II)V": "setColorsDirty",
        "g()V": "setDecorationsDirty",
        "a(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData$HoldingPlayer;": "getHoldingPlayer",
        "a(Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;)Z": "toggleBanner",
        "a(Lnet/minecraft/world/level/BlockGetter;II)V": "checkBanners",
        "d()Ljava/util/Collection;": "getBanners",
        "a(Lnet/minecraft/core/BlockPos;I)V": "removedFromFrame",
        "a(IIB)Z": "updateColor",
        "b(IIB)V": "setColor",
        "e()Z": "isExplorationMap",
        "a(Ljava/util/List;)V": "addClientSideDecorations",
        "f()Ljava/lang/Iterable;": "getDecorations",
        "b(I)Z": "isTrackedCountOverLimit",
        "c(Lnet/minecraft/nbt/CompoundTag;)Ljava/lang/IllegalArgumentException;": "lambda$load$0"
      }
    },
    "net/minecraft/world/level/saveddata/maps/WorldMap$WorldMapHumanTracker": {
      "fields": {
        "a": "player",
        "d": "dirtyData",
        "e": "minDirtyX",
        "f": "minDirtyY",
        "g": "maxDirtyX",
        "h": "maxDirtyY",
        "i": "dirtyDecorations",
        "j": "tick",
        "b": "step",
        "this$0": "this$0"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/saveddata/maps/MapItemSavedData$MapPatch;": "createPatch",
        "a(I)Lnet/minecraft/network/protocol/Packet;": "nextUpdatePacket",
        "a(II)V": "markColorsDirty",
        "b()V": "markDecorationsDirty"
      }
    },
    "net/minecraft/world/level/storage/PersistentCommandStorage": {
      "fields": {
        "a": "ID_PREFIX",
        "b": "namespaces",
        "c": "storage"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/CommandStorage$Container;": "newStorage",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/nbt/CompoundTag;": "get",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/nbt/CompoundTag;)V": "set",
        "a()Ljava/util/stream/Stream;": "keys",
        "b(Ljava/lang/String;)Ljava/lang/String;": "createId",
        "a(Ljava/util/Map$Entry;)Ljava/util/stream/Stream;": "lambda$keys$3",
        "c(Ljava/lang/String;)Lnet/minecraft/world/level/storage/CommandStorage$Container;": "lambda$set$2",
        "a(Ljava/lang/String;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/storage/CommandStorage$Container;": "lambda$set$1",
        "b(Ljava/lang/String;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/storage/CommandStorage$Container;": "lambda$get$0"
      }
    },
    "net/minecraft/world/level/storage/DataVersion": {
      "fields": {
        "b": "version",
        "c": "series",
        "a": "MAIN_SERIES"
      },
      "methods": {
        "a()Z": "isSideSeries",
        "b()Ljava/lang/String;": "getSeries",
        "c()I": "getVersion",
        "a(Lnet/minecraft/world/level/storage/DataVersion;)Z": "isCompatible"
      }
    },
    "net/minecraft/world/level/storage/SecondaryWorldData": {
      "fields": {
        "b": "wrapped"
      },
      "methods": {
        "a()I": "getXSpawn",
        "b()I": "getYSpawn",
        "c()I": "getZSpawn",
        "d()F": "getSpawnAngle",
        "e()J": "getGameTime",
        "f()J": "getDayTime",
        "g()Ljava/lang/String;": "getLevelName",
        "h()I": "getClearWeatherTime",
        "a(I)V": "setClearWeatherTime",
        "i()Z": "isThundering",
        "j()I": "getThunderTime",
        "k()Z": "isRaining",
        "l()I": "getRainTime",
        "m()Lnet/minecraft/world/level/GameType;": "getGameType",
        "b(I)V": "setXSpawn",
        "c(I)V": "setYSpawn",
        "d(I)V": "setZSpawn",
        "a(F)V": "setSpawnAngle",
        "a(J)V": "setGameTime",
        "b(J)V": "setDayTime",
        "a(Lnet/minecraft/core/BlockPos;F)V": "setSpawn",
        "a(Z)V": "setThundering",
        "e(I)V": "setThunderTime",
        "b(Z)V": "setRaining",
        "f(I)V": "setRainTime",
        "a(Lnet/minecraft/world/level/GameType;)V": "setGameType",
        "n()Z": "isHardcore",
        "o()Z": "getAllowCommands",
        "p()Z": "isInitialized",
        "c(Z)V": "setInitialized",
        "q()Lnet/minecraft/world/level/GameRules;": "getGameRules",
        "r()Lnet/minecraft/world/level/border/WorldBorder$Settings;": "getWorldBorder",
        "a(Lnet/minecraft/world/level/border/WorldBorder$Settings;)V": "setWorldBorder",
        "s()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "t()Z": "isDifficultyLocked",
        "u()Lnet/minecraft/world/level/timers/TimerQueue;": "getScheduledEvents",
        "v()I": "getWanderingTraderSpawnDelay",
        "g(I)V": "setWanderingTraderSpawnDelay",
        "w()I": "getWanderingTraderSpawnChance",
        "h(I)V": "setWanderingTraderSpawnChance",
        "x()Ljava/util/UUID;": "getWanderingTraderId",
        "a(Ljava/util/UUID;)V": "setWanderingTraderId",
        "a(Lnet/minecraft/CrashReportCategory;Lnet/minecraft/world/level/LevelHeightAccessor;)V": "fillCrashReportCategory"
      }
    },
    "net/minecraft/world/level/storage/WorldPersistentData": {
      "fields": {
        "a": "LOGGER",
        "b": "cache",
        "c": "fixerUpper",
        "d": "dataFolder"
      },
      "methods": {
        "a(Ljava/lang/String;)Ljava/io/File;": "getDataFile",
        "a(Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/lang/String;)Lnet/minecraft/world/level/saveddata/SavedData;": "computeIfAbsent",
        "a(Ljava/util/function/Function;Ljava/lang/String;)Lnet/minecraft/world/level/saveddata/SavedData;": "get",
        "b(Ljava/util/function/Function;Ljava/lang/String;)Lnet/minecraft/world/level/saveddata/SavedData;": "readSavedData",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/saveddata/SavedData;)V": "set",
        "a(Ljava/lang/String;I)Lnet/minecraft/nbt/CompoundTag;": "readTagFromDisk",
        "a(Ljava/io/PushbackInputStream;)Z": "isGzip",
        "a()V": "save",
        "b(Ljava/lang/String;Lnet/minecraft/world/level/saveddata/SavedData;)V": "lambda$save$0"
      }
    },
    "net/minecraft/world/level/storage/WorldData": {
      "methods": {
        "a()I": "getXSpawn",
        "b()I": "getYSpawn",
        "c()I": "getZSpawn",
        "d()F": "getSpawnAngle",
        "e()J": "getGameTime",
        "f()J": "getDayTime",
        "i()Z": "isThundering",
        "k()Z": "isRaining",
        "b(Z)V": "setRaining",
        "n()Z": "isHardcore",
        "q()Lnet/minecraft/world/level/GameRules;": "getGameRules",
        "s()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "t()Z": "isDifficultyLocked",
        "a(Lnet/minecraft/CrashReportCategory;Lnet/minecraft/world/level/LevelHeightAccessor;)V": "fillCrashReportCategory",
        "g()Ljava/lang/String;": "lambda$fillCrashReportCategory$1",
        "a(Lnet/minecraft/world/level/LevelHeightAccessor;)Ljava/lang/String;": "lambda$fillCrashReportCategory$0"
      }
    },
    "net/minecraft/world/level/storage/SavedFile": {
      "fields": {
        "a": "PLAYER_ADVANCEMENTS_DIR",
        "b": "PLAYER_STATS_DIR",
        "c": "PLAYER_DATA_DIR",
        "d": "PLAYER_OLD_DATA_DIR",
        "e": "LEVEL_DATA_FILE",
        "f": "OLD_LEVEL_DATA_FILE",
        "g": "ICON_FILE",
        "h": "LOCK_FILE",
        "i": "GENERATED_DIR",
        "j": "DATAPACK_DIR",
        "k": "MAP_RESOURCE_FILE",
        "l": "ROOT",
        "m": "id"
      },
      "methods": {
        "a()Ljava/lang/String;": "getId"
      }
    },
    "net/minecraft/world/level/storage/LevelStorageException": {
      "fields": {
        "a": "messageComponent"
      },
      "methods": {
        "a()Lnet/minecraft/network/chat/Component;": "getMessageComponent"
      }
    },
    "net/minecraft/world/level/storage/Convertable": {
      "fields": {
        "b": "LOGGER",
        "c": "FORMATTER",
        "d": "OLD_SETTINGS_KEYS",
        "e": "TAG_DATA",
        "f": "NO_SYMLINKS_ALLOWED",
        "a": "ALLOWED_SYMLINKS_CONFIG_NAME",
        "g": "baseDir",
        "h": "backupDir",
        "i": "fixerUpper",
        "j": "worldDirValidator"
      },
      "methods": {
        "a(Ljava/nio/file/Path;)Lnet/minecraft/world/level/validation/DirectoryValidator;": "parseValidator",
        "b(Ljava/nio/file/Path;)Lnet/minecraft/world/level/storage/LevelStorageSource;": "createDefault",
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/DataFixer;I)Lcom/mojang/serialization/DataResult;": "readWorldGenSettings",
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/level/WorldDataConfiguration;": "readDataConfig",
        "a()Ljava/lang/String;": "getName",
        "b()Lnet/minecraft/world/level/storage/LevelStorageSource$LevelCandidates;": "findLevelCandidates",
        "a(Lnet/minecraft/world/level/storage/LevelStorageSource$LevelCandidates;)Ljava/util/concurrent/CompletableFuture;": "loadLevelSummaries",
        "f()I": "getStorageVersion",
        "a(Lnet/minecraft/world/level/storage/LevelStorageSource$LevelDirectory;Ljava/util/function/BiFunction;)Ljava/lang/Object;": "readLevelData",
        "a(Ljava/nio/file/Path;Lcom/mojang/datafixers/DataFixer;)Lnet/minecraft/world/level/WorldDataConfiguration;": "getDataConfiguration",
        "a(Lnet/minecraft/world/level/storage/LevelStorageSource$LevelDirectory;Z)Ljava/util/function/BiFunction;": "levelSummaryReader",
        "b(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/flag/FeatureFlagSet;": "parseFeatureFlagsFromSummary",
        "c(Ljava/nio/file/Path;)Lnet/minecraft/nbt/Tag;": "readLightweightData",
        "a(Ljava/lang/String;)Z": "isNewLevelIdAcceptable",
        "b(Ljava/lang/String;)Z": "levelExists",
        "e(Ljava/lang/String;)Ljava/nio/file/Path;": "getLevelPath",
        "c()Ljava/nio/file/Path;": "getBaseDir",
        "d()Ljava/nio/file/Path;": "getBackupPath",
        "c(Ljava/lang/String;)Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;": "validateAndCreateAccess",
        "d(Ljava/lang/String;)Lnet/minecraft/world/level/storage/LevelStorageSource$LevelStorageAccess;": "createAccess",
        "e()Lnet/minecraft/world/level/validation/DirectoryValidator;": "getWorldDirValidator"
      }
    },
    "net/minecraft/world/level/storage/Convertable$ConversionSession": {
      "fields": {
        "b": "lock",
        "c": "levelDirectory",
        "d": "levelId",
        "e": "resources",
        "this$0": "this$0"
      },
      "methods": {
        "a()Ljava/lang/String;": "getLevelId",
        "a(Lnet/minecraft/world/level/storage/LevelResource;)Ljava/nio/file/Path;": "getLevelPath",
        "a(Lnet/minecraft/resources/ResourceKey;)Ljava/nio/file/Path;": "getDimensionPath",
        "h()V": "checkLock",
        "b()Lnet/minecraft/world/level/storage/PlayerDataStorage;": "createPlayerStorage",
        "c()Lnet/minecraft/world/level/storage/LevelSummary;": "getSummary",
        "d()Lnet/minecraft/world/level/WorldDataConfiguration;": "getDataConfiguration",
        "e()Ljava/util/Optional;": "getIconFile",
        "f()V": "deleteLevel",
        "a(Ljava/lang/String;)V": "renameLevel",
        "g()J": "makeWorldBackup"
      }
    },
    "net/minecraft/world/level/storage/WorldInfo": {
      "fields": {
        "a": "settings",
        "b": "levelVersion",
        "c": "levelId",
        "d": "requiresManualConversion",
        "e": "locked",
        "f": "experimental",
        "g": "icon",
        "h": "info"
      },
      "methods": {
        "a()Ljava/lang/String;": "getLevelId",
        "b()Ljava/lang/String;": "getLevelName",
        "c()Ljava/nio/file/Path;": "getIcon",
        "d()Z": "requiresManualConversion",
        "e()Z": "isExperimental",
        "f()J": "getLastPlayed",
        "a(Lnet/minecraft/world/level/storage/LevelSummary;)I": "compareTo",
        "g()Lnet/minecraft/world/level/LevelSettings;": "getSettings",
        "h()Lnet/minecraft/world/level/GameType;": "getGameMode",
        "i()Z": "isHardcore",
        "j()Z": "hasCheats",
        "k()Lnet/minecraft/network/chat/MutableComponent;": "getWorldVersionName",
        "l()Lnet/minecraft/world/level/storage/LevelVersion;": "levelVersion",
        "m()Z": "markVersionInList",
        "n()Z": "askToOpenWorld",
        "o()Lnet/minecraft/world/level/storage/LevelSummary$BackupStatus;": "backupStatus",
        "p()Z": "isLocked",
        "q()Z": "isDisabled",
        "r()Z": "isCompatible",
        "s()Lnet/minecraft/network/chat/Component;": "getInfo",
        "t()Lnet/minecraft/network/chat/Component;": "createInfo",
        "a(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$createInfo$0"
      }
    },
    "net/minecraft/world/level/storage/LevelVersion": {
      "fields": {
        "a": "levelDataVersion",
        "b": "lastPlayed",
        "c": "minecraftVersionName",
        "d": "minecraftVersion",
        "e": "snapshot"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;)Lnet/minecraft/world/level/storage/LevelVersion;": "parse",
        "a()I": "levelDataVersion",
        "b()J": "lastPlayed",
        "c()Ljava/lang/String;": "minecraftVersionName",
        "d()Lnet/minecraft/world/level/storage/DataVersion;": "minecraftVersion",
        "e()Z": "snapshot"
      }
    },
    "net/minecraft/world/level/storage/WorldNBTStorage": {
      "fields": {
        "b": "LOGGER",
        "c": "playerDir",
        "a": "fixerUpper"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/player/Player;)V": "save",
        "b(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/nbt/CompoundTag;": "load",
        "a()[Ljava/lang/String;": "getSeenPlayers"
      }
    },
    "net/minecraft/world/level/storage/WorldDataServer": {
      "fields": {
        "e": "LOGGER",
        "a": "PLAYER",
        "b": "WORLD_GEN_SETTINGS",
        "f": "settings",
        "g": "worldOptions",
        "h": "specialWorldProperty",
        "i": "worldGenSettingsLifecycle",
        "j": "xSpawn",
        "k": "ySpawn",
        "l": "zSpawn",
        "m": "spawnAngle",
        "n": "gameTime",
        "o": "dayTime",
        "p": "fixerUpper",
        "q": "playerDataVersion",
        "r": "upgradedPlayerTag",
        "s": "loadedPlayerTag",
        "t": "version",
        "u": "clearWeatherTime",
        "v": "raining",
        "w": "rainTime",
        "x": "thundering",
        "y": "thunderTime",
        "z": "initialized",
        "A": "difficultyLocked",
        "B": "worldBorder",
        "C": "endDragonFightData",
        "D": "customBossEvents",
        "E": "wanderingTraderSpawnDelay",
        "F": "wanderingTraderSpawnChance",
        "G": "wanderingTraderId",
        "H": "knownServerBrands",
        "I": "wasModded",
        "J": "removedFeatureFlags",
        "K": "scheduledEvents"
      },
      "methods": {
        "a(Lcom/mojang/serialization/Dynamic;Lcom/mojang/datafixers/DataFixer;ILnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/LevelSettings;Lnet/minecraft/world/level/storage/LevelVersion;Lnet/minecraft/world/level/storage/PrimaryLevelData$SpecialWorldProperty;Lnet/minecraft/world/level/levelgen/WorldOptions;Lcom/mojang/serialization/Lifecycle;)Lnet/minecraft/world/level/storage/PrimaryLevelData;": "parse",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/nbt/CompoundTag;)V": "setTagData",
        "a(Ljava/util/Set;)Lnet/minecraft/nbt/ListTag;": "stringCollectionToTag",
        "a()I": "getXSpawn",
        "b()I": "getYSpawn",
        "c()I": "getZSpawn",
        "d()F": "getSpawnAngle",
        "e()J": "getGameTime",
        "f()J": "getDayTime",
        "N()V": "updatePlayerTag",
        "y()Lnet/minecraft/nbt/CompoundTag;": "getLoadedPlayerTag",
        "b(I)V": "setXSpawn",
        "c(I)V": "setYSpawn",
        "d(I)V": "setZSpawn",
        "a(F)V": "setSpawnAngle",
        "a(J)V": "setGameTime",
        "b(J)V": "setDayTime",
        "a(Lnet/minecraft/core/BlockPos;F)V": "setSpawn",
        "g()Ljava/lang/String;": "getLevelName",
        "z()I": "getVersion",
        "h()I": "getClearWeatherTime",
        "a(I)V": "setClearWeatherTime",
        "i()Z": "isThundering",
        "a(Z)V": "setThundering",
        "j()I": "getThunderTime",
        "e(I)V": "setThunderTime",
        "k()Z": "isRaining",
        "b(Z)V": "setRaining",
        "l()I": "getRainTime",
        "f(I)V": "setRainTime",
        "m()Lnet/minecraft/world/level/GameType;": "getGameType",
        "a(Lnet/minecraft/world/level/GameType;)V": "setGameType",
        "n()Z": "isHardcore",
        "o()Z": "getAllowCommands",
        "p()Z": "isInitialized",
        "c(Z)V": "setInitialized",
        "q()Lnet/minecraft/world/level/GameRules;": "getGameRules",
        "r()Lnet/minecraft/world/level/border/WorldBorder$Settings;": "getWorldBorder",
        "a(Lnet/minecraft/world/level/border/WorldBorder$Settings;)V": "setWorldBorder",
        "s()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "a(Lnet/minecraft/world/Difficulty;)V": "setDifficulty",
        "t()Z": "isDifficultyLocked",
        "d(Z)V": "setDifficultyLocked",
        "u()Lnet/minecraft/world/level/timers/TimerQueue;": "getScheduledEvents",
        "a(Lnet/minecraft/CrashReportCategory;Lnet/minecraft/world/level/LevelHeightAccessor;)V": "fillCrashReportCategory",
        "A()Lnet/minecraft/world/level/levelgen/WorldOptions;": "worldGenOptions",
        "B()Z": "isFlatWorld",
        "C()Z": "isDebugWorld",
        "D()Lcom/mojang/serialization/Lifecycle;": "worldGenSettingsLifecycle",
        "E()Lnet/minecraft/world/level/dimension/end/EndDragonFight$Data;": "endDragonFightData",
        "a(Lnet/minecraft/world/level/dimension/end/EndDragonFight$Data;)V": "setEndDragonFightData",
        "F()Lnet/minecraft/world/level/WorldDataConfiguration;": "getDataConfiguration",
        "a(Lnet/minecraft/world/level/WorldDataConfiguration;)V": "setDataConfiguration",
        "G()Lnet/minecraft/nbt/CompoundTag;": "getCustomBossEvents",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setCustomBossEvents",
        "v()I": "getWanderingTraderSpawnDelay",
        "g(I)V": "setWanderingTraderSpawnDelay",
        "w()I": "getWanderingTraderSpawnChance",
        "h(I)V": "setWanderingTraderSpawnChance",
        "x()Ljava/util/UUID;": "getWanderingTraderId",
        "a(Ljava/util/UUID;)V": "setWanderingTraderId",
        "a(Ljava/lang/String;Z)V": "setModdedInfo",
        "H()Z": "wasModded",
        "I()Ljava/util/Set;": "getKnownServerBrands",
        "J()Ljava/util/Set;": "getRemovedFeatureFlags",
        "K()Lnet/minecraft/world/level/storage/ServerLevelData;": "overworldData",
        "L()Lnet/minecraft/world/level/LevelSettings;": "getLevelSettings"
      }
    },
    "net/minecraft/world/level/storage/IWorldDataServer": {
      "methods": {
        "g()Ljava/lang/String;": "getLevelName",
        "a(Z)V": "setThundering",
        "l()I": "getRainTime",
        "f(I)V": "setRainTime",
        "e(I)V": "setThunderTime",
        "j()I": "getThunderTime",
        "a(Lnet/minecraft/CrashReportCategory;Lnet/minecraft/world/level/LevelHeightAccessor;)V": "fillCrashReportCategory",
        "h()I": "getClearWeatherTime",
        "a(I)V": "setClearWeatherTime",
        "v()I": "getWanderingTraderSpawnDelay",
        "g(I)V": "setWanderingTraderSpawnDelay",
        "w()I": "getWanderingTraderSpawnChance",
        "h(I)V": "setWanderingTraderSpawnChance",
        "x()Ljava/util/UUID;": "getWanderingTraderId",
        "a(Ljava/util/UUID;)V": "setWanderingTraderId",
        "m()Lnet/minecraft/world/level/GameType;": "getGameType",
        "a(Lnet/minecraft/world/level/border/WorldBorder$Settings;)V": "setWorldBorder",
        "r()Lnet/minecraft/world/level/border/WorldBorder$Settings;": "getWorldBorder",
        "p()Z": "isInitialized",
        "c(Z)V": "setInitialized",
        "o()Z": "getAllowCommands",
        "a(Lnet/minecraft/world/level/GameType;)V": "setGameType",
        "u()Lnet/minecraft/world/level/timers/TimerQueue;": "getScheduledEvents",
        "a(J)V": "setGameTime",
        "b(J)V": "setDayTime",
        "y()Ljava/lang/String;": "lambda$fillCrashReportCategory$1",
        "z()Ljava/lang/String;": "lambda$fillCrashReportCategory$0"
      }
    },
    "net/minecraft/world/level/storage/SaveData": {
      "fields": {
        "c": "ANVIL_VERSION_ID",
        "d": "MCREGION_VERSION_ID"
      },
      "methods": {
        "F()Lnet/minecraft/world/level/WorldDataConfiguration;": "getDataConfiguration",
        "a(Lnet/minecraft/world/level/WorldDataConfiguration;)V": "setDataConfiguration",
        "H()Z": "wasModded",
        "I()Ljava/util/Set;": "getKnownServerBrands",
        "J()Ljava/util/Set;": "getRemovedFeatureFlags",
        "a(Ljava/lang/String;Z)V": "setModdedInfo",
        "a(Lnet/minecraft/CrashReportCategory;)V": "fillCrashReportCategory",
        "i(I)Ljava/lang/String;": "getStorageVersionName",
        "G()Lnet/minecraft/nbt/CompoundTag;": "getCustomBossEvents",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "setCustomBossEvents",
        "K()Lnet/minecraft/world/level/storage/ServerLevelData;": "overworldData",
        "L()Lnet/minecraft/world/level/LevelSettings;": "getLevelSettings",
        "a(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "createTag",
        "n()Z": "isHardcore",
        "z()I": "getVersion",
        "g()Ljava/lang/String;": "getLevelName",
        "m()Lnet/minecraft/world/level/GameType;": "getGameType",
        "a(Lnet/minecraft/world/level/GameType;)V": "setGameType",
        "o()Z": "getAllowCommands",
        "s()Lnet/minecraft/world/Difficulty;": "getDifficulty",
        "a(Lnet/minecraft/world/Difficulty;)V": "setDifficulty",
        "t()Z": "isDifficultyLocked",
        "d(Z)V": "setDifficultyLocked",
        "q()Lnet/minecraft/world/level/GameRules;": "getGameRules",
        "y()Lnet/minecraft/nbt/CompoundTag;": "getLoadedPlayerTag",
        "E()Lnet/minecraft/world/level/dimension/end/EndDragonFight$Data;": "endDragonFightData",
        "a(Lnet/minecraft/world/level/dimension/end/EndDragonFight$Data;)V": "setEndDragonFightData",
        "A()Lnet/minecraft/world/level/levelgen/WorldOptions;": "worldGenOptions",
        "B()Z": "isFlatWorld",
        "C()Z": "isDebugWorld",
        "D()Lcom/mojang/serialization/Lifecycle;": "worldGenSettingsLifecycle",
        "M()Lnet/minecraft/world/flag/FeatureFlagSet;": "enabledFeatures",
        "a()Ljava/lang/String;": "lambda$fillCrashReportCategory$3",
        "b()Ljava/lang/String;": "lambda$fillCrashReportCategory$2",
        "c()Ljava/lang/String;": "lambda$fillCrashReportCategory$1",
        "d()Ljava/lang/String;": "lambda$fillCrashReportCategory$0"
      }
    },
    "net/minecraft/world/level/storage/WorldDataMutable": {
      "methods": {
        "b(I)V": "setXSpawn",
        "c(I)V": "setYSpawn",
        "d(I)V": "setZSpawn",
        "a(F)V": "setSpawnAngle",
        "a(Lnet/minecraft/core/BlockPos;F)V": "setSpawn"
      }
    },
    "net/minecraft/world/level/storage/loot/LootTables": {
      "fields": {
        "aI": "LOCATIONS",
        "aJ": "IMMUTABLE_LOCATIONS",
        "a": "EMPTY",
        "b": "SPAWN_BONUS_CHEST",
        "c": "END_CITY_TREASURE",
        "d": "SIMPLE_DUNGEON",
        "e": "VILLAGE_WEAPONSMITH",
        "f": "VILLAGE_TOOLSMITH",
        "g": "VILLAGE_ARMORER",
        "h": "VILLAGE_CARTOGRAPHER",
        "i": "VILLAGE_MASON",
        "j": "VILLAGE_SHEPHERD",
        "k": "VILLAGE_BUTCHER",
        "l": "VILLAGE_FLETCHER",
        "m": "VILLAGE_FISHER",
        "n": "VILLAGE_TANNERY",
        "o": "VILLAGE_TEMPLE",
        "p": "VILLAGE_DESERT_HOUSE",
        "q": "VILLAGE_PLAINS_HOUSE",
        "r": "VILLAGE_TAIGA_HOUSE",
        "s": "VILLAGE_SNOWY_HOUSE",
        "t": "VILLAGE_SAVANNA_HOUSE",
        "u": "ABANDONED_MINESHAFT",
        "v": "NETHER_BRIDGE",
        "w": "STRONGHOLD_LIBRARY",
        "x": "STRONGHOLD_CROSSING",
        "y": "STRONGHOLD_CORRIDOR",
        "z": "DESERT_PYRAMID",
        "A": "JUNGLE_TEMPLE",
        "B": "JUNGLE_TEMPLE_DISPENSER",
        "C": "IGLOO_CHEST",
        "D": "WOODLAND_MANSION",
        "E": "UNDERWATER_RUIN_SMALL",
        "F": "UNDERWATER_RUIN_BIG",
        "G": "BURIED_TREASURE",
        "H": "SHIPWRECK_MAP",
        "I": "SHIPWRECK_SUPPLY",
        "J": "SHIPWRECK_TREASURE",
        "K": "PILLAGER_OUTPOST",
        "L": "BASTION_TREASURE",
        "M": "BASTION_OTHER",
        "N": "BASTION_BRIDGE",
        "O": "BASTION_HOGLIN_STABLE",
        "P": "ANCIENT_CITY",
        "Q": "ANCIENT_CITY_ICE_BOX",
        "R": "RUINED_PORTAL",
        "S": "SHEEP_WHITE",
        "T": "SHEEP_ORANGE",
        "U": "SHEEP_MAGENTA",
        "V": "SHEEP_LIGHT_BLUE",
        "W": "SHEEP_YELLOW",
        "X": "SHEEP_LIME",
        "Y": "SHEEP_PINK",
        "Z": "SHEEP_GRAY",
        "aa": "SHEEP_LIGHT_GRAY",
        "ab": "SHEEP_CYAN",
        "ac": "SHEEP_PURPLE",
        "ad": "SHEEP_BLUE",
        "ae": "SHEEP_BROWN",
        "af": "SHEEP_GREEN",
        "ag": "SHEEP_RED",
        "ah": "SHEEP_BLACK",
        "ai": "FISHING",
        "aj": "FISHING_JUNK",
        "ak": "FISHING_TREASURE",
        "al": "FISHING_FISH",
        "am": "CAT_MORNING_GIFT",
        "an": "ARMORER_GIFT",
        "ao": "BUTCHER_GIFT",
        "ap": "CARTOGRAPHER_GIFT",
        "aq": "CLERIC_GIFT",
        "ar": "FARMER_GIFT",
        "as": "FISHERMAN_GIFT",
        "at": "FLETCHER_GIFT",
        "au": "LEATHERWORKER_GIFT",
        "av": "LIBRARIAN_GIFT",
        "aw": "MASON_GIFT",
        "ax": "SHEPHERD_GIFT",
        "ay": "TOOLSMITH_GIFT",
        "az": "WEAPONSMITH_GIFT",
        "aA": "SNIFFER_DIGGING",
        "aB": "PIGLIN_BARTERING",
        "aC": "DESERT_WELL_ARCHAEOLOGY",
        "aD": "DESERT_PYRAMID_ARCHAEOLOGY",
        "aE": "TRAIL_RUINS_ARCHAEOLOGY_COMMON",
        "aF": "TRAIL_RUINS_ARCHAEOLOGY_RARE",
        "aG": "OCEAN_RUIN_WARM_ARCHAEOLOGY",
        "aH": "OCEAN_RUIN_COLD_ARCHAEOLOGY"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/resources/ResourceLocation;": "register",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/resources/ResourceLocation;": "register",
        "a()Ljava/util/Set;": "all"
      }
    },
    "net/minecraft/world/level/storage/loot/LootSerialization": {
      "methods": {
        "a()Lcom/google/gson/GsonBuilder;": "createConditionSerializer",
        "b()Lcom/google/gson/GsonBuilder;": "createFunctionSerializer",
        "c()Lcom/google/gson/GsonBuilder;": "createLootTableSerializer"
      }
    },
    "net/minecraft/world/level/storage/loot/JsonRegistry": {},
    "net/minecraft/world/level/storage/loot/IntRange": {
      "fields": {
        "a": "min",
        "b": "max",
        "c": "limiter",
        "d": "predicate"
      },
      "methods": {
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(I)Lnet/minecraft/world/level/storage/loot/IntRange;": "exact",
        "a(II)Lnet/minecraft/world/level/storage/loot/IntRange;": "range",
        "b(I)Lnet/minecraft/world/level/storage/loot/IntRange;": "lowerBound",
        "c(I)Lnet/minecraft/world/level/storage/loot/IntRange;": "upperBound",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;I)I": "clamp",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;I)Z": "test",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/LootContext;I)Z": "lambda$new$7",
        "b(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/LootContext;I)I": "lambda$new$6",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/LootContext;I)Z": "lambda$new$5",
        "b(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/LootContext;I)I": "lambda$new$4",
        "c(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/LootContext;I)Z": "lambda$new$3",
        "d(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/LootContext;I)I": "lambda$new$2",
        "c(Lnet/minecraft/world/level/storage/loot/LootContext;I)Z": "lambda$new$1",
        "d(Lnet/minecraft/world/level/storage/loot/LootContext;I)I": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/storage/loot/LootTableInfo": {
      "fields": {
        "a": "params",
        "b": "random",
        "c": "lootDataResolver",
        "d": "visitedElements"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Z": "hasParam",
        "b(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Ljava/lang/Object;": "getParam",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/function/Consumer;)V": "addDynamicDrops",
        "c(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Ljava/lang/Object;": "getParamOrNull",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$VisitedEntry;)Z": "hasVisitedElement",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext$VisitedEntry;)Z": "pushVisitedElement",
        "c(Lnet/minecraft/world/level/storage/loot/LootContext$VisitedEntry;)V": "popVisitedElement",
        "a()Lnet/minecraft/world/level/storage/loot/LootDataResolver;": "getResolver",
        "b()Lnet/minecraft/util/RandomSource;": "getRandom",
        "c()F": "getLuck",
        "d()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "a(Lnet/minecraft/world/level/storage/loot/LootTable;)Lnet/minecraft/world/level/storage/loot/LootContext$VisitedEntry;": "createVisitedEntry",
        "a(Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/LootContext$VisitedEntry;": "createVisitedEntry",
        "a(Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/LootContext$VisitedEntry;": "createVisitedEntry"
      }
    },
    "net/minecraft/world/level/storage/loot/LootTableInfo$Builder": {
      "fields": {
        "a": "params",
        "b": "random"
      },
      "methods": {
        "a(J)Lnet/minecraft/world/level/storage/loot/LootContext$Builder;": "withOptionalRandomSeed",
        "a()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/LootContext;": "create"
      }
    },
    "net/minecraft/world/level/storage/loot/LootTableInfo$EntityTarget": {
      "fields": {
        "a": "THIS",
        "b": "KILLER",
        "c": "DIRECT_KILLER",
        "d": "KILLER_PLAYER",
        "e": "name",
        "f": "param",
        "g": "$VALUES"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;": "getParam",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;": "getByName",
        "b()[Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;": "$values"
      }
    },
    "net/minecraft/world/level/storage/loot/LootItemUser": {
      "methods": {
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate"
      }
    },
    "net/minecraft/world/level/storage/loot/LootDataId": {
      "fields": {
        "a": "type",
        "b": "location"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/LootDataType;": "type",
        "b()Lnet/minecraft/resources/ResourceLocation;": "location"
      }
    },
    "net/minecraft/world/level/storage/loot/LootDataManager": {
      "fields": {
        "b": "LOGGER",
        "a": "EMPTY_LOOT_TABLE_KEY",
        "c": "elements",
        "d": "typeKeys"
      },
      "methods": {
        "a(Ljava/util/Map;)V": "apply",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Ljava/lang/Object;)V": "castAndValidate",
        "a(Lnet/minecraft/world/level/storage/loot/LootDataType;)Ljava/util/Collection;": "getKeys",
        "a([Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "createComposite",
        "a([Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "createComposite",
        "a(Ljava/util/Map;Ljava/lang/Void;)V": "lambda$reload$2"
      }
    },
    "net/minecraft/world/level/storage/loot/LootDataResolver": {},
    "net/minecraft/world/level/storage/loot/LootDataType": {
      "fields": {
        "d": "LOGGER",
        "a": "PREDICATE",
        "b": "MODIFIER",
        "c": "TABLE",
        "e": "parser",
        "f": "topDeserializer",
        "g": "directory",
        "h": "validator"
      },
      "methods": {
        "a()Lcom/google/gson/Gson;": "parser",
        "b()Ljava/lang/String;": "directory",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Ljava/lang/Object;)V": "runValidation",
        "a(Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonElement;)Ljava/util/Optional;": "deserialize",
        "c()Ljava/util/stream/Stream;": "values",
        "a(Ljava/lang/Class;)Ljava/util/function/BiFunction;": "createSingleDeserialiser",
        "a(Ljava/lang/Class;Ljava/util/function/Function;)Ljava/util/function/BiFunction;": "createSingleOrMultipleDeserialiser",
        "d()Lnet/minecraft/world/level/storage/loot/LootDataType$Validator;": "createSimpleValidator",
        "e()Lnet/minecraft/world/level/storage/loot/LootDataType$Validator;": "createLootTableValidator",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Lnet/minecraft/world/level/storage/loot/LootTable;)V": "lambda$createLootTableValidator$5",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Lnet/minecraft/world/level/storage/loot/LootContextUser;)V": "lambda$createSimpleValidator$4",
        "a(Ljava/lang/Class;Ljava/util/function/Function;Ljava/lang/Class;Lcom/google/gson/Gson;Ljava/lang/String;)Ljava/util/function/BiFunction;": "lambda$createSingleOrMultipleDeserialiser$3",
        "a(Lcom/google/gson/Gson;Ljava/lang/Class;Ljava/util/function/Function;Ljava/lang/Class;Ljava/lang/String;Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonElement;)Ljava/util/Optional;": "lambda$createSingleOrMultipleDeserialiser$2",
        "a(Ljava/lang/Class;Lcom/google/gson/Gson;Ljava/lang/String;)Ljava/util/function/BiFunction;": "lambda$createSingleDeserialiser$1",
        "a(Lcom/google/gson/Gson;Ljava/lang/Class;Ljava/lang/String;Lnet/minecraft/resources/ResourceLocation;Lcom/google/gson/JsonElement;)Ljava/util/Optional;": "lambda$createSingleDeserialiser$0"
      }
    },
    "net/minecraft/world/level/storage/loot/LootParams": {
      "fields": {
        "a": "level",
        "b": "params",
        "c": "dynamicDrops",
        "d": "luck"
      },
      "methods": {
        "a()Lnet/minecraft/server/level/ServerLevel;": "getLevel",
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Z": "hasParam",
        "b(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Ljava/lang/Object;": "getParameter",
        "c(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Ljava/lang/Object;": "getOptionalParameter",
        "d(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Ljava/lang/Object;": "getParamOrNull",
        "a(Lnet/minecraft/resources/ResourceLocation;Ljava/util/function/Consumer;)V": "addDynamicDrops",
        "b()F": "getLuck"
      }
    },
    "net/minecraft/world/level/storage/loot/LootSelector": {
      "fields": {
        "a": "entries",
        "b": "conditions",
        "c": "compositeCondition",
        "d": "functions",
        "e": "compositeFunction",
        "f": "rolls",
        "g": "bonusRolls"
      },
      "methods": {
        "b(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "addRandomItem",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "addRandomItems",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a()Lnet/minecraft/world/level/storage/loot/LootPool$Builder;": "lootPool",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/List;Lorg/apache/commons/lang3/mutable/MutableInt;Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntry;)V": "lambda$addRandomItem$0"
      }
    },
    "net/minecraft/world/level/storage/loot/LootTable": {
      "fields": {
        "c": "LOGGER",
        "a": "EMPTY",
        "b": "DEFAULT_PARAM_SET",
        "d": "paramSet",
        "e": "randomSequence",
        "f": "pools",
        "g": "functions",
        "h": "compositeFunction"
      },
      "methods": {
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;": "createStackSplitter",
        "a(Lnet/minecraft/world/level/storage/loot/LootParams;Ljava/util/function/Consumer;)V": "getRandomItemsRaw",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)V": "getRandomItemsRaw",
        "a(Lnet/minecraft/world/level/storage/loot/LootParams;JLjava/util/function/Consumer;)V": "getRandomItems",
        "b(Lnet/minecraft/world/level/storage/loot/LootParams;Ljava/util/function/Consumer;)V": "getRandomItems",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)V": "getRandomItems",
        "a(Lnet/minecraft/world/level/storage/loot/LootParams;J)Lit/unimi/dsi/fastutil/objects/ObjectArrayList;": "getRandomItems",
        "a(Lnet/minecraft/world/level/storage/loot/LootParams;)Lit/unimi/dsi/fastutil/objects/ObjectArrayList;": "getRandomItems",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Lit/unimi/dsi/fastutil/objects/ObjectArrayList;": "getRandomItems",
        "a()Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;": "getParamSet",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/world/level/storage/loot/LootParams;J)V": "fill",
        "a(Lit/unimi/dsi/fastutil/objects/ObjectArrayList;ILnet/minecraft/util/RandomSource;)V": "shuffleAndSplitItems",
        "a(Lnet/minecraft/world/Container;Lnet/minecraft/util/RandomSource;)Ljava/util/List;": "getAvailableSlots",
        "b()Lnet/minecraft/world/level/storage/loot/LootTable$Builder;": "lootTable",
        "a(Lnet/minecraft/server/level/ServerLevel;Ljava/util/function/Consumer;Lnet/minecraft/world/item/ItemStack;)V": "lambda$createStackSplitter$0"
      }
    },
    "net/minecraft/world/level/storage/loot/LootSerializer": {
      "methods": {
        "a(Lcom/google/gson/JsonObject;Ljava/lang/Object;Lcom/google/gson/JsonSerializationContext;)V": "serialize",
        "a(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;)Ljava/lang/Object;": "deserialize"
      }
    },
    "net/minecraft/world/level/storage/loot/LootSerializerType": {
      "fields": {
        "a": "serializer"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/Serializer;": "getSerializer"
      }
    },
    "net/minecraft/world/level/storage/loot/LootCollector": {
      "fields": {
        "a": "problems",
        "b": "context",
        "c": "params",
        "d": "resolver",
        "e": "visitedElements",
        "f": "contextCache"
      },
      "methods": {
        "c()Ljava/lang/String;": "getContext",
        "a(Ljava/lang/String;)V": "reportProblem",
        "b(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/ValidationContext;": "forChild",
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/LootDataId;)Lnet/minecraft/world/level/storage/loot/ValidationContext;": "enterElement",
        "a(Lnet/minecraft/world/level/storage/loot/LootDataId;)Z": "hasVisitedElement",
        "a()Lcom/google/common/collect/Multimap;": "getProblems",
        "a(Lnet/minecraft/world/level/storage/loot/LootContextUser;)V": "validateUser",
        "b()Lnet/minecraft/world/level/storage/loot/LootDataResolver;": "resolver",
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;)Lnet/minecraft/world/level/storage/loot/ValidationContext;": "setParams",
        "c(Ljava/lang/String;)Ljava/lang/String;": "lambda$enterElement$2",
        "d(Ljava/lang/String;)Ljava/lang/String;": "lambda$forChild$1",
        "d()Ljava/lang/String;": "lambda$new$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryAlternatives": {
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;)Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;": "compose",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a([Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;)Lnet/minecraft/world/level/storage/loot/entries/AlternativesEntry$Builder;": "alternatives",
        "a(Ljava/util/Collection;Ljava/util/function/Function;)Lnet/minecraft/world/level/storage/loot/entries/AlternativesEntry$Builder;": "alternatives",
        "a(I)[Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;": "lambda$alternatives$1",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$compose$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryChildren": {
      "fields": {
        "a": "ALWAYS_FALSE",
        "b": "ALWAYS_TRUE"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$or$3",
        "b(Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$and$2",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$static$1",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryChildrenAbstract": {
      "fields": {
        "c": "children",
        "e": "composedChildren"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;)Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;": "compose",
        "a(Lnet/minecraft/world/level/storage/loot/entries/CompositeEntryBase$CompositeEntryConstructor;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Serializer;": "createSerializer"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootSelectorDynamic": {
      "fields": {
        "i": "name"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "dynamicEntry",
        "a(Lnet/minecraft/resources/ResourceLocation;II[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;[Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer;": "lambda$dynamicEntry$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootSelectorEmpty": {
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack",
        "b()Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "emptyItem"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryGroup": {
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;)Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;": "compose",
        "a([Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;)Lnet/minecraft/world/level/storage/loot/entries/EntryGroup$Builder;": "list",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$compose$1",
        "a(Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$compose$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootItem": {
      "fields": {
        "i": "item"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack",
        "a(Lnet/minecraft/world/level/ItemLike;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "lootTableItem",
        "a(Lnet/minecraft/world/level/ItemLike;II[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;[Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer;": "lambda$lootTableItem$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntries": {
      "fields": {
        "a": "EMPTY",
        "b": "ITEM",
        "c": "REFERENCE",
        "d": "DYNAMIC",
        "e": "TAG",
        "f": "ALTERNATIVES",
        "g": "SEQUENCE",
        "h": "GROUP"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/Serializer;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "register",
        "a()Ljava/lang/Object;": "createGsonAdapter"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntry": {
      "methods": {
        "a(F)I": "getWeight",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryAbstract": {
      "fields": {
        "d": "conditions",
        "c": "compositeCondition"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "canRun",
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryAbstract$Serializer": {
      "methods": {
        "b(Lcom/google/gson/JsonObject;Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;Lcom/google/gson/JsonSerializationContext;)V": "serialize",
        "b(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;": "deserialize",
        "a(Lcom/google/gson/JsonObject;Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;Lcom/google/gson/JsonSerializationContext;)V": "serializeCustom",
        "b(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;": "deserializeCustom",
        "a(Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;)Ljava/lang/Object;": "deserialize",
        "a(Lcom/google/gson/JsonObject;Ljava/lang/Object;Lcom/google/gson/JsonSerializationContext;)V": "serialize"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntryType": {},
    "net/minecraft/world/level/storage/loot/entries/LootSelectorEntry": {
      "fields": {
        "c": "DEFAULT_WEIGHT",
        "e": "DEFAULT_QUALITY",
        "f": "weight",
        "g": "quality",
        "h": "functions",
        "i": "compositeFunction",
        "j": "entry"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack",
        "a(Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$EntryConstructor;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "simpleBuilder"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootSelectorLootTable": {
      "fields": {
        "i": "name"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "lootTableReference",
        "a(Lnet/minecraft/resources/ResourceLocation;II[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;[Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer;": "lambda$lootTableReference$2",
        "b(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "lambda$validate$1",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Lnet/minecraft/world/level/storage/loot/LootTable;)V": "lambda$validate$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootEntrySequence": {
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;)Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;": "compose",
        "a([Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;)Lnet/minecraft/world/level/storage/loot/entries/SequentialEntry$Builder;": "sequential",
        "a([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "lambda$compose$0"
      }
    },
    "net/minecraft/world/level/storage/loot/entries/LootSelectorTag": {
      "fields": {
        "i": "tag",
        "j": "expand"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;": "getType",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)V": "createItemStack",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z": "expandTag",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "tagContents",
        "b(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;": "expandTag",
        "a(Lnet/minecraft/tags/TagKey;II[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;[Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer;": "lambda$expandTag$2",
        "b(Lnet/minecraft/tags/TagKey;II[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;[Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer;": "lambda$tagContents$1",
        "a(Ljava/util/function/Consumer;Lnet/minecraft/core/Holder;)V": "lambda$createItemStack$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionApplyBonus": {
      "fields": {
        "a": "FORMULAS",
        "b": "enchantment",
        "c": "formula"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;FI)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "addBonusBinomialDistributionCount",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "addOreBonusCount",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "addUniformBonusCount",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;I)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "addUniformBonusCount",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;I[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$addUniformBonusCount$3",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$addUniformBonusCount$2",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$addOreBonusCount$1",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;IF[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$addBonusBinomialDistributionCount$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionExplosionDecay": {
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "c()Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "explosionDecay"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionCopyState": {
      "fields": {
        "a": "block",
        "b": "properties"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/storage/loot/functions/CopyBlockState$Builder;": "copyState",
        "a(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;)Ljava/lang/String;": "serialize",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/properties/Property;)V": "lambda$run$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionCopyName": {
      "fields": {
        "a": "source"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/functions/CopyNameFunction$NameSource;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "copyName",
        "a(Lnet/minecraft/world/level/storage/loot/functions/CopyNameFunction$NameSource;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$copyName$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionCopyName$Source": {
      "fields": {
        "a": "THIS",
        "b": "KILLER",
        "c": "KILLER_PLAYER",
        "d": "BLOCK_ENTITY",
        "e": "name",
        "f": "param",
        "g": "$VALUES"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/functions/CopyNameFunction$NameSource;": "getByName",
        "a()[Lnet/minecraft/world/level/storage/loot/functions/CopyNameFunction$NameSource;": "$values"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionCopyNBT": {
      "fields": {
        "a": "source",
        "b": "operations"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Ljava/lang/String;)Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;": "compileNbtPath",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/providers/nbt/NbtProvider;)Lnet/minecraft/world/level/storage/loot/functions/CopyNbtFunction$Builder;": "copyData",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/functions/CopyNbtFunction$Builder;": "copyData",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/nbt/Tag;Lnet/minecraft/world/level/storage/loot/functions/CopyNbtFunction$CopyOperation;)V": "lambda$run$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionCopyNBT$Action": {
      "fields": {
        "a": "REPLACE",
        "b": "APPEND",
        "c": "MERGE",
        "d": "name",
        "e": "$VALUES"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/Tag;Lnet/minecraft/commands/arguments/NbtPathArgument$NbtPath;Ljava/util/List;)V": "merge",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/functions/CopyNbtFunction$MergeStrategy;": "getByName",
        "a()[Lnet/minecraft/world/level/storage/loot/functions/CopyNbtFunction$MergeStrategy;": "$values"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionEnchant": {
      "fields": {
        "a": "LOGGER",
        "b": "enchantments"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/enchantment/Enchantment;Lnet/minecraft/util/RandomSource;)Lnet/minecraft/world/item/ItemStack;": "enchantItem",
        "c()Lnet/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction$Builder;": "randomEnchantment",
        "d()Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "randomApplicableEnchantment",
        "a([Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$randomApplicableEnchantment$1",
        "a(ZLnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/enchantment/Enchantment;)Z": "lambda$run$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootEnchantLevel": {
      "fields": {
        "a": "levels",
        "b": "treasure"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Lnet/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction$Builder;": "enchantWithLevels"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionExplorationMap": {
      "fields": {
        "h": "LOGGER",
        "a": "DEFAULT_DESTINATION",
        "b": "DEFAULT_DECORATION_NAME",
        "c": "DEFAULT_DECORATION",
        "d": "DEFAULT_ZOOM",
        "e": "DEFAULT_SEARCH_RADIUS",
        "f": "DEFAULT_SKIP_EXISTING",
        "i": "destination",
        "j": "mapDecoration",
        "k": "zoom",
        "l": "searchRadius",
        "m": "skipKnownStructures"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "c()Lnet/minecraft/world/level/storage/loot/functions/ExplorationMapFunction$Builder;": "makeExplorationMap"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionFillPlayerHead": {
      "fields": {
        "a": "entityTarget"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "fillPlayerHead",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$fillPlayerHead$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/FunctionReference": {
      "fields": {
        "a": "LOGGER",
        "b": "name"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "functionReference",
        "a(Lnet/minecraft/resources/ResourceLocation;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$functionReference$2",
        "b(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "lambda$validate$1",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;)V": "lambda$validate$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionUser": {
      "methods": {
        "b(Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction$Builder;)Lnet/minecraft/world/level/storage/loot/functions/FunctionUserBuilder;": "apply",
        "a(Ljava/lang/Iterable;Ljava/util/function/Function;)Lnet/minecraft/world/level/storage/loot/functions/FunctionUserBuilder;": "apply",
        "a([Ljava/lang/Object;Ljava/util/function/Function;)Lnet/minecraft/world/level/storage/loot/functions/FunctionUserBuilder;": "apply",
        "c()Lnet/minecraft/world/level/storage/loot/functions/FunctionUserBuilder;": "unwrap"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionLimitCount": {
      "fields": {
        "a": "limiter"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/IntRange;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "limitCount",
        "a(Lnet/minecraft/world/level/storage/loot/IntRange;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$limitCount$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionConditional": {
      "fields": {
        "g": "predicates",
        "a": "compositePredicates"
      },
      "methods": {
        "b(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "apply",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Ljava/util/function/Function;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "simpleBuilder"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunction": {
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Ljava/util/function/BiFunction;Ljava/util/function/Consumer;Lnet/minecraft/world/level/storage/loot/LootContext;)Ljava/util/function/Consumer;": "decorate",
        "a(Ljava/util/function/Consumer;Ljava/util/function/BiFunction;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/item/ItemStack;)V": "lambda$decorate$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionType": {},
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctions": {
      "fields": {
        "a": "IDENTITY",
        "b": "SET_COUNT",
        "c": "ENCHANT_WITH_LEVELS",
        "d": "ENCHANT_RANDOMLY",
        "e": "SET_ENCHANTMENTS",
        "f": "SET_NBT",
        "g": "FURNACE_SMELT",
        "h": "LOOTING_ENCHANT",
        "i": "SET_DAMAGE",
        "j": "SET_ATTRIBUTES",
        "k": "SET_NAME",
        "l": "EXPLORATION_MAP",
        "m": "SET_STEW_EFFECT",
        "n": "COPY_NAME",
        "o": "SET_CONTENTS",
        "p": "LIMIT_COUNT",
        "q": "APPLY_BONUS",
        "r": "SET_LOOT_TABLE",
        "s": "EXPLOSION_DECAY",
        "t": "SET_LORE",
        "u": "FILL_PLAYER_HEAD",
        "v": "COPY_NBT",
        "w": "COPY_STATE",
        "x": "SET_BANNER_PATTERN",
        "y": "SET_POTION",
        "z": "SET_INSTRUMENT",
        "A": "REFERENCE"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/Serializer;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "register",
        "a()Ljava/lang/Object;": "createGsonAdapter",
        "a([Ljava/util/function/BiFunction;)Ljava/util/function/BiFunction;": "compose",
        "a([Ljava/util/function/BiFunction;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "lambda$compose$2",
        "a(Ljava/util/function/BiFunction;Ljava/util/function/BiFunction;Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "lambda$compose$1",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootEnchantFunction": {
      "fields": {
        "a": "NO_LIMIT",
        "b": "value",
        "c": "limit"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "c()Z": "hasLimit",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Lnet/minecraft/world/level/storage/loot/functions/LootingEnchantFunction$Builder;": "lootingMultiplier"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetAttribute": {
      "fields": {
        "a": "modifiers"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Ljava/lang/String;Lnet/minecraft/world/entity/ai/attributes/Attribute;Lnet/minecraft/world/entity/ai/attributes/AttributeModifier$Operation;Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Lnet/minecraft/world/level/storage/loot/functions/SetAttributesFunction$ModifierBuilder;": "modifier",
        "c()Lnet/minecraft/world/level/storage/loot/functions/SetAttributesFunction$Builder;": "setAttributes",
        "a(Lnet/minecraft/world/level/storage/loot/functions/SetAttributesFunction$Modifier;)Ljava/util/stream/Stream;": "lambda$getReferencedContextParams$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction": {
      "fields": {
        "a": "patterns",
        "b": "append"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Z)Lnet/minecraft/world/level/storage/loot/functions/SetBannerPatternFunction$Builder;": "setBannerPattern"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetContents": {
      "fields": {
        "a": "entries",
        "b": "type"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntityType;)Lnet/minecraft/world/level/storage/loot/functions/SetContainerContents$Builder;": "setContents",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/core/NonNullList;Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;)V": "lambda$run$1",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/core/NonNullList;Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntry;)V": "lambda$run$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetTable": {
      "fields": {
        "a": "name",
        "b": "seed",
        "c": "type"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "withLootTable",
        "a(Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/resources/ResourceLocation;J)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "withLootTable",
        "a(Lnet/minecraft/resources/ResourceLocation;JLnet/minecraft/world/level/block/entity/BlockEntityType;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$withLootTable$1",
        "a(Lnet/minecraft/resources/ResourceLocation;Lnet/minecraft/world/level/block/entity/BlockEntityType;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$withLootTable$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/SetEnchantmentsFunction": {
      "fields": {
        "a": "enchantments",
        "b": "add"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Ljava/util/Map;Lnet/minecraft/world/item/enchantment/Enchantment;I)V": "updateEnchantment",
        "a(Ljava/util/Map;Lnet/minecraft/world/item/enchantment/Enchantment;Ljava/lang/Integer;)V": "lambda$run$4",
        "b(Ljava/util/Map;Lnet/minecraft/world/item/enchantment/Enchantment;Ljava/lang/Integer;)V": "lambda$run$3",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/enchantment/Enchantment;Ljava/lang/Integer;)V": "lambda$run$2",
        "a(Lit/unimi/dsi/fastutil/objects/Object2IntMap;Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/item/enchantment/Enchantment;Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)V": "lambda$run$1",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Ljava/util/stream/Stream;": "lambda$getReferencedContextParams$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/SetInstrumentFunction": {
      "fields": {
        "a": "options"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/tags/TagKey;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setInstrumentOptions",
        "a(Lnet/minecraft/tags/TagKey;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setInstrumentOptions$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetCount": {
      "fields": {
        "a": "value",
        "b": "add"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setCount",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Z)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setCount",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Z[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setCount$1",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setCount$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetDamage": {
      "fields": {
        "a": "LOGGER",
        "b": "damage",
        "c": "add"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setDamage",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Z)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setDamage",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Z[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setDamage$1",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setDamage$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetLore": {
      "fields": {
        "a": "replace",
        "b": "lore",
        "c": "resolutionContext"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/item/ItemStack;Z)Lnet/minecraft/nbt/ListTag;": "getLoreTag",
        "c()Lnet/minecraft/world/level/storage/loot/functions/SetLoreFunction$Builder;": "setLore"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetName": {
      "fields": {
        "a": "LOGGER",
        "b": "name",
        "c": "resolutionContext"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Ljava/util/function/UnaryOperator;": "createResolver",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setName",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setName",
        "a(Lnet/minecraft/network/chat/Component;Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setName$3",
        "a(Lnet/minecraft/network/chat/Component;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setName$2",
        "b(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$createResolver$1",
        "a(Lnet/minecraft/commands/CommandSourceStack;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;": "lambda$createResolver$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetTag": {
      "fields": {
        "a": "tag"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setTag",
        "a(Lnet/minecraft/nbt/CompoundTag;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setTag$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/SetPotionFunction": {
      "fields": {
        "a": "potion"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "a(Lnet/minecraft/world/item/alchemy/Potion;)Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "setPotion",
        "a(Lnet/minecraft/world/item/alchemy/Potion;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)Lnet/minecraft/world/level/storage/loot/functions/LootItemFunction;": "lambda$setPotion$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSetStewEffect": {
      "fields": {
        "a": "effectDurationMap"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "c()Lnet/minecraft/world/level/storage/loot/functions/SetStewEffectFunction$Builder;": "stewEffect",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;)Ljava/util/stream/Stream;": "lambda$getReferencedContextParams$0"
      }
    },
    "net/minecraft/world/level/storage/loot/functions/LootItemFunctionSmelt": {
      "fields": {
        "a": "LOGGER"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/functions/LootItemFunctionType;": "getType",
        "a(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/world/item/ItemStack;": "run",
        "c()Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;": "smelted"
      }
    },
    "net/minecraft/world/level/storage/loot/parameters/LootContextParameter": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a()Lnet/minecraft/resources/ResourceLocation;": "getName"
      }
    },
    "net/minecraft/world/level/storage/loot/parameters/LootContextParameterSet": {
      "fields": {
        "a": "required",
        "b": "all"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Z": "isAllowed",
        "a()Ljava/util/Set;": "getRequired",
        "b()Ljava/util/Set;": "getAllowed",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootContextUser;)V": "validateUser",
        "c()Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;": "builder",
        "b(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Ljava/lang/String;": "lambda$toString$0"
      }
    },
    "net/minecraft/world/level/storage/loot/parameters/LootContextParameterSet$Builder": {
      "fields": {
        "a": "required",
        "b": "optional"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;": "required",
        "b(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;)Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;": "optional",
        "a()Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;": "build"
      }
    },
    "net/minecraft/world/level/storage/loot/parameters/LootContextParameterSets": {
      "fields": {
        "o": "REGISTRY",
        "a": "EMPTY",
        "b": "CHEST",
        "c": "COMMAND",
        "d": "SELECTOR",
        "e": "FISHING",
        "f": "ENTITY",
        "g": "ARCHAEOLOGY",
        "h": "GIFT",
        "i": "PIGLIN_BARTER",
        "j": "ADVANCEMENT_REWARD",
        "k": "ADVANCEMENT_ENTITY",
        "l": "ADVANCEMENT_LOCATION",
        "m": "ALL_PARAMS",
        "n": "BLOCK"
      },
      "methods": {
        "a(Ljava/lang/String;Ljava/util/function/Consumer;)Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;": "register",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;": "get",
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet;)Lnet/minecraft/resources/ResourceLocation;": "getKey",
        "a(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$13",
        "b(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$12",
        "c(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$11",
        "d(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$10",
        "e(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$9",
        "f(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$8",
        "g(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$7",
        "h(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$6",
        "i(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$5",
        "j(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$4",
        "k(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$3",
        "l(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$2",
        "m(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$1",
        "n(Lnet/minecraft/world/level/storage/loot/parameters/LootContextParamSet$Builder;)V": "lambda$static$0"
      }
    },
    "net/minecraft/world/level/storage/loot/parameters/LootContextParameters": {
      "fields": {
        "a": "THIS_ENTITY",
        "b": "LAST_DAMAGE_PLAYER",
        "c": "DAMAGE_SOURCE",
        "d": "KILLER_ENTITY",
        "e": "DIRECT_KILLER_ENTITY",
        "f": "ORIGIN",
        "g": "BLOCK_STATE",
        "h": "BLOCK_ENTITY",
        "i": "TOOL",
        "j": "EXPLOSION_RADIUS"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/parameters/LootContextParam;": "create"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/AllOfCondition": {
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a([Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/AllOfCondition$Builder;": "allOf"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/AnyOfCondition": {
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a([Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/AnyOfCondition$Builder;": "anyOf"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionTableBonus": {
      "fields": {
        "a": "enchantment",
        "b": "values"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/item/enchantment/Enchantment;[F)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "bonusLevelFlatChance",
        "b(Lnet/minecraft/world/item/enchantment/Enchantment;[F)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$bonusLevelFlatChance$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/CompositeLootItemCondition": {
      "fields": {
        "a": "terms",
        "b": "composedPredicate"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionReference": {
      "fields": {
        "a": "LOGGER",
        "b": "name"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "conditionReference",
        "b(Lnet/minecraft/resources/ResourceLocation;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$conditionReference$2",
        "b(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "lambda$validate$1",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;Lnet/minecraft/world/level/storage/loot/LootDataId;Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)V": "lambda$validate$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionUser": {
      "methods": {
        "b(Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/ConditionUserBuilder;": "when",
        "a_(Ljava/lang/Iterable;Ljava/util/function/Function;)Lnet/minecraft/world/level/storage/loot/predicates/ConditionUserBuilder;": "when",
        "d()Lnet/minecraft/world/level/storage/loot/predicates/ConditionUserBuilder;": "unwrap"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionDamageSourceProperties": {
      "fields": {
        "a": "predicate"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/advancements/critereon/DamageSourcePredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "hasDamageSource",
        "b(Lnet/minecraft/advancements/critereon/DamageSourcePredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$hasDamageSource$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionEntityScore": {
      "fields": {
        "a": "scores",
        "b": "entityTarget"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/scores/Scoreboard;Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/IntRange;)Z": "hasScore",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition$Builder;": "hasScores",
        "a(Lnet/minecraft/world/level/storage/loot/IntRange;)Ljava/util/stream/Stream;": "lambda$getReferencedContextParams$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionSurvivesExplosion": {
      "fields": {
        "a": "INSTANCE"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "c()Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "survivesExplosion"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionInverted": {
      "fields": {
        "a": "term"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/ValidationContext;)V": "validate",
        "a(Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "invert",
        "a(Lnet/minecraft/world/level/storage/loot/predicates/InvertedLootItemCondition;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$invert$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionLocationCheck": {
      "fields": {
        "a": "predicate",
        "b": "offset"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/advancements/critereon/LocationPredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "checkLocation",
        "a(Lnet/minecraft/advancements/critereon/LocationPredicate$Builder;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "checkLocation",
        "b(Lnet/minecraft/advancements/critereon/LocationPredicate$Builder;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$checkLocation$1",
        "b(Lnet/minecraft/advancements/critereon/LocationPredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$checkLocation$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionBlockStateProperty": {
      "fields": {
        "a": "block",
        "b": "properties"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/level/block/Block;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition$Builder;": "hasBlockStateProperties"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemCondition": {
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionType": {},
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditions": {
      "fields": {
        "a": "INVERTED",
        "b": "ANY_OF",
        "c": "ALL_OF",
        "d": "RANDOM_CHANCE",
        "e": "RANDOM_CHANCE_WITH_LOOTING",
        "f": "ENTITY_PROPERTIES",
        "g": "KILLED_BY_PLAYER",
        "h": "ENTITY_SCORES",
        "i": "BLOCK_STATE_PROPERTY",
        "j": "MATCH_TOOL",
        "k": "TABLE_BONUS",
        "l": "SURVIVES_EXPLOSION",
        "m": "DAMAGE_SOURCE_PROPERTIES",
        "n": "LOCATION_CHECK",
        "o": "WEATHER_CHECK",
        "p": "REFERENCE",
        "q": "TIME_CHECK",
        "r": "VALUE_CHECK"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/Serializer;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "register",
        "a()Ljava/lang/Object;": "createGsonAdapter",
        "a([Ljava/util/function/Predicate;)Ljava/util/function/Predicate;": "andConditions",
        "b([Ljava/util/function/Predicate;)Ljava/util/function/Predicate;": "orConditions",
        "a([Ljava/util/function/Predicate;Ljava/lang/Object;)Z": "lambda$orConditions$3",
        "a(Ljava/lang/Object;)Z": "lambda$orConditions$2",
        "b([Ljava/util/function/Predicate;Ljava/lang/Object;)Z": "lambda$andConditions$1",
        "b(Ljava/lang/Object;)Z": "lambda$andConditions$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionEntityProperty": {
      "fields": {
        "a": "predicate",
        "b": "entityTarget"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "entityPresent",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;Lnet/minecraft/advancements/critereon/EntityPredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "hasProperties",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;Lnet/minecraft/advancements/critereon/EntityPredicate;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "hasProperties",
        "a(Lnet/minecraft/advancements/critereon/EntityPredicate;Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$hasProperties$1",
        "a(Lnet/minecraft/advancements/critereon/EntityPredicate$Builder;Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$hasProperties$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionKilledByPlayer": {
      "fields": {
        "a": "INSTANCE"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "c()Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "killedByPlayer",
        "d()Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$killedByPlayer$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionRandomChance": {
      "fields": {
        "a": "probability"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(F)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "randomChance",
        "b(F)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$randomChance$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionRandomChanceWithLooting": {
      "fields": {
        "a": "percent",
        "b": "lootingMultiplier"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(FF)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "randomChanceAndLootingBoost"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionMatchTool": {
      "fields": {
        "a": "predicate"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/advancements/critereon/ItemPredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "toolMatches",
        "b(Lnet/minecraft/advancements/critereon/ItemPredicate$Builder;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$toolMatches$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionTimeCheck": {
      "fields": {
        "a": "period",
        "b": "value"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/level/storage/loot/IntRange;)Lnet/minecraft/world/level/storage/loot/predicates/TimeCheck$Builder;": "time"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/ValueCheckCondition": {
      "fields": {
        "a": "provider",
        "b": "range"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "a(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/IntRange;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;": "hasValue",
        "b(Lnet/minecraft/world/level/storage/loot/providers/number/NumberProvider;Lnet/minecraft/world/level/storage/loot/IntRange;)Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;": "lambda$hasValue$0"
      }
    },
    "net/minecraft/world/level/storage/loot/predicates/LootItemConditionWeatherCheck": {
      "fields": {
        "a": "isRaining",
        "b": "isThundering"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/predicates/LootItemConditionType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Z": "test",
        "c()Lnet/minecraft/world/level/storage/loot/predicates/WeatherCheck$Builder;": "weather"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/nbt/ContextNbtProvider": {
      "fields": {
        "b": "BLOCK_ENTITY_ID",
        "c": "BLOCK_ENTITY_PROVIDER",
        "a": "BLOCK_ENTITY",
        "d": "getter"
      },
      "methods": {
        "b(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/providers/nbt/ContextNbtProvider$Getter;": "forEntity",
        "a()Lnet/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/nbt/Tag;": "get",
        "b()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/providers/nbt/NbtProvider;": "forContextEntity",
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/providers/nbt/ContextNbtProvider;": "createFromContext"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType": {},
    "net/minecraft/world/level/storage/loot/providers/nbt/NbtProvider": {
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/nbt/Tag;": "get",
        "b()Ljava/util/Set;": "getReferencedContextParams",
        "a()Lnet/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType;": "getType"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/nbt/NbtProviders": {
      "fields": {
        "a": "STORAGE",
        "b": "CONTEXT"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/Serializer;)Lnet/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType;": "register",
        "a()Ljava/lang/Object;": "createGsonAdapter"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/nbt/StorageNbtProvider": {
      "fields": {
        "a": "id"
      },
      "methods": {
        "a()Lnet/minecraft/world/level/storage/loot/providers/nbt/LootNbtProviderType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Lnet/minecraft/nbt/Tag;": "get",
        "b()Ljava/util/Set;": "getReferencedContextParams"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/number/BinomialDistributionGenerator": {
      "fields": {
        "a": "n",
        "b": "p"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)I": "getInt",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;)F": "getFloat",
        "a(IF)Lnet/minecraft/world/level/storage/loot/providers/number/BinomialDistributionGenerator;": "binomial",
        "a()Ljava/util/Set;": "getReferencedContextParams"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/number/ConstantValue": {
      "fields": {
        "a": "value"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType;": "getType",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;)F": "getFloat",
        "a(F)Lnet/minecraft/world/level/storage/loot/providers/number/ConstantValue;": "exactly"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType": {},
    "net/minecraft/world/level/storage/loot/providers/number/NumberProvider": {
      "methods": {
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;)F": "getFloat",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)I": "getInt",
        "b()Lnet/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType;": "getType"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/number/NumberProviders": {
      "fields": {
        "a": "CONSTANT",
        "b": "UNIFORM",
        "c": "BINOMIAL",
        "d": "SCORE"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/Serializer;)Lnet/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType;": "register",
        "a()Ljava/lang/Object;": "createGsonAdapter"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/number/ScoreboardValue": {
      "fields": {
        "a": "target",
        "b": "score",
        "c": "scale"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType;": "getType",
        "a()Ljava/util/Set;": "getReferencedContextParams",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/providers/number/ScoreboardValue;": "fromScoreboard",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;Ljava/lang/String;F)Lnet/minecraft/world/level/storage/loot/providers/number/ScoreboardValue;": "fromScoreboard",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;)F": "getFloat"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/number/UniformGenerator": {
      "fields": {
        "a": "min",
        "b": "max"
      },
      "methods": {
        "b()Lnet/minecraft/world/level/storage/loot/providers/number/LootNumberProviderType;": "getType",
        "a(FF)Lnet/minecraft/world/level/storage/loot/providers/number/UniformGenerator;": "between",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)I": "getInt",
        "b(Lnet/minecraft/world/level/storage/loot/LootContext;)F": "getFloat",
        "a()Ljava/util/Set;": "getReferencedContextParams"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/score/ContextScoreboardNameProvider": {
      "fields": {
        "a": "target"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/LootContext$EntityTarget;)Lnet/minecraft/world/level/storage/loot/providers/score/ScoreboardNameProvider;": "forTarget",
        "a()Lnet/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType;": "getType",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Ljava/lang/String;": "getScoreboardName",
        "b()Ljava/util/Set;": "getReferencedContextParams"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/score/FixedScoreboardNameProvider": {
      "fields": {
        "a": "name"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/level/storage/loot/providers/score/ScoreboardNameProvider;": "forName",
        "a()Lnet/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType;": "getType",
        "c()Ljava/lang/String;": "getName",
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Ljava/lang/String;": "getScoreboardName",
        "b()Ljava/util/Set;": "getReferencedContextParams"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType": {},
    "net/minecraft/world/level/storage/loot/providers/score/ScoreboardNameProvider": {
      "methods": {
        "a(Lnet/minecraft/world/level/storage/loot/LootContext;)Ljava/lang/String;": "getScoreboardName",
        "a()Lnet/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType;": "getType",
        "b()Ljava/util/Set;": "getReferencedContextParams"
      }
    },
    "net/minecraft/world/level/storage/loot/providers/score/ScoreboardNameProviders": {
      "fields": {
        "a": "FIXED",
        "b": "CONTEXT"
      },
      "methods": {
        "a(Ljava/lang/String;Lnet/minecraft/world/level/storage/loot/Serializer;)Lnet/minecraft/world/level/storage/loot/providers/score/LootScoreProviderType;": "register",
        "a()Ljava/lang/Object;": "createGsonAdapter"
      }
    },
    "net/minecraft/world/level/timers/CustomFunctionCallback": {
      "fields": {
        "a": "functionId"
      },
      "methods": {
        "a(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/timers/TimerQueue;J)V": "handle",
        "a(Lnet/minecraft/server/ServerFunctionManager;Lnet/minecraft/commands/CommandFunction;)V": "lambda$handle$0"
      }
    },
    "net/minecraft/world/level/timers/CustomFunctionCallbackTag": {
      "fields": {
        "a": "tagId"
      },
      "methods": {
        "a(Lnet/minecraft/server/MinecraftServer;Lnet/minecraft/world/level/timers/TimerQueue;J)V": "handle"
      }
    },
    "net/minecraft/world/level/timers/CustomFunctionCallbackTimer": {},
    "net/minecraft/world/level/timers/CustomFunctionCallbackTimers": {
      "fields": {
        "b": "LOGGER",
        "a": "SERVER_CALLBACKS",
        "c": "idToSerializer",
        "d": "classToSerializer"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/timers/TimerCallback$Serializer;)Lnet/minecraft/world/level/timers/TimerCallbacks;": "register",
        "a(Ljava/lang/Class;)Lnet/minecraft/world/level/timers/TimerCallback$Serializer;": "getSerializer",
        "a(Lnet/minecraft/world/level/timers/TimerCallback;)Lnet/minecraft/nbt/CompoundTag;": "serialize",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/level/timers/TimerCallback;": "deserialize"
      }
    },
    "net/minecraft/world/level/timers/CustomFunctionCallbackTimerQueue": {
      "fields": {
        "a": "LOGGER",
        "b": "CALLBACK_DATA_TAG",
        "c": "TIMER_NAME_TAG",
        "d": "TIMER_TRIGGER_TIME_TAG",
        "e": "callbacksRegistry",
        "f": "queue",
        "g": "sequentialId",
        "h": "events"
      },
      "methods": {
        "c()Ljava/util/Comparator;": "createComparator",
        "a(Ljava/lang/Object;J)V": "tick",
        "a(Ljava/lang/String;JLnet/minecraft/world/level/timers/TimerCallback;)V": "schedule",
        "a(Ljava/lang/String;)I": "remove",
        "a()Ljava/util/Set;": "getEventsIds",
        "a(Lnet/minecraft/nbt/CompoundTag;)V": "loadEvent",
        "a(Lnet/minecraft/world/level/timers/TimerQueue$Event;)Lnet/minecraft/nbt/CompoundTag;": "storeEvent",
        "b()Lnet/minecraft/nbt/ListTag;": "store",
        "a(Lcom/mojang/serialization/Dynamic;)V": "lambda$new$2",
        "b(Lnet/minecraft/world/level/timers/TimerQueue$Event;)Lcom/google/common/primitives/UnsignedLong;": "lambda$createComparator$1",
        "c(Lnet/minecraft/world/level/timers/TimerQueue$Event;)J": "lambda$createComparator$0"
      }
    },
    "net/minecraft/world/level/validation/ContentValidationException": {
      "fields": {
        "a": "directory",
        "b": "entries"
      },
      "methods": {
        "a(Ljava/nio/file/Path;Ljava/util/List;)Ljava/lang/String;": "getMessage",
        "a(Lnet/minecraft/world/level/validation/ForbiddenSymlinkInfo;)Ljava/lang/String;": "lambda$getMessage$0"
      }
    },
    "net/minecraft/world/level/validation/DirectoryValidator": {
      "fields": {
        "a": "symlinkTargetAllowList"
      },
      "methods": {
        "a(Ljava/nio/file/Path;Ljava/util/List;)V": "validateSymlink",
        "a(Ljava/nio/file/Path;Z)Ljava/util/List;": "validateSave"
      }
    },
    "net/minecraft/world/level/validation/ForbiddenSymlinkInfo": {
      "fields": {
        "a": "link",
        "b": "target"
      },
      "methods": {
        "a()Ljava/nio/file/Path;": "link",
        "b()Ljava/nio/file/Path;": "target"
      }
    },
    "net/minecraft/world/level/validation/PathAllowList": {
      "fields": {
        "a": "LOGGER",
        "b": "COMMENT_PREFIX",
        "c": "entries",
        "d": "compiledPaths"
      },
      "methods": {
        "a(Ljava/nio/file/FileSystem;)Ljava/nio/file/PathMatcher;": "getForFileSystem",
        "a(Ljava/io/BufferedReader;)Lnet/minecraft/world/level/validation/PathAllowList;": "readPlain",
        "a(Ljava/lang/String;)Ljava/util/stream/Stream;": "lambda$readPlain$5",
        "a(Ljava/nio/file/FileSystem;Ljava/lang/String;)Ljava/nio/file/PathMatcher;": "lambda$getForFileSystem$4",
        "a(Ljava/util/List;Ljava/nio/file/Path;)Z": "lambda$getForFileSystem$3",
        "a(Ljava/nio/file/Path;)Z": "lambda$getForFileSystem$2",
        "b(Ljava/nio/file/Path;)Z": "lambda$getForFileSystem$1",
        "a(Ljava/nio/file/FileSystem;Lnet/minecraft/world/level/validation/PathAllowList$ConfigEntry;)Ljava/nio/file/PathMatcher;": "lambda$getForFileSystem$0"
      }
    },
    "net/minecraft/world/phys/AxisAlignedBB": {
      "fields": {
        "g": "EPSILON",
        "a": "minX",
        "b": "minY",
        "c": "minZ",
        "d": "maxX",
        "e": "maxY",
        "f": "maxZ"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/phys/AABB;": "of",
        "a(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;": "unitCubeFromLowerCorner",
        "a(D)Lnet/minecraft/world/phys/AABB;": "setMinX",
        "b(D)Lnet/minecraft/world/phys/AABB;": "setMinY",
        "c(D)Lnet/minecraft/world/phys/AABB;": "setMinZ",
        "d(D)Lnet/minecraft/world/phys/AABB;": "setMaxX",
        "e(D)Lnet/minecraft/world/phys/AABB;": "setMaxY",
        "f(D)Lnet/minecraft/world/phys/AABB;": "setMaxZ",
        "a(Lnet/minecraft/core/Direction$Axis;)D": "min",
        "b(Lnet/minecraft/core/Direction$Axis;)D": "max",
        "a(DDD)Lnet/minecraft/world/phys/AABB;": "contract",
        "b(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;": "expandTowards",
        "b(DDD)Lnet/minecraft/world/phys/AABB;": "expandTowards",
        "c(DDD)Lnet/minecraft/world/phys/AABB;": "inflate",
        "g(D)Lnet/minecraft/world/phys/AABB;": "inflate",
        "a(Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;": "intersect",
        "b(Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;": "minmax",
        "d(DDD)Lnet/minecraft/world/phys/AABB;": "move",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/AABB;": "move",
        "c(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;": "move",
        "c(Lnet/minecraft/world/phys/AABB;)Z": "intersects",
        "a(DDDDDD)Z": "intersects",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z": "intersects",
        "d(Lnet/minecraft/world/phys/Vec3;)Z": "contains",
        "e(DDD)Z": "contains",
        "a()D": "getSize",
        "b()D": "getXsize",
        "c()D": "getYsize",
        "d()D": "getZsize",
        "f(DDD)Lnet/minecraft/world/phys/AABB;": "deflate",
        "h(D)Lnet/minecraft/world/phys/AABB;": "deflate",
        "b(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Ljava/util/Optional;": "clip",
        "a(Ljava/lang/Iterable;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/BlockHitResult;": "clip",
        "a(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/phys/Vec3;[DLnet/minecraft/core/Direction;DDD)Lnet/minecraft/core/Direction;": "getDirection",
        "a([DLnet/minecraft/core/Direction;DDDDDDDDLnet/minecraft/core/Direction;DDD)Lnet/minecraft/core/Direction;": "clipPoint",
        "e(Lnet/minecraft/world/phys/Vec3;)D": "distanceToSqr",
        "e()Z": "hasNaN",
        "f()Lnet/minecraft/world/phys/Vec3;": "getCenter",
        "a(Lnet/minecraft/world/phys/Vec3;DDD)Lnet/minecraft/world/phys/AABB;": "ofSize"
      }
    },
    "net/minecraft/world/phys/MovingObjectPositionBlock": {
      "fields": {
        "b": "direction",
        "c": "blockPos",
        "d": "miss",
        "e": "inside"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/BlockHitResult;": "miss",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/BlockHitResult;": "withDirection",
        "a(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/BlockHitResult;": "withPosition",
        "a()Lnet/minecraft/core/BlockPos;": "getBlockPos",
        "b()Lnet/minecraft/core/Direction;": "getDirection",
        "c()Lnet/minecraft/world/phys/HitResult$Type;": "getType",
        "d()Z": "isInside"
      }
    },
    "net/minecraft/world/phys/MovingObjectPositionEntity": {
      "fields": {
        "b": "entity"
      },
      "methods": {
        "a()Lnet/minecraft/world/entity/Entity;": "getEntity",
        "c()Lnet/minecraft/world/phys/HitResult$Type;": "getType"
      }
    },
    "net/minecraft/world/phys/MovingObjectPosition": {
      "fields": {
        "a": "location"
      },
      "methods": {
        "a(Lnet/minecraft/world/entity/Entity;)D": "distanceTo",
        "c()Lnet/minecraft/world/phys/HitResult$Type;": "getType",
        "e()Lnet/minecraft/world/phys/Vec3;": "getLocation"
      }
    },
    "net/minecraft/world/phys/MovingObjectPosition$EnumMovingObjectType": {
      "fields": {
        "a": "MISS",
        "b": "BLOCK",
        "c": "ENTITY",
        "d": "$VALUES"
      },
      "methods": {
        "a()[Lnet/minecraft/world/phys/HitResult$Type;": "$values"
      }
    },
    "net/minecraft/world/phys/Vec2F": {
      "fields": {
        "a": "ZERO",
        "b": "ONE",
        "c": "UNIT_X",
        "d": "NEG_UNIT_X",
        "e": "UNIT_Y",
        "f": "NEG_UNIT_Y",
        "g": "MAX",
        "h": "MIN",
        "i": "x",
        "j": "y"
      },
      "methods": {
        "a(F)Lnet/minecraft/world/phys/Vec2;": "scale",
        "a(Lnet/minecraft/world/phys/Vec2;)F": "dot",
        "b(Lnet/minecraft/world/phys/Vec2;)Lnet/minecraft/world/phys/Vec2;": "add",
        "b(F)Lnet/minecraft/world/phys/Vec2;": "add",
        "c(Lnet/minecraft/world/phys/Vec2;)Z": "equals",
        "a()Lnet/minecraft/world/phys/Vec2;": "normalized",
        "b()F": "length",
        "c()F": "lengthSquared",
        "d(Lnet/minecraft/world/phys/Vec2;)F": "distanceToSqr",
        "d()Lnet/minecraft/world/phys/Vec2;": "negated"
      }
    },
    "net/minecraft/world/phys/Vec3D": {
      "fields": {
        "a": "CODEC",
        "b": "ZERO",
        "c": "x",
        "d": "y",
        "e": "z"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/phys/Vec3;": "fromRGB24",
        "a(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/phys/Vec3;": "atLowerCornerOf",
        "a(Lnet/minecraft/core/Vec3i;DDD)Lnet/minecraft/world/phys/Vec3;": "atLowerCornerWithOffset",
        "b(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/phys/Vec3;": "atCenterOf",
        "c(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/world/phys/Vec3;": "atBottomCenterOf",
        "a(Lnet/minecraft/core/Vec3i;D)Lnet/minecraft/world/phys/Vec3;": "upFromBottomCenterOf",
        "a(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "vectorTo",
        "d()Lnet/minecraft/world/phys/Vec3;": "normalize",
        "b(Lnet/minecraft/world/phys/Vec3;)D": "dot",
        "c(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "cross",
        "d(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "subtract",
        "a(DDD)Lnet/minecraft/world/phys/Vec3;": "subtract",
        "e(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "add",
        "b(DDD)Lnet/minecraft/world/phys/Vec3;": "add",
        "f(Lnet/minecraft/world/phys/Vec3;)D": "distanceTo",
        "g(Lnet/minecraft/world/phys/Vec3;)D": "distanceToSqr",
        "c(DDD)D": "distanceToSqr",
        "a(D)Lnet/minecraft/world/phys/Vec3;": "scale",
        "e()Lnet/minecraft/world/phys/Vec3;": "reverse",
        "h(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;": "multiply",
        "d(DDD)Lnet/minecraft/world/phys/Vec3;": "multiply",
        "a(Lnet/minecraft/util/RandomSource;F)Lnet/minecraft/world/phys/Vec3;": "offsetRandom",
        "f()D": "length",
        "g()D": "lengthSqr",
        "h()D": "horizontalDistance",
        "i()D": "horizontalDistanceSqr",
        "a(Lnet/minecraft/world/phys/Vec3;D)Lnet/minecraft/world/phys/Vec3;": "lerp",
        "a(F)Lnet/minecraft/world/phys/Vec3;": "xRot",
        "b(F)Lnet/minecraft/world/phys/Vec3;": "yRot",
        "c(F)Lnet/minecraft/world/phys/Vec3;": "zRot",
        "a(Lnet/minecraft/world/phys/Vec2;)Lnet/minecraft/world/phys/Vec3;": "directionFromRotation",
        "a(FF)Lnet/minecraft/world/phys/Vec3;": "directionFromRotation",
        "a(Ljava/util/EnumSet;)Lnet/minecraft/world/phys/Vec3;": "align",
        "a(Lnet/minecraft/core/Direction$Axis;)D": "get",
        "a(Lnet/minecraft/core/Direction$Axis;D)Lnet/minecraft/world/phys/Vec3;": "with",
        "a(Lnet/minecraft/core/Direction;D)Lnet/minecraft/world/phys/Vec3;": "relative",
        "a()D": "x",
        "b()D": "y",
        "c()D": "z",
        "j()Lorg/joml/Vector3f;": "toVector3f",
        "i(Lnet/minecraft/world/phys/Vec3;)Ljava/util/List;": "lambda$static$2",
        "a(Ljava/util/List;)Lcom/mojang/serialization/DataResult;": "lambda$static$1",
        "b(Ljava/util/List;)Lnet/minecraft/world/phys/Vec3;": "lambda$static$0"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeArray": {
      "fields": {
        "b": "xs",
        "c": "ys",
        "d": "zs"
      },
      "methods": {
        "a(Lnet/minecraft/core/Direction$Axis;)Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getCoords"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeBitSet": {
      "fields": {
        "d": "storage",
        "e": "xMin",
        "f": "yMin",
        "g": "zMin",
        "h": "xMax",
        "i": "yMax",
        "j": "zMax"
      },
      "methods": {
        "a(IIIIIIIII)Lnet/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape;": "withFilledBounds",
        "a(III)I": "getIndex",
        "b(III)Z": "isFull",
        "a(IIIZ)V": "fillUpdateBounds",
        "c(III)V": "fill",
        "a()Z": "isEmpty",
        "a(Lnet/minecraft/core/Direction$Axis;)I": "firstFull",
        "b(Lnet/minecraft/core/Direction$Axis;)I": "lastFull",
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/BooleanOp;)Lnet/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape;": "join",
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape$IntLineConsumer;Z)V": "forAllBoxes",
        "a(IIII)Z": "isZStripFull",
        "a(IIIII)Z": "isXZRectangleFull",
        "b(IIII)V": "clearZStrip",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/BooleanOp;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape;[IIII)Z": "lambda$join$2",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/BooleanOp;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;ILnet/minecraft/world/phys/shapes/DiscreteVoxelShape;ILnet/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape;I[I[ZIII)Z": "lambda$join$1",
        "a(Lnet/minecraft/world/phys/shapes/BooleanOp;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;IILnet/minecraft/world/phys/shapes/DiscreteVoxelShape;IILnet/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape;II[I[ZIII)Z": "lambda$join$0"
      }
    },
    "net/minecraft/world/phys/shapes/OperatorBoolean": {
      "fields": {
        "a": "FALSE",
        "b": "NOT_OR",
        "c": "ONLY_SECOND",
        "d": "NOT_FIRST",
        "e": "ONLY_FIRST",
        "f": "NOT_SECOND",
        "g": "NOT_SAME",
        "h": "NOT_AND",
        "i": "AND",
        "j": "SAME",
        "k": "SECOND",
        "l": "CAUSES",
        "m": "FIRST",
        "n": "CAUSED_BY",
        "o": "OR",
        "p": "TRUE"
      },
      "methods": {
        "a(ZZ)Z": "lambda$static$15",
        "b(ZZ)Z": "lambda$static$14",
        "c(ZZ)Z": "lambda$static$13",
        "d(ZZ)Z": "lambda$static$12",
        "e(ZZ)Z": "lambda$static$11",
        "f(ZZ)Z": "lambda$static$10",
        "g(ZZ)Z": "lambda$static$9",
        "h(ZZ)Z": "lambda$static$8",
        "i(ZZ)Z": "lambda$static$7",
        "j(ZZ)Z": "lambda$static$6",
        "k(ZZ)Z": "lambda$static$5",
        "l(ZZ)Z": "lambda$static$4",
        "m(ZZ)Z": "lambda$static$3",
        "n(ZZ)Z": "lambda$static$2",
        "o(ZZ)Z": "lambda$static$1",
        "p(ZZ)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeCollision": {
      "methods": {
        "a()Lnet/minecraft/world/phys/shapes/CollisionContext;": "empty",
        "a(Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/phys/shapes/CollisionContext;": "of",
        "b()Z": "isDescending",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/core/BlockPos;Z)Z": "isAbove",
        "a(Lnet/minecraft/world/item/Item;)Z": "isHoldingItem",
        "a(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/material/FluidState;)Z": "canStandOnFluid"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeCubePoint": {
      "fields": {
        "a": "parts"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeCube": {
      "methods": {
        "a(Lnet/minecraft/core/Direction$Axis;)Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getCoords",
        "a(Lnet/minecraft/core/Direction$Axis;D)I": "findIndex"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeCubeMerger": {
      "fields": {
        "a": "result",
        "b": "firstDiv",
        "c": "secondDiv"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;)Z": "forMergedIndexes",
        "a()Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getList"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeDiscrete": {
      "fields": {
        "d": "AXIS_VALUES",
        "a": "xSize",
        "b": "ySize",
        "c": "zSize"
      },
      "methods": {
        "a(Lnet/minecraft/core/AxisCycle;III)Z": "isFullWide",
        "d(III)Z": "isFullWide",
        "b(Lnet/minecraft/core/AxisCycle;III)Z": "isFull",
        "b(III)Z": "isFull",
        "c(III)V": "fill",
        "a()Z": "isEmpty",
        "a(Lnet/minecraft/core/Direction$Axis;)I": "firstFull",
        "b(Lnet/minecraft/core/Direction$Axis;)I": "lastFull",
        "a(Lnet/minecraft/core/Direction$Axis;II)I": "firstFull",
        "b(Lnet/minecraft/core/Direction$Axis;II)I": "lastFull",
        "c(Lnet/minecraft/core/Direction$Axis;)I": "getSize",
        "b()I": "getXSize",
        "c()I": "getYSize",
        "d()I": "getZSize",
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape$IntLineConsumer;Z)V": "forAllEdges",
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape$IntLineConsumer;Lnet/minecraft/core/AxisCycle;Z)V": "forAllAxisEdges",
        "b(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape$IntLineConsumer;Z)V": "forAllBoxes",
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape$IntFaceConsumer;)V": "forAllFaces",
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape$IntFaceConsumer;Lnet/minecraft/core/AxisCycle;)V": "forAllAxisFaces"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeCollisionEntity": {
      "fields": {
        "a": "EMPTY",
        "b": "descending",
        "c": "entityBottom",
        "d": "heldItem",
        "e": "canStandOnFluid",
        "f": "entity"
      },
      "methods": {
        "a(Lnet/minecraft/world/item/Item;)Z": "isHoldingItem",
        "a(Lnet/minecraft/world/level/material/FluidState;Lnet/minecraft/world/level/material/FluidState;)Z": "canStandOnFluid",
        "b()Z": "isDescending",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/core/BlockPos;Z)Z": "isAbove",
        "c()Lnet/minecraft/world/entity/Entity;": "getEntity",
        "a(Lnet/minecraft/world/level/material/FluidState;)Z": "lambda$new$1",
        "b(Lnet/minecraft/world/level/material/FluidState;)Z": "lambda$static$0"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeMergerIdentical": {
      "fields": {
        "a": "coords"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;)Z": "forMergedIndexes",
        "a()Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getList"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeMerger": {
      "methods": {
        "a()Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getList",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;)Z": "forMergedIndexes"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeMergerList": {
      "fields": {
        "a": "EMPTY",
        "b": "result",
        "c": "firstIndices",
        "d": "secondIndices",
        "e": "resultLength"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;)Z": "forMergedIndexes",
        "a()Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getList"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeMergerDisjoint": {
      "fields": {
        "a": "lower",
        "b": "upper",
        "c": "swap"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;)Z": "forMergedIndexes",
        "b(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;)Z": "forNonSwappedIndexes",
        "a()Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getList",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger$IndexConsumer;III)Z": "lambda$forMergedIndexes$0"
      }
    },
    "net/minecraft/world/phys/shapes/DoubleListOffset": {
      "fields": {
        "a": "delegate",
        "b": "offset"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapes": {
      "fields": {
        "a": "EPSILON",
        "b": "BIG_EPSILON",
        "d": "BLOCK",
        "c": "INFINITY",
        "e": "EMPTY"
      },
      "methods": {
        "a()Lnet/minecraft/world/phys/shapes/VoxelShape;": "empty",
        "b()Lnet/minecraft/world/phys/shapes/VoxelShape;": "block",
        "a(DDDDDD)Lnet/minecraft/world/phys/shapes/VoxelShape;": "box",
        "b(DDDDDD)Lnet/minecraft/world/phys/shapes/VoxelShape;": "create",
        "a(Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "create",
        "a(DD)I": "findBits",
        "a(II)J": "lcm",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "or",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;[Lnet/minecraft/world/phys/shapes/VoxelShape;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "or",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/BooleanOp;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "join",
        "b(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/BooleanOp;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "joinUnoptimized",
        "c(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/BooleanOp;)Z": "joinIsNotEmpty",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/BooleanOp;)Z": "joinIsNotEmpty",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/world/phys/AABB;Ljava/lang/Iterable;D)D": "collide",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/core/Direction;)Z": "blockOccudes",
        "a(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getFaceShape",
        "b(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/core/Direction;)Z": "mergedFaceOccludes",
        "b(Lnet/minecraft/world/phys/shapes/VoxelShape;Lnet/minecraft/world/phys/shapes/VoxelShape;)Z": "faceShapeOccludes",
        "a(ILit/unimi/dsi/fastutil/doubles/DoubleList;Lit/unimi/dsi/fastutil/doubles/DoubleList;ZZ)Lnet/minecraft/world/phys/shapes/IndexMerger;": "createIndexMerger",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/BooleanOp;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;III)Z": "lambda$joinIsNotEmpty$3",
        "a(Lnet/minecraft/world/phys/shapes/IndexMerger;Lnet/minecraft/world/phys/shapes/BooleanOp;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;ILnet/minecraft/world/phys/shapes/DiscreteVoxelShape;IIII)Z": "lambda$joinIsNotEmpty$2",
        "a(Lnet/minecraft/world/phys/shapes/BooleanOp;Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;IILnet/minecraft/world/phys/shapes/DiscreteVoxelShape;IIIII)Z": "lambda$joinIsNotEmpty$1",
        "c()Lnet/minecraft/world/phys/shapes/CubeVoxelShape;": "lambda$static$0"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeSlice": {
      "fields": {
        "b": "delegate",
        "c": "axis",
        "d": "SLICE_COORDS"
      },
      "methods": {
        "a(Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/world/phys/shapes/DiscreteVoxelShape;": "makeSlice",
        "a(Lnet/minecraft/core/Direction$Axis;)Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getCoords"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShapeDiscreteSlice": {
      "fields": {
        "d": "parent",
        "e": "startX",
        "f": "startY",
        "g": "startZ",
        "h": "endX",
        "i": "endY",
        "j": "endZ"
      },
      "methods": {
        "b(III)Z": "isFull",
        "c(III)V": "fill",
        "a(Lnet/minecraft/core/Direction$Axis;)I": "firstFull",
        "b(Lnet/minecraft/core/Direction$Axis;)I": "lastFull",
        "a(Lnet/minecraft/core/Direction$Axis;I)I": "clampToShape"
      }
    },
    "net/minecraft/world/phys/shapes/VoxelShape": {
      "fields": {
        "a": "shape",
        "b": "faces"
      },
      "methods": {
        "b(Lnet/minecraft/core/Direction$Axis;)D": "min",
        "c(Lnet/minecraft/core/Direction$Axis;)D": "max",
        "a()Lnet/minecraft/world/phys/AABB;": "bounds",
        "a(Lnet/minecraft/core/Direction$Axis;I)D": "get",
        "a(Lnet/minecraft/core/Direction$Axis;)Lit/unimi/dsi/fastutil/doubles/DoubleList;": "getCoords",
        "b()Z": "isEmpty",
        "a(DDD)Lnet/minecraft/world/phys/shapes/VoxelShape;": "move",
        "c()Lnet/minecraft/world/phys/shapes/VoxelShape;": "optimize",
        "a(Lnet/minecraft/world/phys/shapes/Shapes$DoubleLineConsumer;)V": "forAllEdges",
        "b(Lnet/minecraft/world/phys/shapes/Shapes$DoubleLineConsumer;)V": "forAllBoxes",
        "d()Ljava/util/List;": "toAabbs",
        "a(Lnet/minecraft/core/Direction$Axis;DD)D": "min",
        "b(Lnet/minecraft/core/Direction$Axis;DD)D": "max",
        "a(Lnet/minecraft/core/Direction$Axis;D)I": "findIndex",
        "a(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/BlockHitResult;": "clip",
        "a(Lnet/minecraft/world/phys/Vec3;)Ljava/util/Optional;": "closestPointTo",
        "a(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "getFaceShape",
        "b(Lnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;": "calculateFace",
        "a(Lnet/minecraft/core/Direction$Axis;Lnet/minecraft/world/phys/AABB;D)D": "collide",
        "a(Lnet/minecraft/core/AxisCycle;Lnet/minecraft/world/phys/AABB;D)D": "collideX",
        "a(Lnet/minecraft/world/phys/Vec3;[Lnet/minecraft/world/phys/Vec3;DDDDDD)V": "lambda$closestPointTo$5",
        "a(DLnet/minecraft/core/Direction$Axis;I)Z": "lambda$findIndex$4",
        "a(Ljava/util/List;DDDDDD)V": "lambda$toAabbs$3",
        "a(Lnet/minecraft/world/phys/shapes/Shapes$DoubleLineConsumer;Lit/unimi/dsi/fastutil/doubles/DoubleList;Lit/unimi/dsi/fastutil/doubles/DoubleList;Lit/unimi/dsi/fastutil/doubles/DoubleList;IIIIII)V": "lambda$forAllBoxes$2",
        "a(Lnet/minecraft/world/phys/shapes/Shapes$DoubleLineConsumer;IIIIII)V": "lambda$forAllEdges$1",
        "a([Lnet/minecraft/world/phys/shapes/VoxelShape;DDDDDD)V": "lambda$optimize$0"
      }
    },
    "net/minecraft/world/scores/ScoreboardObjective": {
      "fields": {
        "a": "scoreboard",
        "b": "name",
        "c": "criteria",
        "d": "displayName",
        "e": "formattedDisplayName",
        "f": "renderType"
      },
      "methods": {
        "a()Lnet/minecraft/world/scores/Scoreboard;": "getScoreboard",
        "b()Ljava/lang/String;": "getName",
        "c()Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;": "getCriteria",
        "d()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "g()Lnet/minecraft/network/chat/Component;": "createFormattedDisplayName",
        "e()Lnet/minecraft/network/chat/Component;": "getFormattedDisplayName",
        "a(Lnet/minecraft/network/chat/Component;)V": "setDisplayName",
        "f()Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;": "getRenderType",
        "a(Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;)V": "setRenderType",
        "a(Lnet/minecraft/network/chat/Style;)Lnet/minecraft/network/chat/Style;": "lambda$createFormattedDisplayName$0"
      }
    },
    "net/minecraft/world/scores/ScoreboardTeam": {
      "fields": {
        "a": "BIT_FRIENDLY_FIRE",
        "b": "BIT_SEE_INVISIBLES",
        "c": "scoreboard",
        "d": "name",
        "e": "players",
        "f": "displayName",
        "g": "playerPrefix",
        "h": "playerSuffix",
        "i": "allowFriendlyFire",
        "j": "seeFriendlyInvisibles",
        "k": "nameTagVisibility",
        "l": "deathMessageVisibility",
        "m": "color",
        "n": "collisionRule",
        "o": "displayNameStyle"
      },
      "methods": {
        "a()Lnet/minecraft/world/scores/Scoreboard;": "getScoreboard",
        "b()Ljava/lang/String;": "getName",
        "c()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "d()Lnet/minecraft/network/chat/MutableComponent;": "getFormattedDisplayName",
        "a(Lnet/minecraft/network/chat/Component;)V": "setDisplayName",
        "b(Lnet/minecraft/network/chat/Component;)V": "setPlayerPrefix",
        "e()Lnet/minecraft/network/chat/Component;": "getPlayerPrefix",
        "c(Lnet/minecraft/network/chat/Component;)V": "setPlayerSuffix",
        "f()Lnet/minecraft/network/chat/Component;": "getPlayerSuffix",
        "g()Ljava/util/Collection;": "getPlayers",
        "d(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "getFormattedName",
        "a(Lnet/minecraft/world/scores/Team;Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "formatNameForTeam",
        "h()Z": "isAllowFriendlyFire",
        "a(Z)V": "setAllowFriendlyFire",
        "i()Z": "canSeeFriendlyInvisibles",
        "b(Z)V": "setSeeFriendlyInvisibles",
        "j()Lnet/minecraft/world/scores/Team$Visibility;": "getNameTagVisibility",
        "k()Lnet/minecraft/world/scores/Team$Visibility;": "getDeathMessageVisibility",
        "a(Lnet/minecraft/world/scores/Team$Visibility;)V": "setNameTagVisibility",
        "b(Lnet/minecraft/world/scores/Team$Visibility;)V": "setDeathMessageVisibility",
        "l()Lnet/minecraft/world/scores/Team$CollisionRule;": "getCollisionRule",
        "a(Lnet/minecraft/world/scores/Team$CollisionRule;)V": "setCollisionRule",
        "m()I": "packOptions",
        "a(I)V": "unpackOptions",
        "a(Lnet/minecraft/ChatFormatting;)V": "setColor",
        "n()Lnet/minecraft/ChatFormatting;": "getColor"
      }
    },
    "net/minecraft/world/scores/ScoreboardScore": {
      "fields": {
        "a": "SCORE_COMPARATOR",
        "b": "scoreboard",
        "c": "objective",
        "d": "owner",
        "e": "count",
        "f": "locked",
        "g": "forceUpdate"
      },
      "methods": {
        "a(I)V": "add",
        "a()V": "increment",
        "b()I": "getScore",
        "c()V": "reset",
        "b(I)V": "setScore",
        "d()Lnet/minecraft/world/scores/Objective;": "getObjective",
        "e()Ljava/lang/String;": "getOwner",
        "f()Lnet/minecraft/world/scores/Scoreboard;": "getScoreboard",
        "g()Z": "isLocked",
        "a(Z)V": "setLocked",
        "a(Lnet/minecraft/world/scores/Score;Lnet/minecraft/world/scores/Score;)I": "lambda$static$0"
      }
    },
    "net/minecraft/world/scores/Scoreboard": {
      "fields": {
        "g": "LOGGER",
        "a": "DISPLAY_SLOT_LIST",
        "b": "DISPLAY_SLOT_SIDEBAR",
        "c": "DISPLAY_SLOT_BELOW_NAME",
        "d": "DISPLAY_SLOT_TEAMS_SIDEBAR_START",
        "e": "DISPLAY_SLOT_TEAMS_SIDEBAR_END",
        "f": "DISPLAY_SLOTS",
        "h": "objectivesByName",
        "i": "objectivesByCriteria",
        "j": "playerScores",
        "k": "displayObjectives",
        "l": "teamsByName",
        "m": "teamsByPlayer",
        "n": "displaySlotNames"
      },
      "methods": {
        "b(Ljava/lang/String;)Z": "hasObjective",
        "c(Ljava/lang/String;)Lnet/minecraft/world/scores/Objective;": "getOrCreateObjective",
        "d(Ljava/lang/String;)Lnet/minecraft/world/scores/Objective;": "getObjective",
        "a(Ljava/lang/String;Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;Lnet/minecraft/network/chat/Component;Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;)Lnet/minecraft/world/scores/Objective;": "addObjective",
        "a(Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;Ljava/lang/String;Ljava/util/function/Consumer;)V": "forAllObjectives",
        "b(Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)Z": "hasPlayerScore",
        "c(Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/world/scores/Score;": "getOrCreatePlayerScore",
        "i(Lnet/minecraft/world/scores/Objective;)Ljava/util/Collection;": "getPlayerScores",
        "c()Ljava/util/Collection;": "getObjectives",
        "d()Ljava/util/Collection;": "getObjectiveNames",
        "e()Ljava/util/Collection;": "getTrackedPlayers",
        "d(Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)V": "resetPlayerScore",
        "e(Ljava/lang/String;)Ljava/util/Map;": "getPlayerScores",
        "j(Lnet/minecraft/world/scores/Objective;)V": "removeObjective",
        "a(ILnet/minecraft/world/scores/Objective;)V": "setDisplayObjective",
        "a(I)Lnet/minecraft/world/scores/Objective;": "getDisplayObjective",
        "f(Ljava/lang/String;)Lnet/minecraft/world/scores/PlayerTeam;": "getPlayerTeam",
        "g(Ljava/lang/String;)Lnet/minecraft/world/scores/PlayerTeam;": "addPlayerTeam",
        "d(Lnet/minecraft/world/scores/PlayerTeam;)V": "removePlayerTeam",
        "a(Ljava/lang/String;Lnet/minecraft/world/scores/PlayerTeam;)Z": "addPlayerToTeam",
        "h(Ljava/lang/String;)Z": "removePlayerFromTeam",
        "b(Ljava/lang/String;Lnet/minecraft/world/scores/PlayerTeam;)V": "removePlayerFromTeam",
        "f()Ljava/util/Collection;": "getTeamNames",
        "g()Ljava/util/Collection;": "getPlayerTeams",
        "i(Ljava/lang/String;)Lnet/minecraft/world/scores/PlayerTeam;": "getPlayersTeam",
        "a(Lnet/minecraft/world/scores/Objective;)V": "onObjectiveAdded",
        "b(Lnet/minecraft/world/scores/Objective;)V": "onObjectiveChanged",
        "c(Lnet/minecraft/world/scores/Objective;)V": "onObjectiveRemoved",
        "a(Lnet/minecraft/world/scores/Score;)V": "onScoreChanged",
        "a(Ljava/lang/String;)V": "onPlayerRemoved",
        "a(Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)V": "onPlayerScoreRemoved",
        "a(Lnet/minecraft/world/scores/PlayerTeam;)V": "onTeamAdded",
        "b(Lnet/minecraft/world/scores/PlayerTeam;)V": "onTeamChanged",
        "c(Lnet/minecraft/world/scores/PlayerTeam;)V": "onTeamRemoved",
        "b(I)Ljava/lang/String;": "getDisplaySlotName",
        "j(Ljava/lang/String;)I": "getDisplaySlotByName",
        "h()[Ljava/lang/String;": "getDisplaySlotNames",
        "a(Lnet/minecraft/world/entity/Entity;)V": "entityRemoved",
        "i()Lnet/minecraft/nbt/ListTag;": "savePlayerScores",
        "a(Lnet/minecraft/nbt/ListTag;)V": "loadPlayerScores",
        "a(Lnet/minecraft/nbt/ListTag;Ljava/util/Collection;)V": "lambda$savePlayerScores$6",
        "a(Lnet/minecraft/nbt/ListTag;Lnet/minecraft/world/scores/Score;)V": "lambda$savePlayerScores$5",
        "b(Lnet/minecraft/world/scores/Score;)Z": "lambda$savePlayerScores$4",
        "e(Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)Lnet/minecraft/world/scores/Score;": "lambda$getOrCreatePlayerScore$3",
        "k(Ljava/lang/String;)Ljava/util/Map;": "lambda$getOrCreatePlayerScore$2",
        "a(Ljava/util/function/Consumer;Ljava/lang/String;Lnet/minecraft/world/scores/Objective;)V": "lambda$forAllObjectives$1",
        "a(Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;)Ljava/util/List;": "lambda$addObjective$0"
      }
    },
    "net/minecraft/world/scores/PersistentScoreboard": {
      "fields": {
        "a": "FILE_ID",
        "b": "scoreboard"
      },
      "methods": {
        "b(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/scores/ScoreboardSaveData;": "load",
        "a(Lnet/minecraft/nbt/ListTag;)V": "loadTeams",
        "a(Lnet/minecraft/world/scores/PlayerTeam;Lnet/minecraft/nbt/ListTag;)V": "loadTeamPlayers",
        "c(Lnet/minecraft/nbt/CompoundTag;)V": "loadDisplaySlots",
        "b(Lnet/minecraft/nbt/ListTag;)V": "loadObjectives",
        "a(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a()Lnet/minecraft/nbt/ListTag;": "saveTeams",
        "d(Lnet/minecraft/nbt/CompoundTag;)V": "saveDisplaySlots",
        "d()Lnet/minecraft/nbt/ListTag;": "saveObjectives",
        "a(Lnet/minecraft/nbt/CompoundTag;Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;)V": "lambda$loadObjectives$0"
      }
    },
    "net/minecraft/world/scores/ScoreboardTeamBase": {
      "methods": {
        "a(Lnet/minecraft/world/scores/Team;)Z": "isAlliedTo",
        "b()Ljava/lang/String;": "getName",
        "d(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/MutableComponent;": "getFormattedName",
        "i()Z": "canSeeFriendlyInvisibles",
        "h()Z": "isAllowFriendlyFire",
        "j()Lnet/minecraft/world/scores/Team$Visibility;": "getNameTagVisibility",
        "n()Lnet/minecraft/ChatFormatting;": "getColor",
        "g()Ljava/util/Collection;": "getPlayers",
        "k()Lnet/minecraft/world/scores/Team$Visibility;": "getDeathMessageVisibility",
        "l()Lnet/minecraft/world/scores/Team$CollisionRule;": "getCollisionRule"
      }
    },
    "net/minecraft/world/scores/ScoreboardTeamBase$EnumTeamPush": {
      "fields": {
        "a": "ALWAYS",
        "b": "NEVER",
        "c": "PUSH_OTHER_TEAMS",
        "d": "PUSH_OWN_TEAM",
        "g": "BY_NAME",
        "e": "name",
        "f": "id",
        "h": "$VALUES"
      },
      "methods": {
        "a(Ljava/lang/String;)Lnet/minecraft/world/scores/Team$CollisionRule;": "byName",
        "a()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a(Lnet/minecraft/world/scores/Team$CollisionRule;)Lnet/minecraft/world/scores/Team$CollisionRule;": "lambda$static$1",
        "b(Lnet/minecraft/world/scores/Team$CollisionRule;)Ljava/lang/String;": "lambda$static$0",
        "b()[Lnet/minecraft/world/scores/Team$CollisionRule;": "$values"
      }
    },
    "net/minecraft/world/scores/ScoreboardTeamBase$EnumNameTagVisibility": {
      "fields": {
        "a": "ALWAYS",
        "b": "NEVER",
        "c": "HIDE_FOR_OTHER_TEAMS",
        "d": "HIDE_FOR_OWN_TEAM",
        "g": "BY_NAME",
        "e": "name",
        "f": "id",
        "h": "$VALUES"
      },
      "methods": {
        "a()[Ljava/lang/String;": "getAllNames",
        "a(Ljava/lang/String;)Lnet/minecraft/world/scores/Team$Visibility;": "byName",
        "b()Lnet/minecraft/network/chat/Component;": "getDisplayName",
        "a(Lnet/minecraft/world/scores/Team$Visibility;)Lnet/minecraft/world/scores/Team$Visibility;": "lambda$static$1",
        "b(Lnet/minecraft/world/scores/Team$Visibility;)Ljava/lang/String;": "lambda$static$0",
        "c()[Lnet/minecraft/world/scores/Team$Visibility;": "$values"
      }
    },
    "net/minecraft/world/scores/criteria/IScoreboardCriteria": {
      "fields": {
        "n": "CUSTOM_CRITERIA",
        "o": "CRITERIA_CACHE",
        "a": "DUMMY",
        "b": "TRIGGER",
        "c": "DEATH_COUNT",
        "d": "KILL_COUNT_PLAYERS",
        "e": "KILL_COUNT_ALL",
        "f": "HEALTH",
        "g": "FOOD",
        "h": "AIR",
        "i": "ARMOR",
        "j": "EXPERIENCE",
        "k": "LEVEL",
        "l": "TEAM_KILL",
        "m": "KILLED_BY_TEAM",
        "p": "name",
        "q": "readOnly",
        "r": "renderType"
      },
      "methods": {
        "a(Ljava/lang/String;ZLnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;)Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;": "registerCustom",
        "b(Ljava/lang/String;)Lnet/minecraft/world/scores/criteria/ObjectiveCriteria;": "registerCustom",
        "c()Ljava/util/Set;": "getCustomCriteriaNames",
        "a(Ljava/lang/String;)Ljava/util/Optional;": "byName",
        "a(Lnet/minecraft/stats/StatType;Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;": "getStat",
        "d()Ljava/lang/String;": "getName",
        "e()Z": "isReadOnly",
        "f()Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;": "getDefaultRenderType",
        "a(Ljava/lang/String;ILnet/minecraft/stats/StatType;)Ljava/util/Optional;": "lambda$byName$0"
      }
    },
    "net/minecraft/world/scores/criteria/IScoreboardCriteria$EnumScoreboardHealthDisplay": {
      "fields": {
        "a": "INTEGER",
        "b": "HEARTS",
        "d": "id",
        "c": "CODEC",
        "e": "$VALUES"
      },
      "methods": {
        "a()Ljava/lang/String;": "getId",
        "c()Ljava/lang/String;": "getSerializedName",
        "a(Ljava/lang/String;)Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;": "byId",
        "b()[Lnet/minecraft/world/scores/criteria/ObjectiveCriteria$RenderType;": "$values"
      }
    },
    "net/minecraft/world/ticks/TickListEmpty": {
      "fields": {
        "a": "CONTAINER_BLACKHOLE",
        "b": "LEVEL_BLACKHOLE"
      },
      "methods": {
        "a()Lnet/minecraft/world/ticks/TickContainerAccess;": "emptyContainer",
        "b()Lnet/minecraft/world/ticks/LevelTickAccess;": "emptyLevelList"
      }
    },
    "net/minecraft/world/ticks/ContainerSingleItem": {
      "methods": {
        "b()I": "getContainerSize",
        "ab_()Z": "isEmpty",
        "a()V": "clearContent",
        "ar_()Lnet/minecraft/world/item/ItemStack;": "getFirstItem",
        "j()Lnet/minecraft/world/item/ItemStack;": "removeFirstItem",
        "b(Lnet/minecraft/world/item/ItemStack;)V": "setFirstItem",
        "b(I)Lnet/minecraft/world/item/ItemStack;": "removeItemNoUpdate"
      }
    },
    "net/minecraft/world/ticks/LevelChunkTicks": {
      "fields": {
        "a": "tickQueue",
        "b": "pendingTicks",
        "c": "ticksPerPosition",
        "d": "onTickAdded"
      },
      "methods": {
        "a(Ljava/util/function/BiConsumer;)V": "setOnTickAdded",
        "b()Lnet/minecraft/world/ticks/ScheduledTick;": "peek",
        "c()Lnet/minecraft/world/ticks/ScheduledTick;": "poll",
        "a(Lnet/minecraft/world/ticks/ScheduledTick;)V": "schedule",
        "b(Lnet/minecraft/world/ticks/ScheduledTick;)V": "scheduleUnchecked",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "hasScheduledTick",
        "a(Ljava/util/function/Predicate;)V": "removeIf",
        "d()Ljava/util/stream/Stream;": "getAll",
        "a()I": "count",
        "a(JLjava/util/function/Function;)Lnet/minecraft/nbt/ListTag;": "save",
        "a(J)V": "unpack",
        "a(Lnet/minecraft/nbt/ListTag;Ljava/util/function/Function;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/ticks/LevelChunkTicks;": "load",
        "b(JLjava/util/function/Function;)Lnet/minecraft/nbt/Tag;": "save"
      }
    },
    "net/minecraft/world/ticks/LevelTickAccess": {
      "methods": {
        "b(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "willTickThisTick"
      }
    },
    "net/minecraft/world/ticks/TickListServer": {
      "fields": {
        "a": "CONTAINER_DRAIN_ORDER",
        "b": "tickCheck",
        "c": "profiler",
        "d": "allContainers",
        "e": "nextTickForContainer",
        "f": "containersToTick",
        "g": "toRunThisTick",
        "h": "alreadyRunThisTick",
        "i": "toRunThisTickSet",
        "j": "chunkScheduleUpdater"
      },
      "methods": {
        "a(Lnet/minecraft/world/level/ChunkPos;Lnet/minecraft/world/ticks/LevelChunkTicks;)V": "addContainer",
        "a(Lnet/minecraft/world/level/ChunkPos;)V": "removeContainer",
        "a(Lnet/minecraft/world/ticks/ScheduledTick;)V": "schedule",
        "a(JILjava/util/function/BiConsumer;)V": "tick",
        "a(JILnet/minecraft/util/profiling/ProfilerFiller;)V": "collectTicks",
        "a(J)V": "sortContainersToTick",
        "a(JI)V": "drainContainers",
        "b()V": "rescheduleLeftoverContainers",
        "b(Lnet/minecraft/world/ticks/ScheduledTick;)V": "updateContainerScheduling",
        "a(Ljava/util/Queue;Lnet/minecraft/world/ticks/LevelChunkTicks;JI)V": "drainFromCurrentContainer",
        "c(Lnet/minecraft/world/ticks/ScheduledTick;)V": "scheduleForThisTick",
        "a(I)Z": "canScheduleMoreTicks",
        "a(Ljava/util/function/BiConsumer;)V": "runCollectedTicks",
        "c()V": "cleanupAfterTick",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "hasScheduledTick",
        "b(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "willTickThisTick",
        "d()V": "calculateTickSetIfNeeded",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/ticks/LevelTicks$PosAndContainerConsumer;)V": "forContainersInArea",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)V": "clearArea",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/Vec3i;)V": "copyArea",
        "a(Lnet/minecraft/world/ticks/LevelTicks;Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/core/Vec3i;)V": "copyAreaFrom",
        "a()I": "count",
        "a(Lnet/minecraft/core/Vec3i;JJLnet/minecraft/world/ticks/ScheduledTick;)V": "lambda$copyAreaFrom$7",
        "a(Ljava/util/function/Predicate;Ljava/util/List;JLnet/minecraft/world/ticks/LevelChunkTicks;)V": "lambda$copyAreaFrom$6",
        "a(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/ticks/ScheduledTick;)Z": "lambda$copyAreaFrom$5",
        "a(Ljava/util/function/Predicate;JLnet/minecraft/world/ticks/LevelChunkTicks;)V": "lambda$clearArea$4",
        "b(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;Lnet/minecraft/world/ticks/ScheduledTick;)Z": "lambda$clearArea$3",
        "a(Lnet/minecraft/world/ticks/LevelChunkTicks;Lnet/minecraft/world/ticks/ScheduledTick;)V": "lambda$new$2",
        "a(Lit/unimi/dsi/fastutil/longs/Long2LongOpenHashMap;)V": "lambda$new$1",
        "a(Lnet/minecraft/world/ticks/LevelChunkTicks;Lnet/minecraft/world/ticks/LevelChunkTicks;)I": "lambda$static$0"
      }
    },
    "net/minecraft/world/ticks/ProtoChunkTickList": {
      "fields": {
        "a": "ticks",
        "b": "ticksPerPosition"
      },
      "methods": {
        "a(Lnet/minecraft/world/ticks/ScheduledTick;)V": "schedule",
        "a(Lnet/minecraft/world/ticks/SavedTick;)V": "schedule",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "hasScheduledTick",
        "a()I": "count",
        "b(JLjava/util/function/Function;)Lnet/minecraft/nbt/Tag;": "save",
        "b()Ljava/util/List;": "scheduledTicks",
        "a(Lnet/minecraft/nbt/ListTag;Ljava/util/function/Function;Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/ticks/ProtoChunkTicks;": "load"
      }
    },
    "net/minecraft/world/ticks/TickListChunk": {
      "fields": {
        "b": "type",
        "c": "pos",
        "d": "delay",
        "e": "priority",
        "f": "TAG_ID",
        "g": "TAG_X",
        "h": "TAG_Y",
        "i": "TAG_Z",
        "j": "TAG_DELAY",
        "k": "TAG_PRIORITY",
        "a": "UNIQUE_TICK_HASH"
      },
      "methods": {
        "a(Lnet/minecraft/nbt/ListTag;Ljava/util/function/Function;Lnet/minecraft/world/level/ChunkPos;Ljava/util/function/Consumer;)V": "loadTickList",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/util/function/Function;)Ljava/util/Optional;": "loadTick",
        "a(Ljava/lang/String;Lnet/minecraft/core/BlockPos;ILnet/minecraft/world/ticks/TickPriority;)Lnet/minecraft/nbt/CompoundTag;": "saveTick",
        "a(Lnet/minecraft/world/ticks/ScheduledTick;Ljava/util/function/Function;J)Lnet/minecraft/nbt/CompoundTag;": "saveTick",
        "a(Ljava/util/function/Function;)Lnet/minecraft/nbt/CompoundTag;": "save",
        "a(JJ)Lnet/minecraft/world/ticks/ScheduledTick;": "unpack",
        "a(Ljava/lang/Object;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/ticks/SavedTick;": "probe",
        "a()Ljava/lang/Object;": "type",
        "b()Lnet/minecraft/core/BlockPos;": "pos",
        "c()I": "delay",
        "d()Lnet/minecraft/world/ticks/TickPriority;": "priority",
        "a(Lnet/minecraft/nbt/CompoundTag;Ljava/lang/Object;)Lnet/minecraft/world/ticks/SavedTick;": "lambda$loadTick$1",
        "a(JLjava/util/function/Consumer;Lnet/minecraft/world/ticks/SavedTick;)V": "lambda$loadTickList$0"
      }
    },
    "net/minecraft/world/ticks/NextTickListEntry": {
      "fields": {
        "d": "type",
        "e": "pos",
        "f": "triggerTick",
        "g": "priority",
        "h": "subTickOrder",
        "a": "DRAIN_ORDER",
        "b": "INTRA_TICK_DRAIN_ORDER",
        "c": "UNIQUE_TICK_HASH"
      },
      "methods": {
        "a(Ljava/lang/Object;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/ticks/ScheduledTick;": "probe",
        "a()Ljava/lang/Object;": "type",
        "b()Lnet/minecraft/core/BlockPos;": "pos",
        "c()J": "triggerTick",
        "d()Lnet/minecraft/world/ticks/TickPriority;": "priority",
        "e()J": "subTickOrder",
        "a(Lnet/minecraft/world/ticks/ScheduledTick;Lnet/minecraft/world/ticks/ScheduledTick;)I": "lambda$static$1",
        "b(Lnet/minecraft/world/ticks/ScheduledTick;Lnet/minecraft/world/ticks/ScheduledTick;)I": "lambda$static$0"
      }
    },
    "net/minecraft/world/ticks/SerializableTickContainer": {
      "methods": {
        "b(JLjava/util/function/Function;)Lnet/minecraft/nbt/Tag;": "save"
      }
    },
    "net/minecraft/world/ticks/TickList": {
      "methods": {
        "a(Lnet/minecraft/world/ticks/ScheduledTick;)V": "schedule",
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "hasScheduledTick",
        "a()I": "count"
      }
    },
    "net/minecraft/world/ticks/TickContainerAccess": {},
    "net/minecraft/world/ticks/TickListPriority": {
      "fields": {
        "a": "EXTREMELY_HIGH",
        "b": "VERY_HIGH",
        "c": "HIGH",
        "d": "NORMAL",
        "e": "LOW",
        "f": "VERY_LOW",
        "g": "EXTREMELY_LOW",
        "h": "value",
        "i": "$VALUES"
      },
      "methods": {
        "a(I)Lnet/minecraft/world/ticks/TickPriority;": "byValue",
        "a()I": "getValue",
        "b()[Lnet/minecraft/world/ticks/TickPriority;": "$values"
      }
    },
    "net/minecraft/world/ticks/TickListWorldGen": {
      "fields": {
        "a": "containerGetter"
      },
      "methods": {
        "a(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "hasScheduledTick",
        "a(Lnet/minecraft/world/ticks/ScheduledTick;)V": "schedule",
        "b(Lnet/minecraft/core/BlockPos;Ljava/lang/Object;)Z": "willTickThisTick",
        "a()I": "count"
      }
    }
  }
}